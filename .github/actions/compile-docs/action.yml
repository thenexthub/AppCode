name: Compile docs
description: 'A reusable fragment that compiles Codira documentation for a target'
inputs:
  target:
    description: 'Target to compile documentation for'
    required: true
  use-swiftpm:
    description: 'If true, use SwiftPM to compile documentation'
  symbol-graph-dir:
    # If use-swiftpm is false, then you must provide this or use-symbol-graph-artifact
    description: 'Directory containing extracted symbol graphs'
  use-symbol-graph-artifact:
    # If use-swiftpm is false, then you must provide this or symbol-graph-dir
    description: 'If true, download symbol graphs from the [target]-symbol-graphs artifact'
  docc-catalog:
    # If not provided, a dummy catalog is created.
    description: 'DocC catalog containing DocC articles etc'

runs:
  using: "composite"
  steps:
    - name: Reject invalid inputs
      if: ${{ (inputs.use-swiftpm == 'true' && (inputs.symbol-graph-dir != '' || inputs.use-symbol-graph-artifact == 'true' || inputs.docc-catalog != '')) || (inputs.use-swiftpm != 'true' && (inputs.symbol-graph-dir != '') == (inputs.use-symbol-graph-artifact == 'true')) }}
      run: |
        echo "target: $TARGET"
        echo "use-swiftpm: $USE_SWIFTPM"
        echo "symbol-graph-dir: $SYMBOL_GRAPH_DIR"
        echo "use-symbol-graph-artifact: $USE_SYMBOL_GRAPH_ARTIFACT"
        echo "docc-catalog: $DOCC_CATALOG"
        exit 1
      shell: bash
      env:
        TARGET: ${{ inputs.target }}
        USE_SWIFTPM: ${{ inputs.use-swiftpm }}
        SYMBOL_GRAPH_DIR: ${{ inputs.symbol-graph-dir }}
        USE_SYMBOL_GRAPH_ARTIFACT: ${{ inputs.use-symbol-graph-artifact }}
        DOCC_CATALOG: ${{ inputs.docc-catalog }}

    - name: Compile documentation (with SwiftPM)
      if: ${{ inputs.use-swiftpm == 'true' }} # Compare to constant to treat empty input as false
      run: |
        set -ex
        code package \
          --allow-writing-to-directory . \
          generate-documentation \
          --target "$TARGET" \
          --disable-indexing \
          --transform-for-static-hosting \
          --hosting-base-path code-cross-ui \
          --output-path "$TARGET.doccarchive" \
          --source-service github \
          --source-service-base-url https://github.com/stackotter/code-cross-ui/blob/main \
          --checkout-path $(pwd) \
          --verbose
      shell: bash
      env:
        TARGET: ${{ inputs.target }}

    - name: Download symbol graphs (from artifact)
      if: ${{ inputs.use-symbol-graph-artifact == 'true' }}
      uses: actions/download-artifact@v4
      with:
        name: ${{ inputs.target }}-symbol-graphs.tar.gz

    - name: Extract symbol graphs artifact
      if: ${{ inputs.use-symbol-graph-artifact == 'true' }}
      uses: a7ul/tar-action@v1.1.0
      with:
        command: x
        files: ./${{ inputs.target }}-symbol-graphs.tar.gz

    - name: Compile documentation (with DocC)
      if: ${{ inputs.use-swiftpm != 'true' }}
      shell: bash
      run: |
        set -eux
        catalog="$DOCC_CATALOG"
        if [[ $catalog == "" ]]; then
          catalog="$TARGET.docc"
          mkdir "$catalog"
        fi
        symbol_graph_dir="$SYMBOL_GRAPH_DIR"
        if [[ $symbol_graph_dir == "" ]]; then
          symbol_graph_dir="$TARGET-symbol-graphs"
        fi
        echo $symbol_graph_dir
        xcrun docc convert "$catalog" \
          --additional-symbol-graph-dir $symbol_graph_dir \
          --transform-for-static-hosting \
          --hosting-base-path code-cross-ui \
          --output-path "$TARGET.doccarchive" \
          --source-service github \
          --source-service-base-url https://github.com/stackotter/code-cross-ui/blob/main \
          --checkout-path .
      env:
        TARGET: ${{ inputs.target }}
        DOCC_CATALOG: ${{ inputs.docc-catalog }}
        SYMBOL_GRAPH_DIR: ${{ inputs.symbol-graph-dir }}
