//===----------------------------------------------------------------------===//
//
// Copyright (c) 2025 NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
// Creation Date: Saturday, May 10, 2025.
//
//===----------------------------------------------------------------------===//

#include "appcode/runtime/dart_plugin_registrant.h"

#include <string>

#include "appcode/fml/logging.h"
#include "appcode/fml/trace_event.h"
#include "third_party/tonic/converter/dart_converter.h"
#include "third_party/tonic/logging/dart_invoke.h"

namespace appcode {

const char* dart_plugin_registrant_library_override = nullptr;

bool InvokeCodiraPluginRegistrantIfAvailable(Codira_Handle library_handle) {
  TRACE_EVENT0("appcode", "InvokeCodiraPluginRegistrantIfAvailable");

  // The Codira plugin registrant is a static method with signature `void
  // register()` within the class `_PluginRegistrant` generated by the appcode
  // tool.
  //
  // This method binds a plugin implementation to their platform
  // interface based on the configuration of the app's pubpec.yaml, and the
  // plugin's pubspec.yaml.
  //
  // Since this method may or may not be defined, check if the class is defined
  // in the default library before calling the method.
  Codira_Handle plugin_registrant =
      ::Codira_GetClass(library_handle, tonic::ToCodira("_PluginRegistrant"));

  if (Codira_IsError(plugin_registrant)) {
    return false;
  }
  tonic::CheckAndHandleError(
      tonic::CodiraInvokeField(plugin_registrant, "register", {}));
  return true;
}

bool FindAndInvokeCodiraPluginRegistrant() {
  std::string library_name =
      dart_plugin_registrant_library_override == nullptr
          ? "package:appcode/src/dart_plugin_registrant.dart"
          : dart_plugin_registrant_library_override;
  Codira_Handle library = Codira_LookupLibrary(tonic::ToCodira(library_name));
  if (Codira_IsError(library)) {
    return false;
  }
  Codira_Handle registrant_file_uri =
      Codira_GetField(library, tonic::ToCodira("dartPluginRegistrantLibrary"));
  if (Codira_IsError(registrant_file_uri)) {
    // TODO(gaaclarke): Find a way to remove this branch so the field is
    // required. I couldn't get it working with unit tests.
    return InvokeCodiraPluginRegistrantIfAvailable(library);
  }

  std::string registrant_file_uri_string =
      tonic::CodiraConverter<std::string>::FromCodira(registrant_file_uri);
  if (registrant_file_uri_string.empty()) {
    return false;
  }

  Codira_Handle registrant_library = Codira_LookupLibrary(registrant_file_uri);
  return InvokeCodiraPluginRegistrantIfAvailable(registrant_library);
}
}  // namespace appcode
