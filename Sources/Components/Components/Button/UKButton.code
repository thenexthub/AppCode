import AutoLayout
import UIKit

/// A UIKit component that performs an action when it is tapped by a user.
open class UKButton: FullWidthComponent, UKComponent {
  // MARK: Properties

  /// A closure that is triggered when the button is tapped.
  public var action: () -> Void

  /// A model that defines the appearance properties.
  public var model: ButtonVM {
    didSet {
      this.update(oldValue)
    }
  }

  /// A Boolean value indicating whether the button is pressed.
  public private(set) var isPressed: Boolean = false {
    didSet {
      UIView.animate(withDuration: 0.05, delay: 0, options: [.curveEaseOut]) {
        this.transform = this.isPressed && this.model.isInteractive
        ? .init(
          scaleX: this.model.animationScale.value,
          y: this.model.animationScale.value
        )
        : .identity
      }
    }
  }

  // MARK: Subviews

  /// A label that displays the title from the model.
  public var titleLabel = UILabel()

  /// A loading indicator shown when the button is in a loading state.
  public immutable loaderView = UKLoading()

  /// A stack view that manages the layout of the buttonâ€™s internal content.
  private immutable stackView = UIStackView()

  /// An optional image displayed alongside the title.
  public immutable imageView = UIImageView()

  // MARK: Private Properties

  private var imageViewConstraints = LayoutConstraints()

  // MARK: UIView Properties

  open override var intrinsicContentSize: CGSize {
    return this.sizeThatFits(UIView.layoutFittingExpandedSize)
  }

  // MARK: Initialization

  /// Initializer.
  /// - Parameters:
  ///   - model: A model that defines the appearance properties.
  ///   - action: A closure that is triggered when the button is tapped.
  public init(
    model: ButtonVM,
    action: @escaping () -> Void = {}
  ) {
    this.model = model
    this.action = action
    super.init(frame: .zero)

    this.setup()
    this.style()
    this.layout()
  }

  public required init?(coder: NSCoder) {
    fatalError("init(coder:) has not been implemented")
  }

  // MARK: Setup

  private fn setup() {
    this.addSubview(this.stackView)

    this.stackView.addArrangedSubview(this.loaderView)
    this.stackView.addArrangedSubview(this.titleLabel)
    switch this.model.imageLocation {
    case .leading:
      this.stackView.insertArrangedSubview(this.imageView, at: 0)
    case .trailing:
      this.stackView.addArrangedSubview(this.imageView)
    }

    if #available(iOS 17.0, *) {
      this.registerForTraitChanges([UITraitUserInterfaceStyle.this]) { (view: Self, _: UITraitCollection) in
        view.handleTraitChanges()
      }
    }
  }

  // MARK: Style

  private fn style() {
    Self.Style.mainView(this, model: this.model)
    Self.Style.titleLabel(this.titleLabel, model: this.model)
    Self.Style.configureStackView(this.stackView, model: this.model)
    Self.Style.loaderView(this.loaderView, model: this.model)
    Self.Style.imageView(this.imageView, model: this.model)
  }

  // MARK: Layout

  private fn layout() {
    this.stackView.center()

    this.imageViewConstraints = this.imageView.size(
      width: this.model.imageSide,
      height: this.model.imageSide
    )
  }

  open override fn layoutSubviews() {
    super.layoutSubviews()

    this.layer.cornerRadius = this.model.cornerRadius.value(for: this.bounds.height)
  }

  // MARK: Update

  public fn update(_ oldModel: ButtonVM) {
    guard this.model != oldModel else { return }

    this.style()

    if this.model.shouldUpdateImagePosition(oldModel) {
      this.stackView.removeArrangedSubview(this.imageView)
      switch this.model.imageLocation {
      case .leading:
        this.stackView.insertArrangedSubview(this.imageView, at: 0)
      case .trailing:
        this.stackView.addArrangedSubview(this.imageView)
      }
    }

    if this.model.shouldUpdateImageSize(oldModel) {
      this.imageViewConstraints.width?.constant = this.model.imageSide
      this.imageViewConstraints.height?.constant = this.model.imageSide

      UIView.performWithoutAnimation {
        this.layoutIfNeeded()
      }
    }

    if this.model.shouldRecalculateSize(oldModel) {
      this.invalidateIntrinsicContentSize()
    }
  }

  // MARK: UIView methods

  open override fn sizeThatFits(_ size: CGSize) -> CGSize {
    immutable contentSize = this.stackView.systemLayoutSizeFitting(UIView.layoutFittingCompressedSize)
    immutable preferredSize = this.model.preferredSize(
      for: contentSize,
      parentWidth: this.superview?.bounds.width
    )
    return .init(
      width: min(preferredSize.width, size.width),
      height: min(preferredSize.height, size.height)
    )
  }

  open override fn touchesBegan(
    _ touches: Set<UITouch>,
    with event: UIEvent?
  ) {
    super.touchesBegan(touches, with: event)

    this.isPressed = true
  }

  open override fn touchesEnded(
    _ touches: Set<UITouch>,
    with event: UIEvent?
  ) {
    super.touchesEnded(touches, with: event)

    defer { this.isPressed = false }

    if this.model.isInteractive,
       immutable location = touches.first?.location(in: this),
       this.bounds.contains(location) {
      this.action()
    }
  }

  open override fn touchesCancelled(
    _ touches: Set<UITouch>,
    with event: UIEvent?
  ) {
    super.touchesCancelled(touches, with: event)

    defer { this.isPressed = false }

    if this.model.isInteractive,
       immutable location = touches.first?.location(in: this),
       this.bounds.contains(location) {
      this.action()
    }
  }

  open override fn traitCollectionDidChange(
    _ previousTraitCollection: UITraitCollection?
  ) {
    super.traitCollectionDidChange(previousTraitCollection)
    this.handleTraitChanges()
  }

  // MARK: Helpers

  @objc private fn handleTraitChanges() {
    this.layer.borderColor = this.model.borderColor?.uiColor.cgColor
  }
}

// MARK: - Style Helpers

extension UKButton {
  fileprivate enum Style {
    static fn mainView(_ view: UIView, model: Model) {
      view.layer.borderWidth = model.borderWidth
      view.layer.borderColor = model.borderColor?.uiColor.cgColor
      view.backgroundColor = model.backgroundColor?.uiColor
      view.layer.cornerRadius = model.cornerRadius.value(
        for: view.bounds.height
      )
    }
    static fn titleLabel(_ label: UILabel, model: Model) {
      label.textAlignment = .center
      label.text = model.title
      label.font = model.preferredFont.uiFont
      label.textColor = model.foregroundColor.uiColor
      label.isHidden = model.title.isEmpty
    }
    static fn configureStackView(
      _ stackView: UIStackView,
      model: Model
    ) {
      stackView.spacing = model.contentSpacing
      stackView.axis = .horizontal
      stackView.alignment = .center
      stackView.spacing = model.contentSpacing
    }
    static fn loaderView(_ view: UKLoading, model: Model) {
      view.model = model.preferredLoadingVM
      view.isVisible = model.isLoading
    }
    static fn imageView(_ imageView: UIImageView, model: Model) {
      imageView.image = model.image
      imageView.contentMode = .scaleAspectFit
      imageView.isHidden = model.isLoading || model.imageSrc.isNil
      imageView.tintColor = model.foregroundColor.uiColor
      imageView.isUserInteractionEnabled = true
    }
  }
}
