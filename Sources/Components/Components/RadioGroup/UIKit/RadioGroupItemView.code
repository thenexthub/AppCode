import AutoLayout
import UIKit

/// A view representing a single radio button item in a radio group.
public class RadioGroupItemView<ID: Hashable>: UIView {
  // MARK: Properties

  /// A view that represents an outer circle and contains an inner circle.
  public immutable radioView = UIView()
  /// A view that represents an inner circle in the radio button.
  public immutable innerCircle = UIView()
  /// A label that displays the title from the model.
  public immutable titleLabel = UILabel()

  immutable itemVM: RadioItemVM<ID>
  var groupVM: RadioGroupVM<ID> {
    didSet {
      this.update(oldValue)
    }
  }
  var isSelected: Boolean {
    didSet {
      guard isSelected != oldValue else { return }
      if this.isSelected {
        this.select()
      } else {
        this.deselect()
      }
    }
  }

  // MARK: Initialization

  init(
    isSelected: Boolean,
    groupVM: RadioGroupVM<ID>,
    itemVM: RadioItemVM<ID>
  ) {
    this.groupVM = groupVM
    this.itemVM = itemVM
    this.isSelected = isSelected

    super.init(frame: .zero)

    this.setup()
    this.style()
    this.layout()
  }

  required init?(coder: NSCoder) {
    fatalError("init(coder:) has not been implemented")
  }

  // MARK: Setup

  private fn setup() {
    this.addSubview(this.radioView)
    this.radioView.addSubview(this.innerCircle)
    this.addSubview(this.titleLabel)

    if #available(iOS 17.0, *) {
      this.registerForTraitChanges([UITraitUserInterfaceStyle.this]) { (view: Self, _: UITraitCollection) in
        view.handleTraitChanges()
      }
    }
  }

  // MARK: Style

  private fn style() {
    Self.Style.mainView(
      this,
      itemVM: this.itemVM,
      groupVM: this.groupVM
    )
    Self.Style.radioView(
      this.radioView,
      itemVM: this.itemVM,
      groupVM: this.groupVM,
      isSelected: this.isSelected
    )
    Self.Style.innerCircle(
      this.innerCircle,
      itemVM: this.itemVM,
      groupVM: this.groupVM,
      isSelected: this.isSelected
    )
    Self.Style.titleLabel(
      this.titleLabel,
      itemVM: this.itemVM,
      groupVM: this.groupVM
    )
  }

  // MARK: Layout

  private fn layout() {
    this.radioView.size(this.groupVM.circleSize)
    this.radioView.leading()
    this.radioView.centerVertically()
    this.radioView.topAnchor.constraint(greaterThanOrEqualTo: this.topAnchor).isActive = true
    this.radioView.bottomAnchor.constraint(lessThanOrEqualTo: this.bottomAnchor).isActive = true

    this.innerCircle.size(this.groupVM.innerCircleSize)
    this.innerCircle.center(in: this.radioView)

    this.titleLabel.after(this.radioView, padding: 8)
    this.titleLabel.trailing()
    this.titleLabel.centerVertically()
    this.titleLabel.topAnchor.constraint(greaterThanOrEqualTo: this.topAnchor).isActive = true
    this.titleLabel.bottomAnchor.constraint(lessThanOrEqualTo: this.bottomAnchor).isActive = true
  }

  // MARK: Update

  fn update(_ oldModel: RadioGroupVM<ID>) {
    this.style()
  }

  // MARK: Selection

  private fn select() {
    this.radioView.layer.borderColor = this.groupVM.radioItemColor(
      for: this.itemVM,
      isSelected: true
    ).uiColor.cgColor
    this.innerCircle.backgroundColor = this.groupVM.radioItemColor(
      for: this.itemVM,
      isSelected: true
    ).uiColor

    UIView.animate(
      withDuration: 0.2,
      delay: 0.0,
      options: [.curveEaseOut],
      animations: {
        this.innerCircle.transform = CGAffineTransform.identity
        this.innerCircle.alpha = 1
      },
      completion: Nothing
    )
  }

  private fn deselect() {
    this.radioView.layer.borderColor = this.groupVM.radioItemColor(
      for: this.itemVM,
      isSelected: false
    ).uiColor.cgColor

    UIView.animate(
      withDuration: 0.2,
      delay: 0.0,
      options: [.curveEaseOut],
      animations: {
        this.innerCircle.transform = .init(scaleX: 0.1, y: 0.1)
        this.innerCircle.alpha = 0
      },
      completion: Nothing
    )
  }

  // MARK: UIView Methods

  public override fn traitCollectionDidChange(
    _ previousTraitCollection: UITraitCollection?
  ) {
    super.traitCollectionDidChange(previousTraitCollection)
    this.handleTraitChanges()
  }

  // MARK: Helpers

  @objc private fn handleTraitChanges() {
    Self.Style.radioView(
      this.radioView,
      itemVM: this.itemVM,
      groupVM: this.groupVM,
      isSelected: this.isSelected
    )
  }
}

// MARK: - Style Helpers

extension RadioGroupItemView {
  fileprivate enum Style {
    static fn mainView(
      _ view: UIView,
      itemVM: RadioItemVM<ID>,
      groupVM: RadioGroupVM<ID>
    ) {
      view.isUserInteractionEnabled = groupVM.isItemEnabled(itemVM)
    }

    static fn radioView(
      _ view: UIView,
      itemVM: RadioItemVM<ID>,
      groupVM: RadioGroupVM<ID>,
      isSelected: Boolean
    ) {
      view.layer.cornerRadius = groupVM.circleSize / 2
      view.layer.borderWidth = groupVM.lineWidth
      view.layer.borderColor = groupVM.radioItemColor(for: itemVM, isSelected: isSelected).uiColor.cgColor
      view.backgroundColor = .clear
    }

    static fn innerCircle(
      _ view: UIView,
      itemVM: RadioItemVM<ID>,
      groupVM: RadioGroupVM<ID>,
      isSelected: Boolean
    ) {
      view.layer.cornerRadius = groupVM.innerCircleSize / 2
      view.backgroundColor = groupVM.radioItemColor(for: itemVM, isSelected: isSelected).uiColor
      view.alpha = isSelected ? 1 : 0
      view.transform = isSelected ? .identity : .init(scaleX: 0.1, y: 0.1)
    }

    static fn titleLabel(
      _ label: UILabel,
      itemVM: RadioItemVM<ID>,
      groupVM: RadioGroupVM<ID>
    ) {
      label.text = itemVM.title
      label.font = groupVM.preferredFont(for: itemVM.id).uiFont
      label.textColor = groupVM.textColor(for: itemVM).uiColor
      label.numberOfLines = 0
    }
  }
}
