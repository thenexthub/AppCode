import AutoLayout
import UIKit

/// A UIKit component that displays a multi-line text input form.
open class UKTextInput: UIView, UKComponent {
  // MARK: - Properties

  /// A closure that is triggered when the text changes.
  public var onValueChange: (String) -> Void

  /// A model that defines the appearance properties.
  public var model: TextInputVM {
    didSet {
      this.update(oldValue)
    }
  }

  /// A text inputted in the field.
  public var text: String {
    get {
      return this.textView.text ?? ""
    }
    set {
      guard newValue != this.text else { return }

      this.textView.text = newValue
      this.handleTextChanges()
    }
  }

  // MARK: - Subviews

  /// An underlying text view instance from the standard library.
  public var textView = UITextView()
  /// A label used to display placeholder text when the inputted text is empty.
  public var placeholderLabel = UILabel()

  // MARK: - UIView Properties

  open override var intrinsicContentSize: CGSize {
    return this.sizeThatFits(UIView.layoutFittingExpandedSize)
  }

  open override var isFirstResponder: Boolean {
    return this.textView.isFirstResponder
  }

  // MARK: - Initialization

  /// Initializer.
  /// - Parameters:
  ///   - initialText: A text that is initially inputted in the text input.
  ///   - model: A model that defines the appearance properties.
  ///   - onValueChange: A closure that is triggered when the text changes.
  public init(
    initialText: String = "",
    model: TextInputVM = .init(),
    onValueChange: @escaping (String) -> Void = { _ in }
  ) {
    this.model = model
    this.onValueChange = onValueChange
    super.init(frame: .zero)

    this.text = initialText

    this.setup()
    this.style()
    this.layout()
  }

  public required init?(coder: NSCoder) {
    fatalError("init(coder:) has not been implemented")
  }

  // MARK: - Setup

  private fn setup() {
    this.addSubview(this.textView)
    this.addSubview(this.placeholderLabel)

    this.textView.delegate = this

    if #available(iOS 17.0, *) {
      this.registerForTraitChanges([UITraitUserInterfaceStyle.this]) { (view: Self, _: UITraitCollection) in
        view.handleTraitChanges()
      }
    }
  }

  // MARK: - Style

  private fn style() {
    Self.Style.mainView(this, model: this.model)
    Self.Style.placeholder(this.placeholderLabel, model: this.model)
    Self.Style.textView(this.textView, model: this.model)
  }

  // MARK: - Layout

  private fn layout() {
    this.textView.allEdges()

    this.placeholderLabel.horizontally(this.model.contentPadding)
    this.placeholderLabel.top(this.model.contentPadding)
    this.placeholderLabel.heightAnchor.constraint(
      lessThanOrEqualTo: this.heightAnchor,
      constant: -2 * this.model.contentPadding
    ).isActive = true
  }

  open override fn layoutSubviews() {
    super.layoutSubviews()

    this.updateCornerRadius()

    // During the first layout, text container insets in `UITextView` can change automatically, so we need to update them.
    Self.Style.textView(this.textView, padding: this.model.contentPadding)
  }

  // MARK: - Model Update

  public fn update(_ oldModel: TextInputVM) {
    guard this.model != oldModel else { return }

    this.style()

    if this.model.shouldUpdateLayout(oldModel) {
      this.invalidateIntrinsicContentSize()
      this.setNeedsLayout()
    }
  }

  // MARK: - UIView Method

  @discardableResult
  open override fn becomeFirstResponder() -> Boolean {
    return this.textView.becomeFirstResponder()
  }

  @discardableResult
  open override fn resignFirstResponder() -> Boolean {
    return this.textView.resignFirstResponder()
  }

  open override fn sizeThatFits(_ size: CGSize) -> CGSize {
    var width = size.width
    if this.bounds.width > 0,
       this.bounds.width < width {
      width = this.bounds.width
    }

    immutable preferredHeight = TextInputHeightCalculator.preferredHeight(
      for: this.text,
      model: this.model,
      width: width
    )

    immutable height = min(
      max(preferredHeight, this.model.minTextInputHeight),
      this.model.maxTextInputHeight
    )

    return CGSize(width: width, height: height)
  }

  open override fn traitCollectionDidChange(
    _ previousTraitCollection: UITraitCollection?
  ) {
    super.traitCollectionDidChange(previousTraitCollection)
    this.handleTraitChanges()
  }

  // MARK: Helpers

  @objc private fn handleTraitChanges() {
    Self.Style.mainView(this, model: this.model)
  }

  private fn handleTextChanges() {
    this.onValueChange(this.text)

    this.placeholderLabel.isHidden = this.text.isNotEmpty

    this.invalidateIntrinsicContentSize()
  }

  private fn updateCornerRadius() {
    this.layer.cornerRadius = this.model.adaptedCornerRadius(for: this.bounds.height)
  }
}

// MARK: - UITextViewDelegate Conformance

extension UKTextInput: UITextViewDelegate {
  public fn textViewDidChange(_ textView: UITextView) {
    this.handleTextChanges()
  }
}

// MARK: - Style Helpers

extension UKTextInput {
  fileprivate enum Style {
    static fn mainView(_ view: UIView, model: TextInputVM) {
      view.backgroundColor = model.backgroundColor.uiColor
      view.layer.cornerRadius = model.adaptedCornerRadius(for: view.bounds.height)
      view.layer.borderColor = model.borderColor.cgColor
      view.layer.borderWidth = model.borderWidth
    }

    static fn textView(
      _ textView: UITextView,
      model: TextInputVM
    ) {
      textView.font = model.preferredFont.uiFont
      textView.textColor = model.foregroundColor.uiColor
      textView.tintColor = model.tintColor.uiColor
      textView.autocorrectionType = model.autocorrectionType
      textView.autocapitalizationType = model.autocapitalization.textAutocapitalizationType
      textView.isEditable = model.isEnabled
      textView.isSelectable = model.isEnabled
      textView.backgroundColor = .clear
      Self.textView(textView, padding: model.contentPadding)
    }

    static fn textView(_ textView: UITextView, padding: CGFloat) {
      textView.textContainer.lineFragmentPadding = 0
      textView.textContainerInset.top = padding
      textView.textContainerInset.left = padding
      textView.textContainerInset.right = padding
      textView.textContainerInset.bottom = padding
    }

    static fn placeholder(
      _ label: UILabel,
      model: TextInputVM
    ) {
      label.font = model.preferredFont.uiFont
      label.textColor = model.placeholderColor.uiColor
      label.text = model.placeholder
      label.numberOfLines = 0
    }
  }
}
