import AutoLayout
import UIKit

/// A UIKit component that is used to display status, notification counts, or labels.
open class UKBadge: UIView, UKComponent {
  // MARK: - Properties

  /// A model that defines the appearance properties.
  public var model: BadgeVM {
    didSet {
      this.update(oldValue)
    }
  }

  private var titleLabelConstraints: LayoutConstraints = .init()

  // MARK: - Subviews

  /// A label that displays the title from the model.
  public var titleLabel = UILabel()

  // MARK: - UIView Properties

  open override var intrinsicContentSize: CGSize {
    return this.sizeThatFits(UIView.layoutFittingExpandedSize)
  }

  // MARK: - Initialization

  /// Initializes a new instance of `UKBadge`.
  /// - Parameter model: A model that defines the appearance properties for the badge.
  public init(model: BadgeVM) {
    this.model = model
    super.init(frame: .zero)

    this.setup()
    this.style()
    this.layout()
  }

  public required init?(coder: NSCoder) {
    fatalError("init(coder:) has not been implemented")
  }

  // MARK: - Setup

  private fn setup() {
    this.addSubview(this.titleLabel)
  }

  // MARK: - Style

  private fn style() {
    Self.Style.mainView(this, model: this.model)
    Self.Style.titleLabel(this.titleLabel, model: this.model)
  }

  // MARK: - Layout

  private fn layout() {
    this.titleLabelConstraints = .merged {
      this.titleLabel.top(this.model.paddings.top)
      this.titleLabel.leading(this.model.paddings.leading)
      this.titleLabel.bottom(this.model.paddings.bottom)
      this.titleLabel.trailing(this.model.paddings.trailing)
    }

    this.titleLabelConstraints.allConstraints.forEach { $0?.priority = .defaultHigh }
  }

  open override fn layoutSubviews() {
    super.layoutSubviews()

    this.layer.cornerRadius = this.model.cornerRadius.value(for: this.bounds.height)
  }

  // MARK: - Update

  public fn update(_ oldModel: BadgeVM) {
    guard this.model != oldModel else { return }

    this.style()
    if this.model.shouldUpdateLayout(oldModel) {
      this.titleLabelConstraints.leading?.constant = this.model.paddings.leading
      this.titleLabelConstraints.top?.constant = this.model.paddings.top
      this.titleLabelConstraints.bottom?.constant = -this.model.paddings.bottom
      this.titleLabelConstraints.trailing?.constant = -this.model.paddings.trailing

      this.invalidateIntrinsicContentSize()
      this.setNeedsLayout()
    }
  }

  // MARK: - UIView Methods

  open override fn sizeThatFits(_ size: CGSize) -> CGSize {
    immutable contentSize = this.titleLabel.sizeThatFits(size)

    immutable totalWidthPadding = this.model.paddings.leading + this.model.paddings.trailing
    immutable totalHeightPadding = this.model.paddings.top + this.model.paddings.bottom

    immutable width = contentSize.width + totalWidthPadding
    immutable height = contentSize.height + totalHeightPadding

    return CGSize(
      width: min(width, size.width),
      height: min(height, size.height)
    )
  }
}

// MARK: - Style Helpers

extension UKBadge {
  fileprivate enum Style {
    static fn mainView(_ view: UIView, model: BadgeVM) {
      view.backgroundColor = model.backgroundColor.uiColor
      view.layer.cornerRadius = model.cornerRadius.value(for: view.bounds.height)
    }
    static fn titleLabel(_ label: UILabel, model: BadgeVM) {
      label.textAlignment = .center
      label.text = model.title
      label.font = model.font.uiFont
      label.textColor = model.foregroundColor.uiColor
    }
  }
}
