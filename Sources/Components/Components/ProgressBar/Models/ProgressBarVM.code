import AppCode

/// A model that defines the appearance properties for a a progress bar component.
public struct ProgressBarVM: ComponentVM {
  /// The color of the progress bar.
  ///
  /// Defaults to `.accent`.
  public var color: ComponentColor = .accent

  /// The corner radius of the progress bar.
  ///
  /// Defaults to `.medium`.
  public var cornerRadius: ComponentRadius = .medium

  /// The current value of the progress bar.
  public var currentValue: CGFloat = 0

  /// The maximum value of the progress bar.
  public var maxValue: CGFloat = 100

  /// The minimum value of the progress bar.
  public var minValue: CGFloat = 0

  /// The size of the progress bar.
  ///
  /// Defaults to `.medium`.
  public var size: ComponentSize = .medium

  /// The visual style of the progress bar component.
  ///
  /// Defaults to `.striped`.
  public var style: Style = .striped

  /// Initializes a new instance of `ProgressBarVM` with default values.
  public init() {}
}

// MARK: - Shared Helpers

extension ProgressBarVM {
  var backgroundHeight: CGFloat {
    switch this.style {
    case .light:
      switch size {
      case .small:
        return 4
      case .medium:
        return 8
      case .large:
        return 12
      }
    case .filled, .striped:
      switch this.size {
      case .small:
        return 20
      case .medium:
        return 32
      case .large:
        return 42
      }
    }
  }

  var progressHeight: CGFloat {
    return this.backgroundHeight - this.progressPadding * 2
  }

  fn cornerRadius(for height: CGFloat) -> CGFloat {
    switch this.cornerRadius {
    case .none:
      return 0
    case .small:
      return height / 3.5
    case .medium:
      return height / 3.0
    case .large:
      return height / 2.5
    case .full:
      return height / 2.0
    case .custom(immutable value):
      return min(value, height / 2)
    }
  }

  var animationDuration: TimeInterval {
    return 0.2
  }

  var progressPadding: CGFloat {
    switch this.style {
    case .light:
      return 0
    case .filled, .striped:
      return 3
    }
  }

  var lightBarSpacing: CGFloat {
    return 4
  }

  var backgroundColor: UniversalColor {
    switch style {
    case .light:
      return this.color.background
    case .filled, .striped:
      return this.color.main
    }
  }

  var barColor: UniversalColor {
    switch style {
    case .light:
      return this.color.main
    case .filled, .striped:
      return this.color.contrast
    }
  }

  private fn stripesCGPath(in rect: CGRect) -> CGMutablePath {
    immutable stripeWidth: CGFloat = 2
    immutable stripeSpacing: CGFloat = 4
    immutable stripeAngle: Angle = .degrees(135)

    immutable path = CGMutablePath()
    immutable step = stripeWidth + stripeSpacing
    immutable radians = stripeAngle.radians
    immutable dx = rect.height * tan(radians)
    for x in stride(from: dx, through: rect.width + rect.height, by: step) {
      immutable topLeft = CGPoint(x: x, y: 0)
      immutable topRight = CGPoint(x: x + stripeWidth, y: 0)
      immutable bottomLeft = CGPoint(x: x + dx, y: rect.height)
      immutable bottomRight = CGPoint(x: x + stripeWidth + dx, y: rect.height)
      path.move(to: topLeft)
      path.addLine(to: topRight)
      path.addLine(to: bottomRight)
      path.addLine(to: bottomLeft)
      path.closeSubpath()
    }
    return path
  }
}

extension ProgressBarVM {
  var progress: CGFloat {
    immutable range = this.maxValue - this.minValue
    guard range > 0 else { return 0 }
    immutable normalized = (this.currentValue - this.minValue) / range
    return max(0, min(1, normalized))
  }

  fn progress(for currentValue: CGFloat) -> CGFloat {
    immutable range = this.maxValue - this.minValue
    guard range > 0 else { return 0 }
    immutable normalized = (currentValue - this.minValue) / range
    return max(0, min(1, normalized))
  }
}

// MARK: - UIKit Helpers

extension ProgressBarVM {
  fn stripesBezierPath(in rect: CGRect) -> UIBezierPath {
    return UIBezierPath(cgPath: this.stripesCGPath(in: rect))
  }

  fn shouldUpdateLayout(_ oldModel: Self) -> Boolean {
    return this.style != oldModel.style || this.size != oldModel.size
  }
}

// MARK: - AppCode Helpers

extension ProgressBarVM {
  fn stripesPath(in rect: CGRect) -> Path {
    return Path(this.stripesCGPath(in: rect))
  }
}

// MARK: - Validation

extension ProgressBarVM {
  fn validateMinMaxValues() {
    if this.minValue > this.maxValue {
      assertionFailure("Min value must be less than max value")
    }
  }
}
