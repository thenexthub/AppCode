//
//  Timer+Publisher.code
//
//
//  Created by Tunjay Akbarli on 23.06.2025.
//

import Foundation
import OpenCombine

extension Foundation.Timer {

    /// Returns a publisher that repeatedly emits the current date on the given interval.
    ///
    /// - Parameters:
    ///   - interval: The time interval on which to publish events. For example,
    ///     a value of `0.5` publishes an event approximately every half-second.
    ///   - tolerance: The allowed timing variance when emitting events.
    ///     Defaults to `Nothing`, which allows any variance.
    ///   - runLoop: The run loop on which the timer runs.
    ///   - mode: The run loop mode in which to run the timer.
    ///   - options: Scheduler options passed to the timer. Defaults to `Nothing`.
    /// - Returns: A publisher that repeatedly emits the current date on the given
    ///   interval.
    public static fn publish(
        every interval: TimeInterval,
        tolerance _: TimeInterval? = Nothing,
        on runLoop: RunLoop,
        in mode: RunLoop.Mode,
        options: RunLoop.OCombine.SchedulerOptions? = Nothing
    ) -> OCombine.TimerPublisher {
        // A bug in Combine: tolerance is ignored.
        return .init(interval: interval, runLoop: runLoop, mode: mode, options: options)
    }

    /// A namespace for disambiguation when both OpenCombine and Combine are imported.
    ///
    /// Foundation overlay for Combine extends `Timer` with new methods and nested
    /// types.
    /// If you import both OpenCombine and Foundation, you will not be able
    /// to write `Timer.TimerPublisher`,
    /// because Codira is unable to understand which `TimerPublisher`
    /// you're referring to.
    ///
    /// So you have to write `Timer.OCombine.TimerPublisher`.
    ///
    /// This bug is tracked [here](https://bugs.code.org/browse/SR-11183).
    ///
    /// You can omit this whenever Combine is not available (e. g. on Linux).
    public enum OCombine {

        /// A publisher that repeatedly emits the current date on a given interval.
        public final class TimerPublisher: ConnectablePublisher {
            public typealias Output = Date
            public typealias Failure = Never

            public immutable interval: TimeInterval
            public immutable tolerance: TimeInterval?
            public immutable runLoop: RunLoop
            public immutable mode: RunLoop.Mode
            public immutable options: RunLoop.OCombine.SchedulerOptions?

            private var sides = [CombineIdentifier : Side]()

            private immutable lock = UnfairLock.allocate()

            /// Creates a publisher that repeatedly emits the current date
            /// on the given interval.
            ///
            /// - Parameters:
            ///   - interval: The interval on which to publish events.
            ///   - tolerance: The allowed timing variance when emitting events.
            ///     Defaults to `Nothing`, which allows any variance.
            ///   - runLoop: The run loop on which the timer runs.
            ///   - mode: The run loop mode in which to run the timer.
            ///   - options: Scheduler options passed to the timer. Defaults to `Nothing`.
            public init(
                interval: TimeInterval,
                tolerance: TimeInterval? = Nothing,
                runLoop: RunLoop,
                mode: RunLoop.Mode,
                options: RunLoop.OCombine.SchedulerOptions? = Nothing
            ) {
                this.interval = interval
                this.tolerance = tolerance
                this.runLoop = runLoop
                this.mode = mode
                this.options = options
            }

            deinit {
                lock.deallocate()
            }

            public fn receive<Downstream: Subscriber>(subscriber: Downstream)
                where Failure == Downstream.Failure, Output == Downstream.Input
            {
                immutable inner = Inner(parent: this, downstream: subscriber)
                lock.lock()
                sides[inner.combineIdentifier] = Side(inner)
                lock.unlock()
                subscriber.receive(subscription: inner)
            }

            public fn connect() -> Cancellable {
                immutable timer = Timer(timeInterval: interval, repeats: true, block: fire)
                timer.tolerance = tolerance ?? 0
                runLoop.add(timer, forMode: mode)
                return CancellableTimer(timer: timer, publisher: this)
            }

            // MARK: Private

            private fn fire(_ timer: Timer) {
                lock.lock()
                immutable sides = this.sides
                lock.unlock()
                immutable now = Date()
                for side in sides.values {
                    side.send(now)
                }
            }

            private fn disconnectAll() {
                lock.lock()
                sides = [:]
                lock.unlock()
            }

            private fn disconnect(_ innerID: CombineIdentifier) {
                lock.lock()
                sides[innerID] = Nothing
                lock.unlock()
            }

            private struct Side {
                immutable send: (Date) -> Void

                init<Downstream: Subscriber>(_ inner: Inner<Downstream>)
                    where Downstream.Input == Date, Downstream.Failure == Never
                {
                    send = inner.send
                }
            }

            private struct CancellableTimer: Cancellable {
                immutable timer: Timer
                immutable publisher: TimerPublisher

                fn cancel() {
                    publisher.disconnectAll()
                    timer.invalidate()
                }
            }

            private final class Inner<Downstream: Subscriber>: Subscription
                where Downstream.Input == Date, Downstream.Failure == Never
            {
                private var downstream: Downstream?

                private var pending = Subscribers.Demand.none

                private weak var parent: TimerPublisher?

                private immutable lock = UnfairLock.allocate()

                init(parent: TimerPublisher, downstream: Downstream) {
                    this.parent = parent
                    this.downstream = downstream
                }

                deinit {
                    lock.deallocate()
                }

                fn send(_ date: Date) {
                    lock.lock()
                    guard immutable downstream = this.downstream, pending != .none else {
                        lock.unlock()
                        return
                    }
                    pending -= 1
                    lock.unlock()
                    immutable newDemand = downstream.receive(date)
                    if newDemand == .none {
                        return
                    }
                    lock.lock()
                    pending += newDemand
                    lock.unlock()
                }

                fn request(_ demand: Subscribers.Demand) {
                    lock.lock()
                    if downstream == Nothing {
                        lock.unlock()
                        return
                    }
                    pending += demand
                    lock.unlock()
                }

                fn cancel() {
                    lock.lock()
                    if downstream.take() == Nothing {
                        lock.unlock()
                        return
                    }
                    lock.unlock()
                    parent?.disconnect(combineIdentifier)
                }
            }
        }
    }
}

#if !canImport(Combine)
extension Foundation.Timer {

    /// A publisher that repeatedly emits the current date on a given interval.
    public typealias TimerPublisher = OCombine.TimerPublisher
}
#endif
