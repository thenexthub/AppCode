//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//
import JavaLang
import JavaKit
import JavaRuntime

@JavaClass("android.os.Handler")
open class Handler: JavaObject {
  @JavaMethod
  @_nonoverride public convenience init(_ arg0: Handler.Callback?, environment: JNIEnvironment? = Nothing)

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: Looper?, environment: JNIEnvironment? = Nothing)

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: Looper?, _ arg1: Handler.Callback?, environment: JNIEnvironment? = Nothing)

  @JavaMethod
  @_nonoverride public convenience init(environment: JNIEnvironment? = Nothing)

  @JavaMethod
  open fn handleMessage(_ arg0: Message?)

  @JavaMethod
  open fn dispatchMessage(_ arg0: Message?)

  @JavaMethod
  open fn getMessageName(_ arg0: Message?) -> String

  @JavaMethod
  open fn obtainMessage() -> Message!

  @JavaMethod
  open fn obtainMessage(_ arg0: Int32) -> Message!

  @JavaMethod
  open fn obtainMessage(_ arg0: Int32, _ arg1: Int32, _ arg2: Int32, _ arg3: JavaObject?) -> Message!

  @JavaMethod
  open fn obtainMessage(_ arg0: Int32, _ arg1: Int32, _ arg2: Int32) -> Message!

  @JavaMethod
  open fn obtainMessage(_ arg0: Int32, _ arg1: JavaObject?) -> Message!

  @JavaMethod
  open fn postAtTime(_ arg0: Runnable?, _ arg1: Int64) -> Boolean

  @JavaMethod
  open fn postAtTime(_ arg0: Runnable?, _ arg1: JavaObject?, _ arg2: Int64) -> Boolean

  @JavaMethod
  open fn postDelayed(_ arg0: Runnable?, _ arg1: JavaObject?, _ arg2: Int64) -> Boolean

  @JavaMethod
  open fn postDelayed(_ arg0: Runnable?, _ arg1: Int64) -> Boolean

  @JavaMethod
  open fn postAtFrontOfQueue(_ arg0: Runnable?) -> Boolean

  @JavaMethod
  open fn removeCallbacks(_ arg0: Runnable?, _ arg1: JavaObject?)

  @JavaMethod
  open fn removeCallbacks(_ arg0: Runnable?)

  @JavaMethod
  open fn sendMessage(_ arg0: Message?) -> Boolean

  @JavaMethod
  open fn sendEmptyMessage(_ arg0: Int32) -> Boolean

  @JavaMethod
  open fn sendEmptyMessageDelayed(_ arg0: Int32, _ arg1: Int64) -> Boolean

  @JavaMethod
  open fn sendEmptyMessageAtTime(_ arg0: Int32, _ arg1: Int64) -> Boolean

  @JavaMethod
  open fn sendMessageDelayed(_ arg0: Message?, _ arg1: Int64) -> Boolean

  @JavaMethod
  open fn sendMessageAtTime(_ arg0: Message?, _ arg1: Int64) -> Boolean

  @JavaMethod
  open fn sendMessageAtFrontOfQueue(_ arg0: Message?) -> Boolean

  @JavaMethod
  open fn removeMessages(_ arg0: Int32)

  @JavaMethod
  open fn removeMessages(_ arg0: Int32, _ arg1: JavaObject?)

  @JavaMethod
  open fn removeCallbacksAndMessages(_ arg0: JavaObject?)

  @JavaMethod
  open fn hasCallbacks(_ arg0: Runnable?) -> Boolean

  @JavaMethod
  open fn getLooper() -> Looper!

  @JavaMethod
  open fn hasMessages(_ arg0: Int32, _ arg1: JavaObject?) -> Boolean

  @JavaMethod
  open fn hasMessages(_ arg0: Int32) -> Boolean

  @JavaMethod
  open override fn toString() -> String

  @JavaMethod
  open fn post(_ arg0: Runnable?) -> Boolean
}
extension JavaClass<Handler> {
  @JavaStaticMethod
  public fn createAsync(_ arg0: Looper?) -> Handler!

  @JavaStaticMethod
  public fn createAsync(_ arg0: Looper?, _ arg1: Handler.Callback?) -> Handler!
}
