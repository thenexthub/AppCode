//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//
import JavaIO
import JavaUtil
import JavaKit
import JavaKitCollection
import JavaRuntime

@JavaClass("android.os.storage.StorageManager")
open class StorageManager: JavaObject {
  @JavaMethod
  open fn unregisterStorageVolumeCallback(_ arg0: StorageManager.StorageVolumeCallback?)

  @JavaMethod
  open fn mountObb(_ arg0: String, _ arg1: String, _ arg2: OnObbStateChangeListener?) -> Boolean

  @JavaMethod
  open fn unmountObb(_ arg0: String, _ arg1: Boolean, _ arg2: OnObbStateChangeListener?) -> Boolean

  @JavaMethod
  open fn isObbMounted(_ arg0: String) -> Boolean

  @JavaMethod
  open fn getMountedObbPath(_ arg0: String) -> String

  @JavaMethod
  open fn getUuidForPath(_ arg0: File?) throws -> UUID!

  @JavaMethod
  open fn isAllocationSupported(_ arg0: FileDescriptor?) -> Boolean

  @JavaMethod
  open fn getStorageVolume(_ arg0: File?) -> StorageVolume!

  @JavaMethod
  open fn getStorageVolumes() -> List<StorageVolume>!

  @JavaMethod
  open fn getStorageVolumesIncludingSharedProfiles() -> List<StorageVolume>!

  @JavaMethod
  open fn getRecentStorageVolumes() -> List<StorageVolume>!

  @JavaMethod
  open fn getPrimaryStorageVolume() -> StorageVolume!

  @JavaMethod
  open fn isEncrypted(_ arg0: File?) -> Boolean

  @JavaMethod
  open fn openProxyFileDescriptor(_ arg0: Int32, _ arg1: ProxyFileDescriptorCallback?, _ arg2: Handler?) throws -> ParcelFileDescriptor!

  @JavaMethod
  open fn getCacheQuotaBytes(_ arg0: UUID?) throws -> Int64

  @JavaMethod
  open fn getCacheSizeBytes(_ arg0: UUID?) throws -> Int64

  @JavaMethod
  open fn getAllocatableBytes(_ arg0: UUID?) throws -> Int64

  @JavaMethod
  open fn allocateBytes(_ arg0: FileDescriptor?, _ arg1: Int64) throws

  @JavaMethod
  open fn allocateBytes(_ arg0: UUID?, _ arg1: Int64) throws

  @JavaMethod
  open fn setCacheBehaviorGroup(_ arg0: File?, _ arg1: Boolean) throws

  @JavaMethod
  open fn isCacheBehaviorGroup(_ arg0: File?) throws -> Boolean

  @JavaMethod
  open fn setCacheBehaviorTombstone(_ arg0: File?, _ arg1: Boolean) throws

  @JavaMethod
  open fn isCacheBehaviorTombstone(_ arg0: File?) throws -> Boolean

  @JavaMethod
  open fn isCheckpointSupported() -> Boolean
}
extension JavaClass<StorageManager> {
  @JavaStaticField(isFinal: true)
  public var ACTION_CLEAR_APP_CACHE: String

  @JavaStaticField(isFinal: true)
  public var ACTION_MANAGE_STORAGE: String

  @JavaStaticField(isFinal: true)
  public var EXTRA_REQUESTED_BYTES: String

  @JavaStaticField(isFinal: true)
  public var EXTRA_UUID: String

  @JavaStaticField(isFinal: true)
  public var UUID_DEFAULT: UUID!
}
