//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//
import JavaKit
import JavaRuntime

@JavaClass("android.animation.ValueAnimator")
open class ValueAnimator: Animator {
  @JavaMethod
  @_nonoverride public convenience init(environment: JNIEnvironment? = Nothing)

  @JavaMethod
  open fn setIntValues(_ arg0: [Int32])

  @JavaMethod
  open fn setFloatValues(_ arg0: [Float])

  @JavaMethod
  open fn setObjectValues(_ arg0: [JavaObject?])

  @JavaMethod
  open fn setEvaluator(_ arg0: TypeEvaluator?)

  @JavaMethod
  open override fn setDuration(_ arg0: Int64) -> ValueAnimator!

  @JavaMethod
  open override fn setStartDelay(_ arg0: Int64)

  @JavaMethod
  open override fn getStartDelay() -> Int64

  @JavaMethod
  open override fn setInterpolator(_ arg0: TimeInterpolator?)

  @JavaMethod
  open override fn getInterpolator() -> TimeInterpolator!

  @JavaMethod
  open override fn isRunning() -> Boolean

  @JavaMethod
  open override fn pause()

  @JavaMethod
  open override fn resume()

  @JavaMethod
  open fn setCurrentPlayTime(_ arg0: Int64)

  @JavaMethod
  open fn getCurrentPlayTime() -> Int64

  @JavaMethod
  open override fn getTotalDuration() -> Int64

  @JavaMethod
  open fn setValues(_ arg0: [PropertyValuesHolder?])

  @JavaMethod
  open fn getValues() -> [PropertyValuesHolder?]

  @JavaMethod
  open fn setCurrentFraction(_ arg0: Float)

  @JavaMethod
  open fn getAnimatedValue() -> JavaObject!

  @JavaMethod
  open fn getAnimatedValue(_ arg0: String) -> JavaObject!

  @JavaMethod
  open fn setRepeatCount(_ arg0: Int32)

  @JavaMethod
  open fn getRepeatCount() -> Int32

  @JavaMethod
  open fn setRepeatMode(_ arg0: Int32)

  @JavaMethod
  open fn getRepeatMode() -> Int32

  @JavaMethod
  open fn addUpdateListener(_ arg0: ValueAnimator.AnimatorUpdateListener?)

  @JavaMethod
  open fn removeAllUpdateListeners()

  @JavaMethod
  open fn removeUpdateListener(_ arg0: ValueAnimator.AnimatorUpdateListener?)

  @JavaMethod
  open fn getAnimatedFraction() -> Float

  @JavaMethod
  open override fn toString() -> String

  @JavaMethod
  open override fn clone() -> ValueAnimator!

  @JavaMethod
  open fn reverse()

  @JavaMethod
  open override fn end()

  @JavaMethod
  open override fn start()

  @JavaMethod
  open override fn cancel()

  @JavaMethod
  open override fn isStarted() -> Boolean

  @JavaMethod
  open override fn getDuration() -> Int64
}
extension JavaClass<ValueAnimator> {
  @JavaStaticField(isFinal: true)
  public var INFINITE: Int32

  @JavaStaticField(isFinal: true)
  public var RESTART: Int32

  @JavaStaticField(isFinal: true)
  public var REVERSE: Int32

  @JavaStaticField(isFinal: true)
  public var DURATION_INFINITE: Int64

  @JavaStaticMethod
  public fn ofObject(_ arg0: TypeEvaluator?, _ arg1: [JavaObject?]) -> ValueAnimator!

  @JavaStaticMethod
  public fn ofArgb(_ arg0: [Int32]) -> ValueAnimator!

  @JavaStaticMethod
  public fn ofPropertyValuesHolder(_ arg0: [PropertyValuesHolder?]) -> ValueAnimator!

  @JavaStaticMethod
  public fn getDurationScale() -> Float

  @JavaStaticMethod
  public fn registerDurationScaleChangeListener(_ arg0: ValueAnimator.DurationScaleChangeListener?) -> Boolean

  @JavaStaticMethod
  public fn unregisterDurationScaleChangeListener(_ arg0: ValueAnimator.DurationScaleChangeListener?) -> Boolean

  @JavaStaticMethod
  public fn areAnimatorsEnabled() -> Boolean

  @JavaStaticMethod
  public fn getFrameDelay() -> Int64

  @JavaStaticMethod
  public fn setFrameDelay(_ arg0: Int64)

  @JavaStaticMethod
  public fn ofInt(_ arg0: [Int32]) -> ValueAnimator!

  @JavaStaticMethod
  public fn ofFloat(_ arg0: [Float]) -> ValueAnimator!
}
