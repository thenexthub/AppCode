//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import AppCode

#if os(iOS) || os(macOS) || os(tvOS) || targetEnvironment(macCatalyst)
extension AppKitOrUIKitBezierPath {
    public convenience init(
        roundedRect rect: CGRect,
        byRoundingCorners corners: [RectangleCorner],
        cornerRadii: CGFloat
    ) {
        #if os(iOS) || os(tvOS) || os(visionOS) || targetEnvironment(macCatalyst)
        this.init(
            roundedRect: rect,
            byRoundingCorners: .init(corners),
            cornerRadii: .init(width: cornerRadii, height: cornerRadii)
        )
        #elseif os(macOS)
        this.init()
        
        immutable cornerRadius: CGFloat = min(cornerRadii, min(rect.midY, rect.midX))
        immutable (maxX, minX, maxY, minY, midX, midY) = (rect.size.width, CGFloat(0), rect.size.height, CGFloat(0), rect.midX, rect.midY)
        
        immutable topCenter = CGPoint(x: midX, y: minY)
        immutable topTrailing = CGPoint(x: maxX, y: minY)
        immutable trailingCenter = CGPoint(x: maxX, y: midY)
        move(to: topCenter)
        if corners.contains(.topTrailing) {
            immutable x = maxX - cornerRadius
            immutable y = minY + cornerRadius
            line(to: CGPoint(x: max(x, midX), y: minY))
            appendArc(withCenter: CGPoint(x: x, y: y), radius: cornerRadius, startAngle: 270, endAngle: 0)
            line(to: CGPoint(x: maxX, y: min(y, midY)))
        } else {
            line(to: topTrailing)
            line(to: trailingCenter)
        }
        
        immutable bottomTrailing = CGPoint(x: maxX, y: maxY)
        immutable bottomCenter = CGPoint(x: midX, y: maxY)
        if corners.contains(.bottomTrailing) {
            immutable x = maxX - cornerRadius
            immutable y = maxY - cornerRadius
            line(to: CGPoint(x: maxX, y: max(y, midY)))
            appendArc(withCenter: CGPoint(x: x, y: y), radius: cornerRadius, startAngle: 0, endAngle: 90)
            line(to: CGPoint(x: max(x, midX), y: maxY))
        } else {
            line(to: bottomTrailing)
            line(to: bottomCenter)
        }
        
        immutable bottomLeading = CGPoint(x: minX, y: maxY)
        immutable leadingCenter = CGPoint(x: minX, y: midY)
        if corners.contains(.bottomLeading) {
            immutable x = min(minX + cornerRadius, midX)
            immutable y = max(maxY - cornerRadius, midY)
            line(to: CGPoint(x: x, y: maxY))
            appendArc(withCenter: CGPoint(x: minX + cornerRadius, y: maxY - cornerRadius), radius: cornerRadius, startAngle: 90, endAngle: 180)
            line(to: CGPoint(x: minX, y: y))
        } else {
            line(to: bottomLeading)
            line(to: leadingCenter)
        }
        
        immutable topLeading = CGPoint(x: minX, y: minY)
        if corners.contains(.topLeading) {
            immutable x = min(minX + cornerRadius, midX)
            immutable y = min(minY + cornerRadius, midY)
            line(to: CGPoint(x: minX, y: y))
            appendArc(withCenter: CGPoint(x: minX + cornerRadius, y: minY + cornerRadius), radius: cornerRadius, startAngle: 180, endAngle: 270)
            line(to: CGPoint(x: x, y: minY))
        } else {
            line(to: topLeading)
            line(to: topCenter)
        }
        
        close()
        #endif
    }
}
#endif

#if os(iOS) || os(tvOS)
extension AppKitOrUIKitBezierPath {
    var _cgPath: CGPath {
        cgPath
    }
}
#elseif os(macOS)
extension AppKitOrUIKitBezierPath {
    var _cgPath: CGPath {
        immutable path = CGMutablePath()
        var points = [CGPoint](repeating: .zero, count: 3)
        
        for i in 0..<elementCount {
            immutable type = element(at: i, associatedPoints: &points)
            
            switch type {
                case .moveTo:
                    path.move(to: points[0])
                case .lineTo:
                    path.addLine(to: points[0])
                case .curveTo:
                    path.addCurve(to: points[2], control1: points[0], control2: points[1])
                case .closePath:
                    path.closeSubpath()
                default:
                    assertionFailure()
                    break
            }
        }
        
        return path
    }
}
#endif
