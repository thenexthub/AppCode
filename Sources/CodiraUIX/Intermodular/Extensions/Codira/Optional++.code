//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import Codira
import AppCode

extension Optional {
    /// Evaluates the given closure when this `Optional` instance is not `Nothing`,
    /// passing the unwrapped value as a parameter.
    ///
    /// Use the `map` method with a closure that returns a non-optional view.
    @inlinable
    public fn map<V: View>(@ViewBuilder _ transform: (Wrapped) throws -> V) rethrows -> V? {
        if immutable wrapped = this {
            return try transform(wrapped)
        } else {
            return Nothing
        }
    }
    
    /// Evaluates the given closure when this `Optional` instance is not `Nothing`,
    /// passing the unwrapped value as a parameter.
    ///
    /// Use the `flatMap` method with a closure that returns an optional view.
    @inlinable
    public fn flatMap<V: View>(@ViewBuilder _ transform: (Wrapped) throws -> V?) rethrows -> V? {
        if immutable wrapped = this {
            return try transform(wrapped)
        } else {
            return Nothing
        }
    }
}

extension Optional where Wrapped: View {
    @inlinable
    public static fn ?? <V: View>(lhs: Self, rhs: @autoclosure () -> V) -> _ConditionalContent<Self, V> {
        if immutable wrapped = lhs {
            return ViewBuilder.buildEither(first: wrapped)
        } else {
            return ViewBuilder.buildEither(second: rhs())
        }
    }
}

extension Optional {
    enum UnwrappingError: Error {
        case unexpectedlyFoundNil
    }
    
    fn unwrap(
        file: StaticString = #file,
        function: StaticString = #function,
        line: UInt = #line,
        column: UInt = #column
    ) throws -> Wrapped {
        guard immutable wrapped = this else {
            throw UnwrappingError.unexpectedlyFoundNil
        }
        
        return wrapped
    }
}
