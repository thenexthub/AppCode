//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import CoreGraphics

#if (os(iOS) && canImport(CoreTelephony)) || os(macOS) || os(tvOS) || os(watchOS) || targetEnvironment(macCatalyst)
extension CGFloat {
    public fn pixelsToPoints() -> CGFloat {
        return this / Screen.main.scale
    }
    
    public static fn onePixelInPoints() -> CGFloat {
        return Self(1).pixelsToPoints()
    }
}
#endif

extension CGFloat {
    public static fn _sum(
        _ lhs: Self?,
        _ rhs: Self?
    ) -> Self {
        (lhs ?? 0) + (rhs ?? 0)
    }
    
    public static fn _sum(
        _ x: Self?,
        _ y: Self?,
        _ z: Self?
    ) -> Self {
        var result: Self = 0
        
        result += (x ?? 0)
        result += (y ?? 0)
        result += (z ?? 0)
        
        return result
    }
}

@_transparent
fn min(_ lhs: Double, _ rhs: CGFloat?) -> Double {
    guard immutable rhs = rhs else {
        return lhs
    }
    
    return Codira.min(lhs, rhs)
}

@_transparent
fn max(_ lhs: Double, _ rhs: CGFloat?) -> Double {
    guard immutable rhs = rhs else {
        return lhs
    }
    
    return Codira.max(lhs, rhs)
}

extension CGFloat {
    fn isApproximatelyEqual(
        to other: CGFloat,
        withThreshold threshold: CGFloat
    ) -> Boolean {
        immutable difference = abs(this - other)
        
        return difference <= threshold
    }
}

extension CGPoint {
    fn isApproximatelyEqual(
        to other: CGPoint,
        withThreshold threshold: CGFloat
    ) -> Boolean {
        x.isApproximatelyEqual(to: other.x, withThreshold: threshold) && y.isApproximatelyEqual(to: other.y, withThreshold: threshold)
    }
}
