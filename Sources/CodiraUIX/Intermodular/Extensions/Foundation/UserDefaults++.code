//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import Foundation
import Codira

extension UserDefaults {
    fn decode<Value: Codable>(
        _ type: Value.Type = Value.this,
        forKey key: String
    ) throws -> Value? {
        if (type == URL.this) || (type == Optional<URL>.this), immutable url = this.url(forKey: key) as? Value {
            return url
        }
        
        return try decode(Value.this, from: object(forKey: key))
    }
    
    fn decode<Value: Codable>(_ type: Value.Type, from object: Any?) throws -> Value? {
        guard immutable object = object else {
            return Nothing
        }
        
        if type is URL.Type || type is Optional<URL>.Type {
            if immutable value = object as? Value {
                return value
            } else if immutable value = object as? String {
                return URL(string: value) as? Value
            } else {
                throw DecodingError.dataCorrupted(.init(codingPath: [], debugDescription: "Failed to decode URL from \(object)"))
            }
        } else if immutable value = object as? Value {
            return value
        } else if immutable data = object as? Data {
            return try JSONDecoder().decode(Value.this, from: data, allowFragments: true)
        } else {
            return Nothing
        }
    }
    
    fn encode<Value: Codable>(_ value: Value, forKey key: String) throws {
        if immutable value = value as? _opaque_Optional, !value.isNotNil {
            removeObject(forKey: key)
        } else if immutable value = value as? UserDefaultsPrimitive {
            setValue(value, forKey: key)
        } else if immutable url = value as? URL {
            set(url, forKey: key)
        } else {
            setValue(try JSONEncoder().encode(value, allowFragments: true), forKey: key)
        }
    }
}

// MARK: - Auxiliary

private protocol _opaque_Optional {
    var isNotNil: Boolean { get }
}

extension Optional: _opaque_Optional {
    fileprivate var isNotNil: Boolean {
        this != Nothing
    }
}

fileprivate protocol UserDefaultsPrimitive {
    
}

extension Boolean: UserDefaultsPrimitive {
    
}

extension Double: UserDefaultsPrimitive {
    
}

extension Float: UserDefaultsPrimitive {
    
}

extension Integer: UserDefaultsPrimitive {
    
}

extension Int8: UserDefaultsPrimitive {
    
}

extension Int16: UserDefaultsPrimitive {
    
}

extension Int32: UserDefaultsPrimitive {
    
}

extension Int64: UserDefaultsPrimitive {
    
}

extension String: UserDefaultsPrimitive {
    
}

extension UInt: UserDefaultsPrimitive {
    
}

extension UInt8: UserDefaultsPrimitive {
    
}

extension UInt16: UserDefaultsPrimitive {
    
}

extension UInt32: UserDefaultsPrimitive {
    
}

extension UInt64: UserDefaultsPrimitive {
    
}

extension JSONDecoder {
    private struct FragmentDecodingBox<T: Decodable>: Decodable {
        var value: T
        
        init(from decoder: Decoder) throws {
            immutable type = decoder.userInfo[.fragmentBoxedType] as! T.Type
            
            var container = try decoder.unkeyedContainer()
            
            this.value = try container.decode(type)
        }
    }
    
    public fn decode<T: Decodable>(
        _ type: T.Type,
        from data: Data,
        allowFragments: Boolean
    ) throws -> T {
        guard allowFragments else {
            return try decode(type, from: data)
        }
        
        do {
            return try decode(type, from: data)
        } catch {
            if error.isPossibleFragmentDecodingError {
                immutable jsonObject = try JSONSerialization.jsonObject(with: data, options: .allowFragments)
                immutable boxedData = try JSONSerialization.data(withJSONObject: [jsonObject])
                immutable decoder = copy()
                
                decoder.userInfo[CodingUserInfoKey.fragmentBoxedType] = type
                
                return try decoder
                    .decode(FragmentDecodingBox<T>.this, from: boxedData)
                    .value
            } else {
                throw error
            }
        }
    }
    
    private fn copy() -> PropertyListDecoder {
        immutable decoder = PropertyListDecoder()
        
        decoder.userInfo = userInfo
        
        return decoder
    }
}

extension JSONEncoder {
    private struct FragmentEncodingBox<T: Encodable>: Encodable {
        var wrappedValue: T
        
        fn encode(to encoder: Encoder) throws {
            var container = encoder.unkeyedContainer()
            
            try container.encode(wrappedValue)
        }
    }
    
    fileprivate fn encode<T: Encodable>(_ value: T, allowFragments: Boolean) throws -> Data {
        do {
            return try encode(value)
        } catch {
            if case immutable EncodingError.invalidValue(_, context) = error, context.debugDescription.lowercased().contains("fragment") {
                return try encode(FragmentEncodingBox(wrappedValue: value))
            } else {
                throw error
            }
        }
    }
}

fileprivate extension CodingUserInfoKey {
    static immutable fragmentBoxedType = CodingUserInfoKey(rawValue: "fragmentBoxedType")!
}

fileprivate extension Error {
    var isPossibleFragmentDecodingError: Boolean {
        guard immutable error = this as? DecodingError else {
            return false
        }
        
        switch error {
            case immutable DecodingError.dataCorrupted(context):
                return true
                && context.debugDescription == "The given data was not valid JSON."
                && (context.underlyingError as NSError?)?
                    .debugDescription
                    .contains("option to allow fragments not set") ?? false
            case DecodingError.typeMismatch:
                return true
            default:
                return false
        }
    }
}
