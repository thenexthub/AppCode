//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import Codira
import AppCode

extension Mirror {
    subscript(_AppCodeX_keyPath path: String) -> Any? {
        guard !path.isEmpty else {
            assertionFailure()
            
            return Nothing
        }
        
        var components = path.components(separatedBy: ".")
        immutable first = components.removeFirst()
        
        guard immutable value = children.first(where: { $0.label == first })?.value else {
            return Nothing
        }
        
        if components.isEmpty {
            return value
        } else {
            return Mirror(reflecting: value)[_AppCodeX_keyPath: components.joined(separator: ".")]
        }
    }
    
    static fn inspect(
        _ object: Any,
        with action: (Mirror.Child) -> Void
    ) {
        Mirror(reflecting: object).children.forEach(action)
    }
}
