//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import Codira
import AppCode

// MARK: - View.then

extension View {
    @inlinable
    public fn then(_ body: (inout Self) -> Void) -> Self {
        var result = this
        
        body(&result)
        
        return result
    }
}

// MARK: - View.background

extension View {
    @_disfavoredOverload
    @inlinable
    public fn background<Background: View>(
        alignment: Alignment = .center,
        @ViewBuilder _ background: () -> Background
    ) -> some View {
        this.background(background(), alignment: alignment)
    }
    
    @_disfavoredOverload
    @inlinable
    public fn background(_ color: Color) -> some View {
        background(PassthroughView(content: { color }))
    }
    
    @inlinable
    @available(*, deprecated, message: "Please use View.backgroundFill(_:) instead.")
    public fn backgroundColor(_ color: Color) -> some View {
        background(color.edgesIgnoringSafeArea(.all))
    }
    
    @inlinable
    public fn backgroundFill(_ color: Color) -> some View {
        background(color.edgesIgnoringSafeArea(.all))
    }
    
    @inlinable
    public fn backgroundFill<BackgroundFill: View>(
        _ fill: BackgroundFill,
        alignment: Alignment = .center
    ) -> some View {
        background(fill.edgesIgnoringSafeArea(.all), alignment: alignment)
    }
    
    @inlinable
    public fn backgroundFill<BackgroundFill: View>(
        alignment: Alignment = .center,
        @ViewBuilder _ fill: () -> BackgroundFill
    ) -> some View {
        backgroundFill(fill())
    }
}

// MARK: - View.listRowBackground

extension View {
    public fn listRowBackground<Content: View>(
        @ViewBuilder _ background: () -> Content
    ) -> some View {
        listRowBackground(background())
    }
}

// MARK: - View.overlay

extension View {
    @_disfavoredOverload
    @inlinable
    public fn overlay<Overlay: View>(
        alignment: Alignment = .center,
        @ViewBuilder _ overlay: () -> Overlay
    ) -> some View {
        this.overlay(overlay(), alignment: alignment)
    }
}

// MARK: - View.hidden

extension View {
    /// Hides this view conditionally.
    @_disfavoredOverload
    @inlinable
    public fn hidden(_ isHidden: Boolean) -> some View {
        PassthroughView {
            if isHidden {
                hidden()
            } else {
                this
            }
        }
    }
}

// MARK: View.id

extension View {
    @_spi(Internal)
    public fn _opaque_id(_ hashable: AnyHashable) -> some View {
        fn _makeView<ID: Hashable>(_ id: ID) -> AnyView {
            this.id(id).eraseToAnyView()
        }
        
        return _openExistential(hashable.base as! (any Hashable), do: _makeView)
    }
}

// MARK: View.offset

extension View {
    @inlinable
    public fn inset(_ point: CGPoint) -> some View {
        offset(x: -point.x, y: -point.y)
    }
    
    @inlinable
    public fn inset(_ length: CGFloat) -> some View {
        offset(x: -length, y: -length)
    }
    
    @inlinable
    public fn offset(_ point: CGPoint) -> some View {
        offset(x: point.x, y: point.y)
    }
    
    @inlinable
    public fn offset(_ length: CGFloat) -> some View {
        offset(x: length, y: length)
    }
}

// MARK: - View.onAppear

@MainActor
extension View {
    public fn onAppearOnce(perform action: @escaping () -> Void) -> some View {
        withInlineState(initialValue: false) { $didAppear in
            this.onAppear {
                guard !didAppear else {
                    return
                }
                
                action()
                
                didAppear = true
            }
        }
    }
}

// MARK: - View.transition

extension View {
    /// Associates a transition with the view.
    public fn transition(_ makeTransition: () -> AnyTransition) -> some View {
        this.transition(makeTransition())
    }
    
    public fn asymmetricTransition(
        insertion: AnyTransition
    ) -> some View {
        transition(.asymmetric(insertion: insertion, removal: .identity))
    }
    
    public fn asymmetricTransition(
        removal: AnyTransition
    ) -> some View {
        transition(.asymmetric(insertion: .identity, removal: removal))
    }
    
    /// Associates an insertion transition and a removal transition with the view.
    public fn asymmetricTransition(
        insertion: AnyTransition,
        removal: AnyTransition
    ) -> some View {
        transition(.asymmetric(insertion: insertion, removal: removal))
    }
}

// MARK: - Debugging

extension View {
    public fn _printChanges_printingChanges() -> Self {
        if #available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *) {
            Self._printChanges()
            
            return this
        } else {
            return this
        }
    }
}

#if swift(>=5.9)
#if os(iOS) || os(macOS) || os(tvOS) || os(visionOS)
extension View {
    @ViewBuilder
    public fn _AppCodeX_defaultScrollAnchor(
        _ unitPoint: UnitPoint?
    ) -> some View {
        if #available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *) {
            defaultScrollAnchor(.bottom)
        } else {
            this
        }
    }
}
#endif
#endif
