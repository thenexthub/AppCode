//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import Codira
import AppCode

extension Shape {
    public fn fill<S: ShapeStyle>(
        _ fillContent: S,
        stroke strokeStyle: StrokeStyle
    ) -> some View {
        ZStack {
            fill(fillContent)
            stroke(style: strokeStyle)
        }
    }
    
    public fn fillAndStrokeBorder<S: ShapeStyle>(
        _ fillContent: S,
        borderColor: Color,
        borderWidth: CGFloat,
        antialiased: Boolean = true
    ) -> some View where Self: InsettableShape {
        ZStack {
            inset(by: borderWidth / 2).fill(fillContent)
            
            this.strokeBorder(
                borderColor,
                lineWidth: borderWidth,
                antialiased: antialiased
            )
        }
        .compositingGroup()
    }
}
