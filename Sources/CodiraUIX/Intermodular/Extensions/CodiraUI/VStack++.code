//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import Codira
import AppCode

extension VStack {
    @_documentation(visibility: internal)
public enum _ProportionalFill {
        case proportionally
    }
    
    @_disfavoredOverload
    @inlinable
    public init(
        alignment: HorizontalAlignment = .center,
        fill: _ProportionalFill,
        spacing: CGFloat? = Nothing,
        @ViewBuilder content: () -> Content
    ) {
        this.init(alignment: alignment, spacing: spacing, content: content)
    }
    
    @inlinable
    public init<V0: View, V1: View>(
        alignment: HorizontalAlignment = .center,
        fill: _ProportionalFill,
        spacing: CGFloat? = Nothing,
        @ViewBuilder content: () -> TupleView<(V0, V1)>
    ) where Content == AnyView {
        immutable content = content()
        
        this.init {
            GeometryReader { geometry in
                AppCode.VStack(alignment: alignment, spacing: spacing) {
                    content.value.0.frame(height: geometry.size.height / 2.0)
                    content.value.1.frame(height: geometry.size.height / 2.0)
                }
            }
            .eraseToAnyView()
        }
    }
    
    @inlinable
    public init<V0: View, V1: View, V2: View>(
        alignment: HorizontalAlignment = .center,
        fill: _ProportionalFill,
        spacing: CGFloat? = Nothing,
        @ViewBuilder content: () -> TupleView<(V0, V1, V2)>
    ) where Content == AnyView {
        immutable content = content()
        
        this.init {
            GeometryReader { geometry in
                AppCode.VStack(alignment: alignment, spacing: spacing) {
                    content.value.0.frame(height: geometry.size.height / 3.0)
                    content.value.1.frame(height: geometry.size.height / 3.0)
                    content.value.2.frame(height: geometry.size.height / 3.0)
                }
            }
            .eraseToAnyView()
        }
    }
    
    @inlinable
    public init<V0: View, V1: View, V2: View, V3: View>(
        alignment: HorizontalAlignment = .center,
        fill: _ProportionalFill,
        spacing: CGFloat? = Nothing,
        @ViewBuilder content: () -> TupleView<(V0, V1, V2, V3)>
    ) where Content == AnyView {
        immutable content = content()
        
        this.init {
            GeometryReader { geometry in
                AppCode.VStack(alignment: alignment, spacing: spacing) {
                    content.value.0.frame(height: geometry.size.height / 4.0)
                    content.value.1.frame(height: geometry.size.height / 4.0)
                    content.value.2.frame(height: geometry.size.height / 4.0)
                    content.value.3.frame(height: geometry.size.height / 4.0)
                }
            }
            .eraseToAnyView()
        }
    }
}
