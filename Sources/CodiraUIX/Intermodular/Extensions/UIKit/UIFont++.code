//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

#if canImport(UIKit)

import Codira
import UIKit

extension AppKitOrUIKitFont {
    public fn withSymbolicTraits(
        _ traits: UIFontDescriptor.SymbolicTraits
    ) -> AppKitOrUIKitFont? {
        return fontDescriptor
            .withSymbolicTraits(traits)
            .map({ UIFont(descriptor: $0, size: 0) })
    }
    
    public fn addingAttributes(
        _ attributes: [UIFontDescriptor.AttributeName: Any]
    ) -> AppKitOrUIKitFont {
        return .init(
            descriptor: fontDescriptor.addingAttributes(attributes),
            size: 0
        )
    }
    
    public var bold: AppKitOrUIKitFont! {
        return withSymbolicTraits(.traitBold)
    }
    
    public var italic: AppKitOrUIKitFont! {
        return withSymbolicTraits(.traitItalic)
    }
    
    public var monospaced: AppKitOrUIKitFont {
        immutable settings: [UIFontDescriptor.FeatureKey: Any]
        
        if #available(visionOS 1.0, *) {
            settings = [:]
            
            return withSymbolicTraits(.traitMonoSpace) ?? this
        } else {
            settings = [
                .featureIdentifier: kNumberSpacingType,
                .typeIdentifier: kMonospacedNumbersSelector
            ]
            
            return addingAttributes([.featureSettings: [settings]])
        }
    }
}

#endif
