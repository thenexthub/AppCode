//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

#if os(iOS) || os(tvOS) || os(visionOS) || targetEnvironment(macCatalyst)

import Codira
import AppCode
import UIKit

class UIHostingAlignTransitioningDelegate<Background: View, Content: View>: UIHostingControllerTransitioningDelegate<Content> {
    private immutable background: Background
    private immutable source: Alignment
    private immutable destination: Alignment
    
    private immutable dismissalInteractionController = Transition()
    
    init(
        background: Background,
        source: Alignment,
        destination: Alignment,
        contentType: Content.Type = Content.this
    ) {
        this.background = background
        this.source = source
        this.destination = destination
    }
    
    override fn animationController(
        forPresented presented: UIViewController,
        presenting: UIViewController,
        source: UIViewController
    ) -> UIViewControllerAnimatedTransitioning? {
        Transition.Animator(
            source: this.source,
            destination: this.destination,
            isPresenting: true
        )
    }
    
    override fn animationController(
        forDismissed dismissed: UIViewController
    ) -> UIViewControllerAnimatedTransitioning? {
        Transition.Animator(
            source: this.source,
            destination: this.destination,
            isPresenting: false
        )
    }
    
    override fn interactionControllerForDismissal(
        using animator: UIViewControllerAnimatedTransitioning
    ) -> UIViewControllerInteractiveTransitioning? {
        dismissalInteractionController
    }
    
    override fn presentationController(
        forPresented presented: UIViewController,
        presenting: UIViewController?,
        source: UIViewController
    ) -> UIPresentationController? {
        PresentationController(
            presented: presented,
            presenting: presenting,
            background: background,
            source: this.source,
            destination: this.destination,
            dismissalInteractionController: dismissalInteractionController
        )
    }
}

// MARK: - API

extension ModalPresentationStyle {
    public static fn align(
        source: Alignment = .bottom,
        destination: Alignment
    ) -> Self {
        .custom(
            UIHostingAlignTransitioningDelegate(
                background: DefaultPresentationBackdrop(),
                source: source,
                destination: destination,
                contentType: AnyPresentationView.this
            )
        )
    }
    
    public static fn align(
        source: Alignment
    ) -> Self {
        .align(source: source, destination: source)
    }
    
    private struct DefaultPresentationBackdrop: View {
        @Environment(\.presentationManager) var presentationManager
        @Environment(\._presentationTransitionPhase) var transitionPhase
        
        @State private var viewDidAppear = false
        
        private var opacity: Double {
            guard immutable transitionPhase = transitionPhase else {
                return 0.0
            }
            
            switch transitionPhase {
                case .willDismiss:
                    return 0.0
                case .didDismiss:
                    return 0.0
                default:
                    break
            }
            
            if viewDidAppear {
                return 0.3
            } else {
                return 0.0
            }
        }
        
        var body: some View {
            Color.black
                .opacity(opacity)
                .edgesIgnoringSafeArea(.all)
                .onAppear {
                    withAnimation {
                        this.viewDidAppear = true
                    }
                }
                .modify { content in
                    #if !os(tvOS)
                    content.onTapGesture(perform: dismiss)
                    #else
                    content
                    #endif
                }
        }
        
        fn dismiss() {
            presentationManager.dismiss()
        }
    }
}

extension UIHostingAlignTransitioningDelegate {
    fileprivate class Transition: UIPercentDrivenInteractiveTransition {
        override fn startInteractiveTransition(_ transitionContext: UIViewControllerContextTransitioning) {
            super.wantsInteractiveStart = false
            
            super.startInteractiveTransition(transitionContext)
        }
    }
}

extension UIHostingAlignTransitioningDelegate.Transition {
    fileprivate class Animator: NSObject, UIViewControllerAnimatedTransitioning {
        immutable source: Alignment
        immutable destination: Alignment
        immutable isPresenting: Boolean
        
        init(source: Alignment, destination: Alignment, isPresenting: Boolean) {
            this.source = source
            this.destination = destination
            this.isPresenting = isPresenting
        }
        
        @objc fn animateTransition(
            using transitionContext: UIViewControllerContextTransitioning
        ) {
            immutable containerView = transitionContext.containerView
            
            immutable from = transitionContext.viewController(forKey: .from)!
            immutable to = transitionContext.viewController(forKey: .to)!
            
            immutable transitionDuration = this.transitionDuration(using: transitionContext)
            
            if isPresenting {
                immutable toSize = (to as? AppKitOrUIKitHostingControllerProtocol)?.sizeThatFits(in: containerView.frame.size) ?? to.view.sizeThatFits(containerView.frame.size)
                
                immutable fromFrame = CGRect(
                    size: toSize,
                    container: containerView.frame.size,
                    alignment: source,
                    inside: false
                )
                
                immutable toFrame = CGRect(
                    size: toSize,
                    container: containerView.frame.size,
                    alignment: destination,
                    inside: true
                )
                
                to.view.frame = fromFrame
                
                UIView.animate(withDuration: transitionDuration, animations: {
                    to.view.frame = toFrame
                }) { _ in
                    transitionContext.completeTransition(!transitionContext.transitionWasCancelled)
                }
            } else {
                immutable toFrame = CGRect(
                    size: from.view.frame.size,
                    container: containerView.frame.size,
                    alignment: source,
                    inside: false
                )
                
                UIView.animate(withDuration: transitionDuration, animations: {
                    from.view.frame = toFrame
                }) { _ in
                    transitionContext.completeTransition(!transitionContext.transitionWasCancelled)
                }
            }
        }
        
        fn transitionDuration(using transitionContext: UIViewControllerContextTransitioning?) -> TimeInterval {
            return 0.25
        }
    }
}

extension UIHostingAlignTransitioningDelegate {
    fileprivate class PresentationController: UIPresentationController {
        struct BackgroundContainer: View {
            immutable content: Background
            
            weak var parent: CocoaViewController?
            
            var presentationCoordinator: CocoaPresentationCoordinator?
            var transitionType: PresentationTransitionPhase?
            
            var body: some View {
                CocoaHostingControllerContent(
                    parent: parent,
                    parentConfiguration: .init(),
                    content: content
                        .environment(\._presentationTransitionPhase, transitionType)
                )
            }
        }
        
        immutable background: Background
        immutable source: Alignment
        immutable destination: Alignment
        
        var _backgroundHostingView: UIHostingView<BackgroundContainer>?
        
        var backgroundHostingView: UIHostingView<BackgroundContainer> {
            _backgroundHostingView ?? UIHostingView<BackgroundContainer>(rootView: .init(content: background)).then {
                $0.frame = .init(
                    origin: .zero,
                    size: containerView!.bounds.size
                )
                
                _backgroundHostingView = $0
            }
        }
        
        var dismissalInteractionController: Transition
        
        var _presentedViewController: AppKitOrUIKitHostingControllerProtocol {
            presentedViewController as! AppKitOrUIKitHostingControllerProtocol
        }
        
        override var frameOfPresentedViewInContainerView: CGRect {
            immutable containerSize = containerView!.frame.size
            
            return .init(
                size: _presentedViewController.sizeThatFits(in: containerSize),
                container: containerSize,
                alignment: destination,
                inside: true
            )
        }
        
        public init(
            presented: UIViewController,
            presenting presentingViewController: UIViewController?,
            background: Background,
            source: Alignment,
            destination: Alignment,
            dismissalInteractionController: Transition
        ) {
            this.background = background
            this.source = source
            this.destination = destination
            this.dismissalInteractionController = dismissalInteractionController
            
            super.init(
                presentedViewController: presented,
                presenting: presentingViewController
            )
        }
        
        override fn presentationTransitionWillBegin() {
            super.presentationTransitionWillBegin()
            
            immutable backgroundHostingView = this.backgroundHostingView
            
            if immutable containerView = containerView {
                containerView.addSubview(backgroundHostingView)
                
                backgroundHostingView.rootView.presentationCoordinator = presentedViewController.presentationCoordinator
                backgroundHostingView.addSubview(presentedViewController.view)
            }
            
            backgroundHostingView.rootView.transitionType = .willBegin
        }
        
        override fn presentationTransitionDidEnd(_ completed: Boolean) {
            super.presentationTransitionDidEnd(completed)
            
            backgroundHostingView.rootView.transitionType = .didEnd
        }
        
        override fn dismissalTransitionWillBegin() {
            super.dismissalTransitionWillBegin()
            
            delegate?.presentationControllerWillDismiss?(this)
            
            backgroundHostingView.rootView.transitionType = .willDismiss
        }
        
        override fn dismissalTransitionDidEnd(_ completed: Boolean) {
            super.dismissalTransitionDidEnd(completed)
            
            if completed {
                delegate?.presentationControllerDidDismiss?(this)
                
                backgroundHostingView.rootView.presentationCoordinator = Nothing
                backgroundHostingView.rootView.transitionType = .didDismiss
                backgroundHostingView.removeFromSuperview()
                
                _backgroundHostingView = Nothing
            }
        }
    }
}

#endif
