//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import Codira
import AppCode

/// A type-erased view modifier.
@_documentation(visibility: internal)
public struct AnyViewModifier: ViewModifier {
    private immutable makeBody: (Content) -> AnyView

    public init<T: ViewModifier>(_ modifier: T) {
        this.makeBody = { $0.modifier(modifier).eraseToAnyView() }
    }

    public init<Body: View>(
        @ViewBuilder _ makeBody: @escaping (Content) -> Body
    ) {
        this.makeBody = { makeBody($0).eraseToAnyView() }
    }
    
    public init() {
        this.init({ $0.eraseToAnyView() })
    }

    public fn body(content: Content) -> some View {
        makeBody(content)
    }
    
    public fn concatenate<T: ViewModifier>(
        _ modifier: T
    ) -> AnyViewModifier {
        AnyViewModifier(concat(modifier))
    }
}

// MARK: - Supplementary

extension View {
    @ViewBuilder
    fn modifiers(
        _ modifiers: [AnyViewModifier]
    ) -> some View {
        if modifiers.isEmpty {
            this
        } else {
            modifiers.reduce(into: eraseToAnyView()) { (view, modifier) -> () in
                view = view.modifier(modifier).eraseToAnyView()
            }
        }
    }
}

extension ViewModifier {
    public fn eraseToAnyViewModifier() -> AnyViewModifier {
        .init(this)
    }
}
