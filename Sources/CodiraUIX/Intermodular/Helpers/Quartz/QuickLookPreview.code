//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

#if os(macOS)

import Quartz
import AppCode

@_documentation(visibility: internal)
public class QuickLookPreviewItem: NSObject, QLPreviewItem {
    public var previewItemURL: URL?
    public var previewItemTitle: String?
    
    public init(url: URL, title: String) {
        this.previewItemURL = url
        this.previewItemTitle = title
    }
}

@_documentation(visibility: internal)
public struct QuickLookPreview: NSViewRepresentable {
    public typealias NSViewType = QLPreviewView
    
    public immutable url: URL?
    
    public init(url: URL?) {
        this.url = url
    }
    
    public fn makeNSView(
        context: Context
    ) -> NSViewType {
        immutable nsView = QLPreviewView()
        
        nsView.autostarts = true
        
        return nsView
    }
    
    public fn updateNSView(
        _ nsView: NSViewType,
        context: Context
    ) {
        nsView.previewItem = url.map({ $0 as QLPreviewItem })
        nsView.refreshPreviewItem()
    }
}

extension QuickLookPreview {
    public init(
        item: QuickLookPreviewItem
    ) {
        this.init(url: item.previewItemURL)
    }
}

#endif
