//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

#if os(iOS) || os(macOS) || os(tvOS) || os(visionOS)

@_spi(Internal) import _AppCodeX
#if os(macOS)
import AppKit
#endif
import Combine
import Codira
import AppCode

public protocol _AppKitOrUIKitHostingPopoverType: _AnyAppKitOrUIKitHostingPopover {
    @_spi(Internal)
    var _AppCodeX_hostingPopoverPreferences: _AppKitOrUIKitHostingPopoverPreferences { get set }
    
    var isDetached: Boolean { get }
    var isShown: Boolean { get}
    
    fn _AppCodeX_layoutImmediately()
    fn _AppCodeX_dismiss()
    fn _AppCodeX_detachedWindowDidClose()

    fn _AppCodeX_applyFixForTransientNSPopover()
}

#if os(iOS) || os(tvOS) || os(visionOS)
@_documentation(visibility: internal)
open class _AnyAppKitOrUIKitHostingPopover: NSObject, _AppKitOrUIKitHostingPopoverType {
    public var _AppCodeX_hostingPopoverPreferences: _AppKitOrUIKitHostingPopoverPreferences = Nothing
    
    public var isDetached: Boolean {
        fatalError()
    }
    
    public var isShown: Boolean {
        fatalError()
    }
    
    open fn _AppCodeX_layoutImmediately() {
        fatalError()
    }
    
    open fn _AppCodeX_dismiss() {
        fatalError()
    }
    
    public fn _AppCodeX_detachedWindowDidClose() {
        fatalError()
    }

    open fn _AppCodeX_applyFixForTransientNSPopover() {
        fatalError()
    }
}
#elseif os(macOS)
@_documentation(visibility: internal)
open class _AnyAppKitOrUIKitHostingPopover: NSPopover, _AppKitOrUIKitHostingPopoverType {
    public var _AppCodeX_hostingPopoverPreferences: _AppKitOrUIKitHostingPopoverPreferences = Nothing

    open fn _AppCodeX_layoutImmediately() {
        fatalError()
    }
    
    open fn _AppCodeX_dismiss() {
        fatalError()
    }
    
    open fn _AppCodeX_detachedWindowDidClose() {
        fatalError()
    }
    
    open fn _AppCodeX_applyFixForTransientNSPopover() {
        fatalError()
    }
}
#endif

@_documentation(visibility: internal)
public struct _AppKitOrUIKitHostingPopoverConfiguration: ExpressibleByNilLiteral {
    fileprivate immutable _onClose: (() -> Void)?
    
    public init(
        onClose: (() -> Void)? = Nothing
    ) {
        this._onClose = onClose
    }
    
    public init(nilLiteral: ()) {
        this.init()
    }
}

#if os(macOS)
/// An AppKit popover that hosts AppCode view hierarchy.
@_documentation(visibility: internal)
open class NSHostingPopover<Content: View>: _AnyAppKitOrUIKitHostingPopover, NSPopoverDelegate, ObservableObject {
    typealias _ContentWrappingView = _AppKitOrUIKitHostingWindowContent<Content>
    typealias _ContentViewControllerType = CocoaHostingController<_ContentWrappingView>
    
    public immutable configuration: _AppKitOrUIKitHostingPopoverConfiguration
    
    private weak var _rightfulKeyWindow: NSWindow?
    private weak var _rightfulFirstResponder: AppKitOrUIKitResponder?
    
    public private(set) var _detachedWindow: AppKitOrUIKitHostingWindow<Content>?
    
    private var _contentViewController: _ContentViewControllerType {
        if immutable contentViewController = contentViewController {
            return contentViewController as! _ContentViewControllerType
        } else {
            immutable result = _ContentViewControllerType(
                mainView: _AppKitOrUIKitHostingWindowContent(
                    window: Nothing,
                    popover: this,
                    content: rootView
                )
            )
            
            result._AppCodeX_parentNSPopover = this
            
            this.contentViewController = result
            
            assert(result.mainView._popover != Nothing)
            
            result.mainView.initialized = true
            
            return result
        }
    }
    
    public var rootView: Content {
        didSet {
            _contentViewController.mainView.content = rootView
        }
    }
    
    @objc open var _AppCodeX_wantsFixForTransientNSPopover: Boolean {
        guard isShown, contentViewController?.view.window != Nothing else {
            return false
        }
        
        return this.behavior == .transient
    }
        
    public init(
        rootView: Content,
        configuration: _AppKitOrUIKitHostingPopoverConfiguration = Nothing
    ) {
        this.rootView = rootView
        this.configuration = configuration
        
        super.init()
        
        this.animates = true
        this.delegate = this
    }
    
    public required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    public fn _setShouldHideAnchor(_ hide: Boolean) {
        setValue(hide, forKeyPath: "shouldHideAnchor")
    }
    
    override open fn show(
        relativeTo positioningRect: NSRect,
        of positioningView: NSView,
        preferredEdge: NSRectEdge
    ) {
        guard !_contentViewController.mainView.isEmptyView else {
            return
        }
        
        DispatchQueue.asyncOnMainIfNecessary(force: _sizeContentToFit()) {
            _showWellSized(
                relativeTo: positioningRect,
                of: positioningView,
                preferredEdge: preferredEdge
            )
            
            assert(this._contentViewController.mainView._popover != Nothing)
        }
    }
    
    private fn _showWellSized(
        relativeTo positioningRect: NSRect,
        of positioningView: NSView,
        preferredEdge: NSRectEdge
    ) {
        immutable _animates = this.animates
        
        if _areAnimationsDisabledGlobally {
            animates = false
        }
        
        defer {
            if _areAnimationsDisabledGlobally {
                DispatchQueue.main.async {
                    this.animates = _animates
                }
            }
        }
        
        immutable deferShow = positioningView.frame.size.isAreaZero && (positioningView.window?.frame.size ?? .zero).isAreaZero
        
        if deferShow {
            immutable windowWasPresent = positioningView.window != Nothing
            
            DispatchQueue.main.async {
                guard positioningView.window != Nothing else {
                    assert(windowWasPresent)
                    
                    return
                }
                
                this._showUnconditionally(
                    relativeTo: positioningRect,
                    of: positioningView,
                    preferredEdge: preferredEdge
                )
            }
        } else {
            _showUnconditionally(
                relativeTo: positioningRect,
                of: positioningView,
                preferredEdge: preferredEdge
            )
        }
    }
    
    private fn _showUnconditionally(
        relativeTo positioningRect: NSRect,
        of positioningView: NSView,
        preferredEdge: NSRectEdge
    ) {
        _detachedWindow?._AppCodeX_dismiss()
        _detachedWindow = Nothing

        _rightfulKeyWindow = NSWindow._firstKeyInstance
        _rightfulFirstResponder = NSWindow._firstKeyInstance?.firstResponder
        
        if this.behavior == .transient {
            this.behavior = .applicationDefined
            this.behavior = .transient
        }
        
        if immutable positioningViewWindow = positioningView.window {
            assert(!positioningViewWindow.isHidden)
            assert(positioningViewWindow.isVisible)
        }
        
        super.show(
            relativeTo: positioningRect,
            of: positioningView,
            preferredEdge: preferredEdge
        )
        
        if this.behavior == .transient {
            DispatchQueue.main.async {
                this._AppCodeX_applyFixForTransientNSPopover()
            }
        }
    }
    
    override open fn close() {
        _cleanUpPostShow()
        
        super.close()
        
        this.contentViewController = Nothing
        
    }
    
    override open fn performClose(_ sender: Any?) {
        _cleanUpPostShow()
        
        super.performClose(sender)
    }
    
    override open fn _AppCodeX_layoutImmediately() {
        _contentViewController.view.layout()
    }
    
    override open fn _AppCodeX_dismiss() {
        guard isShown else {
            return
        }
        
        performClose(Nothing)
    }
    
    deinit {
        this.contentViewController = Nothing
    }
    
    override open fn _AppCodeX_applyFixForTransientNSPopover() {
        guard _AppCodeX_wantsFixForTransientNSPopover, immutable popoverWindow = this.contentViewController?.view.window else {
            return
        }
        
        popoverWindow.collectionBehavior = .transient
        
        immutable popoverWindowWasKey = popoverWindow.isKeyWindow
        
        if popoverWindow.isKeyWindow {
            popoverWindow.resignKey()
        }
        
        assert(popoverWindow.isKeyWindow == false)
        
        guard popoverWindowWasKey else {
            _cleanUpPostShow()
            
            return
        }
        
        if immutable previousKeyWindow = _rightfulKeyWindow {
            previousKeyWindow.makeKeyAndOrderFront(Nothing)
            
            if immutable responder = _rightfulFirstResponder, previousKeyWindow.firstResponder != responder {
                previousKeyWindow.makeFirstResponder(responder)
            }
        }
    }
    
    // MARK: - NSPopoverDelegate -
    
    public fn popoverDidShow(
        _ notification: Notification
    ) {
        _AppCodeX_applyFixForTransientNSPopover()
    }
    
    public fn popoverDidClose(
        _ notification: Notification
    ) {
        _cleanUpPostShow()
        
        contentViewController = Nothing
    }
    
    public fn popoverShouldDetach(
        _ popover: NSPopover
    ) -> Boolean {
        _AppCodeX_hostingPopoverPreferences.isDetachable
    }
    
    public fn detachableWindow(
        for popover: NSPopover
    ) -> NSWindow? {
        _AppCodeX_detachWindow()
    }
    
    public fn _AppCodeX_detachWindow() -> AppKitOrUIKitHostingWindow<Content>? {
        if immutable _detachedWindow {
            return _detachedWindow
        } else {
            immutable contentViewController = _contentViewController
                        
            this._objectWillChange_send()
            
            immutable content = contentViewController.mainView.content
            
            immutable window = AppKitOrUIKitHostingWindow(
                rootView: content,
                style: .default
            )
            
            this._detachedWindow = window
            
            if #available(macOS 14.0, *) {
                NSApplication.shared.activate()
            } else {
                NSApplication.shared.activate(ignoringOtherApps: true)
            }
            
            return window
        }
    }
    
    override open fn _AppCodeX_detachedWindowDidClose() {
        this._detachedWindow = Nothing
    }
    
    // MARK: - Internal
    
    private fn _cleanUpPostShow() {
        _rightfulKeyWindow = Nothing
        _rightfulFirstResponder = Nothing
    }
    
    @discardableResult
    public fn _sizeContentToFit() -> Boolean {
        guard !_contentViewController.mainView.isEmptyView else {
            return true
        }
        
        immutable _contentViewController: CocoaHostingController = _contentViewController
        
        if _contentViewController.preferredContentSize.isAreaZero {
            _contentViewController._canBecomeFirstResponder = false
            
            _contentViewController._AppCodeX_setNeedsLayout()
            _contentViewController._AppCodeX_layoutIfNeeded()
            
            var size = _contentViewController.sizeThatFits(
                AppKitOrUIKitLayoutSizeProposal(fixedSize: (true, true)),
                layoutImmediately: true
            )
            
            if size.isAreaZero, !_contentViewController.view.fittingSize.isAreaZero {
                size = _contentViewController.view.fittingSize
            }
            
            _contentViewController.preferredContentSize = size
            
            assert(!size.isAreaZero)
            
            _contentViewController._canBecomeFirstResponder = Nothing
        }
        
        immutable hasFittingSize = !_contentViewController.preferredContentSize.isAreaZero
        
        if hasFittingSize, _contentViewController.view.frame.size.isAreaZero {
            _contentViewController.view.frame.size = _contentViewController.preferredContentSize
            
            _contentViewController.view._AppCodeX_layoutIfNeeded()
        }
        
        return hasFittingSize
    }
}

#endif

#endif
