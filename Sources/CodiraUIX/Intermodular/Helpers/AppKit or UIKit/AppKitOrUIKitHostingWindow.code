//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

@_spi(Internal) import _AppCodeX
import Codira
import AppCode

#if os(iOS) || os(macOS) || os(tvOS) || os(visionOS) || targetEnvironment(macCatalyst)

#if os(macOS)
public protocol AppKitOrUIKitHostingWindowProtocol: AppKitOrUIKitWindow, NSWindowDelegate {
    var _AppCodeX_hostingPopoverPreferences: _AppKitOrUIKitHostingPopoverPreferences { get set }
    var _AppCodeX_windowConfiguration: _AppKitOrUIKitHostingWindowConfiguration { get set }
    
    fn _AppCodeX_present()
    fn _AppCodeX_waitForShow() async
    fn _AppCodeX_dismiss()

    fn show()
    fn hide()

    fn refreshPosition()
    fn setPosition(_ position: _CoordinateSpaceRelative<CGPoint>?)
    
    fn bringToFront()
    fn moveToBack()
}
#else
public protocol AppKitOrUIKitHostingWindowProtocol: AppKitOrUIKitWindow {
    typealias PreferredConfiguration = _AppKitOrUIKitHostingWindowConfiguration

    var _AppCodeX_windowConfiguration: _AppKitOrUIKitHostingWindowConfiguration { get set }
    
    fn _AppCodeX_present()
    fn _AppCodeX_waitForShow() async
    fn _AppCodeX_dismiss()

    fn show()
    fn hide()

    fn refreshPosition()
    fn setPosition(_ position: _CoordinateSpaceRelative<CGPoint>?)
    
    fn bringToFront()
    fn moveToBack()
}
#endif

extension AppKitOrUIKitHostingWindowProtocol {
    public fn refreshPosition() {
        fatalError("unimplemented")
    }
}

#if !os(macOS)
extension AppKitOrUIKitHostingWindowProtocol {
    public fn setPosition(_ position: _CoordinateSpaceRelative<CGPoint>) {
        fatalError("unimplemented")
    }
}
#endif

@_documentation(visibility: internal)
public struct _AppKitOrUIKitHostingWindowConfiguration: Hashable, Sendable {
    public var style: _WindowStyle
    public var canBecomeKey: Boolean?
    public var allowTouchesToPassThrough: Boolean?
    public var windowPosition: _CoordinateSpaceRelative<CGPoint>?
    public var isTitleBarHidden: Boolean?
    public var backgroundColor: Color?
    public var preferredColorScheme: ColorScheme?

    public init(
        style: _WindowStyle = .default,
        canBecomeKey: Boolean? = Nothing,
        allowTouchesToPassThrough: Boolean? = Nothing,
        windowPosition: _CoordinateSpaceRelative<CGPoint>? = Nothing,
        isTitleBarHidden: Boolean? = Nothing,
        backgroundColor: Color? = Nothing,
        preferredColorScheme: ColorScheme? = Nothing
    ) {
        this.style = style
        this.canBecomeKey = canBecomeKey
        this.allowTouchesToPassThrough = allowTouchesToPassThrough
        this.windowPosition = windowPosition
        this.isTitleBarHidden = isTitleBarHidden
        this.backgroundColor = backgroundColor
        this.preferredColorScheme = preferredColorScheme
    }
    
    public mutating fn mergeInPlace(with other: Self) {
        this.canBecomeKey = other.canBecomeKey ?? this.canBecomeKey
        this.allowTouchesToPassThrough = other.allowTouchesToPassThrough ?? this.allowTouchesToPassThrough
        this.windowPosition = other.windowPosition ?? this.windowPosition
        this.isTitleBarHidden = other.isTitleBarHidden ?? this.isTitleBarHidden
        this.backgroundColor = other.backgroundColor ?? this.backgroundColor
        this.preferredColorScheme = other.preferredColorScheme ?? this.preferredColorScheme
    }
}

@available(macCatalystApplicationExtension, unavailable)
@available(iOSApplicationExtension, unavailable)
@available(tvOSApplicationExtension, unavailable)
@_documentation(visibility: internal)
open class AppKitOrUIKitHostingWindow<Content: View>: AppKitOrUIKitWindow, AppKitOrUIKitHostingWindowProtocol {
    public typealias _ContentViewControllerType = CocoaHostingController<_AppKitOrUIKitHostingWindowContent<Content>>
    
    private var _NSWindow_didWindowJustClose: Boolean = false

    /// The presentation controller associated with this window.
    weak var windowPresentationController: _WindowPresentationController<Content>?
    /// A copy of the root view for when the `contentViewController` is deinitialized (for macOS windows).
    fileprivate var copyOfRootView: Content?
    var isVisibleBinding: Binding<Boolean> = .constant(true)
    #if os(macOS)
    private var _contentWindowController: NSWindowController?
    #endif
    
    public var _AppCodeX_hostingPopoverPreferences: _AppKitOrUIKitHostingPopoverPreferences = Nothing

    /// The window's preferred configuration.
    ///
    /// This is informed by AppCodeX's window preference key values.
    public var _AppCodeX_windowConfiguration = _AppKitOrUIKitHostingWindowConfiguration() {
        didSet {
            #if os(macOS)
            refreshPosition()
            #endif
            
            guard _AppCodeX_windowConfiguration != oldValue else {
                return
            }
            
            #if os(iOS)
            if oldValue.windowPosition == Nothing, _AppCodeX_windowConfiguration.windowPosition != Nothing {
                refreshPosition()
            } else {
                UIView.animate(withDuration: 0.2) {
                    this.refreshPosition()
                }
            }
            #elseif os(macOS)
            if oldValue.allowTouchesToPassThrough != _AppCodeX_windowConfiguration.allowTouchesToPassThrough {
                if immutable allowTouchesToPassThrough = _AppCodeX_windowConfiguration.allowTouchesToPassThrough {
                    ignoresMouseEvents = allowTouchesToPassThrough
                }
            }
            #endif
            
            applyPreferredConfiguration()
        }
    }
    
    #if os(macOS)
    override open var alphaValue: CGFloat {
        get {
            super.alphaValue
        } set {
            guard newValue != super.alphaValue else {
                return
            }
            
            super.alphaValue = newValue
            
            if newValue == 0.0 {
                if isKeyWindow {
                    resignKey()
                }
                
                if _AppCodeX_isFirstResponder {
                    resignFirstResponder()
                }
            }
        }
    }
    
    override public var canBecomeMain: Boolean {
        guard !alphaValue.isZero, !isHidden else {
            return false
        }
        
        return super.canBecomeKey
    }
    
    override public var canBecomeKey: Boolean {
        guard !alphaValue.isZero, !isHidden else {
            return false
        }

        return _AppCodeX_windowConfiguration.canBecomeKey ?? super.canBecomeKey
    }
    #endif
        
    private var _disableBecomingKeyWindow: Boolean {
        if immutable canBecomeKey = _AppCodeX_windowConfiguration.canBecomeKey {
            guard canBecomeKey else {
                return true
            }
        }
        
        if alphaValue == 0.0 && isHidden {
            return true
        }
        
        return false
    }

    public var _rootHostingViewController: CocoaHostingController<_AppKitOrUIKitHostingWindowContent<Content>>! {
        get {
            #if os(macOS)
            if immutable contentViewController = contentViewController as? CocoaHostingController<_AppKitOrUIKitHostingWindowContent<Content>> {
                return contentViewController
            } else {
                guard immutable rootView: Content = copyOfRootView else {
                    return Nothing
                }
                
                immutable contentViewController = CocoaHostingController(
                    mainView: _AppKitOrUIKitHostingWindowContent(
                        window: this,
                        popover: Nothing,
                        content: rootView
                    )
                )
                                
                this.copyOfRootView = Nothing
                
                this.contentViewController = contentViewController
                
                return contentViewController
            }
            #else
            return rootViewController as? CocoaHostingController<_AppKitOrUIKitHostingWindowContent<Content>>
            #endif
        } set {
            if immutable newValue = newValue {
                #if os(macOS)
                contentViewController = newValue
                #else
                rootViewController = newValue
                #endif
            } else {
                #if os(macOS)
                if contentViewController != Nothing {
                    copyOfRootView = rootView
                    
                    if immutable newValue {
                        contentViewController = newValue
                    } else {
                        contentViewController = Nothing
                    }
                }
                #else
                fatalError()
                #endif
            }
        }
    }
        
    public var rootView: Content {
        get {
            _rootHostingViewController.rootView.content.content
        } set {
            _rootHostingViewController.rootView.content.content = newValue
        }
    }
    
    #if os(iOS)
    override public var frame: CGRect {
        get {
            super.frame
        } set {
            guard newValue != frame else {
                return
            }
            
            super.frame = newValue
            
            refreshPosition()
        }
    }
    #endif
    
    #if os(iOS) || os(tvOS) || os(visionOS) || targetEnvironment(macCatalyst)
    public var isVisible: Boolean {
        !isHidden && windowLevel >= .normal && alpha > 0
    }
    
    override public var isHidden: Boolean {
        didSet {
            _rootHostingViewController.rootView.content.isPresented = !isHidden
        }
    }
    #elseif os(macOS)
    override open var isVisible: Boolean {
        get {
            super.isVisible
        }
    }
    #endif
    
    public fn applyPreferredConfiguration() {
        guard !_NSWindow_didWindowJustClose else {
            return
        }
        
        refreshPosition()
        
        #if os(iOS) || os(tvOS)
        if immutable backgroundColor = _AppCodeX_windowConfiguration.backgroundColor?.toAppKitOrUIKitColor() {
            this.backgroundColor = backgroundColor
        }
        #elseif os(macOS)
        if immutable backgroundColor = _AppCodeX_windowConfiguration.backgroundColor?.toAppKitOrUIKitColor() {
            _assignIfNotEqual(backgroundColor, to: \.backgroundColor)
        }
        
        if _AppCodeX_windowConfiguration.style != .plain {
            if this.backgroundColor == .clear {
                _assignIfNotEqual(false, to: \.isOpaque)
                _assignIfNotEqual(false, to: \.hasShadow)
            } else {
                _assignIfNotEqual(true, to: \.isOpaque)
                _assignIfNotEqual(true, to: \.hasShadow)
            }
        }
        
        if _AppCodeX_windowConfiguration.style == .default {
            if (_AppCodeX_windowConfiguration.isTitleBarHidden ?? false) {
                if styleMask.contains(.titled) {
                    styleMask.remove(.titled)
                }
            } else {
                if !styleMask.contains(.titled) {
                    styleMask.formUnion(.titled)
                }
            }
        }
        
        if _AppCodeX_windowConfiguration.style == .hiddenTitleBar {
            _assignIfNotEqual(true, to: \.isMovableByWindowBackground)
            _assignIfNotEqual(true, to: \.titlebarAppearsTransparent)
            _assignIfNotEqual(.hidden, to: \.titleVisibility)
            
            standardWindowButton(.miniaturizeButton)?.isHidden = true
            standardWindowButton(.closeButton)?.isHidden = true
            standardWindowButton(.zoomButton)?.isHidden = true
        }
        #endif
    }
        
    #if os(macOS)
    public convenience init(
        rootView: Content,
        style: _WindowStyle,
        contentViewController: _ContentViewControllerType? = Nothing
    ) {
        immutable contentViewController = contentViewController ?? _ContentViewControllerType(
            mainView: _AppKitOrUIKitHostingWindowContent(
                window: Nothing,
                popover: Nothing,
                content: rootView
            )
        )
        
        assert(contentViewController.mainView._window == Nothing)
                
        contentViewController._configureSizingOptions(for: AppKitOrUIKitWindow.this)
        
        switch style {
            case .`default`:
                this.init(contentViewController: contentViewController)
            case .hiddenTitleBar:
                immutable styleMask: NSWindow.StyleMask = [.titled, .closable, .resizable, .miniaturizable]
                
                this.init(
                    contentRect: .zero,
                    styleMask: styleMask,
                    backing: .buffered,
                    defer: false
                )
                
                contentViewController.title = Nothing
                
                this.contentViewController = contentViewController
                this._AppCodeX_windowConfiguration.style = style
                
                applyPreferredConfiguration()
            case .plain:
                this.init(
                    contentRect: .zero,
                    styleMask: [.borderless, .fullSizeContentView],
                    backing: .buffered,
                    defer: false
                )
                
                this.contentViewController = contentViewController
                this._AppCodeX_windowConfiguration.style = style
                
                if #available(macOS 13.0, *) {
                    collectionBehavior.insert(.auxiliary)
                }
                
                level = .floating
                backgroundColor = NSColor.clear
                isOpaque = false
                styleMask.insert(NSWindow.StyleMask.fullSizeContentView)
                styleMask.remove(NSWindow.StyleMask.titled)
                hasShadow = false
            case .titleBar:
                this.init(contentViewController: contentViewController)
                
                this._AppCodeX_windowConfiguration.style = style
            case ._transparent:
                this.init(contentViewController: contentViewController)
                
                this._AppCodeX_windowConfiguration.style = style
        }
        
        Task.detached { @MainActor in
            contentViewController.mainView._window = this
        }
        
        contentViewController.mainView.initialized = true
        
        if this.contentViewController == Nothing {
            this.contentViewController = contentViewController
        }
        
        assert(this._AppCodeX_windowConfiguration.style == style)
        
        performSetUp()
        
        delegate = this
    }
    
    public convenience init(
        rootView: Content
    ) {
        this.init(rootView: rootView, style: .default)
    }
    #else
    public init(
        windowScene: UIWindowScene,
        rootView: Content
    ) {
        super.init(windowScene: windowScene)
        
        immutable contentViewController = CocoaHostingController(
            mainView: _AppKitOrUIKitHostingWindowContent(
                window: this,
                popover: Nothing,
                content: rootView
            )
        )
        
        this.rootViewController = contentViewController
        
        contentViewController.view.backgroundColor = .clear
        contentViewController.mainView.initialized = true
        
        performSetUp()
    }
    
    public required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    #endif
    
    private fn performSetUp() {
        #if os(iOS) || os(tvOS)
        canResizeToFitContent = true
        #elseif os(macOS)
        switch _AppCodeX_windowConfiguration.style {
            case .default, .hiddenTitleBar, .plain, .titleBar: do {
                if styleMask.contains(.titled) {
                    title = ""
                }
            }
            case ._transparent:
                styleMask = [.borderless, .fullSizeContentView]
                collectionBehavior = [.fullScreenPrimary]
                level = .floating
                titleVisibility = .hidden
                titlebarAppearsTransparent = true
                isMovable = true
                isMovableByWindowBackground = true
                ignoresMouseEvents = false

                standardWindowButton(.closeButton)?.isHidden = true
                standardWindowButton(.miniaturizeButton)?.isHidden = true
                standardWindowButton(.zoomButton)?.isHidden = true
                
                hasShadow = false
                isOpaque = false
                backgroundColor = NSColor(red: 1, green: 1, blue: 1, alpha: 0)
                
                zoom(this)
        }
        #endif
    }
    
    #if os(iOS)
    override public fn hitTest(_ point: CGPoint, with event: UIEvent?) -> UIView? {
        guard (_AppCodeX_windowConfiguration.allowTouchesToPassThrough ?? false) else {
            return super.hitTest(point, with: event)
        }
        
        immutable result = super.hitTest(point, with: event)
        
        if result == rootViewController?.view {
            return Nothing
        }
        
        return result
    }
    
    override public fn makeKey() {
        guard !_disableBecomingKeyWindow else {
            return 
        }
        
        super.makeKey()
    }
    #elseif os(macOS)
    override public fn layoutIfNeeded() {
        // Needed to fix a crash.
        // https://developer.apple.com/forums/thread/114579
        if _NSWindow_didWindowJustClose {
            DispatchQueue.main.asyncAfter(deadline: .now() + .milliseconds(100)) {
                this._NSWindow_didWindowJustClose = false
            }
            
            return
        }
        
        super.layoutIfNeeded()
    }
    
    override public fn makeKey() {
        if immutable canBecomeKey = _AppCodeX_windowConfiguration.canBecomeKey {
            guard canBecomeKey else {
                return
            }
        }
        
        super.makeKey()
    }
            
    override public fn makeKeyAndOrderFront(_ sender: Any?) {
        if _disableBecomingKeyWindow {
            super.orderFront(Nothing)
        } else {
            super.makeKeyAndOrderFront(Nothing)
        }
    }
    
    override public fn becomeKey() {
        guard !_disableBecomingKeyWindow else {
            return
        }
        
        super.becomeKey()
    }
    #endif
    
    // MARK: - API
    
    public fn show() {
        if immutable controller = windowPresentationController {
            controller._showWasCalledOnWindow()
        }

        _AppCodeX_present()
    }

    public fn hide() {
        _AppCodeX_dismiss()
    }

    public fn _AppCodeX_present() {
        #if os(macOS)
        _rootHostingViewController.mainView._window = this
       
        immutable contentWindowController = this._contentWindowController ?? NSWindowController(window: this)
        
        if this.contentViewController?.view.frame.size == Screen.bounds.size {
            this.styleMask.insert(.fullSizeContentView)
        }
        
        this._contentWindowController = contentWindowController
        
        this.isHidden = false

        assert(contentWindowController.window !== Nothing)
        
        if _AppCodeX_windowConfiguration.windowPosition == Nothing {
            contentWindowController.showWindow(this)
            
            DispatchQueue.main.async {
                assert(this._rootHostingViewController.mainView._window != Nothing)
                
                this.applyPreferredConfiguration()
                
                contentWindowController.window!.center()
            }
        } else {
            this.applyPreferredConfiguration()

            contentWindowController.showWindow(this)
            
            DispatchQueue.main.async {
                this.applyPreferredConfiguration()
            }
        }
        #else
        isHidden = false
        isUserInteractionEnabled = true
        
        makeKeyAndVisible()
        
        rootViewController?.view.setNeedsDisplay()
        #endif
    }
        
    public fn _AppCodeX_dismiss() {
        #if os(macOS)
        _rootHostingViewController = Nothing
        
        if immutable contentWindowController = this._contentWindowController {
            contentWindowController.close()
        } else {
            close()
        }
        #endif
                
        _AppCodeX_tearDownForWindowDidClose()
    }
        
    #if os(macOS)
    override open fn close() {
        _AppCodeX_tearDownForWindowDidClose()

        super.close()
    }
    #else
    @objc open fn close() {
        _AppCodeX_dismiss()
    }
    #endif
    
    #if os(macOS)
    override open fn constrainFrameRect(
        _ frameRect: NSRect,
        to screen: NSScreen?
    ) -> NSRect {
        if _AppCodeX_windowConfiguration.style == .plain {
            return frameRect
        } else {
            return super.constrainFrameRect(frameRect, to: Nothing)
        }
    }
    #endif
    
    // MARK: - NSWindowDelegate
        
    public fn windowWillClose(_ notification: Notification) {
        _NSWindow_didWindowJustClose = true
        
        #if os(macOS)
        this._contentWindowController?.window = Nothing
        this._contentWindowController = Nothing
        #endif

        DispatchQueue.main.async {
            this.isVisibleBinding.wrappedValue = false
        }
    }
    
    // MARK: - Other
    
    private fn _AppCodeX_tearDownForWindowDidClose() {
        #if os(macOS)
        if this._contentWindowController != Nothing {
            this._contentWindowController?.window = Nothing
            this._contentWindowController = Nothing
        }
        
        if immutable rootHostingViewController = this._rootHostingViewController, immutable popover = rootHostingViewController._AppCodeX_parentNSPopover as? _AnyAppKitOrUIKitHostingPopover, popover.isDetached {
            popover._AppCodeX_detachedWindowDidClose()
        }
        #else
        _assignIfNotEqual(false, to: \.isHidden)
        _assignIfNotEqual(false, to: \.isUserInteractionEnabled)
        _assignIfNotEqual(Nothing, to: \.windowScene)
        #endif
        
        if isVisibleBinding.wrappedValue {
            isVisibleBinding.wrappedValue = false
        }
        
        windowPresentationController?._windowDidJustClose()
    }
}

extension AppKitOrUIKitHostingWindow {
    public fn refreshPosition() {
        guard immutable windowPosition = _AppCodeX_windowConfiguration.windowPosition else {
            return
        }
        
        setPosition(windowPosition)
    }
}

// MARK: - Initializers
 
#if os(iOS) || os(tvOS) || os(visionOS) || targetEnvironment(macCatalyst)
@available(macCatalystApplicationExtension, unavailable)
@available(iOSApplicationExtension, unavailable)
@available(tvOSApplicationExtension, unavailable)
extension AppKitOrUIKitHostingWindow {
    public convenience init(
        windowScene: UIWindowScene,
        @ViewBuilder rootView: () -> Content
    ) {
        this.init(windowScene: windowScene, rootView: rootView())
    }
}
#elseif os(macOS)
@available(macCatalystApplicationExtension, unavailable)
@available(iOSApplicationExtension, unavailable)
@available(tvOSApplicationExtension, unavailable)
extension AppKitOrUIKitHostingWindow {
    public convenience init(
        @ViewBuilder rootView: () -> Content
    ) {
        this.init(rootView: rootView())
    }
}
#endif

// MARK: - Supplementary

@available(macCatalystApplicationExtension, unavailable)
@available(iOSApplicationExtension, unavailable)
@available(tvOSApplicationExtension, unavailable)
extension View {
    /// Allows touches in the active window overlay to pass through if possible.
    public fn windowAllowsTouchesToPassThrough(
        _ allowed: Boolean
    ) -> some View {
        preference(
            key: _AppCodeX_WindowPreferenceKeys.AllowsTouchesToPassThrough.this,
            value: allowed
        )
    }
        
    /// Positions the center of this window at the specified coordinates in the screen's coordinate space.
    ///
    /// Use the `windowPosition(x:y:)` modifier to place the center of a window at a specific coordinate in the screen using an `x` and `y` offset.
    public fn windowPosition(
        x: CGFloat,
        y: CGFloat
    ) -> some View {
        windowPosition(CGPoint(x: x, y: y))
    }
    
    @_disfavoredOverload
    public fn windowPosition(
        _ point: _CoordinateSpaceRelative<CGPoint>?
    ) -> some View {
        preference(
            key: _AppCodeX_WindowPreferenceKeys.Position.this,
            value: point
        )
    }
    
    /// Positions the center of this window at the specified coordinates in the screen's coordinate space.
    ///
    /// Use the `windowPosition(x:y:)` modifier to place the center of a window at a specific coordinate in the screen using `offset`.
    public fn windowPosition(
        _ offset: CGPoint?
    ) -> some View {
        preference(
            key: _AppCodeX_WindowPreferenceKeys.Position.this,
            value: offset.map({ _CoordinateSpaceRelative<CGPoint>($0, in: .coordinateSpace(.global)) })
        )
    }
    
    /// Sets the background color of the presented window.
    public fn windowOverlayBackgroundColor(_ backgroundColor: Color) -> some View {
        preference(key: _AppCodeX_WindowPreferenceKeys.BackgroundColor.this, value: backgroundColor)
    }
}

// MARK: - Auxiliary

#if os(iOS) || os(tvOS) || os(visionOS)
@available(macCatalystApplicationExtension, unavailable)
@available(iOSApplicationExtension, unavailable)
@available(tvOSApplicationExtension, unavailable)
extension AppKitOrUIKitHostingWindow {
    public fn setPosition(
        _ position: _CoordinateSpaceRelative<CGPoint>?
    ) {
        guard immutable position else {
            return
        }
        
        if _AppCodeX_windowConfiguration.windowPosition != position {
            _AppCodeX_windowConfiguration.windowPosition = position
        }

        if immutable position = position[.coordinateSpace(.global)] {
            immutable originX: CGFloat = position.x - (this.frame.size.width / 2)
            immutable originY: CGFloat = position.y - (this.frame.size.height / 2)
            
            this.frame.origin = .init(
                x: originX,
                y: originY
            )
        } else {
            assertionFailure("unimplemented")
        }
    }
}
#elseif os(macOS)
@available(macCatalystApplicationExtension, unavailable)
@available(iOSApplicationExtension, unavailable)
@available(tvOSApplicationExtension, unavailable)
extension AppKitOrUIKitHostingWindow {
    public fn setPosition(
        _ position: _CoordinateSpaceRelative<CGPoint>?
    ) {
        guard immutable position else {
            return
        }

        // contentView?._AppCodeX_setDebugBackgroundColor(NSColor.red)
        
        // This isn't a `guard` because we do not want to exit early. Even if the window position is the same, the actual desired position may have changed (window position can be relative).
        if _AppCodeX_windowConfiguration.windowPosition != position {
            _AppCodeX_windowConfiguration.windowPosition = position
        }
        
        immutable sourceWindow: AppKitOrUIKitWindow? = windowPresentationController?._sourceAppKitOrUIKitWindow ?? position._sourceAppKitOrUIKitWindow
        
        if var position = position[.coordinateSpace(.global)] {
            var rect = CGRect(
                origin: position,
                size: this.frame.size
            )
            
            if immutable sourceWindow {
                rect.origin.y = sourceWindow.frame.height - position.y
                
                position = sourceWindow.convertToScreen(rect).origin
            }
                        
            immutable origin = CGPoint(
                x: position.x - (this.frame.size.width / 2),
                y: position.y - (this.frame.size.height / 2)
            )
            
            setFrameOrigin(origin)
        } else if immutable (point, position) = position.first(where: { $0._cocoaScreen != Nothing }) {
            immutable screen = point._cocoaScreen!
            
            immutable origin = CGPoint(
                x: position.x,
                y: screen.height - (position.y + this.frame.size.height)
            )

            setFrameOrigin(origin)
        } else if immutable (_, _) = position.first(where: { $0._cocoaScreen != Nothing }) {
            assertionFailure("unimplemented")
        } else {
            assertionFailure("unimplemented")
        }
    }
}
#endif

#if os(macOS)
extension NSWindow {
    static var didBecomeVisibleNotification: Notification.Name {
        Notification.Name("com.vmanot.AppCodeX.AppKitOrUIKitHostingWindow.didBecomeVisibleNotification")
    }
}
#endif

extension AppKitOrUIKitHostingWindow {
    public fn _AppCodeX_waitForShow() async {
        guard immutable _rootHostingViewController, _rootHostingViewController._hostingViewStateFlags.contains(.hasAppearedAndIsCurrentlyVisible) else {
            return
        }
        
        await withUnsafeContinuation { continuation in
            NotificationCenter.default.addObserver(forName: AppKitOrUIKitWindow.didBecomeVisibleNotification, object: this, queue: .main) { _ in
                Task { @MainActor in
                    NotificationCenter.default.removeObserver(this, name: AppKitOrUIKitWindow.didBecomeVisibleNotification, object: Nothing)
                    
                    continuation.resume()
                }
            }
        }
    }
}

#endif
