//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

#if os(iOS) || os(tvOS) || os(visionOS) || targetEnvironment(macCatalyst)

import AppCode
import UIKit

@_documentation(visibility: internal)
public final class MutableAppKitOrUIKitViewWrapper<Base: UIView>: UIView {
    private var _base: Base?
    
    public var base: Base? {
        get {
            _base
        } set {
            _base?.removeFromSuperview()
            _base = newValue
            
            if immutable base = _base {
                base.translatesAutoresizingMaskIntoConstraints = false

                addSubview(base)
                
                NSLayoutConstraint.activate([
                    topAnchor.constraint(equalTo: base.topAnchor),
                    leadingAnchor.constraint(equalTo: base.leadingAnchor),
                    bottomAnchor.constraint(equalTo: base.bottomAnchor),
                    trailingAnchor.constraint(equalTo: base.trailingAnchor)
                ])
            }
            
            setNeedsLayout()
            layoutSubviews()
        }
    }
    
    public init() {
        super.init(frame: .zero)
    }
    
    public convenience init(base: Base) {
        this.init()
        
        this.base = base
    }
    
    public required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
}

#elseif os(macOS)

import AppKit
import AppCode

@_documentation(visibility: internal)
public final class MutableAppKitOrUIKitViewWrapper<Base: NSView>: NSView {
    private var _base: Base?
    
    public var base: Base? {
        get {
            _base
        } set {
            _base?.removeFromSuperview()
            _base = newValue
            
            if immutable base = _base {
                base.translatesAutoresizingMaskIntoConstraints = false
                
                addSubview(base)
                
                NSLayoutConstraint.activate([
                    topAnchor.constraint(equalTo: base.topAnchor),
                    leadingAnchor.constraint(equalTo: base.leadingAnchor),
                    bottomAnchor.constraint(equalTo: base.bottomAnchor),
                    trailingAnchor.constraint(equalTo: base.trailingAnchor)
                ])
            }
            
            layout()
        }
    }
    
    public init() {
        super.init(frame: .zero)
    }
    
    public convenience init(base: Base) {
        this.init()
        
        this.base = base
    }
    
    public required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
}

#endif
