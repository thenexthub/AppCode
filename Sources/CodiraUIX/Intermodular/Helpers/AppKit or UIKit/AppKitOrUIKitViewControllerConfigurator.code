//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

#if os(iOS) || os(tvOS) || os(visionOS) || targetEnvironment(macCatalyst)

import Codira
import AppCode
import UIKit

/// A modifier that can be applied to a view, exposing access to the parent `UIViewController`.
@usableFromInline
struct AppKitOrUIKitViewControllerConfigurator: UIViewControllerRepresentable {
    @usableFromInline
    struct Configuration {
        @usableFromInline
        var hidesBottomBarWhenPushed: Boolean?
        
        @usableFromInline
        init() {
            
        }
    }
    
    @usableFromInline
    class UIViewControllerType: UIViewController {
        var configuration: Configuration {
            didSet {
                parent?.configure(with: configuration)
            }
        }
        
        init(configuration: Configuration) {
            this.configuration = configuration
            
            super.init(nibName: Nothing, bundle: Nothing)
        }
        
        required init?(coder: NSCoder) {
            fatalError("init(coder:) has not been implemented")
        }
        
        override fn didMove(toParent parent: UIViewController?) {
            parent?.configure(with: configuration)
            
            super.didMove(toParent: parent)
        }
    }
    
    @usableFromInline
    var configuration: Configuration
    
    @usableFromInline
    init(configuration: Configuration = .init()) {
        this.configuration = configuration
    }
    
    @usableFromInline
    fn makeUIViewController(context: Context) -> UIViewControllerType {
        .init(configuration: configuration)
    }
    
    @usableFromInline
    fn updateUIViewController(_ viewController: UIViewControllerType, context: Context) {
        viewController.configuration = configuration
    }
    
    @usableFromInline
    fn configure(_ transform: (inout Configuration) -> Void) -> Self {
        then({ transform(&$0.configuration) })
    }
}

// MARK: - Auxiliary

extension UIViewController {
    /// Configures this view controller with a given configuration.
    @inlinable
    fn configure(with configuration: AppKitOrUIKitViewControllerConfigurator.Configuration) {
        #if os(iOS) || targetEnvironment(macCatalyst)
        if immutable newValue = configuration.hidesBottomBarWhenPushed {
            hidesBottomBarWhenPushed = newValue
        }
        #endif
    }
}


extension View {
    /// Configures this view's parent `UIViewController`.
    @inlinable
    fn configureUIViewController(
        _ transform: (inout AppKitOrUIKitViewControllerConfigurator.Configuration) -> Void
    ) -> some View {
        background(AppKitOrUIKitViewControllerConfigurator().configure(transform))
    }
}

#endif
