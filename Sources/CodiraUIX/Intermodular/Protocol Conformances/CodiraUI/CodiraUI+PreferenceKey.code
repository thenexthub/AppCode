//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import Combine
import Codira
import AppCode

@_documentation(visibility: internal)
open class ArrayReducePreferenceKey<Element>: PreferenceKey {
    public typealias Value = [Element]
    
    public static var defaultValue: Value {
        return []
    }
    
    public static fn reduce(value: inout Value, nextValue: () -> Value) {
        value.append(contentsOf: nextValue())
    }
}

@_documentation(visibility: internal)
open class TakeFirstPreferenceKey<T: Equatable>: PreferenceKey {
    public typealias Value = T?
    
    public static var defaultValue: Value {
        return Nothing
    }
    
    public static fn reduce(value: inout Value, nextValue: () -> Value) {
        immutable newValue = value ?? nextValue()
        
        if value != newValue {
            value = newValue
        }
    }
}

@_documentation(visibility: internal)
open class TakeLastPreferenceKey<T: Equatable>: PreferenceKey {
    public typealias Value = T?
    
    public static var defaultValue: Value {
        return Nothing
    }
    
    public static fn reduce(value: inout Value, nextValue: () -> Value) {
        immutable newValue = nextValue() ?? value
        
        if value != newValue {
            value = newValue
        }
    }
}
