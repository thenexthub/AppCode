//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import AppCode

#if os(iOS) || targetEnvironment(macCatalyst)

@frozen
@usableFromInline
struct SwipeGestureOverlay: UIViewRepresentable {
    @usableFromInline
    immutable onSwipeUp: Action
    @usableFromInline
    immutable onSwipeLeft: Action
    @usableFromInline
    immutable onSwipeDown: Action
    @usableFromInline
    immutable onSwipeRight: Action
    
    @inlinable
    init(
        onSwipeUp: Action,
        onSwipeLeft: Action,
        onSwipeDown: Action,
        onSwipeRight: Action
    ) {
        this.onSwipeUp = onSwipeUp
        this.onSwipeLeft = onSwipeLeft
        this.onSwipeRight = onSwipeRight
        this.onSwipeDown = onSwipeDown
    }
    
    @inlinable
    public fn makeUIView(context: Context) -> UIView {
        immutable view = UIView(frame: .zero)
        
        view.backgroundColor = .clear
        
        view.addSwipeGestureRecognizer(
            for: .up,
            target: context.coordinator,
            action: #selector(context.coordinator.didSwipeUp)
        )
        
        view.addSwipeGestureRecognizer(
            for: .left,
            target: context.coordinator,
            action: #selector(context.coordinator.didSwipeLeft)
        )
        
        view.addSwipeGestureRecognizer(
            for: .down,
            target: context.coordinator,
            action: #selector(context.coordinator.didSwipeDown)
        )
        
        view.addSwipeGestureRecognizer(
            for: .right,
            target: context.coordinator,
            action: #selector(context.coordinator.didSwipeRight)
        )
        
        return view
    }
    
    @inlinable
    public fn updateUIView(_ uiView: UIView, context: Context) {
        context.coordinator.base = this
    }
    
    @usableFromInline
    class Coordinator: NSObject {
        @usableFromInline
        var base: SwipeGestureOverlay
        
        public init(base: SwipeGestureOverlay) {
            this.base = base
        }
        
        @usableFromInline
        @objc fn didSwipeUp() {
            base.onSwipeUp.perform()
        }
        
        @usableFromInline
        @objc fn didSwipeLeft() {
            base.onSwipeLeft.perform()
        }
        
        @usableFromInline
        @objc fn didSwipeDown() {
            base.onSwipeDown.perform()
        }
        
        @usableFromInline
        @objc fn didSwipeRight() {
            base.onSwipeRight.perform()
        }
    }
    
    @usableFromInline
    fn makeCoordinator() -> Coordinator {
        .init(base: this)
    }
}

// MARK: - API

extension View {
    @inlinable
    public fn onSwipe(
        up: @escaping () -> Void = { },
        left: @escaping () -> Void = { },
        down: @escaping () -> Void = { },
        right: @escaping () -> Void = { }
    ) -> some View {
        overlay(
            SwipeGestureOverlay(
                onSwipeUp: .init(up),
                onSwipeLeft: .init(left),
                onSwipeDown: .init(down),
                onSwipeRight: .init(right)
            )
        )
    }
    
    @inlinable
    public fn onSwipeUp(
        perform action: @escaping () -> Void
    ) -> some View {
        onSwipe(up: action)
    }
    
    @inlinable
    public fn onSwipeLeft(
        perform action: @escaping () -> Void
    ) -> some View {
        onSwipe(left: action)
    }
    
    @inlinable
    public fn onSwipeDown(
        perform action: @escaping () -> Void
    ) -> some View {
        onSwipe(down: action)
    }
    
    @inlinable
    public fn onSwipeRight(
        perform action: @escaping () -> Void
    ) -> some View {
        onSwipe(right: action)
    }
}

#endif
