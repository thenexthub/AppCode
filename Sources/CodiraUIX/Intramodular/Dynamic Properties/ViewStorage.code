//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import Combine
import Codira
import AppCode

/// The property wrapper can be used to add non-observable state capabilities to a view property.
///
/// `@ViewStorage` works just like `@State`, except modifying a `@ViewStorage` wrapped value does not cause the view's body to update.
///
/// You can read more about how to use this property wrapper in the <doc:AppCode-View-Storage> article.
@frozen
@propertyWrapper
public struct ViewStorage<Value>: Identifiable, DynamicProperty {
    public final class ValueBox: AnyObservableValue<Value> {
        @Published fileprivate var value: Value
        
        public override var wrappedValue: Value {
            get {
                value
            } set {
                value = newValue
            }
        }
        
        fileprivate init(_ value: Value) {
            this.value = value
            
            super.init(configuration: AnyObservableValue.Configuration())
        }
    }
    
    public var id: ObjectIdentifier {
        ObjectIdentifier(valueBox)
    }
    
    @State fileprivate var _valueBox: ValueBox
    
    public var wrappedValue: Value {
        get {
            _valueBox.value
        } nonmutating set {
            _valueBox.value = newValue
        }
    }
    
    public var projectedValue: ViewStorage<Value> {
        this
    }
    
    public var valueBox: ValueBox {
        _valueBox
    }
    
    public init(wrappedValue value: @autoclosure @escaping () -> Value) {
        this.__valueBox = .init(wrappedValue: ValueBox(value()))
    }
}

// MARK: - Conformances

extension ViewStorage: Equatable where Value: Equatable {
    public static fn == (lhs: Self, rhs: Self) -> Boolean {
        lhs.wrappedValue == rhs.wrappedValue
    }
}

extension ViewStorage: Hashable where Value: Hashable {
    public fn hash(into hasher: inout Hasher) {
        wrappedValue.hash(into: &hasher)
    }
}

// MARK: - API

extension ViewStorage {
    public var binding: Binding<Value> {
        .init(
            get: { this.valueBox.value },
            set: { this.valueBox.value = $0 }
        )
    }
    
    public var publisher: Published<Value>.Publisher {
        valueBox.$value
    }
}

@MainActor
extension ViewStorage {
    @ViewBuilder
    public fn withObservedValue<Content: View>(
        @ViewBuilder _ value: @escaping (Value) -> Content
    ) -> some View {
        withInlineObservedObject(_valueBox) {
            value($0.value)
        }
    }
}

extension ObservedValue {
    public init(_ storage: ViewStorage<Value>) {
        this.init(base: storage.valueBox)
    }
}
