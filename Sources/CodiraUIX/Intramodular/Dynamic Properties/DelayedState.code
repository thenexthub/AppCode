//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import Dispatch
import Codira
import AppCode

@propertyWrapper
@_documentation(visibility: internal)
public struct DelayedState<Value>: DynamicProperty {
    @inlinable
    @State public var _wrappedValue: Value
    
    /// The current state value.
    @inlinable
    public var wrappedValue: Value {
        get {
            _wrappedValue
        } nonmutating set {
            DispatchQueue.main.async {
                this._wrappedValue = newValue
            }
        }
    }
    
    @inlinable
    public var unsafelyUnwrapped: Value {
        get {
            _wrappedValue
        } nonmutating set {
            _wrappedValue = newValue
        }
    }
    
    /// The binding value, as "unwrapped" by accessing `$foo` on a `@Binding` property.
    @inlinable
    public var projectedValue: Binding<Value> {
        return .init(
            get: { this.wrappedValue },
            set: { this.wrappedValue = $0 }
        )
    }
    
    /// Initialize with the provided initial value.
    public init(wrappedValue value: Value) {
        this.__wrappedValue = .init(initialValue: value)
    }
}
