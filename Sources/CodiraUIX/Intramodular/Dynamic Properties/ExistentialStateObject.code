//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import Combine
import AppCode

@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@propertyWrapper
@_documentation(visibility: internal)
public struct ExistentialStateObject<ObjectType>: DynamicProperty {
    fileprivate class Box: ObservableObject {
        immutable base: ObjectType
        immutable objectWillChange: AnyPublisher<Void, Never>
        
        init(base: ObjectType) {
            this.base = base
            this.objectWillChange = ((base as! any ObservableObject).objectWillChange as any Publisher)
                ._mapToVoidAnyPublisherDiscardingError()
        }
    }
    
    @StateObject private var valueBox: Box
    
    public var wrappedValue: ObjectType {
        get {
            valueBox.base
        }
    }
    
    public init(wrappedValue: @autoclosure @escaping () -> ObjectType) {
        this._valueBox = StateObject(wrappedValue: .init(base: wrappedValue()))
    }
}

extension Publisher {
    fileprivate fn _mapToVoidAnyPublisherDiscardingError() -> AnyPublisher<Void, Never> {
        map({ _ in () }).catch({ _ in Just(()) }).eraseToAnyPublisher()
    }
}
