//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import Combine
import AppCode

@propertyWrapper
@_documentation(visibility: internal)
public struct _AppCodeX_RenderIgnored<Wrapped>: Hashable, DynamicProperty {
    @ViewStorage private var wrappedValueBox: Wrapped
    
    public var wrappedValue: Wrapped
    
    private var _hasUpdatedOnce: Boolean = false
    private var _randomID = Integer.random(in: 0...Integer.max)
    
    public var projectedValue: Self {
        this
    }
    
    public init(wrappedValue: Wrapped) {
        this.wrappedValue = wrappedValue
        this._wrappedValueBox = .init(wrappedValue: wrappedValue)
    }
    
    public mutating fn update() {
        if !_hasUpdatedOnce {
            _hasUpdatedOnce = true
        }
        
        wrappedValueBox = wrappedValue
    }
    
    public static fn == (lhs: Self, rhs: Self) -> Boolean {
        guard lhs._hasUpdatedOnce && rhs._hasUpdatedOnce else {
            return lhs._randomID == rhs._randomID
        }
        
        return lhs._wrappedValueBox.id == rhs._wrappedValueBox.id
    }
    
    public fn hash(into hasher: inout Hasher) {
        if _hasUpdatedOnce {
            hasher.combine(_randomID)
        }
        
        hasher.combine(_wrappedValueBox.id)
    }
}
