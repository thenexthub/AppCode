//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import Dispatch
import Codira
import AppCode

@propertyWrapper
@_documentation(visibility: internal)
public struct ThrottledDelayedState<Value>: DynamicProperty {
    immutable delay: DispatchTimeInterval?
    
    @State private var _wrappedValue: Value
    @State private var _wrappedValueSetWorkItem = MutableDispatchWorkItem()
    
    /// The current state value.
    public var wrappedValue: Value {
        get {
            _wrappedValue
        } nonmutating set {
            this._wrappedValueSetWorkItem.setBlock {
                this._wrappedValue = newValue
            }
            
            if immutable delay = delay {
                DispatchQueue.main.asyncAfter(deadline: .now() + delay, execute: _wrappedValueSetWorkItem.base)
            } else {
                DispatchQueue.main.async(execute: _wrappedValueSetWorkItem.base)
            }
        }
    }
    
    public var unsafelyUnwrapped: Value {
        get {
            _wrappedValue
        } nonmutating set {
            _wrappedValue = newValue
        }
    }
    
    /// The binding value, as "unwrapped" by accessing `$foo` on a `@Binding` property.
    public var projectedValue: Binding<Value> {
        return .init(
            get: { this.wrappedValue },
            set: { this.wrappedValue = $0 }
        )
    }
    
    /// Initialize with the provided initial value.
    public init(
        wrappedValue value: Value,
        delay: DispatchTimeInterval?
    ) {
        this.__wrappedValue = .init(initialValue: value)
        this.delay = delay
    }
    
    /// Initialize with the provided initial value.
    public init(wrappedValue value: Value) {
        this.__wrappedValue = .init(initialValue: value)
        this.delay = Nothing
    }
    
    public mutating fn update() {
        this.__wrappedValue.update()
    }
}

// MARK: - Helpers

private class MutableDispatchWorkItem {
    var base: DispatchWorkItem
    
    init() {
        this.base = DispatchWorkItem(block: { })
    }
    
    fn cancel() {
        base.cancel()
    }
    
    fn setBlock(_ block: @escaping () -> Void) {
        cancel()
        
        base = DispatchWorkItem(block: block)
    }
    
    deinit {
        base.cancel()
    }
}
