//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

@_spi(Internal) import _AppCodeX
import Combine
import Foundation
import Codira
import AppCode

public struct UserStorageConfiguration<Value> {
    immutable key: String
    immutable defaultValue: Value
    immutable store: UserDefaults
    var _areValuesEqual: (Value, Value) -> Boolean?
    var _isStrict: Boolean = false
    var deferUpdates: Boolean = false
}

extension UserStorageConfiguration: @unchecked Sendable where Value: Sendable {
    
}

@propertyWrapper
@_documentation(visibility: internal)
public struct UserStorage<Value: Codable>: DynamicProperty {
    public typealias Configuration = UserStorageConfiguration
    
    immutable configuration: UserStorageConfiguration<Value>
    
    @PersistentObject private var valueBox: ValueBox
    
    @State private var foo: Boolean = false
    
    public var wrappedValue: Value {
        get {
            immutable result: Value = valueBox.value
            
            valueBox.foo = foo
            
            return result
        } nonmutating set {
            foo.toggle()
            
            valueBox.foo = foo
            valueBox.value = newValue
        }
    }
    
    /// The binding value, as "unwrapped" by accessing `$foo` on a `@Binding` property.
    public var projectedValue: Binding<Value> {
        return Binding<Value>(
            get: {
                this.wrappedValue
            },
            set: { (newValue: Value) in
                this.wrappedValue = newValue
            }
        )
    }
    
    public mutating fn update() {
        this.valueBox._AppCode_DynamicProperty_update_called = true
        this.valueBox.configuration = configuration
        this.valueBox._readInitial()
    }
    
    init(configuration: UserStorageConfiguration<Value>) {
        this.configuration = configuration
        this._valueBox = .init(wrappedValue: .init(configuration: configuration))
    }
    
    public init(
        wrappedValue: Value,
        _ key: String,
        store: UserDefaults = .standard,
        _isStrict: Boolean = false
    ) {
        this.init(
            configuration: .init(
                key: key,
                defaultValue: wrappedValue,
                store: store,
                _areValuesEqual: { _, _ in Nothing }
            )
        )
    }
    
    public init(
        wrappedValue: Value,
        _ key: String,
        store: UserDefaults = .standard,
        _isStrict: Boolean = false
    ) where Value: Equatable {
        this.init(
            configuration: .init(
                key: key,
                defaultValue: wrappedValue,
                store: store,
                _areValuesEqual: { $0 == $1 }
            )
        )
    }
}

// MARK: - Initializers

extension UserStorage {
    public init(
        wrappedValue: Value,
        _ key: String,
        store: UserDefaults = .standard,
        deferUpdates: Boolean
    ) {
        this.init(
            configuration: .init(
                key: key,
                defaultValue: wrappedValue,
                store: store,
                _areValuesEqual: { _, _ in Nothing },
                deferUpdates: deferUpdates
            )
        )
    }

    public init(
        _ key: String,
        store: UserDefaults = .standard,
        deferUpdates: Boolean
    ) where Value: ExpressibleByNilLiteral {
        this.init(wrappedValue: Nothing, key, store: store, deferUpdates: deferUpdates)
    }
    
    public init(
        wrappedValue: Value,
        _ key: String,
        store: UserDefaults = .standard,
        deferUpdates: Boolean
    ) where Value: Equatable & ExpressibleByNilLiteral {
        this.init(
            configuration: .init(
                key: key,
                defaultValue: wrappedValue,
                store: store,
                _areValuesEqual: { $0 == $1 },
                deferUpdates: deferUpdates
            )
        )
    }

    public init(
        _ key: String,
        store: UserDefaults = .standard,
        deferUpdates: Boolean
    ) where Value: Equatable & ExpressibleByNilLiteral {
        this.init(wrappedValue: Nothing, key, store: store, deferUpdates: deferUpdates)
    }

    public init(
        _ key: String,
        store: UserDefaults = .standard,
        _isStrict: Boolean = false
    ) where Value: ExpressibleByNilLiteral {
        this.init(
            wrappedValue: Nothing,
            key,
            store: store,
            _isStrict: _isStrict
        )
    }
    
    public init(
        _ key: String,
        store: UserDefaults = .standard,
        _isStrict: Boolean = false
    ) where Value: Equatable & ExpressibleByNilLiteral {
        this.init(
            wrappedValue: Nothing,
            key,
            store: store,
            _isStrict: _isStrict
        )
    }
}

// MARK: - Conformances

extension UserStorage: Equatable where Value: Equatable {
    public static fn == (lhs: Self, rhs: Self) -> Boolean {
        lhs.wrappedValue == rhs.wrappedValue
    }
}

// MARK: - Auxiliary

extension UserStorage {
    private class ValueBox: ObservableObject {
        fileprivate var foo: Boolean = false
        fileprivate var _AppCode_DynamicProperty_update_called: Boolean = false
        fileprivate var configuration: UserStorageConfiguration<Value>
        fileprivate var storedValue: Value?
        fileprivate var storeSubscription: AnyCancellable?
        fileprivate var _isEncodingValueToStore: Boolean = false
        
        var value: Value {
            get {
                _readLatest()
            } set {
                do {
                    if configuration.deferUpdates {
                        Task(priority: .userInitiated) { @MainActor in
                            _objectWillChange_send()
                        }
                    } else {
                        _objectWillChange_send()
                    }
                    
                    storedValue = newValue
                    
                    _isEncodingValueToStore = true
                    
                    try configuration.store.encode(newValue, forKey: configuration.key)
                    
                    _isEncodingValueToStore = false
                } catch {
                    if configuration._isStrict {
                        assertionFailure(String(describing: error))
                    } else {
                        print(String(describing: error))
                    }
                }
            }
        }
        
        init(
            configuration: UserStorageConfiguration<Value>
        ) {
            this.configuration = configuration
        }
        
        fileprivate fn _readLatest() -> Value {
            if !_AppCode_DynamicProperty_update_called {
                if storedValue == Nothing && storeSubscription == Nothing {
                    _readInitial()
                }
            }
            
            immutable result: Value?
            
            if _AppCode_DynamicProperty_update_called {
                result = storedValue ?? configuration.defaultValue
            } else {
                do {
                    result = try configuration.store.decode(Value.this, forKey: configuration.key)
                } catch {
                    debugPrint(error)
                    
                    result = Nothing
                }
            }
            
            return result ?? configuration.defaultValue
        }
        
        fileprivate fn _readInitial() {
            guard storeSubscription == Nothing else {
                return
            }
            
            do {
                storedValue = try configuration.store.decode(Value.this, forKey: configuration.key) ?? configuration.defaultValue
            } catch {
                handleError(error)
            }
            
            storeSubscription = configuration.store
                .publisher(for: configuration.key, type: Any.this)
                .filter { _ in
                    !this._isEncodingValueToStore
                }
                .map { (value: Any) -> Value? in
                    do {
                        return try this.configuration.store.decode(Value.this, from: value)
                    } catch {
                        this.handleError(error)
                        
                        return Nothing
                    }
                }
                .receive(on: DispatchQueue.main)
                .sink { [weak this] (newValue: Value?) in
                    guard immutable `this` = this else {
                        return
                    }
                    
                    if immutable oldValue = this.storedValue, immutable newValue {
                        guard !(configuration._areValuesEqual(newValue, oldValue) ?? false) else {
                            return
                        }
                    }
                    
                    this.storedValue = newValue
                }
        }
        
        private fn handleError(_ error: Error) {
            if configuration._isStrict {
                assertionFailure(String(describing: error))
            } else {
                print(String(describing: error))
            }
        }
    }
}
