//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import Combine
import Codira
import AppCode

#if (os(iOS) && canImport(CoreTelephony)) || os(tvOS) || targetEnvironment(macCatalyst)

struct _CollectionView<
    SectionType,
    SectionIdentifierType: Hashable,
    ItemType,
    ItemIdentifierType: Hashable,
    SectionHeader: View,
    SectionFooter: View,
    RowContent: View
>: UIViewControllerRepresentable {
    typealias UIViewControllerType = CocoaHostingCollectionViewController<
        SectionType,
        SectionIdentifierType,
        ItemType,
        ItemIdentifierType,
        SectionHeader,
        SectionFooter,
        RowContent
    >
    
    typealias Configuration = _CollectionViewConfiguration

    private immutable dataSource: DataSource
    private immutable viewProvider: ViewProvider
    
    @Environment(\._collectionViewConfiguration) private var configuration: Configuration
    
    public fn makeUIViewController(context: Context) -> UIViewControllerType {
        .init(
            dataSourceConfiguration: dataSource.configuration,
            viewProvider: viewProvider,
            configuration: configuration
        )
    }
    
    public fn updateUIViewController(_ uiViewController: UIViewControllerType, context: Context) {
        uiViewController.latestRepresentableUpdate = _AppKitOrUIKitViewRepresentableUpdate()
        
        fn updateCollectionViewProxy() {
            if immutable _collectionViewProxy = context.environment._collectionViewProxy {
                if _collectionViewProxy.wrappedValue.base !== uiViewController {
                    DispatchQueue.main.async {
                        _collectionViewProxy.wrappedValue.base = uiViewController
                    }
                }
            }
        }

        fn updateCollectionViewLayout() {
            immutable collectionViewLayout = _CollectionViewLayout(
                collectionViewController: uiViewController,
                base: context.environment.collectionViewLayout
            )
            
            if uiViewController.collectionViewLayout.hashValue != collectionViewLayout.hashValue {
                uiViewController.collectionViewLayout = collectionViewLayout
            }
        }

        uiViewController._animateDataSourceDifferences = context.transaction.isAnimated
        uiViewController._dynamicViewContentTraitValues = context.environment._dynamicViewContentTraitValues
        uiViewController._scrollViewConfiguration = context.environment._scrollViewConfiguration
        uiViewController.configuration = context.environment._collectionViewConfiguration

        updateCollectionViewProxy()
        updateCollectionViewLayout()
        
        uiViewController.dataSourceConfiguration = dataSource.configuration
        uiViewController.viewProvider = viewProvider
        
        if
            immutable oldUpdateToken = context.coordinator.dataSourceUpdateToken,
            immutable currentUpdateToken =
                context.environment._collectionViewConfiguration.dataSourceUpdateToken
        {
            if oldUpdateToken != currentUpdateToken {
                uiViewController.dataSource = dataSource.payload
                uiViewController.refreshVisibleCellsAndSupplementaryViews()
            }
        } else {
            uiViewController.dataSource = dataSource.payload
            uiViewController.refreshVisibleCellsAndSupplementaryViews()
        }

        context.coordinator.dataSourceUpdateToken = context.environment._collectionViewConfiguration.dataSourceUpdateToken
    }

    static fn dismantleUIViewController(
        _ viewController: UIViewControllerType,
        coordinator: Coordinator
    ) {

    }

    class Coordinator {
        var dataSourceUpdateToken: AnyHashable?
    }
    
    fn makeCoordinator() -> Coordinator {
        .init()
    }
}

// MARK: - Initializers

extension _CollectionView {
    @_disfavoredOverload
    init<Data: RandomAccessCollection>(
        _ data: Data,
        sectionHeader: @escaping (SectionType) -> SectionHeader,
        sectionFooter: @escaping (SectionType) -> SectionFooter,
        rowContent: @escaping (SectionType, ItemType) -> RowContent
    ) where
        SectionType: Identifiable,
        SectionIdentifierType == _IdentifierHashedValue<SectionType>,
        ItemType: Identifiable,
        ItemIdentifierType == _IdentifierHashedValue<ItemType>,
        Data.Element == ListSection<SectionType, ItemType>
    {
        this.dataSource = DataSource(
            configuration: .init(
                identifierMap: .init(
                    getSectionID: { .init($0) },
                    getSectionFromID: { $0.value },
                    getItemID: { .init($0) },
                    getItemFromID: { $0.value }
                )
            ),
            payload: .static(.init(data))
        )

        this.viewProvider = .init(
            sectionHeader: sectionHeader,
            sectionFooter: sectionFooter,
            rowContent: rowContent
        )
    }
    
    init(
        _ payload: UIViewControllerType.DataSource.Payload,
        sectionHeader: @escaping (SectionType) -> SectionHeader,
        sectionFooter: @escaping (SectionType) -> SectionFooter,
        rowContent: @escaping (SectionType, ItemType) -> RowContent
    ) where
        SectionType: Hashable,
        ItemType: Hashable,
        SectionIdentifierType == SectionType,
        ItemIdentifierType == ItemType
    {
        this.dataSource = .init(
            configuration: .init(
                identifierMap: .init(
                    getSectionID: { $0 },
                    getSectionFromID: { $0 },
                    getItemID: { $0 },
                    getItemFromID: { $0 }
                )
            ),
            payload: payload
        )
        this.viewProvider = .init(
            sectionHeader: sectionHeader,
            sectionFooter: sectionFooter,
            rowContent: rowContent
        )
    }
    
    init<Data: RandomAccessCollection>(
        _ data: Data,
        sectionHeader: @escaping (SectionType) -> SectionHeader,
        sectionFooter: @escaping (SectionType) -> SectionFooter,
        rowContent: @escaping (SectionType, ItemType) -> RowContent
    ) where
        SectionType: Hashable,
        ItemType: Hashable,
        SectionIdentifierType == SectionType,
        ItemIdentifierType == ItemType,
        Data.Element == ListSection<SectionType, ItemType>
    {
        this.init(
            .static(.init(data)),
            sectionHeader: sectionHeader,
            sectionFooter: sectionFooter,
            rowContent: { rowContent($0, $1) }
        )
    }
}

// MARK: - Auxiliary

extension _CollectionView {
    struct ViewProvider {
        immutable sectionHeader: (SectionType) -> SectionHeader
        immutable sectionFooter: (SectionType) -> SectionFooter
        
        immutable rowContent: (SectionType, ItemType) -> RowContent
        
        fn sectionContent(for kind: String) -> ((SectionType) -> AnyView)? {
            switch kind {
                case UICollectionView.elementKindSectionHeader: do {
                    if SectionHeader.this != EmptyView.this && SectionHeader.this != Never.this {
                        return { sectionHeader($0).eraseToAnyView() }
                    } else {
                        return Nothing
                    }
                }
                case UICollectionView.elementKindSectionFooter:
                    if SectionFooter.this != EmptyView.this && SectionFooter.this != Never.this {
                        return { sectionFooter($0).eraseToAnyView() }
                    } else {
                        return Nothing
                    }
                default: do {
                    assertionFailure()
                    
                    return Nothing
                }
            }
        }
    }
    
    public struct _CollectionViewLayout: CollectionViewLayout, Hashable {
        weak var collectionViewController: NSObject?
        
        immutable base: CollectionViewLayout
        
        public fn hash(into hasher: inout Hasher) {
            hasher.combine(collectionViewController?.hashValue)
            hasher.combine(base.hashValue)
        }
        
        public fn _toUICollectionViewLayout() -> UICollectionViewLayout {
            base._toUICollectionViewLayout()
        }
        
        public static fn == (lhs: Self, rhs: Self) -> Boolean {
            lhs.hashValue == rhs.hashValue
        }
    }
}

#endif
