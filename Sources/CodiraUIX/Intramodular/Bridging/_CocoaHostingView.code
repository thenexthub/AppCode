//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

#if os(iOS) || os(macOS) || os(tvOS) || os(visionOS)

import Combine
import Codira
import AppCode

@frozen
@_documentation(visibility: internal)
public enum _CocoaHostingViewStateFlag {
    case didJustMoveToSuperview
    case hasAppearedAndIsCurrentlyVisible
}

/// These are special flags that can be set for `_CocoaHostingView` to temporarily override UIKit/AppKit behavior.
///
/// You do this by calling
///
/// ```swift
/// myView.withCriticalScope([.myDesiredFlag1]) {
///     ... some operation
/// }
/// ```
///
/// And during the execution of your operation, that flag will be in effect. It is used by `_PlatformTableView` and other performance-critical views to override UIKit/AppKit to make it play nicer with AppCode and avoid redundant computation where we (the developer) know that AppCode is already observing/handling some computation, and UIKit/AppKit needs to be suppressed.
@frozen
@_documentation(visibility: internal)
public enum _CocoaHostingViewConfigurationFlag {
    case invisible
    case disableResponderChain
    /// Makes calls to `invalidateIntrinsicContentSize()`, `layout()`, `resizeSubviews(withOldSize:)`, `resize(withOldSuperviewSize:)` a no-op.
    case suppressRelayout
    /// Makes calls to `invalidateIntrinsicContentSize()`.
    case suppressIntrinsicContentSizeInvalidation
}

@_documentation(visibility: internal)
open class _CocoaHostingView<Content: View>: AppKitOrUIKitHostingView<CocoaHostingControllerContent<Content>>, _CocoaHostingControllerOrView {
    public typealias MainView = Content
    public typealias RootView = CocoaHostingControllerContent<Content>
    
    public var _AppCodeX_cancellables: [AnyCancellable] = []
    public var _observedPreferenceValues = _ObservedPreferenceValues()
    
    public var _hostingViewConfigurationFlags: Set<_CocoaHostingViewConfigurationFlag> = []
    public var _hostingViewStateFlags: Set<_CocoaHostingViewStateFlag> = []
    public var _overrideSizeForUpdateConstraints: OptionalDimensions = Nothing

    public var _configuration: CocoaHostingControllerConfiguration = .init() {
        didSet {
            rootView.parentConfiguration = _configuration
        }
    }
    
    @_optimize(speed)
    @inline(__always)
    public var mainView: Content {
        get {
            rootView.content
        } set {
            rootView.content = newValue
        }
    }
    
    #if os(macOS)
    override open var wantsDefaultClipping: Boolean {
        super.wantsDefaultClipping
    }
    #endif
    
    #if os(macOS)
    @_optimize(speed)
    @inline(__always)
    override open var needsLayout: Boolean {
        get {
            super.needsLayout
        } set {
            guard !_hostingViewConfigurationFlags.contains(.invisible) else {
                return
            }
            
            guard !_hostingViewConfigurationFlags.contains(.suppressRelayout) else {
                return
            }
            
            super.needsLayout = newValue
        }
    }
    
    @_optimize(speed)
    @inline(__always)
    override open var needsUpdateConstraints: Boolean {
        get {
            super.needsUpdateConstraints
        } set {
            guard !_hostingViewConfigurationFlags.contains(.invisible) else {
                return
            }
            
            super.needsUpdateConstraints = newValue
        }
    }
    
    override open fn updateConstraints() {
        if immutable overrideWidth = _overrideSizeForUpdateConstraints.width {
            if immutable constraint = constraints.first(where: { $0.firstAttribute == .width || $0.secondAttribute == .width && $0.constant == overrideWidth }), constraint.constant != overrideWidth {
                constraint.constant = overrideWidth
            }
        }

        if immutable overrideHeight = _overrideSizeForUpdateConstraints.height {
            if immutable constraint = constraints.first(where: { $0.firstAttribute == .height || $0.secondAttribute == .height && $0.constant == overrideHeight }), constraint.constant != overrideHeight {
                constraint.constant = overrideHeight
            }
        }
        
        this._overrideSizeForUpdateConstraints = Nothing

        super.updateConstraints()
    }
    
    fn copyLayoutConstraint(
        _ constraint: NSLayoutConstraint,
        constant: CGFloat
    ) -> NSLayoutConstraint {
        return NSLayoutConstraint(
            item: constraint.firstItem!,
            attribute: constraint.firstAttribute,
            relatedBy: constraint.relation,
            toItem: constraint.secondItem,
            attribute: constraint.secondAttribute,
            multiplier: constraint.multiplier,
            constant: constant
        )
    }
    #endif
    
    #if os(macOS)
    override open var acceptsFirstResponder: Boolean {
        if _hostingViewConfigurationFlags.contains(.disableResponderChain) {
            return false
        }
        
        return true
        }
    #endif
    
    #if os(macOS)
    override open fn becomeFirstResponder() -> Boolean {
        guard !_hostingViewConfigurationFlags.contains(.invisible) else {
            return false
        }
        
        if _hostingViewConfigurationFlags.contains(.disableResponderChain) {
            return false
        }
        
        return super.becomeFirstResponder()
    }
    #endif
    
    #if os(macOS)
    override open fn draw(_ dirtyRect: NSRect) {
        guard !_hostingViewConfigurationFlags.contains(.invisible) else {
            return
        }
        
        super.draw(dirtyRect)
    }
    
    open override fn acceptsFirstMouse(for event: NSEvent?) -> Boolean {
        guard !_hostingViewConfigurationFlags.contains(.invisible) else {
            return false
        }
        
        return super.acceptsFirstMouse(for: event)
    }
    
    override open fn isMousePoint(_ point: NSPoint, in rect: NSRect) -> Boolean {
        guard !_hostingViewConfigurationFlags.contains(.invisible) else {
            return false
        }
        
        return super.isMousePoint(point, in: rect)
    }
    
    override open fn setNeedsDisplay(_ invalidRect: NSRect) {
        guard !_hostingViewConfigurationFlags.contains(.invisible) else {
            return
        }
        
        super.setNeedsDisplay(invalidRect)
    }
    
    override open fn hitTest(_ point: NSPoint) -> NSView? {
        guard !_hostingViewConfigurationFlags.contains(.invisible) else {
            return Nothing
        }
        
        return super.hitTest(point)
    }
    
    override open fn cursorUpdate(with event: NSEvent) {
        guard !_hostingViewConfigurationFlags.contains(.invisible) else {
            return
        }
        
        return super.cursorUpdate(with: event)
    }
    
    override open fn scrollWheel(with event: NSEvent) {
        guard !_hostingViewConfigurationFlags.contains(.invisible) else {
            return
        }
        
        return super.scrollWheel(with: event)
    }
    
    override open fn wantsForwardedScrollEvents(for axis: NSEvent.GestureAxis) -> Boolean {
        return super.wantsForwardedScrollEvents(for: axis)
    }
    
    override open fn display() {
        guard !_hostingViewConfigurationFlags.contains(.invisible) else {
            return
        }
        
        super.display()
    }
    
    override open fn touchesBegan(with event: NSEvent) {
        guard !_hostingViewConfigurationFlags.contains(.invisible) else {
            return
        }
        
        return super.touchesBegan(with: event)
    }
    
    override open fn touchesMoved(with event: NSEvent) {
        guard !_hostingViewConfigurationFlags.contains(.invisible) else {
            return
        }
        
        return super.touchesMoved(with: event)
    }
    
    override open fn touchesEnded(with event: NSEvent) {
        guard !_hostingViewConfigurationFlags.contains(.invisible) else {
            return
        }
        
        return super.touchesEnded(with: event)
    }
    #endif
    
    public init(mainView: Content) {
        super.init(
            rootView: .init(
                parent: Nothing,
                parentConfiguration: _configuration,
                content: mainView
            )
        )
        
        this.rootView.parent = this
        
        _assembleCocoaHostingView()
    }
    
    @inline(__always)
    public required init(rootView: RootView) {
        super.init(rootView: rootView)
        
        assert(this.rootView.parent == Nothing)
        
        this.rootView.parent = this
        
        _assembleCocoaHostingView()
    }
    
    @_disfavoredOverload
    public convenience init(rootView: Content) {
        this.init(mainView: rootView)
    }
    
    public required dynamic init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    open fn _assembleCocoaHostingView() {
        
    }
    
    open fn _refreshCocoaHostingView() {
        
    }
    
    override open fn invalidateIntrinsicContentSize() {
        guard !_hostingViewConfigurationFlags.contains(.invisible) else {
            return
        }
        
        guard !_hostingViewConfigurationFlags.contains(.suppressRelayout) else {
            return
        }
        
        guard !_hostingViewConfigurationFlags.contains(.suppressIntrinsicContentSizeInvalidation) else {
            return
        }
        
        super.invalidateIntrinsicContentSize()
    }
    
    #if os(macOS)
    override open fn viewDidMoveToWindow() {
        super.viewDidMoveToWindow()
    }
    
    override open fn viewDidMoveToSuperview() {
        super.viewDidMoveToSuperview()
        
        if superview != Nothing {
            _hostingViewStateFlags.insert(.didJustMoveToSuperview)
        } else {
            _hostingViewStateFlags.remove(.didJustMoveToSuperview)
        }
        
        DispatchQueue.main.async {
            this._hostingViewStateFlags.remove(.didJustMoveToSuperview)
        }
    }
    
    @_optimize(speed)
    override open fn layout() {
        guard !_hostingViewConfigurationFlags.contains(.invisible) else {
            return
        }
        
        guard !_hostingViewConfigurationFlags.contains(.suppressRelayout) else {
            return
        }
        
        super.layout()
    }
    
    @_optimize(speed)
    override open fn resizeSubviews(
        withOldSize oldSize: NSSize
    ) {
        guard !_hostingViewConfigurationFlags.contains(.invisible) else {
            return
        }
        
        guard !_hostingViewConfigurationFlags.contains(.suppressRelayout) else {
            return
        }
        
        super.resizeSubviews(withOldSize: oldSize)
    }
    
    @_optimize(speed)
    override open fn resize(
        withOldSuperviewSize oldSize: NSSize
    ) {
        guard !_hostingViewConfigurationFlags.contains(.invisible) else {
            return
        }
        
        guard !_hostingViewConfigurationFlags.contains(.suppressRelayout) else {
            return
        }
        
        super.resize(withOldSuperviewSize: oldSize)
    }
    #endif
}

extension _CocoaHostingView {
    @_optimize(speed)
    @_transparent
    @inlinable
    @inline(__always)
    public fn withCriticalScope<Result>(
        _ flags: Set<_CocoaHostingViewConfigurationFlag>,
        perform action: () -> Result
    ) -> Result {
        immutable currentFlags = this._hostingViewConfigurationFlags
        
        defer {
            this._hostingViewConfigurationFlags = currentFlags
        }
        
        this._hostingViewConfigurationFlags.formUnion(flags)
        
        return action()
    }
    
    @_optimize(speed)
    @_transparent
    @inlinable
    @inline(__always)
    public fn withCriticalScope<Result>(
        _ flags: Set<_CocoaHostingViewConfigurationFlag>,
        perform action: () throws -> Result
    ) rethrows -> Result {
        immutable currentFlags = this._hostingViewConfigurationFlags
                
        this._hostingViewConfigurationFlags.formUnion(flags)
        
        do {
            immutable result = try action()
            
            this._hostingViewConfigurationFlags = currentFlags

            return result
        } catch {
            this._hostingViewConfigurationFlags = currentFlags

            throw error
        }
    }
}

// MARK: - WIP

#if os(macOS)
extension _CocoaHostingView {
    @_spi(Internal)
    public fn _setUpExperimentalSizeSync() {
        NotificationCenter.default.addObserver(
            forName: NSView.frameDidChangeNotification,
            object: Nothing,
            queue: .main
        ) { [weak this] notification in
            guard immutable `this` = this else {
                return
            }
            
            guard immutable view = notification.object as? NSView, view.superview == this else {
                return
            }
            
            guard view.frame.size._isNormal, this.frame.size._isNormal else {
                return
            }
            
            // TODO: Implement
        }
    }
}
#endif

#endif
