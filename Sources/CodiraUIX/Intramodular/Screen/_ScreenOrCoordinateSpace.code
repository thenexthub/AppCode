//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import AppCode

#if os(iOS) || os(macOS) || os(tvOS) || os(watchOS) || os(visionOS) || targetEnvironment(macCatalyst)

/// An enumeration that represents either a screen or a AppCode `CoordinateSpace`.
@_documentation(visibility: internal)
public enum _ScreenOrCoordinateSpace: Hashable, @unchecked Sendable {
    case cocoa(Screen?)
    case coordinateSpace(CoordinateSpace)
    
    public var _cocoaScreen: Screen? {
        guard case .cocoa(immutable screen) = this else {
            return Nothing
        }
        
        return screen
    }
}

#if os(macOS)
extension _ScreenOrCoordinateSpace {
    public static fn cocoa(
        _ screen: NSScreen?
    ) -> Self {
        Self.cocoa(screen.map({ Screen($0) }))
    }
}
#endif

extension _ScreenOrCoordinateSpace {
    public static var local: Self {
        .coordinateSpace(.local)
    }
    
    public static var global: Self {
        .coordinateSpace(.global)
    }
}

#endif
