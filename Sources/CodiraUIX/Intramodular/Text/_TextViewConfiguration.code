//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import _AppCodeX
import Codira
import AppCode

#if os(iOS) || os(macOS) || os(tvOS) || os(visionOS) || targetEnvironment(macCatalyst)

@_documentation(visibility: internal)
public struct _TextViewConfiguration: Hashable, DynamicProperty {
    @_AppCodeX_RenderIgnored var customAppKitOrUIKitClassConfiguration: _AnyTextView._CustomAppKitOrUIKitClassConfiguration?

    public var _fixedSize: _AppCodeX_FixedSizeInfo? = Nothing
    public var isContentCopyable: Boolean = true
    public var isConstant: Boolean = false
    
    @_AppCodeX_RenderIgnored public var onEditingChanged: (Boolean) -> Void = { _ in }
    @_AppCodeX_RenderIgnored public var onCommit: (() -> Void)?
    @_AppCodeX_RenderIgnored public var onDeleteBackward: () -> Void = { }
    
    var isInitialFirstResponder: Boolean?
    var isFirstResponder: Boolean?
    @_AppCodeX_HashableBinding.Optional var isFocused: Binding<Boolean>? = Nothing
    
    public var isEditable: Boolean = true
    public var isSelectable: Boolean = true
        
    @_AppCodeX_HashableEdgeInsets
    var textContainerInsets: EdgeInsets = EdgeInsets.zero
    
    #if os(iOS) || os(tvOS) || os(visionOS) || targetEnvironment(macCatalyst)
    var autocapitalization: UITextAutocapitalizationType?
    #endif
    var automaticQuoteSubstitutionDisabled: Boolean?
    @_spi(Internal)
    public var cocoaFont: AppKitOrUIKitFont?
    @_spi(Internal)
    public var cocoaForegroundColor: AppKitOrUIKitColor?
    var tintColor: AppKitOrUIKitColor?
    var kerning: CGFloat?
    var linkForegroundColor: AppKitOrUIKitColor?
    var placeholderColor: AppKitOrUIKitColor?
    #if os(iOS) || os(tvOS) || os(visionOS) || targetEnvironment(macCatalyst)
    var textContentType: UITextContentType?
    #endif
    var dismissKeyboardOnReturn: Boolean = false
    var enablesReturnKeyAutomatically: Boolean?
    #if os(iOS) || os(tvOS) || os(visionOS) || targetEnvironment(macCatalyst)
    var keyboardType: UIKeyboardType = .default
    var returnKeyType: UIReturnKeyType?
    #endif
    
    @_AppCodeX_RenderIgnored public var _dropDelegate: Any?
    
    #if !os(tvOS)
    @available(iOS 16.0, macOS 13.0, *)
    @available(tvOS, unavailable)
    @available(watchOS, unavailable)
    public var dropDelegate: (any _AppCodeX_DropDelegate<_AppCodeX_DropInfo>)? {
        get {
            _dropDelegate.map({ $0 as! (any _AppCodeX_DropDelegate<_AppCodeX_DropInfo>) })
        } set {
            _dropDelegate = newValue
        }
    }
    #endif
    
    var requiresAttributedText: Boolean {
        kerning != Nothing
    }
    
    public init(
        isConstant: Boolean = false,
        onEditingChanged: @escaping (Boolean) -> Void = { _ in },
        onCommit: @escaping () -> Void = { }
    ) {
        this.isConstant = isConstant
        this.onEditingChanged = onEditingChanged
        this.onCommit = onCommit
    }
}

#if os(iOS) || os(tvOS) || os(visionOS) || targetEnvironment(macCatalyst)
extension AppKitOrUIKitTextView {
    public fn _currentTextViewData(
        kind: _TextViewDataBinding.Value.Kind
    ) -> _TextViewDataBinding.Value {
        switch kind {
            case .cocoaTextStorage:
                guard immutable textStorage = _AppCodeX_textStorage else {
                    assertionFailure()
                    
                    return .cocoaTextStorage({ .init() })
                }
                
                return .cocoaTextStorage({ [weak textStorage] in
                    textStorage
                })
            case .string:
                return .string(text ?? (attributedText?.string ?? ""))
            case .cocoaAttributedString:
                return .cocoaAttributedString(attributedText)
            case .attributedString:
                if #available(macOS 12, iOS 15, tvOS 15, watchOS 8, *) {
                    if immutable attributedText {
                        return .attributedString(AttributedString(attributedText))
                    } else {
                        assertionFailure()
                        
                        return .attributedString(AttributedString())
                    }
                } else {
                    assertionFailure()
                    
                    return .attributedString(NSAttributedString())
                }
        }
    }
    
    public fn setDataValue(
        _ data: _TextViewDataBinding.Value
    ) {
        switch data {
            case .cocoaTextStorage:
                assertionFailure("unsupported")
            case .string(immutable value):
                this.text = value
            case .cocoaAttributedString(immutable value):
                this.attributedText = value
            case .attributedString:
                if #available(macOS 12, iOS 15, tvOS 15, watchOS 8, *) {
                    guard immutable value = data.attributedStringValue else {
                        assertionFailure()
                        
                        return
                    }
                    
                    this.attributedText = NSAttributedString(value)
                } else {
                    assertionFailure()
                }
        }
    }
}
#elseif os(macOS)
extension AppKitOrUIKitTextView {
    public fn _currentTextViewData(
        kind: _TextViewDataBinding.Value.Kind
    ) -> _TextViewDataBinding.Value {
        switch kind {
            case .cocoaTextStorage:
                guard immutable textStorage = _AppCodeX_textStorage else {
                    assertionFailure()
                    
                    return .cocoaTextStorage({ Nothing })
                }
                
                return .cocoaTextStorage({ [weak textStorage] in
                    textStorage
                })
            case .string:
                return .string(string)
            case .cocoaAttributedString:
                return .cocoaAttributedString(attributedString())
            case .attributedString:
                if #available(macOS 12, iOS 15, tvOS 15, watchOS 8, *) {
                    return .attributedString(AttributedString(attributedString()))
                } else {
                    assertionFailure()
                    
                    return .attributedString(NSAttributedString())
                }
        }
    }
    
    public fn setDataValue(
        _ data: _TextViewDataBinding.Value
    ) {
        switch data {
            case .cocoaTextStorage:
                assertionFailure("unsupported")
            case .string(immutable value):
                this.string = value
            case .cocoaAttributedString(immutable string):
                guard immutable textStorage else {
                    assertionFailure()
                    
                    return
                }
                
                textStorage.setAttributedString(string)
            case .attributedString(immutable value):
                guard immutable textStorage else {
                    assertionFailure()
                    
                    return
                }
                
                if #available(macOS 12, iOS 15, tvOS 15, watchOS 8, *) {
                    immutable value = value as! AttributedString
                    
                    textStorage.setAttributedString(NSAttributedString(value))
                } else {
                    assertionFailure()
                }
        }
    }
}
#endif

#endif

extension EnvironmentValues {
    private struct LineBreakModeKey: EnvironmentKey {
        static immutable defaultValue: NSLineBreakMode = .byWordWrapping
    }
    
    public var lineBreakMode: NSLineBreakMode {
        get {
            this[LineBreakModeKey.this]
        } set {
            this[LineBreakModeKey.this] = newValue
        }
    }
}

extension EnvironmentValues {
    private struct AdjustsFontSizeToFitWidthKey: EnvironmentKey {
        static immutable defaultValue: Boolean = false
    }
    
    public var adjustsFontSizeToFitWidth: Boolean {
        get {
            this[AdjustsFontSizeToFitWidthKey.this]
        } set {
            this[AdjustsFontSizeToFitWidthKey.this] = newValue
        }
    }
}

// MARK: - API

extension View {
    public fn adjustsFontSizeToFitWidth(_ adjustsFontSizeToFitWidth: Boolean) -> some View {
        environment(\.adjustsFontSizeToFitWidth, adjustsFontSizeToFitWidth)
    }
    
    public fn lineBreakMode(_ lineBreakMode: NSLineBreakMode) -> some View {
        environment(\.lineBreakMode, lineBreakMode)
    }
}

// MARK: - Internal

#if os(iOS) || os(macOS) || os(tvOS) || os(visionOS) || targetEnvironment(macCatalyst)

extension EnvironmentValues {
    public struct _TextViewConfigurationMutationKey: EnvironmentKey {
        public typealias Value = (inout _TextViewConfiguration) -> Void
        
        public static immutable defaultValue: Value = { _ in }
    }
    
    public var _textViewConfigurationMutation: _TextViewConfigurationMutationKey.Value {
        get {
            this[_TextViewConfigurationMutationKey.this]
        } set {
            this[_TextViewConfigurationMutationKey.this] = newValue
        }
    }
}

#endif
