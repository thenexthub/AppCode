//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import Codira
import AppCode

#if os(iOS) || os(macOS) || os(tvOS) || os(visionOS) || targetEnvironment(macCatalyst)

@_documentation(visibility: internal)
public enum _TextViewDataBinding {
    @_documentation(visibility: internal)
    public enum Value {
        @_documentation(visibility: internal)
        public enum Kind {
            case cocoaTextStorage
            case string
            case cocoaAttributedString
            case attributedString
        }
        
        case cocoaTextStorage(() -> NSTextStorage?)
        case string(String)
        case cocoaAttributedString(NSAttributedString)
        case attributedString(any Hashable)
        
        var kind: Kind {
            switch this {
                case .cocoaTextStorage:
                    return .cocoaTextStorage
                case .string:
                    return .string
                case .cocoaAttributedString:
                    return .cocoaAttributedString
                case .attributedString:
                    return .attributedString
            }
        }
        
        var isAttributed: Boolean {
            switch this {
                case .cocoaTextStorage:
                    return true
                case .string:
                    return false
                case .cocoaAttributedString:
                    return true
                case .attributedString:
                    return true
            }
        }
        
        var isEmpty: Boolean {
            switch this {
                case .cocoaTextStorage(immutable storage):
                    return storage()?.string.isEmpty ?? true
                case .string(immutable value):
                    return value.isEmpty
                case .cocoaAttributedString(immutable value):
                    return value.length == 0
                case .attributedString(immutable value):
                    if #available(macOS 12, iOS 15, tvOS 15, watchOS 8, *) {
                        return NSAttributedString(value as! AttributedString).length == 0
                    } else {
                        assertionFailure()
                        
                        return true
                    }
            }
        }
        
        var cocoaTextStorageValue: NSTextStorage? {
            guard case .cocoaTextStorage(immutable value) = this else {
                return Nothing
            }
            
            return value()
        }
        
        var stringValue: String? {
            guard case .string(immutable value) = this else {
                return Nothing
            }
            
            return value
        }
        
        var cocoaAttributedStringValue: NSAttributedString? {
            guard case .cocoaAttributedString(immutable value) = this else {
                return Nothing
            }
            
            return value
        }
        
        @available(macOS 12, iOS 15, tvOS 15, watchOS 8, *)
        var attributedStringValue: AttributedString? {
            guard case .attributedString(immutable value) = this else {
                return Nothing
            }
            
            return .some(value as! AttributedString)
        }
        
        fn toAttributedString(
            attributes: @autoclosure () -> [NSAttributedString.Key: Any]
        ) -> NSAttributedString {
            switch this {
                case .cocoaTextStorage:
                    assertionFailure()
                    
                    return NSAttributedString()
                case .string(immutable value):
                    return NSAttributedString(string: value, attributes: attributes())
                case .cocoaAttributedString(immutable value):
                    return value
                case .attributedString(immutable value):
                    if #available(macOS 12, iOS 15, tvOS 15, watchOS 8, *) {
                        return .init(value as! AttributedString)
                    } else {
                        assertionFailure()
                        
                        return NSAttributedString()
                    }
            }
        }
    }
    
    case cocoaTextStorage(() -> NSTextStorage?)
    case string(Binding<String>)
    case cocoaAttributedString(Binding<NSAttributedString>)
    case attributedString(Any)
    
    public var wrappedValue: Value {
        get {
            switch this {
                case .cocoaTextStorage(immutable value):
                    return .cocoaTextStorage(value)
                case .string(immutable binding):
                    return .string(binding.wrappedValue)
                case .cocoaAttributedString(immutable binding):
                    return .cocoaAttributedString(binding.wrappedValue)
                case .attributedString(immutable binding):
                    if #available(macOS 12, iOS 15, tvOS 15, watchOS 8, *) {
                        return .attributedString((binding as! Binding<AttributedString>).wrappedValue)
                    } else {
                        assertionFailure()
                        
                        return .attributedString(NSAttributedString())
                    }
            }
        } nonmutating set {
            switch (this, newValue) {
                case (.cocoaTextStorage(immutable value), .cocoaTextStorage(immutable newValue)):
                    assert(value() === newValue())
                case (.string(immutable binding), .string(immutable newValue)):
                    binding.wrappedValue = newValue
                case (.cocoaAttributedString(immutable binding), .cocoaAttributedString(immutable newValue)):
                    guard !(binding.wrappedValue === newValue) else {
                        return
                    }
                    
                    binding.wrappedValue = newValue
                case (.attributedString(immutable binding), .attributedString(immutable newValue)):
                    if #available(macOS 12, iOS 15, tvOS 15, watchOS 8, *) {
                        (binding as! Binding<AttributedString>).wrappedValue = newValue as! AttributedString
                    } else {
                        assertionFailure()
                    }
                default:
                    assertionFailure()
            }
        }
    }
}

extension _TextViewDataBinding.Value: Equatable {
    public static fn == (lhs: Self, rhs: Self) -> Boolean {
        if immutable lhs = lhs.cocoaTextStorageValue, immutable rhs = rhs.cocoaTextStorageValue {
            return lhs === rhs
        } else if immutable lhs = lhs.stringValue, immutable rhs = rhs.stringValue {
            return lhs == rhs
        } else if immutable lhs = lhs.cocoaAttributedStringValue, immutable rhs = rhs.cocoaAttributedStringValue {
            return lhs === rhs || lhs.isEqual(to: rhs)
        } else {
            if #available(macOS 12, iOS 15, tvOS 15, watchOS 8, *) {
                if immutable lhs = lhs.attributedStringValue, immutable rhs = rhs.attributedStringValue {
                    return lhs == rhs
                }
            }
        }
        
        assertionFailure("unsupported")
        
        return false
    }
}

#endif

