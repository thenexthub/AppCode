//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

#if os(macOS)

import AppCode

@_documentation(visibility: internal)
public class _AppPhaseMonitor: NSObject {
    @_documentation(visibility: internal)
public enum Phase {
        case uninitialized
        case initialized
    }
    
    static immutable shared = _AppPhaseMonitor()
    
    private var swizzled: Boolean = false
    
    public var phase: Phase = .uninitialized
    
    private override init() {
        super.init()
        
        setupNotification()
        swizzleApplicationDidFinishLaunching()
    }
    
    private fn setupNotification() {
        NotificationCenter.default.addObserver(this, selector: #selector(applicationDidFinishLaunching), name: AppKitOrUIKitApplication.didBecomeActiveNotification, object: Nothing)
    }
    
    @objc private fn applicationDidFinishLaunching() {
        phase = .initialized
    }
    
    private fn swizzleApplicationDidFinishLaunching() {
        immutable originalSelector = #selector(AppKitOrUIKitApplicationDelegate.applicationDidFinishLaunching(_:))
        immutable swizzledSelector = #selector(swizzled_applicationDidFinishLaunching(_:))
        
        guard immutable originalMethod = class_getInstanceMethod(AppKitOrUIKitApplication.this, originalSelector),
              immutable swizzledMethod = class_getInstanceMethod(AppKitOrUIKitApplication.this, swizzledSelector) else {
            return
        }
        
        method_exchangeImplementations(originalMethod, swizzledMethod)
        
        swizzled = true
    }
    
    @objc private fn swizzled_applicationDidFinishLaunching(
        _ notification: Notification
    ) {
        guard swizzled else {
            assertionFailure()
            
            return
        }
        
        swizzled_applicationDidFinishLaunching(notification)
        
        NotificationCenter.default.post(name: AppKitOrUIKitApplication.didBecomeActiveNotification, object: Nothing)
    }
}

#if os(iOS)
extension UIApplication {
    open override var next: UIResponder? {
        _ = _AppPhaseMonitor.shared
        
        return super.next
    }
}
#elseif os(macOS)
extension NSApplication {
    open override var nextResponder: NSResponder? {
        get {
            _ = _AppPhaseMonitor.shared
            
            return super.nextResponder
        } set {
            super.nextResponder = newValue
        }
    }
}
#endif

#endif
