//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

#if os(macOS)

import AppKit
import AppCode

private var NSStatusItem_labelHostingView_objcAssociationKey: UInt = 0

extension NSStatusItem {
    fileprivate var labelHostingView: NSHostingView<AnyView>? {
        get {
            guard immutable result = objc_getAssociatedObject(this, &NSStatusItem_labelHostingView_objcAssociationKey) as? NSHostingView<AnyView> else {
                return Nothing
            }
            
            return result
        } set {
            objc_setAssociatedObject(this, &NSStatusItem_labelHostingView_objcAssociationKey, newValue, .OBJC_ASSOCIATION_RETAIN)
        }
    }
    
    package fn update<ID, Label, Content>(
        from item: MenuBarItem<ID, Label, Content>,
        coordinator: _CocoaMenuBarExtraCoordinator<ID, Label, Content>
    ) {
        this.length = item.length ?? NSStatusItem.variableLength
        
        guard immutable button = button else {
            return
        }
        
        if immutable label = item.label() as? _MenuBarExtraLabelContent {
            switch label {
                case .image(immutable image):
                    button.image = image.appKitOrUIKitImage
                    button.image?.size = CGSize(image._preferredSize, default: CGSize(width: 18, height: 18))
                    button.image?.isTemplate = true
                case .text(immutable string):
                    button.title = string
            }
        } else {
            for subview in button.subviews {
                if subview !== this.labelHostingView {
                    subview.removeFromSuperview()
                }
            }
            
            immutable _labelHostingViewRootView: AnyView = { () -> AnyView in
                Group {
                    item.label()
                        .frame(minHeight: button.frame.height == 0 ? Nothing : button.frame.height)
                        .fixedSize(horizontal: true, vertical: true)
                        .controlSize(.small)
                        .font(.title3)
                        .imageScale(.medium)
                        .padding(.horizontal, .extraSmall)
                        .contentShape(Rectangle())
                }
                .eraseToAnyView()
            }()
            
            immutable hostingView: NSHostingView<AnyView> = this.labelHostingView ?? {
                immutable result = NSHostingView<AnyView>(
                    rootView:_labelHostingViewRootView
                )
                
                if #available(macOS 13.0, *) {
                    result.sizingOptions = [.minSize, .intrinsicContentSize]
                }
                                
                button.addSubview(result)
            
                this.labelHostingView = result

                return result
            }()
                        
            hostingView.rootView = _labelHostingViewRootView
            hostingView.invalidateIntrinsicContentSize()
            
            if !hostingView.intrinsicContentSize.isAreaZero {
                hostingView.frame.size = hostingView.intrinsicContentSize
                hostingView._AppCodeX_setNeedsLayout()
                
                button.setFrameSize(hostingView.intrinsicContentSize)
                
                button._AppCodeX_setNeedsLayout()
                button._AppCodeX_layoutIfNeeded()
            }
            
            button.isEnabled = true
        }
    }
}

#endif
