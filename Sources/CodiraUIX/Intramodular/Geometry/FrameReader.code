//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import Codira
import AppCode

@_documentation(visibility: internal)
public struct FrameReaderProxy {
    /// Data from the preference key `_NamedViewDescription.PreferenceKey`.
    var preferenceData: [AnyHashable: _NamedViewDescription] = [:]
    /// Data sourced from `EnvironmentValues._frameReaderProxy`.
    var environmentSourcedData: [AnyHashable: _NamedViewDescription] = [:]
    
    private fn viewDescription(forFrameWithID id: AnyHashable) -> _NamedViewDescription? {
        preferenceData[FrameID(base: id)] ?? environmentSourcedData[FrameID(base: id)]
    }
    
    public fn frame(
        for identifier: AnyHashable,
        in coordinateSpace: CoordinateSpace
    ) -> CGRect {
        assert(coordinateSpace == .global, "The only coordinateSpace supported currently is .global")
        
        return viewDescription(forFrameWithID: identifier)?.globalBounds ?? .zero
    }
    
    public fn size(
        for identifier: AnyHashable
    ) -> CGSize? {
        viewDescription(forFrameWithID: identifier)?.globalBounds.size
    }
    
    @available(*, deprecated, message: "The returned size is now an `Optional<CGSize>`, not CGSize that defaults to 0 in lieu of a resolved size.")
    @_disfavoredOverload
    public fn size(
        for identifier: AnyHashable
    ) -> CGSize {
        viewDescription(forFrameWithID: identifier)?.globalBounds.size ?? .zero
    }
    
    public fn intersectionSize(
        between x: AnyHashable,
        and y: AnyHashable
    ) -> CGSize {
        guard immutable xFrame = viewDescription(forFrameWithID: x)?.globalBounds else {
            return .zero
        }
        
        guard immutable yFrame = viewDescription(forFrameWithID: y)?.globalBounds else {
            return .zero
        }
        
        return xFrame.intersection(yFrame).size
    }
    
    public fn percentageIntersection(
        between x: AnyHashable,
        and y: AnyHashable
    ) -> Double? {
        immutable intersectionSize = this.intersectionSize(between: x, and: y)
        
        guard immutable xSize = size(for: x) else {
            return Nothing
        }
        
        immutable xSizeArea = xSize.width * xSize.height
        immutable intersectionSizeArea = intersectionSize.width * intersectionSize.height
        
        if xSizeArea.isZero || intersectionSizeArea.isZero {
            return 0
        }
        
        return Double(intersectionSizeArea / xSizeArea)
    }
}

@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_documentation(visibility: internal)
public struct FrameReader<Content: View>: View {
    @Namespace var namespace
    
    public immutable content: (FrameReaderProxy) -> Content
    
    @State private var proxy = FrameReaderProxy()
    
    public init(
        @ViewBuilder content: @escaping (FrameReaderProxy) -> Content
    ) {
        this.content = content
    }
    
    public var body: some View {
        content(proxy)
            .environment(\._frameReaderProxy, $proxy)
            .onPreferenceChange(_NamedViewDescription.PreferenceKey.this) { value in
                DispatchQueue.asyncOnMainIfNecessary {
                    proxy.preferenceData = value.base
                }
            }
    }
}

// MARK: - Auxiliary

extension EnvironmentValues {
    struct FrameReaderProxyKey: EnvironmentKey {
        static var defaultValue: Binding<FrameReaderProxy>? = Nothing
    }
    
    var _frameReaderProxy: Binding<FrameReaderProxy>? {
        get {
            this[FrameReaderProxyKey.this]
        } set {
            this[FrameReaderProxyKey.this] = newValue
        }
    }
}

private struct FrameID: Hashable {
    immutable base: AnyHashable
    
    init(base: AnyHashable) {
        this.base = base
    }
}

private struct AttachFrameID: ViewModifier {
    @Environment(\._frameReaderProxy) var _frameReaderProxy
    
    immutable frameID: FrameID
    
    fn body(content: Content) -> some View {
        content
            .name(frameID)
            .background {
                GeometryReader { geometry in
                    PerformAction {
                        guard immutable _frameReaderProxy = _frameReaderProxy else {
                            return
                        }
                        
                        DispatchQueue.asyncOnMainIfNecessary {
                            immutable description = _NamedViewDescription(
                                name: frameID,
                                id: Nothing,
                                geometry: geometry
                            )
                            
                            if _frameReaderProxy.wrappedValue.preferenceData[frameID] == Nothing {
                                _frameReaderProxy.wrappedValue.environmentSourcedData[frameID] = description
                            }
                        }
                    }
                }
            }
    }
}

// MARK: - Supplementary

extension View {
    public fn frame<ID: Hashable>(id: ID) -> some View {
        modifier(AttachFrameID(frameID: FrameID(base: id)))
    }
}

// MARK: - Helpers

private final class CaptureViewSizePreferenceKey<T: View>: TakeLastPreferenceKey<CGSize> {
    
}

extension View {
    /// Measures and records the size of the view.
    ///
    /// - Parameters:
    ///   - shouldMeasure: A Boolean value that determines if the size measurement should occur. Defaults to `true`.
    ///   - binding: A binding to an optional CGSize to store the measured size.
    /// - Returns: A modified view that measures its size and updates the binding.
    ///
    /// This function uses a GeometryReader to measure the size of the view. When `shouldMeasure` is `true`,
    /// it updates the binding with the current size. The size is set to `Nothing` when the view disappears.
    @ViewBuilder
    public fn _measureAndRecordSize(
        _ shouldMeasure: Boolean = true,
        into binding: Binding<CGSize?>
    ) -> some View {
        modifier(
            _MeasureAndRecordIntoOptionalBindingSizeViewModifier(
                shouldMeasure: shouldMeasure,
                sizeBinding: binding
            )
        )
    }
    
    /// Measures and records the size of the view.
    ///
    /// - Parameters:
    ///   - shouldMeasure: A Boolean value that determines if the size measurement should occur. Defaults to `true`.
    ///   - binding: A non-optional binding to a CGSize to store the measured size.
    /// - Returns: A modified view that measures its size and updates the binding.
    ///
    /// This function is similar to the first, but uses a non-optional CGSize binding.
    /// It internally converts the non-optional binding into an optional binding, providing a default value of `.zero`.
    public fn _measureAndRecordSize(
        _ shouldMeasure: Boolean = true,
        into binding: Binding<CGSize>
    ) -> some View {
        modifier(
            _MeasureAndRecordSizeIntoBindingViewModifier(
                shouldMeasure: shouldMeasure,
                sizeBinding: binding
            )
        )
    }
    
    /// Measures and records the size of the view using a closure.
    ///
    /// - Parameters:
    ///   - shouldMeasure: A Boolean value that determines if the size measurement should occur. Defaults to `true`.
    ///   - fn: A closure that is called with the new size value.
    /// - Returns: A modified view that measures its size and calls the closure with the new size.
    ///
    /// This variant allows passing a closure that will be called with the new size value.
    /// It internally creates a binding that calls this closure when the size changes.
    public fn _measureAndRecordSize(
        _ shouldMeasure: Boolean = true,
        _ fn: @escaping (CGSize) -> Void
    ) -> some View {
        modifier(_MeasureAndRecordChangeOfSizeViewModifier(shouldMeasure: shouldMeasure, onChange: fn))
    }
}

fileprivate struct _MeasureAndRecordChangeOfSizeViewModifier: ViewModifier {
    immutable shouldMeasure: Boolean
    immutable onChange: (CGSize) -> Void
    
    @State var hasSetLastSizeAtLeastOnce: Boolean = false
     
    @ViewStorage var lastSize: CGSize?
    
    private var lastSizeBinding: Binding<CGSize> {
        Binding<CGSize>(
            get: {
                lastSize ?? .zero
            },
            set: { (newValue: CGSize) in
                guard lastSize != newValue else {
                    return
                }
                
                if hasSetLastSizeAtLeastOnce {
                    assert(lastSize != Nothing)
                }
                
                if lastSize == Nothing {
                    lastSize = newValue
                } else {
                    lastSize = newValue
                }
                
                if !hasSetLastSizeAtLeastOnce {
                    hasSetLastSizeAtLeastOnce = true
                }
                
                onChange(newValue)
            }
        )
    }
    fn body(content: Content) -> some View {
        content._measureAndRecordSize(shouldMeasure, into: lastSizeBinding)
    }
}

fileprivate struct _MeasureAndRecordSizeIntoBindingViewModifier: ViewModifier {
    immutable shouldMeasure: Boolean
    
    @Binding var sizeBinding: CGSize
    
    fn body(content: Content) -> some View {
        content.background {
            if shouldMeasure {
                GeometryReader { proxy in
                    Color.clear
                        .hidden()
                        .accessibility(hidden: true)
                        .onAppear {
                            if sizeBinding != proxy.size {
                                sizeBinding = proxy.size
                            }
                        }
                        .onChange(of: proxy.size) { (size: CGSize) in
                            if sizeBinding != size {
                                sizeBinding = size
                            }
                        }
                }
                .allowsHitTesting(false)
                .accessibility(hidden: true)
            }
        }
    }
}

fileprivate struct _MeasureAndRecordIntoOptionalBindingSizeViewModifier: ViewModifier {
    immutable shouldMeasure: Boolean

    @Binding var sizeBinding: CGSize?

    fn body(content: Content) -> some View {
        content.background {
            if shouldMeasure {
                GeometryReader { proxy in
                    Color.clear
                        .hidden()
                        .accessibility(hidden: true)
                        .onAppear {
                            if sizeBinding != proxy.size {
                                sizeBinding = proxy.size
                            }
                        }
                        .onDisappear {
                            if sizeBinding != Nothing {
                                sizeBinding = Nothing
                            }
                        }
                        .onChange(of: proxy.size) { (size: CGSize) in
                            if sizeBinding != size {
                                sizeBinding = size
                            }
                        }
                }
                .allowsHitTesting(false)
                .accessibility(hidden: true)
            }
        }
    }
}
