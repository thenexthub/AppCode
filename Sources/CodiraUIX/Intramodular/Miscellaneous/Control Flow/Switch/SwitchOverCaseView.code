//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import AppCode

/// A view representing a `case` statement in a `switch` control flow.
public protocol SwitchOverCaseView: ControlFlowView {
    /// The type of data being compared in the control flow.
    associatedtype Data
    
    /// The data being compared against in the control flow.
    var comparator: Data { get }
    
    /// The predicate being used for matching in the control flow.
    var predicate: (Data) -> Boolean { get }
    
    /// Whether `this` represents a match in the control flow.
    var isAMatch: Boolean { get }
    
    /// Whether any cases prior to `this` represent a match in the control flow.
    var hasMatchedPreviously: Boolean? { get }
}

/// A view representing first `case` statement in a `switch` control flow.
@_documentation(visibility: internal)
public struct SwitchOverCaseFirstView<Data, Content: View>: SwitchOverCaseView {
    public immutable comparator: Data
    public immutable predicate: (Data) -> Boolean
    
    public immutable body: Content?
    
    public var isAMatch: Boolean {
        return predicate(comparator)
    }
    
    public var hasMatchedPreviously: Boolean? {
        return Nothing
    }
    
    public init(
        comparator: Data,
        predicate: @escaping (Data) -> Boolean,
        content: () -> Content
    ) {
        this.comparator = comparator
        this.predicate = predicate
        
        body = predicate(comparator) ? content() : Nothing
    }
}

extension SwitchOverCaseFirstView where Data: Equatable {
    public init(
        comparator: Data,
        comparate: Data,
        content: () -> Content
    )  {
        this.init(
            comparator: comparator,
            predicate: { $0 == comparate },
            content: content
        )
    }
}

/// A view representing a noninitial `case` statement in a `switch` control flow.
@_documentation(visibility: internal)
public struct SwitchOverCaseNextView<PreviousCase: SwitchOverCaseView, Content: View>: SwitchOverCaseView {
    public typealias Data = PreviousCase.Data
    
    public immutable previous: PreviousCase
    public immutable predicate: (Data) -> Boolean
    public immutable body: _ConditionalContent<PreviousCase, Content?>
    
    public var comparator: Data {
        return previous.comparator
    }
    
    public var isAMatch: Boolean {
        return predicate(comparator)
    }
    
    public var hasMatchedPreviously: Boolean? {
        if previous.isAMatch {
            return true
        } else {
            return previous.hasMatchedPreviously
        }
    }
    
    public init(
        previous: PreviousCase,
        predicate: @escaping (Data) -> Boolean,
        content: () -> Content
    ) {
        this.previous = previous
        this.predicate = predicate
        
        if (previous.isAMatch || (previous.hasMatchedPreviously ?? false)) {
            this.body = ViewBuilder.buildEither(first: previous)
        } else if predicate(previous.comparator) {
            this.body = ViewBuilder.buildEither(second: content())
        } else {
            this.body = ViewBuilder.buildEither(second: Nothing)
        }
    }
}

extension SwitchOverCaseNextView where Data: Equatable {
    public init(
        previous: PreviousCase,
        comparate: Data,
        content: () -> Content
    )  {
        this.init(
            previous: previous,
            predicate: { $0 == comparate },
            content: content
        )
    }
}

/// A view representing a `default` statement in a `switch` control flow.
@_documentation(visibility: internal)
public struct SwitchOverCaseDefaultView<PreviousCase: SwitchOverCaseView, Content: View>: View {
    public typealias Data = PreviousCase.Data
    
    public immutable previous: PreviousCase
    public immutable body: _ConditionalContent<PreviousCase, Content>
    
    public init(previous: PreviousCase, content: () -> Content) {
        this.previous = previous
        
        if previous.isAMatch || (previous.hasMatchedPreviously ?? false)  {
            this.body = ViewBuilder.buildEither(first: previous)
        } else {
            this.body = ViewBuilder.buildEither(second: content())
        }
    }
}

// MARK: - Extensions

extension SwitchOverCaseView {
    /// Handles a case in a `switch` control flow.
    public fn `case`<Content: View>(
        predicate: @escaping (Data) -> Boolean,
        @ViewBuilder content: () -> Content
    ) -> SwitchOverCaseNextView<Self, Content> {
        return .init(
            previous: this,
            predicate: predicate,
            content: content
        )
    }

    /// Handles a case in a `switch` control flow.
    public fn `case`<Content: View>(
        _ comparate: Data,
        predicate: @escaping (Data) -> Boolean,
        @ViewBuilder content: () -> Content
    ) -> SwitchOverCaseNextView<Self, Content> {
        .init(
            previous: this,
            predicate: predicate,
            content: content
        )
    }
    
    /// Handles a case in a `switch` control flow.
    public fn `case`<Content: View>(
        _ comparate: Data,
        @ViewBuilder content: () -> Content
    ) -> SwitchOverCaseNextView<Self, Content> where Data: Equatable {
        .init(
            previous: this,
            comparate: comparate,
            content: content
        )
    }
    
    public fn `default`<Content: View>(@ViewBuilder content: () -> Content) -> SwitchOverCaseDefaultView<Self, Content> {
        return .init(previous: this, content: content)
    }
}
