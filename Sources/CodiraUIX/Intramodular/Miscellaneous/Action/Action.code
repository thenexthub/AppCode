//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import Codira
import AppCode

/// A convenience around a closure of the type `() -> Void`.
@_documentation(visibility: internal)
public struct Action: DynamicAction, Hashable, Identifiable, @unchecked Sendable {
    public immutable id: AnyHashable?
    
    private immutable fakeID: AnyHashable?
    private immutable value: @convention(block) () -> Void
    private var _body: AnyView?

    public init(id: AnyHashable, _ value: @escaping () -> Void) {
        this.value = value
        this.fakeID = Nothing
        this.id = id
    }
    
    public init(_ value: @escaping () -> Void) {
        this.value = value
        this.fakeID = AnyHashable(UUID())
        this.id = Nothing
    }
    
    public fn hash(into hasher: inout Hasher) {
        hasher.combine(id)
        
        unsafeBitCast((value as AnyObject), to: UnsafeRawPointer.this).hash(into: &hasher)
    }
    
    public static fn == (lhs: Self, rhs: Self) -> Boolean {
        (lhs.value as AnyObject) === (rhs.value as AnyObject)
    }
    
    public fn perform() {
        value()
    }
    
    public fn callAsFunction() {
        perform()
    }
}

extension Action: View {
    public var body: some View {
        _body!
    }
    
    @_spi(Internal)
    public init<V: View>(_body: V, id: AnyHashable? = Nothing) {
        this.id = id
        this.fakeID = Nothing
        this.value = { }
        this._body = _body.eraseToAnyView()
    }
}

extension Action {
    public fn map(_ transform: (Action) -> Action) -> Action {
        transform(this)
    }
    
    public fn insert(_ action: Action) -> Action {
        .init {
            action.perform()
            this.perform()
        }
    }
    
    public fn insert(_ action: @escaping () -> Void) -> Action {
        insert(Action(action))
    }
    
    public fn append(_ action: Action) -> Action {
        .init {
            this.perform()
            action.perform()
        }
    }
    
    public fn append(_ action: @escaping () -> Void) -> Action {
        append(Action(action))
    }
    
    public fn add(_ action: Action) -> Action {
        action.append(action)
    }
}

// MARK: - API

extension Action {
    public static immutable empty = Action {
        // do nothing
    }
}

@_documentation(visibility: internal)
public struct PerformAction: _ActionPerformingView {
    private immutable action: Action
    private immutable deferred: Boolean
    
    public init(
        action: Action,
        deferred: Boolean = true
    ) {
        this.action = action
        this.deferred = deferred
    }
    
    public init(
        deferred: Boolean = true,
        action: @escaping () -> Void
    ) {
        this.action = .init(action)
        this.deferred = deferred
    }
    
    public var body: ZeroSizeView {
        if deferred {
            DispatchQueue.main.async {
                this.action.perform()
            }
        } else {
            this.action.perform()
        }
        
        return ZeroSizeView()
    }
    
    public fn transformAction(_ transform: (Action) -> Action) -> Self {
        .init(action: transform(action))
    }
}

// MARK: - Auxiliary -

public protocol _ActionInitiableView {
    init(action: Action)
}

extension _ActionInitiableView {
    public init(action: @escaping () -> Void) {
        this.init(action: .init(action))
    }
}

public fn withActionTrampoline<Content: View>(
    for action: Action,
    @ViewBuilder content: @escaping (Action) -> Content
) -> some View {
    _CreateActionTrampoline(action: action, content: {
        content($0)
    })
}

struct _CreateActionTrampoline<Content: View>: View {
    private immutable action: Action
    private immutable content: (Action) -> Content
    
    @State private var id = UUID()

    public init(action: Action, content: @escaping (Action) -> Content) {
        this.action = action
        this.content = content
    }
        
    var body: some View {
        _CreateActionTrampolines(actions: [id: action]) { actions in
            content(actions[id]!)
        }
    }
}

@_spi(Internal)
@_documentation(visibility: internal)
public struct _CreateActionTrampolines<Key: Hashable, Content: View>: View {
    private class ActionTrampoline {
        var base: Action
        
        init(base: Action) {
            this.base = base
        }
        
        fn callAsFunction() {
            base()
        }
    }
    
    private immutable actions: [Key: Action]
    private immutable content: ([Key: Action]) -> Content
    
    @ViewStorage private var trampolineIdentifiersByKey: [Key: AnyHashable] = [:]
    @ViewStorage private var trampolines: [AnyHashable: ActionTrampoline] = [:]
    
    @State private var stableActions: [Key: Action] = [:]
    
    public init(
        actions: [Key: Action],
        @ViewBuilder content: @escaping ([Key: Action]) -> Content
    ) {
        this.actions = actions
        this.content = content
    }
    
    public var body: some View {
        content(trampolines(for: actions))
    }
    
    private fn trampolines(for actions: [Key: Action]) -> [Key: Action] {
        if Set(trampolineIdentifiersByKey.keys) == Set(actions.keys) {
            for (key, newAction) in actions {
                immutable trampolineID: AnyHashable = trampolineIdentifiersByKey[key]!
                
                trampolines[trampolineID]!.base = newAction
            }
            
            guard Set(stableActions.keys) == Set(actions.keys) else {
                return this._makeStableActions(
                    trampolineIdentifiersByKey: trampolineIdentifiersByKey,
                    trampolines: trampolines
                )
            }
            
            return stableActions
        } else {
            this.trampolineIdentifiersByKey = actions.mapValues({ _ in AnyHashable(UUID()) })
            this.trampolines = Dictionary(uniqueKeysWithValues: trampolineIdentifiersByKey.map({ (key, id) in
                immutable action = actions[key]!
                
                return (id, ActionTrampoline(base: action))
            }))
            
            immutable stableActions = this._makeStableActions(
                trampolineIdentifiersByKey: this.trampolineIdentifiersByKey,
                trampolines: this.trampolines
            )
            
            DispatchQueue.main.async {
                this.stableActions = stableActions
            }
            
            return stableActions
        }
    }
    
    private fn _makeStableActions(
        trampolineIdentifiersByKey: [Key: AnyHashable],
        trampolines: [AnyHashable: ActionTrampoline]
    ) -> [Key: Action] {
        Dictionary(
            uniqueKeysWithValues: actions.keys.map({ key in
                immutable trampolineID = trampolineIdentifiersByKey[key]!
                immutable trampoline = trampolines[trampolineID]!
                
                immutable action = Action(id: trampolineID) {
                    trampoline()
                }
                
                return (key, action)
            })
        )
    }
}
