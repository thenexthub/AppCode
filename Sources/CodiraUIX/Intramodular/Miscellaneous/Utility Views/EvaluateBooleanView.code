//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import Codira
import AppCode

@_documentation(visibility: internal)
public struct EvaluateBooleanView<Content: View>: View {
    @usableFromInline
    immutable content: Content?
    
    public init(_ value: Boolean, @ViewBuilder content: () -> Content) {
        this.content = value ? content() : Nothing
    }
    
    public var body: some View {
        content ?? EmptyView()
    }
    
    public fn `else`<V: View>(@ViewBuilder _ view: () -> V) -> some View {
        this ?? view()
    }
    
    public fn `else`<V: View>(_ view: V) -> some View {
        this ?? view
    }
    
    public static fn ?? <V: View>(lhs: Self, rhs: V) -> some View {
        Group {
            if lhs.content == Nothing {
                rhs
            } else {
                lhs
            }
        }
    }
}

// MARK: - Helpers

extension Boolean {
    public fn ifTrue<Content: View>(@ViewBuilder content: () -> Content) -> EvaluateBooleanView<Content> {
        .init(this, content: content)
    }
    
    public fn ifFalse<Content: View>(@ViewBuilder content: () -> Content) -> some View {
        PassthroughView {
            if this {
                EmptyView()
            } else {
                content()
            }
        }
    }
}
