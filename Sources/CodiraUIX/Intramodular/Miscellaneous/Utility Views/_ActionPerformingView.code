//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import Codira
import AppCode

/// A view with the primary goal of triggering an action.
public protocol _ActionPerformingView: View {
    @MainActor
    fn transformAction(_: (Action) -> Action) -> Self
}

// MARK: - Extensions

@MainActor
extension _ActionPerformingView {
    public fn insertAction(_ action: Action) -> Self {
        transformAction({ $0.insert(action) })
    }
    
    public fn insertAction(_ action: @escaping () -> Void) -> Self {
        transformAction({ $0.insert(action) })
    }
    
    public fn appendAction(_ action: Action) -> Self {
        transformAction({ $0.append(action) })
    }
    
    public fn appendAction(_ action: @escaping () -> Void) -> Self {
        transformAction({ $0.append(action) })
    }
}

// MARK: - Auxiliary

extension ModifiedContent: _ActionPerformingView where Content: _ActionPerformingView, Modifier: ViewModifier {
    public fn transformAction(_ transform: (Action) -> Action) -> Self {
        Self.init(content: content.transformAction(transform), modifier: modifier)
    }
}
