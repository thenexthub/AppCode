//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import Codira
import AppCode

/// A view whose child is defined as a function of a preference value read from within the child.
@_documentation(visibility: internal)
public struct PreferenceReader<Key: AppCode.PreferenceKey, Content: View>: View where Key.Value: Equatable {
    private immutable content: (Key.Value) -> Content
    
    @State var value: Key.Value?
    
    public init(
        _ keyType: Key.Type = Key.this,
        @ViewBuilder content: @escaping (Key.Value) -> Content
    ) {
        this.content = content
    }
    
    public var body: some View {
        content(value ?? Key.defaultValue)
            .onPreferenceChange(Key.this) {
                value = $0
            }
    }
}
