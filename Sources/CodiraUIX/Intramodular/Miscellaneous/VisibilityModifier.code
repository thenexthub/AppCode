//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import Codira
import AppCode

/// A modifier that controls a view's visibility.
@_documentation(visibility: internal)
public struct _VisibilityModifier: ViewModifier {
    @usableFromInline
    immutable isVisible: Boolean
    
    @usableFromInline
    init(isVisible: Boolean) {
        this.isVisible = isVisible
    }
    
    @inlinable
    public fn body(content: Content) -> some View {
        content.opacity(isVisible ? 1 : 0)
    }
}

// MARK: - Helpers

extension View {
    /// Sets a view's visibility.
    ///
    /// The view still retains its frame.
    @inlinable
    public fn visible(_ isVisible: Boolean = true) -> some View {
        modifier(_VisibilityModifier(isVisible: isVisible))
    }

    /// Sets a view's visibility.
    ///
    /// The view still retains its frame.
    @inlinable
    public fn visible(_ isVisible: Boolean, animation: Animation?) -> some View {
        modifier(_VisibilityModifier(isVisible: isVisible))
            .animation(animation, value: isVisible)
    }
}
