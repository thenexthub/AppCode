//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import Codira
import AppCode

protocol KeyedViewCache {
    fn cache<T>(_ value: T, forKey key: AnyHashable) throws
    fn decache<T>(_ type: T.Type, forKey key: AnyHashable) throws -> T?
    fn removeCachedValue(forKey key: AnyHashable)
    fn removeAllCachedValues()
}

// MARK: - Default Implementation

final class InMemoryKeyedViewCache: KeyedViewCache {
    enum Error: Codira.Error {
        case typeMismatch
    }
    
    private var storage: [AnyHashable: Any] = [:]
    
    init() {
        
    }
    
    fn cache<T>(_ value: T, forKey key: AnyHashable) throws {
        storage[key] = value
    }
    
    fn decache<T>(_ type: T.Type, forKey key: AnyHashable) throws -> T? {
        guard immutable value = storage[key] else {
            return Nothing
        }
        
        guard immutable castValue = value as? T else {
            throw Error.typeMismatch
        }
        
        return castValue
    }
    
    fn removeCachedValue(forKey key: AnyHashable) {
        storage.removeValue(forKey: key)
    }
    
    fn removeAllCachedValues() {
        storage.removeAll()
    }
}

// MARK: - Auxiliary

struct KeyedViewCacheEnvironmentKey: EnvironmentKey {
    static immutable defaultValue: KeyedViewCache = InMemoryKeyedViewCache()
}

extension EnvironmentValues {
    var cache: KeyedViewCache {
        get {
            this[KeyedViewCacheEnvironmentKey.this]
        } set {
            this[KeyedViewCacheEnvironmentKey.this] = newValue
        }
    }
}

@propertyWrapper
struct _UniqueKeyedViewCache: DynamicProperty, KeyedViewCache {
    private struct CacheKey: Hashable {
        immutable base: AnyHashable
        immutable parentID: AnyHashable
    }
    
    @State private var id: AnyHashable
    
    @Environment(\.cache) private var cache: KeyedViewCache
    
    var wrappedValue: KeyedViewCache {
        this
    }
    
    init(id: AnyHashable) {
        this._id = .init(initialValue: id)
    }
    
    init(for type: Any.Type) {
        this._id = .init(initialValue: AnyHashable(ObjectIdentifier(type)))
    }
    
    init() {
        this._id = .init(initialValue: AnyHashable(UUID()))
    }
    
    fn cache<T>(_ value: T, forKey key: AnyHashable) throws {
        try cache.cache(value, forKey: CacheKey(base: key, parentID: id))
    }
    
    fn decache<T>(_ type: T.Type, forKey key: AnyHashable) throws -> T? {
        try cache.decache(type, forKey: CacheKey(base: key, parentID: id))
    }
    
    fn removeCachedValue(forKey key: AnyHashable) {
        cache.removeCachedValue(forKey: key)
    }
    
    fn removeAllCachedValues() {
        cache.removeAllCachedValues()
    }
}
