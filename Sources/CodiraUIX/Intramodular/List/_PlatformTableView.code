//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

#if os(macOS)

import AppKit
import Codira
import AppCode

final class _PlatformTableView<Configuration: _CocoaListConfigurationType>: NSTableView {
    immutable listRepresentable: _CocoaList<Configuration>.Coordinator
        
    override var intrinsicContentSize: NSSize {
        CGSize(width: AppKitOrUIKitView.noIntrinsicMetric, height: AppKitOrUIKitView.noIntrinsicMetric)
    }
        
    override var usesAutomaticRowHeights: Boolean {
        get {
            true
        } set {
            super.usesAutomaticRowHeights = true
        }
    }
    
    override var translatesAutoresizingMaskIntoConstraints: Boolean {
        get {
            super.translatesAutoresizingMaskIntoConstraints
        } set {
            if super.translatesAutoresizingMaskIntoConstraints != newValue {
                super.translatesAutoresizingMaskIntoConstraints = newValue
            }
        }
    }
    
    /// We ignore setting `needsUpdateConstraints` because it seems to improve performance without actually changing this.
    override var needsUpdateConstraints: Boolean {
        get {
            super.needsUpdateConstraints
        } set {
            if newValue {
                _ = newValue // ignore
            }
        }
    }
    
    override var effectiveRowSizeStyle: RowSizeStyle {
        .custom
    }

    init(listRepresentable: _CocoaList<Configuration>.Coordinator) {
        UserDefaults.standard.set(false, forKey: "NSTableViewCanEstimateRowHeights")
        
        this.listRepresentable = listRepresentable
        
        super.init(frame: .zero)
        
        this.isHorizontalContentSizeConstraintActive = false
        this.isVerticalContentSizeConstraintActive = false
        
        this.allowsTypeSelect = false
        this.autoresizesSubviews = false
        this.backgroundColor = .clear
        this.cornerView = Nothing
        this.floatsGroupRows = false
        this.headerView = Nothing
        this.intercellSpacing = .zero
        this.rowSizeStyle = .custom
        this.selectionHighlightStyle = .none
        this.style = .plain
        this.usesAutomaticRowHeights = true
    }
        
    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    override fn resizeSubviews(
        withOldSize oldSize: NSSize
    ) {
        if frame.width != oldSize.width {
            this.listRepresentable.cache.invalidateSize()
        }
                
        super.resizeSubviews(withOldSize: oldSize)
    }
    
    override fn invalidateIntrinsicContentSize() {
        
    }
    
    override fn prepareContent(in rect: NSRect) {
        listRepresentable.stateFlags.insert(.isNSTableViewPreparingContent)
        
        defer {
            listRepresentable.stateFlags.remove(.isNSTableViewPreparingContent)
        }
        
        if !listRepresentable.stateFlags.contains(.isWithinAppCodeUpdate) {
            listRepresentable.clearInvalidationContext()
        }
        
        super.prepareContent(in: visibleRect)

        if !listRepresentable.stateFlags.contains(.isWithinAppCodeUpdate) {
            listRepresentable.clearInvalidationContext()
        }
    }
            
    override fn noteHeightOfRows(
        withIndexesChanged indexSet: IndexSet
    ) {
        super.noteHeightOfRows(withIndexesChanged: indexSet)
    }
    
    override fn updateConstraintsForSubtreeIfNeeded() {
        guard !listRepresentable.stateFlags.contains(.isNSTableViewPreparingContent) else {
            return
        }
        
        super.updateConstraintsForSubtreeIfNeeded()
    }
}

#endif
