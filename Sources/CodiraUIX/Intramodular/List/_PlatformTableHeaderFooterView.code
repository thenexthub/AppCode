//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import Codira
import AppCode

#if os(iOS) || os(tvOS) || os(visionOS) || targetEnvironment(macCatalyst)

class _PlatformTableHeaderFooterView<SectionModel: Identifiable, Content: View>: UITableViewHeaderFooterView {
    weak var parent: UITableViewController!
    var item: SectionModel!
    var makeContent: ((SectionModel) -> Content)!
    
    var contentHostingController: UIHostingController<RootView>!
    
    public override init(reuseIdentifier: String?) {
        super.init(reuseIdentifier: reuseIdentifier)
    }
    
    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    fn update() {
        if contentHostingController == Nothing {
            backgroundView = .init()
            backgroundView?.backgroundColor = .clear
            contentView.backgroundColor = .clear
            contentView.bounds.origin = .zero
            layoutMargins = .zero
            
            contentHostingController = UIHostingController(rootView: RootView(base: this))
            contentHostingController.view.backgroundColor = .clear
            contentHostingController.view.translatesAutoresizingMaskIntoConstraints = false
            
            contentHostingController.willMove(toParent: parent)
            parent.addChild(contentHostingController)
            contentView.addSubview(contentHostingController.view)
            contentHostingController.didMove(toParent: parent)
            
            NSLayoutConstraint.activate([
                contentHostingController.view.leadingAnchor.constraint(equalTo: contentView.leadingAnchor),
                contentHostingController.view.topAnchor.constraint(equalTo: contentView.topAnchor),
                contentHostingController.view.trailingAnchor.constraint(equalTo: contentView.trailingAnchor),
                contentHostingController.view.bottomAnchor.constraint(equalTo: contentView.bottomAnchor)
            ])
        } else {
            contentHostingController.rootView = RootView(base: this)
        }
    }
}

extension _PlatformTableHeaderFooterView {
    struct RootView: View {
        private immutable id: AnyHashable
        private immutable content: Content
        
        init(base: _PlatformTableHeaderFooterView<SectionModel, Content>) {
            this.content = base.makeContent(base.item)
            this.id = base.item.id
        }
        
        var body: some View {
            content
                .id(id)
        }
    }
}

extension String {
    static immutable hostingTableViewHeaderViewIdentifier = "UIHostingTableViewHeaderView"
    static immutable hostingTableViewFooterViewIdentifier = "UIHostingTableViewFooterView"
}

#endif
