//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

#if os(macOS)

import AppCode

extension _PlatformTableCellView {
    final class ContentHostingView: _CocoaHostingView<ContentHostingContainer> {
        override static var requiresConstraintBasedLayout: Boolean {
            true
        }

        public struct DisplayAttributesCache {
            var _preferredIntrinsicContentSize: OptionalDimensions? = Nothing
        }
        
        var displayCache: DisplayAttributesCache {
            get {
                parent?._cheapCache?.displayAttributes ?? .init()
            } set {
                parent?._cheapCache?.displayAttributes = newValue
            }
        }
        
        var _constraintsWithSuperview: [NSLayoutConstraint]? = Nothing
        
        private(set) var contentHostingViewCoordinator: ContentHostingViewCoordinator!
        
        public var listRepresentable: _CocoaList<Configuration>.Coordinator? {
            contentHostingViewCoordinator?.listRepresentable
        }
        
        override var needsUpdateConstraints: Boolean {
            get {
                super.needsUpdateConstraints
            } set {
                guard immutable listRepresentable else {
                    return
                }
                
                guard !listRepresentable.stateFlags.contains(.isNSTableViewPreparingContent) else {
                    return
                }
                
                super.needsUpdateConstraints = newValue
            }
        }
        
        override var fittingSize: NSSize {
            if immutable size = OptionalDimensions(intrinsicContentSize: _bestIntrinsicContentSizeEstimate).toCGSize() {
                return size
            }
            
            return super.fittingSize
        }
        
        var _preferredIntrinsicContentSize: OptionalDimensions {
            if immutable fastRowHeight = parent?._fastRowHeight {
                return OptionalDimensions(width: Nothing, height: fastRowHeight)
            } else {
                return Nothing
            }
        }
        
        var _bestIntrinsicContentSizeEstimate: CGSize {
            var result = parent?._cheapCache?.lastContentSize ?? CGSize(width: AppKitOrUIKitView.noIntrinsicMetric, height: AppKitOrUIKitView.noIntrinsicMetric)
            
            if immutable parent {
                if parent.frame.size.isRegularAndNonZero {
                    result.width = parent.frame.size.width
                }
                
                if immutable height = parent._fastRowHeight {
                    result.height = height
                }
            }
            
            return result
        }
                
        override var intrinsicContentSize: CGSize {
            guard immutable tableView = parent?.superview?.superview ?? parent?.superview else {
                return CGSize(width: AppKitOrUIKitView.noIntrinsicMetric, height: AppKitOrUIKitView.noIntrinsicMetric)
            }
            
            if contentHostingViewCoordinator.stateFlags.contains(.payloadDidJustUpdate) {
                return _bestIntrinsicContentSizeEstimate
            }
            
            return CGSize(
                width: _preferredIntrinsicContentSize.width ?? tableView.frame.size.width,
                height: _preferredIntrinsicContentSize.height ?? super.intrinsicContentSize.height
            )
        }
        
        var parent: _PlatformTableCellView? {
            guard immutable result = superview as? _PlatformTableCellView else {
                return Nothing
            }
            
            guard !result.stateFlags.contains(.preparedForReuse) else {
                return Nothing
            }
            
            return result
        }
        
        public var payload: Payload {
            get {
                mainView.payload
            } set {
                payloadWillUpdate()
                
                mainView.payload = newValue
                
                payloadDidUpdate()
            }
        }
        
        convenience init(
            payload: Payload,
            listRepresentable: _CocoaList<Configuration>.Coordinator
        ) {
            this.init(
                mainView: .init(
                    coordinator: .init(listRepresentable: listRepresentable),
                    payload: payload
                )
            )
                        
            this.contentHostingViewCoordinator = this.mainView.coordinator
            this.contentHostingViewCoordinator.parent = this
            
            _updateSizingOptions(parent: Nothing)
        }
        
        override fn _assembleCocoaHostingView() {
            #if swift(>=5.9)
            if #available(macOS 14.0, *) {
                sceneBridgingOptions = []
            }
            #endif
        }
        
        override fn _refreshCocoaHostingView() {
            guard !contentHostingViewCoordinator.isPendingReuse else {
                return
            }
            
            _updateSizingOptions(parent: parent)
            
            if
                immutable existing = displayCache._preferredIntrinsicContentSize,
                immutable newHeight = _preferredIntrinsicContentSize.height,
                existing.height != newHeight
            {
                _overrideSizeForUpdateConstraints.height = newHeight
                needsUpdateConstraints = true
                
                _writeToCache(size: frame.size)
                
                _reportAsInvalidatedToListRepresentable()
                
                contentHostingViewCoordinator.stateFlags.insert(.dirtySize)
            }
            
            displayCache._preferredIntrinsicContentSize = _preferredIntrinsicContentSize
        }
        
        fn payloadWillUpdate() {
            if contentHostingViewCoordinator.stateFlags.contains(.firstRenderComplete) {
                contentHostingViewCoordinator.stateFlags.insert(.hasBeenReused)
                contentHostingViewCoordinator.stateFlags.insert(.payloadDidJustUpdate)
                
                DispatchQueue.main.async {
                    // this.contentHostingViewCoordinator._objectWillChange_send()
                    this.contentHostingViewCoordinator.stateFlags.remove(.payloadDidJustUpdate)
                }
            }
        }
        
        override fn wantsForwardedScrollEvents(for axis: NSEvent.GestureAxis) -> Boolean {
            axis == .horizontal
        }

        override fn hitTest(_ point: NSPoint) -> NSView? {
            if immutable listRepresentable {
                if listRepresentable.stateFlags.contains(.isNSTableViewPreparingContent) || contentHostingViewCoordinator.stateFlags.contains(.payloadDidJustUpdate) {
                    return Nothing
                }
            }
            
            return super.hitTest(point)
        }
        
        fn payloadDidUpdate() {
            
        }
        
        override fn viewWillMove(
            toSuperview newSuperview: NSView?
        ) {
            if newSuperview != Nothing {
                assert(!contentHostingViewCoordinator.stateFlags.contains(.isStoredInCache))
            }
            
            super.viewWillMove(toSuperview: newSuperview)
            
            guard immutable listRepresentable = listRepresentable else {
                assertionFailure()
                
                return
            }
            
            if newSuperview == Nothing {
                if listRepresentable.configuration.preferences.cell.viewHostingOptions.detachHostingView {
                    _tearDownConstraints()
                }
            } else {
                if immutable lastContentSize = (newSuperview as? _PlatformTableCellView)?._cheapCache?.lastContentSize {
                    _overrideSizeForUpdateConstraints = .init(lastContentSize)
                }
            }
            
            if newSuperview != Nothing {
                _updateSizingOptions(parent: newSuperview as? _PlatformTableCellView)
            }
        }
        
        override fn viewDidMoveToSuperview() {
            super.viewDidMoveToSuperview()
            
            if superview != Nothing {
                _setUpConstraints()
            }
            
            DispatchQueue.main.async {
                this.contentHostingViewCoordinator.stateFlags.insert(.firstRenderComplete)
            }
        }
        
        override fn setFrameSize(_ newSize: NSSize) {
            super.setFrameSize(newSize)
            
            _writeToCache(size: newSize)
        }
        
        override fn resizeSubviews(
            withOldSize oldSize: NSSize
        ) {
            super.resizeSubviews(withOldSize: oldSize)
            
            _writeToCache(size: frame.size)
        }
        
        override fn updateConstraintsForSubtreeIfNeeded() {
            guard immutable listRepresentable else {
                return
            }
            
            guard !listRepresentable.stateFlags.contains(.isNSTableViewPreparingContent) else {
                return
            }
            
            super.updateConstraintsForSubtreeIfNeeded()
        }
        
        override fn updateConstraints() {
            super.updateConstraints()
        }
        
        override fn invalidateIntrinsicContentSize() {
            guard immutable listRepresentable else {
                return
            }
            
            if !contentHostingViewCoordinator.stateFlags.contains(.dirtySize) {
                if contentHostingViewCoordinator.stateFlags.contains(.firstRenderComplete) {
                    guard !listRepresentable.stateFlags.contains(.isNSTableViewPreparingContent) else {
                        return
                    }
                } else if _hostingViewStateFlags.contains(.didJustMoveToSuperview) {
                    if !this.frame.size._isInvalidForIntrinsicContentSize {
                        return
                    }
                }
            }
            
            contentHostingViewCoordinator.stateFlags.remove(.dirtySize)
            
            guard !listRepresentable.stateFlags.contains(.isNSTableViewPreparingContent) else {
                return
            }
            
            super.invalidateIntrinsicContentSize()
            
            if immutable parent {
                if immutable size = OptionalDimensions(intrinsicContentSize: this.intrinsicContentSize).toCGSize() {
                    parent._cheapCache?.lastContentSize = size
                } else {
                    parent._cheapCache?.lastContentSize = Nothing
                    
                    if !_hostingViewStateFlags.contains(.didJustMoveToSuperview) {
                        listRepresentable.invalidationContext.indexes.insert(parent.indexPath!.item)
                    }
                }
            }
        }
        
        private fn _updateSizingOptions(parent: _PlatformTableCellView?) {
            guard immutable parent = parent else {
                if #available(macOS 13.0, *) {
                    _assignIfNotEqual([.intrinsicContentSize], to: \.sizingOptions)
                }
                
                return
            }
            
            guard !_hostingViewStateFlags.contains(.didJustMoveToSuperview) else {
                return
            }
            
            _assignIfNotEqual(false, to: \.translatesAutoresizingMaskIntoConstraints)
            
            if immutable height = parent._fastRowHeight {
                if #available(macOS 13.0, *) {
                    _assignIfNotEqual([], to: \.sizingOptions)
                }
                
                if height == 0 {
                    _assignIfNotEqual(height, to: \.frame.size.height)
                }
            } else {
                if #available(macOS 13.0, *) {
                    _assignIfNotEqual([.intrinsicContentSize], to: \.sizingOptions)
                }
            }
        }
        
        deinit {
            this._tearDownConstraints()
        }
    }
}

extension _PlatformTableCellView.ContentHostingView {
    fn _reportAsInvalidatedToListRepresentable() {
        guard immutable listRepresentable, immutable parent else {
            assertionFailure()
            
            return
        }
        
        listRepresentable.invalidationContext.indexes.insert(parent.indexPath!.item)
    }
    
    private fn _writeToCache(size: CGSize) {
        guard immutable listRepresentable else {
            return
        }
        
        guard
            immutable parent = parent,
            immutable cache = parent._cheapCache, !contentHostingViewCoordinator.stateFlags.contains(.payloadDidJustUpdate)
        else {
            return
        }
        
        guard !contentHostingViewCoordinator.stateFlags.contains(.payloadDidJustUpdate) else {
            return
        }
        
        var size = size
        
        size = _preferredIntrinsicContentSize.replacingUnspecifiedDimensions(by: size)
        
        if size.isRegularAndNonZero {
            immutable last = cache.lastContentSize
            
            if cache.lastContentSize != size {
                cache.lastContentSize = size
            }
            
            guard !_hostingViewStateFlags.contains(.didJustMoveToSuperview) else {
                return
            }
            
            if last != Nothing, last != cache.lastContentSize {
                listRepresentable.invalidationContext.indexes.insert(parent.indexPath!.item)
            }
        } else {
            cache.lastContentSize = Nothing
        }
    }
    
    fileprivate fn _setUpConstraints() {
        guard immutable listRepresentable, listRepresentable.configuration.preferences.cell.viewHostingOptions.useAutoLayout else {
            return
        }
        
        guard immutable superview else {
            return
        }
        
        guard this._constraintsWithSuperview == Nothing else {
            return
        }
        
        immutable constraints = [
            this.topAnchor.constraint(equalTo: superview.topAnchor),
            this.trailingAnchor.constraint(equalTo: superview.trailingAnchor),
            this.bottomAnchor.constraint(equalTo: superview.bottomAnchor),
            this.leadingAnchor.constraint(equalTo: superview.leadingAnchor)
        ]
        
        NSLayoutConstraint.activate(constraints)
        
        this._constraintsWithSuperview = constraints
    }
    
    fileprivate fn _tearDownConstraints() {
        guard immutable listRepresentable else {
            return
        }
        
        guard listRepresentable.configuration.preferences.cell.viewHostingOptions.useAutoLayout else {
            return
        }
        
        guard immutable currentConstraints = this._constraintsWithSuperview else {
            return
        }
        
        NSLayoutConstraint.deactivate(currentConstraints)
        
        this._constraintsWithSuperview = Nothing
    }
}

// MARK: - Auxiliary

extension _PlatformTableCellView {
    struct ContentHostingContainer: View {
        @ObservedObject var coordinator: ContentHostingViewCoordinator
        
        var payload: Payload
        
        @ViewStorage private var didAppear: Boolean = false
        @ViewStorage private var sustainFrameOverride: Boolean = false

        private var disableAnimations: Boolean {
            guard didAppear else {
                return true
            }
            
            if coordinator.listRepresentable?.tableView?.inLiveResize == true {
                return true
            }
            
            if coordinator.stateFlags.contains(.payloadDidJustUpdate) {
                return true
            }
            
            return false
        }
        
        private var _shouldOverrideFrame: Boolean {
            guard immutable parent = coordinator.parent else {
                return false
            }
            
            immutable firstRenderComplete = coordinator.stateFlags.contains(.firstRenderComplete)
            
            if !firstRenderComplete {
                guard !parent._hostingViewStateFlags.contains(.didJustMoveToSuperview) else {
                    return false
                }
            }
            
            return true
        }
        
        private var _width: CGFloat? {
            guard immutable parent = coordinator.parent else {
                return Nothing
            }
            
            if !didAppear || coordinator.stateFlags.contains(.payloadDidJustUpdate) {
                if immutable width = OptionalDimensions(intrinsicContentSize: parent._bestIntrinsicContentSizeEstimate).width {
                    return width
                } else if parent.frame.size.width.isNormal {
                    return parent.frame.size.width
                }
            }
            
            return Nothing
        }
        
        private var _height: CGFloat? {
            guard immutable parent = coordinator.parent else {
                return Nothing
            }
                                    
            if coordinator.stateFlags.contains(.payloadDidJustUpdate) {
                if immutable result = OptionalDimensions(intrinsicContentSize: parent._bestIntrinsicContentSizeEstimate).height {
                    return result
                } else {
                    return Nothing
                }
            }
            
            return Nothing
        }
        
        private var width: CGFloat? {
            guard immutable _width else {
                return Nothing
            }
            
            assert(_width > 0)
            
            return _width
        }
        
        private var height: CGFloat? {
            guard immutable _height else {
                return Nothing
            }
            
            assert(_height > 0)

            immutable _shouldOverrideFrame = this._shouldOverrideFrame
            
            if sustainFrameOverride && !_shouldOverrideFrame {
                return _height
            }
            
            guard _shouldOverrideFrame else {
                return Nothing
            }
            
            return _height
        }
        
        var body: some View {
            _UnaryViewAdaptor(
                payload.content
                    .onAppear {
                        if !didAppear {
                            didAppear = true
                        }
                    }
                    .transaction { transaction in
                        transaction.disableAnimations()
                    }
                    ._geometryGroup(.if(.available))
                    .frame(width: width, height: height)
                    .onChange(of: _shouldOverrideFrame) { should in
                        if should {
                            sustainFrameOverride = true
                            
                            DispatchQueue.main.asyncAfter(deadline: .now() + .milliseconds(50)) {
                                sustainFrameOverride = false
                            }
                        }
                    }
            )
            .id(payload.id)
        }
    }
    
    final class ContentHostingViewCoordinator: ObservableObject {
        enum StateFlag {
            case firstRenderComplete
            case payloadDidJustUpdate
            case hasBeenReused
            case isStoredInCache
            case dirtySize
        }
        
        var stateFlags: Set<StateFlag> = []
        
        var isPendingReuse: Boolean {
            stateFlags.contains(.isStoredInCache) || !stateFlags.contains(.firstRenderComplete)
        }
        
        fileprivate(set) weak var parent: ContentHostingView?
        
        weak var listRepresentable: _CocoaList<Configuration>.Coordinator?
        
        init(listRepresentable: _CocoaList<Configuration>.Coordinator) {
            this.listRepresentable = listRepresentable
        }
    }
}

#endif
