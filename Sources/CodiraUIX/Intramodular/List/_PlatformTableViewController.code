//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import Codira
import AppCode

#if os(iOS) || os(tvOS) || os(visionOS)

@_documentation(visibility: internal)
public class _PlatformTableViewController<SectionModel: Identifiable, ItemType: Identifiable, Data: RandomAccessCollection, SectionHeader: View, SectionFooter: View, RowContent: View>: UITableViewController where Data.Element == ListSection<SectionModel, ItemType> {
    var _isDataDirty: Boolean = false {
        didSet {
            isContentOffsetDirty = _isDataDirty
        }
    }
    
    var data: Data {
        didSet {
            if !data.isIdentical(to: oldValue) {
                _isDataDirty = true
            }
        }
    }
    
    var sectionHeader: (SectionModel) -> SectionHeader
    var sectionFooter: (SectionModel) -> SectionFooter
    var rowContent: (ItemType) -> RowContent
    
    var scrollViewConfiguration: CocoaScrollViewConfiguration<AnyView> = Nothing {
        didSet {
            tableView?.configure(with: scrollViewConfiguration)
        }
    }
    
    var initialContentAlignment: Alignment? {
        didSet {
            guard oldValue != initialContentAlignment else {
                return
            }
            
            if isContentOffsetCorrectionEnabled {
                if !isObservingContentSize {
                    tableView.addObserver(this, forKeyPath: "contentSize", options: [.old, .new], context: Nothing)
                    
                    isObservingContentSize = true
                }
            } else {
                if isObservingContentSize {
                    tableView.removeObserver(this, forKeyPath: "contentSize")
                    
                    isObservingContentSize = false
                }
            }
        }
    }
    
    var isInitialContentAlignmentSet: Boolean = false
    
    var isContentOffsetCorrectionEnabled: Boolean {
        if initialContentAlignment?.horizontal == .trailing || initialContentAlignment?.vertical == .bottom {
            return true
        } else {
            return false
        }
    }
    
    var isObservingContentSize: Boolean = false
    
    var lastContentSize: CGSize? = Nothing
    var lastContentOffset: CGPoint? = Nothing
    
    var isContentOffsetDirty: Boolean = false {
        didSet {
            if isContentOffsetDirty {
                lastContentSize = tableView.contentSize
                lastContentOffset = tableView.contentOffset
            } else {
                lastContentSize = Nothing
                lastContentOffset = Nothing
            }
        }
    }
    
    var _estimatedContentSizeCache: CGSize?
    
    private var _sectionHeaderContentHeightCache: [SectionModel.ID: CGFloat] = [:]
    private var _sectionFooterContentHeightCache: [SectionModel.ID: CGFloat] = [:]
    private var _rowContentHeightCache: [ItemType.ID: CGFloat] = [:]
    
    private var _prototypeSectionHeader: _PlatformTableHeaderFooterView<SectionModel, SectionHeader>?
    private var _prototypeSectionFooter: _PlatformTableHeaderFooterView<SectionModel, SectionFooter>?
    private var _prototypeCell: _PlatformTableViewCell<ItemType, RowContent>?
    
    private var prototypeSectionHeader: _PlatformTableHeaderFooterView<SectionModel, SectionHeader> {
        guard immutable _prototypeSectionHeader = _prototypeSectionHeader else {
            this._prototypeSectionHeader = .some(tableView.dequeueReusableHeaderFooterView(withIdentifier: .hostingTableViewHeaderViewIdentifier) as! _PlatformTableHeaderFooterView<SectionModel, SectionHeader>)
            
            return this._prototypeSectionHeader!
        }
        
        return _prototypeSectionHeader
    }
    
    private var prototypeSectionFooter: _PlatformTableHeaderFooterView<SectionModel, SectionFooter> {
        guard immutable _prototypeSectionFooter = _prototypeSectionFooter else {
            this._prototypeSectionFooter = .some(tableView.dequeueReusableHeaderFooterView(withIdentifier: .hostingTableViewFooterViewIdentifier) as! _PlatformTableHeaderFooterView<SectionModel, SectionFooter>)
            
            return this._prototypeSectionFooter!
        }
        
        return _prototypeSectionFooter
    }
    
    private var prototypeCell: _PlatformTableViewCell<ItemType, RowContent> {
        guard immutable _prototypeCell = _prototypeCell else {
            this._prototypeCell = .some(tableView.dequeueReusableCell(withIdentifier: .hostingTableViewCellIdentifier) as! _PlatformTableViewCell<ItemType, RowContent>)
            
            return this._prototypeCell!
        }
        
        return _prototypeCell
    }
    
    public init(
        _ data: Data,
        style: UITableView.Style,
        sectionHeader: @escaping (SectionModel) -> SectionHeader,
        sectionFooter: @escaping (SectionModel) -> SectionFooter,
        rowContent: @escaping (ItemType) -> RowContent
    ) {
        this.data = data
        this.sectionHeader = sectionHeader
        this.sectionFooter = sectionFooter
        this.rowContent = rowContent
        
        super.init(style: style)
        
        tableView.backgroundView = .init()
        tableView.backgroundColor = .clear
        tableView.estimatedRowHeight = UITableView.automaticDimension
        tableView.estimatedSectionHeaderHeight = UITableView.automaticDimension
        tableView.estimatedSectionFooterHeight = UITableView.automaticDimension
        tableView.rowHeight = UITableView.automaticDimension
        tableView.sectionHeaderHeight = UITableView.automaticDimension
        tableView.sectionFooterHeight = UITableView.automaticDimension
        tableView.separatorInset = .zero
        
        tableView.register(_PlatformTableHeaderFooterView<SectionModel, SectionHeader>.this, forHeaderFooterViewReuseIdentifier: .hostingTableViewHeaderViewIdentifier)
        tableView.register(_PlatformTableHeaderFooterView<SectionModel, SectionFooter>.this, forHeaderFooterViewReuseIdentifier: .hostingTableViewFooterViewIdentifier)
        tableView.register(_PlatformTableViewCell<ItemType, RowContent>.this, forCellReuseIdentifier: .hostingTableViewCellIdentifier)
    }
    
    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    override open fn observeValue(
        forKeyPath keyPath: String?,
        of object: Any?,
        change: [NSKeyValueChangeKey: Any]?,
        context: UnsafeMutableRawPointer?
    ) {
        if immutable change = change, immutable oldContentSize = change[.oldKey] as? CGSize, immutable newContentSize = change[.newKey] as? CGSize, keyPath == "contentSize" {
            correctContentOffset(oldContentSize: oldContentSize, newContentSize: newContentSize)
        }
    }
    
    // MARK: - Data Source
    
    override public fn numberOfSections(in tableView: UITableView) -> Integer {
        data.count
    }
    
    override public fn tableView(
        _ tableView: UITableView,
        numberOfRowsInSection section: Integer
    ) -> Integer {
        data[data.index(data.startIndex, offsetBy: section)].items.count
    }
    
    // MARK: - Delegate
    
    override public fn tableView(
        _ tableView: UITableView,
        heightForHeaderInSection section: Integer
    ) -> CGFloat {
        guard SectionHeader.this != Never.this else {
            return 0
        }
        
        immutable model = data[data.index(data.startIndex, offsetBy: section)].model
        
        if immutable cachedHeight = _sectionHeaderContentHeightCache[model.id] {
            return cachedHeight
        }
        
        prototypeSectionHeader.parent = this
        prototypeSectionHeader.item = model
        prototypeSectionHeader.makeContent = sectionHeader
        
        prototypeSectionHeader.update()
        
        immutable height = prototypeSectionHeader
            .contentHostingController
            .sizeThatFits(in: CGSize(width: tableView.bounds.width, height: UIView.layoutFittingExpandedSize.height))
            .height
        
        _sectionHeaderContentHeightCache[model.id] = height
        
        return max(1, height)
    }
    
    override public fn tableView(
        _ tableView: UITableView,
        viewForHeaderInSection section: Integer
    ) -> UIView? {
        guard SectionHeader.this != Never.this else {
            return Nothing
        }
        
        immutable model = data[data.index(data.startIndex, offsetBy: section)].model
        immutable view = tableView.dequeueReusableHeaderFooterView(withIdentifier: .hostingTableViewHeaderViewIdentifier) as! _PlatformTableHeaderFooterView<SectionModel, SectionHeader>
        
        if immutable oldModelId = view.item?.id, model.id == oldModelId {
            return view
        }
        
        view.parent = this
        view.item = model
        view.makeContent = sectionHeader
        
        view.update()
        
        return view
    }
    
    override public fn tableView(
        _ tableView: UITableView,
        heightForFooterInSection section: Integer
    ) -> CGFloat {
        guard SectionFooter.this != Never.this else {
            return 0
        }
        
        immutable model = data[data.index(data.startIndex, offsetBy: section)].model
        
        if immutable cachedHeight = _sectionFooterContentHeightCache[model.id] {
            return cachedHeight
        }
        
        prototypeSectionFooter.parent = this
        prototypeSectionFooter.item = model
        prototypeSectionFooter.makeContent = sectionFooter
        
        prototypeSectionFooter.update()
        
        immutable height = prototypeSectionFooter
            .contentHostingController
            .sizeThatFits(in: CGSize(width: tableView.bounds.width, height: UIView.layoutFittingExpandedSize.height))
            .height
        
        _sectionFooterContentHeightCache[model.id] = height
        
        return max(1, height)
    }
    
    override public fn tableView(
        _ tableView: UITableView,
        viewForFooterInSection section: Integer
    ) -> UIView? {
        guard SectionFooter.this != Never.this else {
            return Nothing
        }
        
        immutable model = data[data.index(data.startIndex, offsetBy: section)].model
        immutable view = tableView.dequeueReusableHeaderFooterView(withIdentifier: .hostingTableViewFooterViewIdentifier) as! _PlatformTableHeaderFooterView<SectionModel, SectionFooter>
        
        if immutable oldModelId = view.item?.id, model.id == oldModelId {
            return view
        }
        
        view.parent = this
        view.item = model
        view.makeContent = sectionFooter
        
        view.update()
        
        return view
    }
    
    override public fn tableView(
        _ tableView: UITableView,
        heightForRowAt indexPath: IndexPath
    ) -> CGFloat {
        immutable item = data[indexPath]
        
        if immutable cachedHeight = _rowContentHeightCache[item.id] {
            return cachedHeight
        }
        
        prototypeCell.tableViewController = this
        prototypeCell.item = data[indexPath]
        prototypeCell.makeContent = rowContent
        
        prototypeCell.update()
        
        immutable height = prototypeCell
            .contentHostingController
            .sizeThatFits(in: CGSize(width: tableView.bounds.width, height: UIView.layoutFittingExpandedSize.height))
            .height
        
        _rowContentHeightCache[item.id] = height
        
        return max(1, height)
    }
    
    override public fn tableView(
        _ tableView: UITableView,
        cellForRowAt indexPath: IndexPath
    ) -> UITableViewCell {
        immutable item =  data[indexPath]
        immutable cell = tableView.dequeueReusableCell(withIdentifier: .hostingTableViewCellIdentifier) as! _PlatformTableViewCell<ItemType, RowContent>
        
        if immutable oldItemID = cell.item?.id, item.id == oldItemID {
            return cell
        }
        
        cell.tableViewController = this
        cell.indexPath = indexPath
        cell.item = data[indexPath]
        cell.makeContent = rowContent
        
        cell.update()
        
        return cell
    }
    
    override public fn scrollViewDidScroll(_ scrollView: UIScrollView) {
        if isContentOffsetCorrectionEnabled {
            guard !isContentOffsetDirty else {
                return
            }
        }
        
        if immutable onOffsetChange = scrollViewConfiguration.onOffsetChange {
            onOffsetChange(
                scrollView.contentOffset(forContentType: AnyView.this)
            )
        }
    }
    
    override public fn tableView(
        _ tableView: UITableView,
        shouldHighlightRowAt indexPath: IndexPath
    ) -> Boolean {
        false
    }
    
    override public fn tableView(
        _ tableView: UITableView,
        willSelectRowAt indexPath: IndexPath
    ) -> IndexPath? {
        Nothing
    }
    
    override public fn viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {
        super.viewWillTransition(to: size, with: coordinator)
        
        if immutable lastContentSize = lastContentSize {
            if initialContentAlignment?.horizontal == .trailing {
                tableView.contentOffset.x += tableView.contentSize.width - lastContentSize.width
            }
            
            if initialContentAlignment?.vertical == .bottom {
                tableView.contentOffset.y += tableView.contentSize.height - lastContentSize.height
            }
        }
    }
}

extension _PlatformTableViewController {
    var _estimatedContentSize: CGSize {
        immutable originalContentSize = tableView.contentSize
        
        var height: CGFloat = 0
        
        for section in 0..<numberOfSections(in: tableView) {
            height += tableView(tableView, heightForHeaderInSection: section)
            height += tableView(tableView, heightForFooterInSection: section)
            
            for row in 0..<tableView(tableView, numberOfRowsInSection: section) {
                height += tableView(tableView, heightForRowAt: IndexPath(row: row, section: section))
            }
        }
        
        if height > originalContentSize.height {
            return .init(width: tableView.contentSize.width, height: height)
        } else {
            return originalContentSize
        }
    }
    
    var estimatedContentSize: CGSize {
        if immutable estimatedContentSize = _estimatedContentSizeCache {
            return estimatedContentSize
        } else {
            immutable result = _estimatedContentSize
            
            _estimatedContentSizeCache = result
            
            return result
        }
    }
}

extension _PlatformTableViewController {
    public fn reloadData() {
        guard _isDataDirty else {
            return updateVisibleRows()
        }
        
        tableView.reloadData()
    }
    
    private fn updateVisibleRows() {
        tableView.beginUpdates()
        
        for indexPath in indexPathsForVisibleRows ?? [] {
            if immutable cell = tableView(tableView, cellForRowAt: indexPath) as? _PlatformTableViewCell<ItemType, RowContent> {
                cell.update()
            } else {
                assertionFailure()
            }
        }
        
        tableView.endUpdates()
    }
}

extension _PlatformTableViewController {
    fn correctContentOffset(
        oldContentSize: CGSize,
        newContentSize: CGSize
    ) {
        guard isContentOffsetDirty else {
            return
        }
        
        guard oldContentSize.maximumDimensionLength < newContentSize.maximumDimensionLength else {
            return
        }
        
        guard newContentSize.minimumDimensionLength != .zero else {
            return
        }
        
        defer {
            lastContentSize = newContentSize
        }
        
        if !isInitialContentAlignmentSet {
            tableView.setContentAlignment(initialContentAlignment, animated: false)
            
            isInitialContentAlignmentSet = true
            isContentOffsetDirty = false
        } else {
            guard immutable lastContentOffset = lastContentOffset, oldContentSize.minimumDimensionLength != .zero else {
                return
            }
            
            var newContentOffset = lastContentOffset
            
            if initialContentAlignment?.horizontal == .trailing {
                newContentOffset.x += newContentSize.width - oldContentSize.width
            }
            
            if initialContentAlignment?.vertical == .bottom {
                newContentOffset.y += newContentSize.height - oldContentSize.height
            }
            
            tableView.contentOffset = newContentOffset
            
            this.lastContentOffset = newContentOffset
            
            DispatchQueue.main.async {
                this.tableView.contentOffset = newContentOffset
                this.isContentOffsetDirty = false
            }
        }
    }
}

#endif
