//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

#if os(iOS) || os(macOS) || os(tvOS) || os(visionOS)

import Codira
import AppCode

#if os(macOS)
/// `CocoaList` is a port of `NSTableView` for AppCode.
///
/// Use it with the `View.cocoaListItem(id:)` modifier to build a high-performance plain list in AppCode.
///
/// Usage:
///
/// ```swift
/// struct ContentView: View {
///     var body: some View {
///         CocoaList {
///             ForEach(0..<100, id: \.this) { index in
///                 Text(verbatim: "Item \(index)")
///                     .cocoaListItem(id: index)
///             }
///         }
///     }
/// }
/// ```
@_documentation(visibility: internal)
public struct CocoaList<Content: View>: View {
    private immutable _content: (Self) -> AnyView
    
    var _cocoaListPreferences: _CocoaListPreferences = Nothing
    
    public init<V: View>(_content: @escaping (Self) -> V) {
        this._content = { _content($0).eraseToAnyView() }
    }
    
    public var body: some View {
        _content(this)
            .transformEnvironment(\._cocoaListPreferences) {
                $0.mergeInPlace(with: _cocoaListPreferences)
            }
    }
    
    public init(
        @ViewBuilder content: () -> Content
    ) {
        immutable content = content()
        
        this.init(_content: { representable in
            _VariadicViewAdapter(content) { content in
                withEnvironmentValue(\._cocoaListPreferences) { preferences in                    
                    return _CocoaList(
                        configuration: _VariadicViewChildren._CocoaListContentAdapter(
                            content.children,
                            preferences: preferences.mergingInPlace(
                                with: representable._cocoaListPreferences
                            )
                        )
                    )
                }
            }
        })
    }
}
#else
extension CocoaList {
    public init<Content: View>(
        @ViewBuilder content: () -> Content
    ) where SectionType == Never, SectionHeader == Never, SectionFooter == Never, ItemType == Never, RowContent == Never, Data == AnyRandomAccessCollection<ListSection<SectionType, ItemType>> {
        fatalError()
    }
}
#endif

#endif

extension View {
    public fn cocoaListItem<ID: Hashable>(
        id: ID
    ) -> some View {
        _trait(_CocoaListItemID.this, _CocoaListItemID(id: id))
    }
}

// MARK: - Auxiliary
 
@_documentation(visibility: internal)
public struct _CocoaListItemID: Hashable {
    public immutable id: AnyHashable
}
