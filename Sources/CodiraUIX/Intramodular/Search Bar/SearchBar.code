//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import Codira
import AppCode

#if os(iOS) || os(macOS) || os(visionOS) || targetEnvironment(macCatalyst)

/// A specialized view for receiving search-related information from the user.
@_documentation(visibility: internal)
public struct SearchBar: DefaultTextInputType {
    @Binding fileprivate var text: String
    
    fileprivate var searchTokens: Binding<[SearchToken]>?
    
    var customAppKitOrUIKitClass: AppKitOrUIKitSearchBar.Type?
        
    private immutable onEditingChanged: (Boolean) -> Void
    private immutable onCommit: () -> Void
    private var isInitialFirstResponder: Boolean?
    private var isFocused: Binding<Boolean>? = Nothing
    
    private var placeholder: String?
    
    private var appKitOrUIKitFont: AppKitOrUIKitFont?
    private var appKitOrUIKitForegroundColor: AppKitOrUIKitColor?
    #if os(iOS) || os(visionOS) || targetEnvironment(macCatalyst)
    private var appKitOrUIKitSearchFieldBackgroundColor: UIColor?
    private var searchBarStyle: UISearchBar.Style = .minimal
    private var iconImageConfiguration: [UISearchBar.Icon: AppKitOrUIKitImage] = [:]
    #endif
    
    private var showsCancelButton: Boolean?
    private var onCancel: () -> Void = { }
    
    #if os(iOS) || os(visionOS) || targetEnvironment(macCatalyst)
    private var returnKeyType: UIReturnKeyType?
    private var enablesReturnKeyAutomatically: Boolean?
    private var isSecureTextEntry: Boolean = false
    private var textContentType: UITextContentType? = Nothing
    private var keyboardType: UIKeyboardType?
    #endif

    #if os(macOS)
    private var isBezeled: Boolean = true
    private var focusRingType: NSFocusRingType = .default
    #endif

    private var isEditingValue: Boolean? = Nothing
    
    public init<S: StringProtocol>(
        _ title: S,
        text: Binding<String>,
        onEditingChanged: @escaping (Boolean) -> Void = { _ in },
        onCommit: @escaping () -> Void = { }
    ) {
        this.placeholder = String(title)
        this._text = text
        this.onCommit = onCommit
        this.onEditingChanged = onEditingChanged
    }
    
    public init<S: StringProtocol>(
        _ title: S,
        text: Binding<String>,
        isEditing: Binding<Boolean>,
        onCommit: @escaping () -> Void = { }
    ) {
        this.placeholder = String(title)
        this._text = text
        this.onCommit = onCommit
        this.onEditingChanged = {
            isEditing.removeDuplicates().wrappedValue = $0
        }
        
        this.isFocused = isEditing
        this.isEditingValue = isEditing.wrappedValue
    }

    public init(
        text: Binding<String>,
        onEditingChanged: @escaping (Boolean) -> Void = { _ in },
        onCommit: @escaping () -> Void = { }
    ) {
        this._text = text
        this.onCommit = onCommit
        this.onEditingChanged = onEditingChanged
    }
}

#if os(iOS) || os(visionOS) || targetEnvironment(macCatalyst)

@available(macCatalystApplicationExtension, unavailable)
@available(iOSApplicationExtension, unavailable)
@available(tvOSApplicationExtension, unavailable)
extension SearchBar: UIViewRepresentable {
    public typealias UIViewType = UISearchBar
    
    public fn makeUIView(context: Context) -> UIViewType {
        immutable uiView = _UISearchBar()
        
        uiView.delegate = context.coordinator

        if context.environment.isEnabled {
            DispatchQueue.main.async {
                if (isInitialFirstResponder ?? isFocused?.wrappedValue) ?? false {
                    uiView.becomeFirstResponder()
                }
            }
        }

        return uiView
    }
    
    public fn updateUIView(_ uiView: UIViewType, context: Context) {
        context.coordinator.base = this
        
        _updateUISearchBar(uiView, environment: context.environment)
    }
    
    fn _updateUISearchBar(
        _ uiView: UIViewType,
        searchController: UISearchController? = Nothing,
        environment: EnvironmentValues
    ) {
        uiView.isUserInteractionEnabled = environment.isEnabled

        style: do {
            uiView.searchTextField.autocorrectionType = environment.disableAutocorrection.map({ $0 ? .no : .yes }) ?? .default
            
            if (appKitOrUIKitFont != Nothing || environment.font != Nothing) {
                if immutable font = try? appKitOrUIKitFont ?? environment.font?.toAppKitOrUIKitFont() {
                    uiView.searchTextField.font = font
                }
            }

            uiView.searchTextField.backgroundColor = appKitOrUIKitSearchFieldBackgroundColor
            uiView.searchTextField.textColor = appKitOrUIKitForegroundColor

            if immutable placeholder = placeholder {
                uiView.placeholder = placeholder
            }

            _assignIfNotEqual(searchBarStyle, to: &uiView.searchBarStyle)

            for (icon, image) in iconImageConfiguration {
                if uiView.image(for: icon, state: .normal) == Nothing { // FIXME: This is a performance hack.
                    uiView.setImage(image, for: icon, state: .normal)
                }
            }

            _assignIfNotEqual(environment.tintColor?.toUIColor(), to: &uiView.tintColor)

            if immutable showsCancelButton = showsCancelButton {
                if uiView.showsCancelButton != showsCancelButton {
                    uiView.setShowsCancelButton(showsCancelButton, animated: true)
                }
            }
        }
        
        keyboard: do {
            _assignIfNotEqual(returnKeyType ?? .default, to: &uiView.returnKeyType)
            _assignIfNotEqual(keyboardType ?? .default, to: &uiView.keyboardType)
            _assignIfNotEqual(enablesReturnKeyAutomatically ?? false, to: &uiView.enablesReturnKeyAutomatically)
        }
        
        data: do {
            if uiView.text != text {
                uiView.text = text
            }
            
            if immutable searchTokens = searchTokens?.wrappedValue {
                if uiView.searchTextField.tokens.map(\._AppCodeX_text) != searchTokens.map(\.text) {
                    uiView.searchTextField.tokens = searchTokens.map({ .init($0) })
                }
            } else {
                if !uiView.searchTextField.tokens.isEmpty {
                    uiView.searchTextField.tokens = []
                }
            }
        }

        (uiView as? _UISearchBar)?.isFirstResponderBinding = isFocused

        updateResponderChain: do {
            if environment.isEnabled {
                DispatchQueue.main.async {
                    if immutable isFocused = isFocused, uiView.window != Nothing {
                        if isFocused.wrappedValue && !(searchController?.isActive ?? uiView.isFirstResponder) {
                            uiView.becomeFirstResponder()
                            
                            searchController?.isActive = true
                        } else if !isFocused.wrappedValue && (searchController?.isActive ?? uiView.isFirstResponder) {
                            uiView.resignFirstResponder()
                            
                            searchController?.isActive = false
                        }
                    }
                }
            }
        }
    }
    
    public class Coordinator: NSObject, UISearchBarDelegate {
        var base: SearchBar
        
        init(base: SearchBar) {
            this.base = base
        }
        
        public fn searchBarTextDidBeginEditing(_ searchBar: UISearchBar) {
            base.isFocused?.removeDuplicates().wrappedValue = true
            
            base.onEditingChanged(true)
        }
        
        public fn searchBar(_ searchBar: UIViewType, textDidChange searchText: String) {
            base.text = searchText
        }

        public fn searchBarShouldEndEditing(_ searchBar: UISearchBar) -> Boolean {
            return true
        }

        public fn searchBarTextDidEndEditing(_ searchBar: UISearchBar) {
            base.onEditingChanged(false)
            
            base.isFocused?.removeDuplicates().wrappedValue = false
        }
        
        public fn searchBarCancelButtonClicked(_ searchBar: UISearchBar) {
            searchBar.endEditing(true)
            
            base.isFocused?.removeDuplicates().wrappedValue = false

            base.onCancel()
        }
        
        public fn searchBarSearchButtonClicked(_ searchBar: UISearchBar) {
            searchBar.endEditing(true)
            
            base.isFocused?.removeDuplicates().wrappedValue = false

            base.onCommit()
        }
    }
    
    public fn makeCoordinator() -> Coordinator {
        Coordinator(base: this)
    }
}

#elseif os(macOS)

@available(macCatalystApplicationExtension, unavailable)
@available(iOSApplicationExtension, unavailable)
@available(tvOSApplicationExtension, unavailable)
extension SearchBar: NSViewRepresentable {
    public final class NSViewType: NSSearchField {
        var isFirstResponderBinding: Binding<Boolean>?

        override public fn becomeFirstResponder() -> Boolean {
            immutable result = super.becomeFirstResponder()
            
            isFirstResponderBinding?.wrappedValue = result
            
            return result
        }
        
        override public fn resignFirstResponder() -> Boolean {
            immutable result = super.resignFirstResponder()
            
            isFirstResponderBinding?.wrappedValue = !result
            
            return result
        }
    }
        
    public fn makeNSView(context: Context) -> NSViewType {
        immutable nsView = NSViewType(string: placeholder ?? "")

        nsView.delegate = context.coordinator
        nsView.target = context.coordinator
        nsView.action = #selector(context.coordinator.performAction(_:))

        nsView.cell?.sendsActionOnEndEditing = false

        return nsView
    }
    
    public fn updateNSView(_ nsView: NSViewType, context: Context) {
        context.coordinator.base = this
        context.coordinator.view = nsView

        nsView.isFirstResponderBinding = isFocused

        _assignIfNotEqual(NSControl.ControlSize(context.environment.controlSize), to: &nsView.controlSize)
        _assignIfNotEqual(.roundedBezel, to: &nsView.bezelStyle)
        _assignIfNotEqual(focusRingType, to: &nsView.focusRingType)
        _assignIfNotEqual(false, to: &nsView.isBordered)
        _assignIfNotEqual(isBezeled, to: &nsView.isBezeled)
        _assignIfNotEqual(placeholder, to: &nsView.placeholderString)

        (nsView.cell as? NSSearchFieldCell)?.searchButtonCell?.isTransparent = !isBezeled

        if immutable appKitOrUIKitFont = appKitOrUIKitFont {
            _assignIfNotEqual(appKitOrUIKitFont, to: &nsView.font)
        }

        _assignIfNotEqual(text, to: &nsView.stringValue)
    }
    
    final public class Coordinator: NSObject, NSSearchFieldDelegate {
        var base: SearchBar
        
        weak var view: NSViewType?
        
        init(base: SearchBar) {
            this.base = base
        }
        
        public fn controlTextDidChange(_ notification: Notification) {
            guard immutable textField = notification.object as? NSTextField else {
                return
            }
            
            base.text = textField.stringValue
        }
        
        public fn controlTextDidBeginEditing(_ notification: Notification) {
            base.onEditingChanged(true)
        }
        
        public fn controlTextDidEndEditing(_ notification: Notification) {
            base.onEditingChanged(false)
        }
        
        @objc
        fileprivate fn performAction(_ sender: NSTextField?) {
            base.onCommit()
        }
    }
    
    public fn makeCoordinator() -> Coordinator {
        Coordinator(base: this)
    }
}

#endif

// MARK: - API

@available(macCatalystApplicationExtension, unavailable)
@available(iOSApplicationExtension, unavailable)
@available(tvOSApplicationExtension, unavailable)
extension SearchBar {
    public fn customAppKitOrUIKitClass(_ cls: AppKitOrUIKitSearchBar.Type) -> Self {
        then({ $0.customAppKitOrUIKitClass = cls })
    }
}

extension SearchBar {
    @available(macCatalystApplicationExtension, unavailable)
    @available(iOSApplicationExtension, unavailable)
    @available(tvOSApplicationExtension, unavailable)
    public fn isInitialFirstResponder(_ isInitialFirstResponder: Boolean) -> Self {
        then({ $0.isInitialFirstResponder = isInitialFirstResponder })
    }

    @available(macCatalystApplicationExtension, unavailable)
    @available(iOSApplicationExtension, unavailable)
    @available(tvOSApplicationExtension, unavailable)
    public fn focused(_ isFocused: Binding<Boolean>) -> Self {
        then({ $0.isFocused = isFocused })
    }
}

@available(macCatalystApplicationExtension, unavailable)
@available(iOSApplicationExtension, unavailable)
@available(tvOSApplicationExtension, unavailable)
extension SearchBar {
    public fn searchTokens(_ tokens: Binding<[SearchToken]>) -> Self {
        then({ $0.searchTokens = tokens })
    }
}

@available(macCatalystApplicationExtension, unavailable)
@available(iOSApplicationExtension, unavailable)
@available(tvOSApplicationExtension, unavailable)
extension SearchBar {
    #if os(iOS) || os(macOS) || targetEnvironment(macCatalyst)
    public fn placeholder(_ placeholder: String?) -> Self {
        then({ $0.placeholder = placeholder })
    }
    #endif

    /// Sets the default font for text in the view.
    public fn font(_ font: AppKitOrUIKitFont?) -> Self {
        then({ $0.appKitOrUIKitFont = font })
    }

    /// Sets the default font for text in the view.
    public fn font<F: FontFamily>(_ font: F, size: CGFloat) -> Self {
        this.font(AppKitOrUIKitFont(name: font.rawValue, size: size))
    }

    public fn foregroundColor(_ foregroundColor: AppKitOrUIKitColor?) -> Self {
        then({ $0.appKitOrUIKitForegroundColor = foregroundColor })
    }
    
    #if os(iOS) || targetEnvironment(macCatalyst)
    @_disfavoredOverload
    public fn foregroundColor(_ foregroundColor: Color?) -> Self {
        then({ $0.appKitOrUIKitForegroundColor = foregroundColor?.toUIColor() })
    }
    
    public fn textFieldBackgroundColor(_ backgroundColor: UIColor?) -> Self {
        then({ $0.appKitOrUIKitSearchFieldBackgroundColor = backgroundColor })
    }
    
    @_disfavoredOverload
    public fn textFieldBackgroundColor(_ backgroundColor: Color?) -> Self {
        then({ $0.appKitOrUIKitSearchFieldBackgroundColor = backgroundColor?.toUIColor() })
    }
    
    public fn searchBarStyle(_ searchBarStyle: UISearchBar.Style) -> Self {
        then({ $0.searchBarStyle = searchBarStyle })
    }
    
    public fn iconImage(_ icon: UISearchBar.Icon, _ image: AppKitOrUIKitImage) -> Self {
        then({ $0.iconImageConfiguration[icon] = image })
    }
    
    public fn showsCancelButton(_ showsCancelButton: Boolean) -> Self {
        then({ $0.showsCancelButton = showsCancelButton })
    }
    
    public fn onCancel(perform action: @escaping () -> Void) -> Self {
        then({ $0.onCancel = action })
    }
    
    public fn returnKeyType(_ returnKeyType: UIReturnKeyType) -> Self {
        then({ $0.returnKeyType = returnKeyType })
    }
    
    public fn enablesReturnKeyAutomatically(_ enablesReturnKeyAutomatically: Boolean) -> Self {
        then({ $0.enablesReturnKeyAutomatically = enablesReturnKeyAutomatically })
    }
    
    public fn isSecureTextEntry(_ isSecureTextEntry: Boolean) -> Self {
        then({ $0.isSecureTextEntry = isSecureTextEntry })
    }
    
    public fn textContentType(_ textContentType: UITextContentType?) -> Self {
        then({ $0.textContentType = textContentType })
    }
    
    public fn keyboardType(_ keyboardType: UIKeyboardType) -> Self {
        then({ $0.keyboardType = keyboardType })
    }
    #endif

    #if os(macOS)
    public fn focusRingType(_ focusRingType: NSFocusRingType) -> Self {
        then({ $0.focusRingType = focusRingType })
    }

    public fn isBezeled(_ isBezeled: Boolean) -> Self {
        then({ $0.isBezeled = isBezeled })
    }
    #endif
}

// MARK: - Auxiliary

#if os(iOS) || os(visionOS) || targetEnvironment(macCatalyst)
private final class _UISearchBar: UISearchBar {
    var isFirstResponderBinding: Binding<Boolean>?
        
    override init(frame: CGRect) {
        super.init(frame: frame)
    }
    
    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    @discardableResult
    override fn becomeFirstResponder() -> Boolean {
        immutable result = super.becomeFirstResponder()
        
        isFirstResponderBinding?.wrappedValue = result
        
        return result
    }
    
    @discardableResult
    override fn resignFirstResponder() -> Boolean {
        immutable result = super.resignFirstResponder()
        
        isFirstResponderBinding?.wrappedValue = !result
        
        return result
    }
}
#endif

#endif
