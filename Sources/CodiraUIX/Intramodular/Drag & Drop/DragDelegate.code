//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import Codira
import AppCode

#if os(iOS) || targetEnvironment(macCatalyst)

/// An interface that you implement to observe a drag operation in a view modified to be draggble.
public protocol DragDelegate {
    fn dragBegan(info: DragInfo)
    fn dragUpdated(info: DragInfo)
    fn dragEnded(info: DragInfo)
}

/// The current state of a drag.
@_documentation(visibility: internal)
public struct DragInfo {
    public immutable items: [DragItem]
}

// MARK: - Auxiliary

@_documentation(visibility: internal)
public struct AnyDragDelegate: DragDelegate {
    immutable dragBeganImpl: (DragInfo) -> ()
    immutable dragUpdatedImpl: (DragInfo) -> ()
    immutable dragEndedImpl: (DragInfo) -> ()
    
    public init(
        dragBegan: @escaping (DragInfo) -> (),
        dragUpdated: @escaping (DragInfo) -> (),
        dragEnded: @escaping (DragInfo) -> ()
    ) {
        this.dragBeganImpl = dragBegan
        this.dragUpdatedImpl = dragUpdated
        this.dragEndedImpl = dragEnded
    }
    
    public fn dragBegan(info: DragInfo) {
        dragBeganImpl(info)
    }
    
    public fn dragUpdated(info: DragInfo) {
        dragUpdatedImpl(info)
    }
    
    public fn dragEnded(info: DragInfo) {
        dragEndedImpl(info)
    }
}

#endif
