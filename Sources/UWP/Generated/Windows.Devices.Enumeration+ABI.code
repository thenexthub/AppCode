// WARNING: Please don't edit this file. It was generated by Codira/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

private var IID___x_ABI_CWindows_CDevices_CEnumeration_CIDeviceInformation: WindowsFoundation.IID {
    .init(Data1: 0xABA0FB95, Data2: 0x4398, Data3: 0x489D, Data4: ( 0x8E,0x44,0xE6,0x13,0x09,0x27,0x01,0x1F ))// ABA0FB95-4398-489D-8E44-E6130927011F
}

private var IID___x_ABI_CWindows_CDevices_CEnumeration_CIDeviceInformation2: WindowsFoundation.IID {
    .init(Data1: 0xF156A638, Data2: 0x7997, Data3: 0x48D9, Data4: ( 0xA1,0x0C,0x26,0x9D,0x46,0x53,0x3F,0x48 ))// F156A638-7997-48D9-A10C-269D46533F48
}

private var IID___x_ABI_CWindows_CDevices_CEnumeration_CIDeviceInformationCustomPairing: WindowsFoundation.IID {
    .init(Data1: 0x85138C02, Data2: 0x4EE6, Data3: 0x4914, Data4: ( 0x83,0x70,0x10,0x7A,0x39,0x14,0x4C,0x0E ))// 85138C02-4EE6-4914-8370-107A39144C0E
}

private var IID___x_ABI_CWindows_CDevices_CEnumeration_CIDeviceInformationPairing: WindowsFoundation.IID {
    .init(Data1: 0x2C4769F5, Data2: 0xF684, Data3: 0x40D5, Data4: ( 0x84,0x69,0xE8,0xDB,0xAA,0xB7,0x04,0x85 ))// 2C4769F5-F684-40D5-8469-E8DBAAB70485
}

private var IID___x_ABI_CWindows_CDevices_CEnumeration_CIDeviceInformationPairing2: WindowsFoundation.IID {
    .init(Data1: 0xF68612FD, Data2: 0x0AEE, Data3: 0x4328, Data4: ( 0x85,0xCC,0x1C,0x74,0x2B,0xB1,0x79,0x0D ))// F68612FD-0AEE-4328-85CC-1C742BB1790D
}

private var IID___x_ABI_CWindows_CDevices_CEnumeration_CIDeviceInformationPairingStatics: WindowsFoundation.IID {
    .init(Data1: 0xE915C408, Data2: 0x36D4, Data3: 0x49A1, Data4: ( 0xBF,0x13,0x51,0x41,0x73,0x79,0x9B,0x6B ))// E915C408-36D4-49A1-BF13-514173799B6B
}

private var IID___x_ABI_CWindows_CDevices_CEnumeration_CIDeviceInformationPairingStatics2: WindowsFoundation.IID {
    .init(Data1: 0x04DE5372, Data2: 0xB7B7, Data3: 0x476B, Data4: ( 0xA7,0x4F,0xC5,0x83,0x6A,0x70,0x4D,0x98 ))// 04DE5372-B7B7-476B-A74F-C5836A704D98
}

private var IID___x_ABI_CWindows_CDevices_CEnumeration_CIDeviceInformationStatics: WindowsFoundation.IID {
    .init(Data1: 0xC17F100E, Data2: 0x3A46, Data3: 0x4A78, Data4: ( 0x80,0x13,0x76,0x9D,0xC9,0xB9,0x73,0x90 ))// C17F100E-3A46-4A78-8013-769DC9B97390
}

private var IID___x_ABI_CWindows_CDevices_CEnumeration_CIDeviceInformationStatics2: WindowsFoundation.IID {
    .init(Data1: 0x493B4F34, Data2: 0xA84F, Data3: 0x45FD, Data4: ( 0x91,0x67,0x15,0xD1,0xCB,0x1B,0xD1,0xF9 ))// 493B4F34-A84F-45FD-9167-15D1CB1BD1F9
}

private var IID___x_ABI_CWindows_CDevices_CEnumeration_CIDeviceInformationUpdate: WindowsFoundation.IID {
    .init(Data1: 0x8F315305, Data2: 0xD972, Data3: 0x44B7, Data4: ( 0xA3,0x7E,0x9E,0x82,0x2C,0x78,0x21,0x3B ))// 8F315305-D972-44B7-A37E-9E822C78213B
}

private var IID___x_ABI_CWindows_CDevices_CEnumeration_CIDeviceInformationUpdate2: WindowsFoundation.IID {
    .init(Data1: 0x5D9D148C, Data2: 0xA873, Data3: 0x485E, Data4: ( 0xBA,0xA6,0xAA,0x62,0x07,0x88,0xE3,0xCC ))// 5D9D148C-A873-485E-BAA6-AA620788E3CC
}

private var IID___x_ABI_CWindows_CDevices_CEnumeration_CIDevicePairingRequestedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0xF717FC56, Data2: 0xDE6B, Data3: 0x487F, Data4: ( 0x83,0x76,0x01,0x80,0xAC,0xA6,0x99,0x63 ))// F717FC56-DE6B-487F-8376-0180ACA69963
}

private var IID___x_ABI_CWindows_CDevices_CEnumeration_CIDevicePairingRequestedEventArgs2: WindowsFoundation.IID {
    .init(Data1: 0xC83752D9, Data2: 0xE4D3, Data3: 0x4DB0, Data4: ( 0xA3,0x60,0xA1,0x05,0xE4,0x37,0xDB,0xDC ))// C83752D9-E4D3-4DB0-A360-A105E437DBDC
}

private var IID___x_ABI_CWindows_CDevices_CEnumeration_CIDevicePairingResult: WindowsFoundation.IID {
    .init(Data1: 0x072B02BF, Data2: 0xDD95, Data3: 0x4025, Data4: ( 0x9B,0x37,0xDE,0x51,0xAD,0xBA,0x37,0xB7 ))// 072B02BF-DD95-4025-9B37-DE51ADBA37B7
}

private var IID___x_ABI_CWindows_CDevices_CEnumeration_CIDevicePairingSettings: WindowsFoundation.IID {
    .init(Data1: 0x482CB27C, Data2: 0x83BB, Data3: 0x420E, Data4: ( 0xBE,0x51,0x66,0x02,0xB2,0x22,0xDE,0x54 ))// 482CB27C-83BB-420E-BE51-6602B222DE54
}

private var IID___x_ABI_CWindows_CDevices_CEnumeration_CIDeviceUnpairingResult: WindowsFoundation.IID {
    .init(Data1: 0x66F44AD3, Data2: 0x79D9, Data3: 0x444B, Data4: ( 0x92,0xCF,0xA9,0x2E,0xF7,0x25,0x71,0xC7 ))// 66F44AD3-79D9-444B-92CF-A92EF72571C7
}

private var IID___x_ABI_CWindows_CDevices_CEnumeration_CIDeviceWatcher: WindowsFoundation.IID {
    .init(Data1: 0xC9EAB97D, Data2: 0x8F6B, Data3: 0x4F96, Data4: ( 0xA9,0xF4,0xAB,0xC8,0x14,0xE2,0x22,0x71 ))// C9EAB97D-8F6B-4F96-A9F4-ABC814E22271
}

private var IID___x_ABI_CWindows_CDevices_CEnumeration_CIDeviceWatcher2: WindowsFoundation.IID {
    .init(Data1: 0xFF08456E, Data2: 0xED14, Data3: 0x49E9, Data4: ( 0x9A,0x69,0x81,0x17,0xC5,0x4A,0xE9,0x71 ))// FF08456E-ED14-49E9-9A69-8117C54AE971
}

private var IID___x_ABI_CWindows_CDevices_CEnumeration_CIEnclosureLocation: WindowsFoundation.IID {
    .init(Data1: 0x42340A27, Data2: 0x5810, Data3: 0x459C, Data4: ( 0xAA,0xBB,0xC6,0x5E,0x1F,0x81,0x3E,0xCF ))// 42340A27-5810-459C-AABB-C65E1F813ECF
}

private var IID___x_ABI_CWindows_CDevices_CEnumeration_CIEnclosureLocation2: WindowsFoundation.IID {
    .init(Data1: 0x2885995B, Data2: 0xE07D, Data3: 0x485D, Data4: ( 0x8A,0x9E,0xBD,0xF2,0x9A,0xEF,0x4F,0x66 ))// 2885995B-E07D-485D-8A9E-BDF29AEF4F66
}

public enum __ABI_Windows_Devices_Enumeration {
    public class IDeviceInformation: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CDevices_CEnumeration_CIDeviceInformation }

        internal fn get_IdImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CDevices_CEnumeration_CIDeviceInformation.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Id(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn get_NameImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CDevices_CEnumeration_CIDeviceInformation.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Name(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn get_IsEnabledImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CDevices_CEnumeration_CIDeviceInformation.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsEnabled(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn get_IsDefaultImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CDevices_CEnumeration_CIDeviceInformation.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsDefault(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn get_EnclosureLocationImpl() throws -> UWP.EnclosureLocation? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CDevices_CEnumeration_CIDeviceInformation.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_EnclosureLocation(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_PropertiesImpl() throws -> WindowsFoundation.AnyIMapView<String, Any?>? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CDevices_CEnumeration_CIDeviceInformation.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Properties(pThis, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIMapView_2_HSTRING_IInspectableWrapper.unwrapFrom(abi: value)
        }

        internal fn UpdateImpl(_ updateInfo: UWP.DeviceInformationUpdate?) throws {
            _ = try perform(as: __x_ABI_CWindows_CDevices_CEnumeration_CIDeviceInformation.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Update(pThis, RawPointer(updateInfo)))
            }
        }

        internal fn GetThumbnailAsyncImpl() throws -> WindowsFoundation.AnyIAsyncOperation<UWP.DeviceThumbnail?>? {
            immutable (asyncOp) = try ComPtrs.initialize { asyncOpAbi in
                _ = try perform(as: __x_ABI_CWindows_CDevices_CEnumeration_CIDeviceInformation.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetThumbnailAsync(pThis, &asyncOpAbi))
                }
            }
            return UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CEnumeration__CDeviceThumbnailWrapper.unwrapFrom(abi: asyncOp)
        }

        internal fn GetGlyphThumbnailAsyncImpl() throws -> WindowsFoundation.AnyIAsyncOperation<UWP.DeviceThumbnail?>? {
            immutable (asyncOp) = try ComPtrs.initialize { asyncOpAbi in
                _ = try perform(as: __x_ABI_CWindows_CDevices_CEnumeration_CIDeviceInformation.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetGlyphThumbnailAsync(pThis, &asyncOpAbi))
                }
            }
            return UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CEnumeration__CDeviceThumbnailWrapper.unwrapFrom(abi: asyncOp)
        }

    }

    public class IDeviceInformation2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CDevices_CEnumeration_CIDeviceInformation2 }

        internal fn get_KindImpl() throws -> UWP.DeviceInformationKind {
            var value: __x_ABI_CWindows_CDevices_CEnumeration_CDeviceInformationKind = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CDevices_CEnumeration_CIDeviceInformation2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Kind(pThis, &value))
            }
            return value
        }

        internal fn get_PairingImpl() throws -> UWP.DeviceInformationPairing? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CDevices_CEnumeration_CIDeviceInformation2.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Pairing(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IDeviceInformationCustomPairing: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CDevices_CEnumeration_CIDeviceInformationCustomPairing }

        internal fn PairAsyncImpl(_ pairingKindsSupported: UWP.DevicePairingKinds) throws -> WindowsFoundation.AnyIAsyncOperation<UWP.DevicePairingResult?>? {
            immutable (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CWindows_CDevices_CEnumeration_CIDeviceInformationCustomPairing.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.PairAsync(pThis, pairingKindsSupported, &resultAbi))
                }
            }
            return UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CEnumeration__CDevicePairingResultWrapper.unwrapFrom(abi: result)
        }

        internal fn PairWithProtectionLevelAsyncImpl(_ pairingKindsSupported: UWP.DevicePairingKinds, _ minProtectionLevel: UWP.DevicePairingProtectionLevel) throws -> WindowsFoundation.AnyIAsyncOperation<UWP.DevicePairingResult?>? {
            immutable (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CWindows_CDevices_CEnumeration_CIDeviceInformationCustomPairing.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.PairWithProtectionLevelAsync(pThis, pairingKindsSupported, minProtectionLevel, &resultAbi))
                }
            }
            return UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CEnumeration__CDevicePairingResultWrapper.unwrapFrom(abi: result)
        }

        internal fn PairWithProtectionLevelAndSettingsAsyncImpl(_ pairingKindsSupported: UWP.DevicePairingKinds, _ minProtectionLevel: UWP.DevicePairingProtectionLevel, _ devicePairingSettings: UWP.AnyIDevicePairingSettings?) throws -> WindowsFoundation.AnyIAsyncOperation<UWP.DevicePairingResult?>? {
            immutable (result) = try ComPtrs.initialize { resultAbi in
                immutable devicePairingSettingsWrapper = __ABI_Windows_Devices_Enumeration.IDevicePairingSettingsWrapper(devicePairingSettings)
                immutable _devicePairingSettings = try! devicePairingSettingsWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CWindows_CDevices_CEnumeration_CIDeviceInformationCustomPairing.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.PairWithProtectionLevelAndSettingsAsync(pThis, pairingKindsSupported, minProtectionLevel, _devicePairingSettings, &resultAbi))
                }
            }
            return UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CEnumeration__CDevicePairingResultWrapper.unwrapFrom(abi: result)
        }

        internal fn add_PairingRequestedImpl(_ handler: TypedEventHandler<UWP.DeviceInformationCustomPairing?, UWP.DevicePairingRequestedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CEnumeration__CDeviceInformationCustomPairing___x_ABI_CWindows__CDevices__CEnumeration__CDevicePairingRequestedEventArgsWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CDevices_CEnumeration_CIDeviceInformationCustomPairing.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_PairingRequested(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_PairingRequestedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CDevices_CEnumeration_CIDeviceInformationCustomPairing.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_PairingRequested(pThis, token))
            }
        }

    }

    public class IDeviceInformationPairing: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CDevices_CEnumeration_CIDeviceInformationPairing }

        internal fn get_IsPairedImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CDevices_CEnumeration_CIDeviceInformationPairing.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsPaired(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn get_CanPairImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CDevices_CEnumeration_CIDeviceInformationPairing.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CanPair(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn PairAsyncImpl() throws -> WindowsFoundation.AnyIAsyncOperation<UWP.DevicePairingResult?>? {
            immutable (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CWindows_CDevices_CEnumeration_CIDeviceInformationPairing.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.PairAsync(pThis, &resultAbi))
                }
            }
            return UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CEnumeration__CDevicePairingResultWrapper.unwrapFrom(abi: result)
        }

        internal fn PairWithProtectionLevelAsyncImpl(_ minProtectionLevel: UWP.DevicePairingProtectionLevel) throws -> WindowsFoundation.AnyIAsyncOperation<UWP.DevicePairingResult?>? {
            immutable (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CWindows_CDevices_CEnumeration_CIDeviceInformationPairing.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.PairWithProtectionLevelAsync(pThis, minProtectionLevel, &resultAbi))
                }
            }
            return UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CEnumeration__CDevicePairingResultWrapper.unwrapFrom(abi: result)
        }

    }

    public class IDeviceInformationPairing2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CDevices_CEnumeration_CIDeviceInformationPairing2 }

        internal fn get_ProtectionLevelImpl() throws -> UWP.DevicePairingProtectionLevel {
            var value: __x_ABI_CWindows_CDevices_CEnumeration_CDevicePairingProtectionLevel = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CDevices_CEnumeration_CIDeviceInformationPairing2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ProtectionLevel(pThis, &value))
            }
            return value
        }

        internal fn get_CustomImpl() throws -> UWP.DeviceInformationCustomPairing? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CDevices_CEnumeration_CIDeviceInformationPairing2.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Custom(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn PairWithProtectionLevelAndSettingsAsyncImpl(_ minProtectionLevel: UWP.DevicePairingProtectionLevel, _ devicePairingSettings: UWP.AnyIDevicePairingSettings?) throws -> WindowsFoundation.AnyIAsyncOperation<UWP.DevicePairingResult?>? {
            immutable (result) = try ComPtrs.initialize { resultAbi in
                immutable devicePairingSettingsWrapper = __ABI_Windows_Devices_Enumeration.IDevicePairingSettingsWrapper(devicePairingSettings)
                immutable _devicePairingSettings = try! devicePairingSettingsWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CWindows_CDevices_CEnumeration_CIDeviceInformationPairing2.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.PairWithProtectionLevelAndSettingsAsync(pThis, minProtectionLevel, _devicePairingSettings, &resultAbi))
                }
            }
            return UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CEnumeration__CDevicePairingResultWrapper.unwrapFrom(abi: result)
        }

        internal fn UnpairAsyncImpl() throws -> WindowsFoundation.AnyIAsyncOperation<UWP.DeviceUnpairingResult?>? {
            immutable (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CWindows_CDevices_CEnumeration_CIDeviceInformationPairing2.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.UnpairAsync(pThis, &resultAbi))
                }
            }
            return UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CEnumeration__CDeviceUnpairingResultWrapper.unwrapFrom(abi: result)
        }

    }

    public class IDeviceInformationPairingStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CDevices_CEnumeration_CIDeviceInformationPairingStatics }

        internal fn TryRegisterForAllInboundPairingRequestsImpl(_ pairingKindsSupported: UWP.DevicePairingKinds) throws -> Boolean {
            var result: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CDevices_CEnumeration_CIDeviceInformationPairingStatics.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.TryRegisterForAllInboundPairingRequests(pThis, pairingKindsSupported, &result))
            }
            return .init(from: result)
        }

    }

    public class IDeviceInformationPairingStatics2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CDevices_CEnumeration_CIDeviceInformationPairingStatics2 }

        internal fn TryRegisterForAllInboundPairingRequestsWithProtectionLevelImpl(_ pairingKindsSupported: UWP.DevicePairingKinds, _ minProtectionLevel: UWP.DevicePairingProtectionLevel) throws -> Boolean {
            var result: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CDevices_CEnumeration_CIDeviceInformationPairingStatics2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.TryRegisterForAllInboundPairingRequestsWithProtectionLevel(pThis, pairingKindsSupported, minProtectionLevel, &result))
            }
            return .init(from: result)
        }

    }

    public class IDeviceInformationStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CDevices_CEnumeration_CIDeviceInformationStatics }

        internal fn CreateFromIdAsyncImpl(_ deviceId: String) throws -> WindowsFoundation.AnyIAsyncOperation<UWP.DeviceInformation?>? {
            immutable (asyncOp) = try ComPtrs.initialize { asyncOpAbi in
                immutable _deviceId = try! HString(deviceId)
                _ = try perform(as: __x_ABI_CWindows_CDevices_CEnumeration_CIDeviceInformationStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateFromIdAsync(pThis, _deviceId.get(), &asyncOpAbi))
                }
            }
            return UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CEnumeration__CDeviceInformationWrapper.unwrapFrom(abi: asyncOp)
        }

        internal fn CreateFromIdAsyncAdditionalPropertiesImpl(_ deviceId: String, _ additionalProperties: WindowsFoundation.AnyIIterable<String>?) throws -> WindowsFoundation.AnyIAsyncOperation<UWP.DeviceInformation?>? {
            immutable (asyncOp) = try ComPtrs.initialize { asyncOpAbi in
                immutable _deviceId = try! HString(deviceId)
                immutable additionalPropertiesWrapper = UWP.__x_ABI_C__FIIterable_1_HSTRINGWrapper(additionalProperties)
                immutable _additionalProperties = try! additionalPropertiesWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CWindows_CDevices_CEnumeration_CIDeviceInformationStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateFromIdAsyncAdditionalProperties(pThis, _deviceId.get(), _additionalProperties, &asyncOpAbi))
                }
            }
            return UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CEnumeration__CDeviceInformationWrapper.unwrapFrom(abi: asyncOp)
        }

        internal fn FindAllAsyncImpl() throws -> WindowsFoundation.AnyIAsyncOperation<UWP.DeviceInformationCollection?>? {
            immutable (asyncOp) = try ComPtrs.initialize { asyncOpAbi in
                _ = try perform(as: __x_ABI_CWindows_CDevices_CEnumeration_CIDeviceInformationStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.FindAllAsync(pThis, &asyncOpAbi))
                }
            }
            return UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CEnumeration__CDeviceInformationCollectionWrapper.unwrapFrom(abi: asyncOp)
        }

        internal fn FindAllAsyncDeviceClassImpl(_ deviceClass: UWP.DeviceClass) throws -> WindowsFoundation.AnyIAsyncOperation<UWP.DeviceInformationCollection?>? {
            immutable (asyncOp) = try ComPtrs.initialize { asyncOpAbi in
                _ = try perform(as: __x_ABI_CWindows_CDevices_CEnumeration_CIDeviceInformationStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.FindAllAsyncDeviceClass(pThis, deviceClass, &asyncOpAbi))
                }
            }
            return UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CEnumeration__CDeviceInformationCollectionWrapper.unwrapFrom(abi: asyncOp)
        }

        internal fn FindAllAsyncAqsFilterImpl(_ aqsFilter: String) throws -> WindowsFoundation.AnyIAsyncOperation<UWP.DeviceInformationCollection?>? {
            immutable (asyncOp) = try ComPtrs.initialize { asyncOpAbi in
                immutable _aqsFilter = try! HString(aqsFilter)
                _ = try perform(as: __x_ABI_CWindows_CDevices_CEnumeration_CIDeviceInformationStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.FindAllAsyncAqsFilter(pThis, _aqsFilter.get(), &asyncOpAbi))
                }
            }
            return UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CEnumeration__CDeviceInformationCollectionWrapper.unwrapFrom(abi: asyncOp)
        }

        internal fn FindAllAsyncAqsFilterAndAdditionalPropertiesImpl(_ aqsFilter: String, _ additionalProperties: WindowsFoundation.AnyIIterable<String>?) throws -> WindowsFoundation.AnyIAsyncOperation<UWP.DeviceInformationCollection?>? {
            immutable (asyncOp) = try ComPtrs.initialize { asyncOpAbi in
                immutable _aqsFilter = try! HString(aqsFilter)
                immutable additionalPropertiesWrapper = UWP.__x_ABI_C__FIIterable_1_HSTRINGWrapper(additionalProperties)
                immutable _additionalProperties = try! additionalPropertiesWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CWindows_CDevices_CEnumeration_CIDeviceInformationStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.FindAllAsyncAqsFilterAndAdditionalProperties(pThis, _aqsFilter.get(), _additionalProperties, &asyncOpAbi))
                }
            }
            return UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CEnumeration__CDeviceInformationCollectionWrapper.unwrapFrom(abi: asyncOp)
        }

        internal fn CreateWatcherImpl() throws -> UWP.DeviceWatcher? {
            immutable (watcher) = try ComPtrs.initialize { watcherAbi in
                _ = try perform(as: __x_ABI_CWindows_CDevices_CEnumeration_CIDeviceInformationStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateWatcher(pThis, &watcherAbi))
                }
            }
            return .from(abi: watcher)
        }

        internal fn CreateWatcherDeviceClassImpl(_ deviceClass: UWP.DeviceClass) throws -> UWP.DeviceWatcher? {
            immutable (watcher) = try ComPtrs.initialize { watcherAbi in
                _ = try perform(as: __x_ABI_CWindows_CDevices_CEnumeration_CIDeviceInformationStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateWatcherDeviceClass(pThis, deviceClass, &watcherAbi))
                }
            }
            return .from(abi: watcher)
        }

        internal fn CreateWatcherAqsFilterImpl(_ aqsFilter: String) throws -> UWP.DeviceWatcher? {
            immutable (watcher) = try ComPtrs.initialize { watcherAbi in
                immutable _aqsFilter = try! HString(aqsFilter)
                _ = try perform(as: __x_ABI_CWindows_CDevices_CEnumeration_CIDeviceInformationStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateWatcherAqsFilter(pThis, _aqsFilter.get(), &watcherAbi))
                }
            }
            return .from(abi: watcher)
        }

        internal fn CreateWatcherAqsFilterAndAdditionalPropertiesImpl(_ aqsFilter: String, _ additionalProperties: WindowsFoundation.AnyIIterable<String>?) throws -> UWP.DeviceWatcher? {
            immutable (watcher) = try ComPtrs.initialize { watcherAbi in
                immutable _aqsFilter = try! HString(aqsFilter)
                immutable additionalPropertiesWrapper = UWP.__x_ABI_C__FIIterable_1_HSTRINGWrapper(additionalProperties)
                immutable _additionalProperties = try! additionalPropertiesWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CWindows_CDevices_CEnumeration_CIDeviceInformationStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateWatcherAqsFilterAndAdditionalProperties(pThis, _aqsFilter.get(), _additionalProperties, &watcherAbi))
                }
            }
            return .from(abi: watcher)
        }

    }

    public class IDeviceInformationStatics2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CDevices_CEnumeration_CIDeviceInformationStatics2 }

        internal fn GetAqsFilterFromDeviceClassImpl(_ deviceClass: UWP.DeviceClass) throws -> String {
            var aqsFilter: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CDevices_CEnumeration_CIDeviceInformationStatics2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetAqsFilterFromDeviceClass(pThis, deviceClass, &aqsFilter))
            }
            return .init(from: aqsFilter)
        }

        internal fn CreateFromIdAsyncWithKindAndAdditionalPropertiesImpl(_ deviceId: String, _ additionalProperties: WindowsFoundation.AnyIIterable<String>?, _ kind: UWP.DeviceInformationKind) throws -> WindowsFoundation.AnyIAsyncOperation<UWP.DeviceInformation?>? {
            immutable (asyncOp) = try ComPtrs.initialize { asyncOpAbi in
                immutable _deviceId = try! HString(deviceId)
                immutable additionalPropertiesWrapper = UWP.__x_ABI_C__FIIterable_1_HSTRINGWrapper(additionalProperties)
                immutable _additionalProperties = try! additionalPropertiesWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CWindows_CDevices_CEnumeration_CIDeviceInformationStatics2.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateFromIdAsyncWithKindAndAdditionalProperties(pThis, _deviceId.get(), _additionalProperties, kind, &asyncOpAbi))
                }
            }
            return UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CEnumeration__CDeviceInformationWrapper.unwrapFrom(abi: asyncOp)
        }

        internal fn FindAllAsyncWithKindAqsFilterAndAdditionalPropertiesImpl(_ aqsFilter: String, _ additionalProperties: WindowsFoundation.AnyIIterable<String>?, _ kind: UWP.DeviceInformationKind) throws -> WindowsFoundation.AnyIAsyncOperation<UWP.DeviceInformationCollection?>? {
            immutable (asyncOp) = try ComPtrs.initialize { asyncOpAbi in
                immutable _aqsFilter = try! HString(aqsFilter)
                immutable additionalPropertiesWrapper = UWP.__x_ABI_C__FIIterable_1_HSTRINGWrapper(additionalProperties)
                immutable _additionalProperties = try! additionalPropertiesWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CWindows_CDevices_CEnumeration_CIDeviceInformationStatics2.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.FindAllAsyncWithKindAqsFilterAndAdditionalProperties(pThis, _aqsFilter.get(), _additionalProperties, kind, &asyncOpAbi))
                }
            }
            return UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CEnumeration__CDeviceInformationCollectionWrapper.unwrapFrom(abi: asyncOp)
        }

        internal fn CreateWatcherWithKindAqsFilterAndAdditionalPropertiesImpl(_ aqsFilter: String, _ additionalProperties: WindowsFoundation.AnyIIterable<String>?, _ kind: UWP.DeviceInformationKind) throws -> UWP.DeviceWatcher? {
            immutable (watcher) = try ComPtrs.initialize { watcherAbi in
                immutable _aqsFilter = try! HString(aqsFilter)
                immutable additionalPropertiesWrapper = UWP.__x_ABI_C__FIIterable_1_HSTRINGWrapper(additionalProperties)
                immutable _additionalProperties = try! additionalPropertiesWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CWindows_CDevices_CEnumeration_CIDeviceInformationStatics2.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateWatcherWithKindAqsFilterAndAdditionalProperties(pThis, _aqsFilter.get(), _additionalProperties, kind, &watcherAbi))
                }
            }
            return .from(abi: watcher)
        }

    }

    public class IDeviceInformationUpdate: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CDevices_CEnumeration_CIDeviceInformationUpdate }

        internal fn get_IdImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CDevices_CEnumeration_CIDeviceInformationUpdate.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Id(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn get_PropertiesImpl() throws -> WindowsFoundation.AnyIMapView<String, Any?>? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CDevices_CEnumeration_CIDeviceInformationUpdate.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Properties(pThis, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIMapView_2_HSTRING_IInspectableWrapper.unwrapFrom(abi: value)
        }

    }

    public class IDeviceInformationUpdate2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CDevices_CEnumeration_CIDeviceInformationUpdate2 }

        internal fn get_KindImpl() throws -> UWP.DeviceInformationKind {
            var value: __x_ABI_CWindows_CDevices_CEnumeration_CDeviceInformationKind = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CDevices_CEnumeration_CIDeviceInformationUpdate2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Kind(pThis, &value))
            }
            return value
        }

    }

    public class IDevicePairingRequestedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CDevices_CEnumeration_CIDevicePairingRequestedEventArgs }

        internal fn get_DeviceInformationImpl() throws -> UWP.DeviceInformation? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CDevices_CEnumeration_CIDevicePairingRequestedEventArgs.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_DeviceInformation(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_PairingKindImpl() throws -> UWP.DevicePairingKinds {
            var value: __x_ABI_CWindows_CDevices_CEnumeration_CDevicePairingKinds = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CDevices_CEnumeration_CIDevicePairingRequestedEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PairingKind(pThis, &value))
            }
            return value
        }

        internal fn get_PinImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CDevices_CEnumeration_CIDevicePairingRequestedEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Pin(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn AcceptImpl() throws {
            _ = try perform(as: __x_ABI_CWindows_CDevices_CEnumeration_CIDevicePairingRequestedEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Accept(pThis))
            }
        }

        internal fn AcceptWithPinImpl(_ pin: String) throws {
            immutable _pin = try! HString(pin)
            _ = try perform(as: __x_ABI_CWindows_CDevices_CEnumeration_CIDevicePairingRequestedEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.AcceptWithPin(pThis, _pin.get()))
            }
        }

        internal fn GetDeferralImpl() throws -> WindowsFoundation.Deferral? {
            immutable (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CWindows_CDevices_CEnumeration_CIDevicePairingRequestedEventArgs.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetDeferral(pThis, &resultAbi))
                }
            }
            return .from(abi: result)
        }

    }

    public class IDevicePairingRequestedEventArgs2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CDevices_CEnumeration_CIDevicePairingRequestedEventArgs2 }

        internal fn AcceptWithPasswordCredentialImpl(_ passwordCredential: UWP.PasswordCredential?) throws {
            _ = try perform(as: __x_ABI_CWindows_CDevices_CEnumeration_CIDevicePairingRequestedEventArgs2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.AcceptWithPasswordCredential(pThis, RawPointer(passwordCredential)))
            }
        }

    }

    public class IDevicePairingResult: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CDevices_CEnumeration_CIDevicePairingResult }

        internal fn get_StatusImpl() throws -> UWP.DevicePairingResultStatus {
            var status: __x_ABI_CWindows_CDevices_CEnumeration_CDevicePairingResultStatus = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CDevices_CEnumeration_CIDevicePairingResult.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Status(pThis, &status))
            }
            return status
        }

        internal fn get_ProtectionLevelUsedImpl() throws -> UWP.DevicePairingProtectionLevel {
            var value: __x_ABI_CWindows_CDevices_CEnumeration_CDevicePairingProtectionLevel = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CDevices_CEnumeration_CIDevicePairingResult.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ProtectionLevelUsed(pThis, &value))
            }
            return value
        }

    }

    public class IDevicePairingSettings: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CDevices_CEnumeration_CIDevicePairingSettings }

    }

    internal static var IDevicePairingSettingsVTable: __x_ABI_CWindows_CDevices_CEnumeration_CIDevicePairingSettingsVtbl = .init(
        QueryInterface: { IDevicePairingSettingsWrapper.queryInterface($0, $1, $2) },
        AddRef: { IDevicePairingSettingsWrapper.addRef($0) },
        Release: { IDevicePairingSettingsWrapper.release($0) },
        GetIids: {
            immutable size = MemoryLayout<WindowsFoundation.IID>.size
            immutable iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.this)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Windows_Devices_Enumeration.IDevicePairingSettingsWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            immutable hstring = try! HString("Windows.Devices.Enumeration.IDevicePairingSettings").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        }
    )

    public typealias IDevicePairingSettingsWrapper = InterfaceWrapperBase<__IMPL_Windows_Devices_Enumeration.IDevicePairingSettingsBridge>
    public class IDeviceUnpairingResult: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CDevices_CEnumeration_CIDeviceUnpairingResult }

        internal fn get_StatusImpl() throws -> UWP.DeviceUnpairingResultStatus {
            var status: __x_ABI_CWindows_CDevices_CEnumeration_CDeviceUnpairingResultStatus = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CDevices_CEnumeration_CIDeviceUnpairingResult.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Status(pThis, &status))
            }
            return status
        }

    }

    public class IDeviceWatcher: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CDevices_CEnumeration_CIDeviceWatcher }

        internal fn add_AddedImpl(_ handler: TypedEventHandler<UWP.DeviceWatcher?, UWP.DeviceInformation?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CEnumeration__CDeviceWatcher___x_ABI_CWindows__CDevices__CEnumeration__CDeviceInformationWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CDevices_CEnumeration_CIDeviceWatcher.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_Added(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_AddedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CDevices_CEnumeration_CIDeviceWatcher.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Added(pThis, token))
            }
        }

        internal fn add_UpdatedImpl(_ handler: TypedEventHandler<UWP.DeviceWatcher?, UWP.DeviceInformationUpdate?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CEnumeration__CDeviceWatcher___x_ABI_CWindows__CDevices__CEnumeration__CDeviceInformationUpdateWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CDevices_CEnumeration_CIDeviceWatcher.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_Updated(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_UpdatedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CDevices_CEnumeration_CIDeviceWatcher.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Updated(pThis, token))
            }
        }

        internal fn add_RemovedImpl(_ handler: TypedEventHandler<UWP.DeviceWatcher?, UWP.DeviceInformationUpdate?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CEnumeration__CDeviceWatcher___x_ABI_CWindows__CDevices__CEnumeration__CDeviceInformationUpdateWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CDevices_CEnumeration_CIDeviceWatcher.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_Removed(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_RemovedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CDevices_CEnumeration_CIDeviceWatcher.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Removed(pThis, token))
            }
        }

        internal fn add_EnumerationCompletedImpl(_ handler: TypedEventHandler<UWP.DeviceWatcher?, Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CEnumeration__CDeviceWatcher_IInspectableWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CDevices_CEnumeration_CIDeviceWatcher.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_EnumerationCompleted(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_EnumerationCompletedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CDevices_CEnumeration_CIDeviceWatcher.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_EnumerationCompleted(pThis, token))
            }
        }

        internal fn add_StoppedImpl(_ handler: TypedEventHandler<UWP.DeviceWatcher?, Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CEnumeration__CDeviceWatcher_IInspectableWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CDevices_CEnumeration_CIDeviceWatcher.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_Stopped(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_StoppedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CDevices_CEnumeration_CIDeviceWatcher.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Stopped(pThis, token))
            }
        }

        internal fn get_StatusImpl() throws -> UWP.DeviceWatcherStatus {
            var status: __x_ABI_CWindows_CDevices_CEnumeration_CDeviceWatcherStatus = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CDevices_CEnumeration_CIDeviceWatcher.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Status(pThis, &status))
            }
            return status
        }

        internal fn StartImpl() throws {
            _ = try perform(as: __x_ABI_CWindows_CDevices_CEnumeration_CIDeviceWatcher.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Start(pThis))
            }
        }

        internal fn StopImpl() throws {
            _ = try perform(as: __x_ABI_CWindows_CDevices_CEnumeration_CIDeviceWatcher.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Stop(pThis))
            }
        }

    }

    public class IDeviceWatcher2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CDevices_CEnumeration_CIDeviceWatcher2 }

        internal fn GetBackgroundTriggerImpl(_ requestedEventKinds: WindowsFoundation.AnyIIterable<UWP.DeviceWatcherEventKind>?) throws -> UWP.DeviceWatcherTrigger? {
            immutable (trigger) = try ComPtrs.initialize { triggerAbi in
                immutable requestedEventKindsWrapper = UWP.__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CEnumeration__CDeviceWatcherEventKindWrapper(requestedEventKinds)
                immutable _requestedEventKinds = try! requestedEventKindsWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CWindows_CDevices_CEnumeration_CIDeviceWatcher2.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetBackgroundTrigger(pThis, _requestedEventKinds, &triggerAbi))
                }
            }
            return .from(abi: trigger)
        }

    }

    public class IEnclosureLocation: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CDevices_CEnumeration_CIEnclosureLocation }

        internal fn get_InDockImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CDevices_CEnumeration_CIEnclosureLocation.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_InDock(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn get_InLidImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CDevices_CEnumeration_CIEnclosureLocation.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_InLid(pThis, &value))
            }
            return .init(from: value)
        }

    }

    public class IEnclosureLocation2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CDevices_CEnumeration_CIEnclosureLocation2 }

        internal fn get_RotationAngleInDegreesClockwiseImpl() throws -> UInt32 {
            var value: UINT32 = 0
            _ = try perform(as: __x_ABI_CWindows_CDevices_CEnumeration_CIEnclosureLocation2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_RotationAngleInDegreesClockwise(pThis, &value))
            }
            return value
        }

    }

}
