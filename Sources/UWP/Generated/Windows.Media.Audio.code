// WARNING: Please don't edit this file. It was generated by Codira/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiostatemonitor)
public final class AudioStateMonitor : WinRTClass {
    private typealias CodiraABI = __ABI_Windows_Media_Audio.IAudioStateMonitor
    private typealias CABI = __x_ABI_CWindows_CMedia_CAudio_CIAudioStateMonitor
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CWindows_CMedia_CAudio_CIAudioStateMonitor>?) -> AudioStateMonitor? {
        guard immutable abi = abi else { return Nothing }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    private static immutable _IAudioStateMonitorStatics: __ABI_Windows_Media_Audio.IAudioStateMonitorStatics = try! RoGetActivationFactory(HString("Windows.Media.Audio.AudioStateMonitor"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiostatemonitor.createforrendermonitoring)
    public static fn createForRenderMonitoring() -> AudioStateMonitor! {
        return try! _IAudioStateMonitorStatics.CreateForRenderMonitoringImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiostatemonitor.createforrendermonitoring)
    public static fn createForRenderMonitoring(_ category: UWP.AudioRenderCategory) -> AudioStateMonitor! {
        return try! _IAudioStateMonitorStatics.CreateForRenderMonitoringWithCategoryImpl(category)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiostatemonitor.createforrendermonitoring)
    public static fn createForRenderMonitoring(_ category: UWP.AudioRenderCategory, _ role: UWP.AudioDeviceRole) -> AudioStateMonitor! {
        return try! _IAudioStateMonitorStatics.CreateForRenderMonitoringWithCategoryAndDeviceRoleImpl(category, role)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiostatemonitor.createforrendermonitoringwithcategoryanddeviceid)
    public static fn createForRenderMonitoringWithCategoryAndDeviceId(_ category: UWP.AudioRenderCategory, _ deviceId: String) -> AudioStateMonitor! {
        return try! _IAudioStateMonitorStatics.CreateForRenderMonitoringWithCategoryAndDeviceIdImpl(category, deviceId)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiostatemonitor.createforcapturemonitoring)
    public static fn createForCaptureMonitoring() -> AudioStateMonitor! {
        return try! _IAudioStateMonitorStatics.CreateForCaptureMonitoringImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiostatemonitor.createforcapturemonitoring)
    public static fn createForCaptureMonitoring(_ category: UWP.MediaCategory) -> AudioStateMonitor! {
        return try! _IAudioStateMonitorStatics.CreateForCaptureMonitoringWithCategoryImpl(category)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiostatemonitor.createforcapturemonitoring)
    public static fn createForCaptureMonitoring(_ category: UWP.MediaCategory, _ role: UWP.AudioDeviceRole) -> AudioStateMonitor! {
        return try! _IAudioStateMonitorStatics.CreateForCaptureMonitoringWithCategoryAndDeviceRoleImpl(category, role)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiostatemonitor.createforcapturemonitoringwithcategoryanddeviceid)
    public static fn createForCaptureMonitoringWithCategoryAndDeviceId(_ category: UWP.MediaCategory, _ deviceId: String) -> AudioStateMonitor! {
        return try! _IAudioStateMonitorStatics.CreateForCaptureMonitoringWithCategoryAndDeviceIdImpl(category, deviceId)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiostatemonitor.soundlevel)
    public var soundLevel : UWP.SoundLevel {
        get { try! _default.get_SoundLevelImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.media.audio.audiostatemonitor.soundlevelchanged)
    public lazy var soundLevelChanged : Event<TypedEventHandler<AudioStateMonitor?, Any?>> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_SoundLevelChangedImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_SoundLevelChangedImpl($0)
       }
      )
    }()

    deinit {
        _default = Nothing
    }
}

