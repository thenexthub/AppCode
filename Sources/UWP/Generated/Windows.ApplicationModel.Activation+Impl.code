// WARNING: Please don't edit this file. It was generated by Codira/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

public enum __IMPL_Windows_ApplicationModel_Activation {
    public enum IActivatedEventArgsBridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_CWindows_CApplicationModel_CActivation_CIActivatedEventArgs
        public typealias CodiraABI = __ABI_Windows_ApplicationModel_Activation.IActivatedEventArgs
        public typealias CodiraProjection = AnyIActivatedEventArgs
        public static fn from(abi: ComPtr<CABI>?) -> CodiraProjection? {
            guard immutable abi = abi else { return Nothing }
            return IActivatedEventArgsImpl(abi)
        }

        public static fn makeAbi() -> CABI {
            immutable vtblPtr = withUnsafeMutablePointer(to: &__ABI_Windows_ApplicationModel_Activation.IActivatedEventArgsVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class IActivatedEventArgsImpl: IActivatedEventArgs, WinRTAbiImpl {
        fileprivate typealias Bridge = IActivatedEventArgsBridge
        fileprivate immutable _default: Bridge.CodiraABI
        fileprivate var thisPtr: WindowsFoundation.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.CodiraABI(fromAbi)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.activation.iactivatedeventargs.kind)
        fileprivate var kind : ActivationKind {
            get { try! _default.get_KindImpl() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.activation.iactivatedeventargs.previousexecutionstate)
        fileprivate var previousExecutionState : ApplicationExecutionState {
            get { try! _default.get_PreviousExecutionStateImpl() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.activation.iactivatedeventargs.splashscreen)
        fileprivate var splashScreen : SplashScreen! {
            get { try! _default.get_SplashScreenImpl() }
        }

    }

    public enum IActivatedEventArgsWithUserBridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_CWindows_CApplicationModel_CActivation_CIActivatedEventArgsWithUser
        public typealias CodiraABI = __ABI_Windows_ApplicationModel_Activation.IActivatedEventArgsWithUser
        public typealias CodiraProjection = AnyIActivatedEventArgsWithUser
        public static fn from(abi: ComPtr<CABI>?) -> CodiraProjection? {
            guard immutable abi = abi else { return Nothing }
            return IActivatedEventArgsWithUserImpl(abi)
        }

        public static fn makeAbi() -> CABI {
            immutable vtblPtr = withUnsafeMutablePointer(to: &__ABI_Windows_ApplicationModel_Activation.IActivatedEventArgsWithUserVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class IActivatedEventArgsWithUserImpl: IActivatedEventArgsWithUser, WinRTAbiImpl {
        fileprivate typealias Bridge = IActivatedEventArgsWithUserBridge
        fileprivate immutable _default: Bridge.CodiraABI
        fileprivate var thisPtr: WindowsFoundation.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.CodiraABI(fromAbi)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.activation.iactivatedeventargswithuser.user)
        fileprivate var user : UWP.User! {
            get { try! _default.get_UserImpl() }
        }

        private lazy var _IActivatedEventArgs: __ABI_Windows_ApplicationModel_Activation.IActivatedEventArgs! = getInterfaceForCaching()
        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.activation.iactivatedeventargswithuser.kind)
        fileprivate var kind : ActivationKind {
            get { try! _IActivatedEventArgs.get_KindImpl() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.activation.iactivatedeventargswithuser.previousexecutionstate)
        fileprivate var previousExecutionState : ApplicationExecutionState {
            get { try! _IActivatedEventArgs.get_PreviousExecutionStateImpl() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.activation.iactivatedeventargswithuser.splashscreen)
        fileprivate var splashScreen : SplashScreen! {
            get { try! _IActivatedEventArgs.get_SplashScreenImpl() }
        }

    }

    public enum IApplicationViewActivatedEventArgsBridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_CWindows_CApplicationModel_CActivation_CIApplicationViewActivatedEventArgs
        public typealias CodiraABI = __ABI_Windows_ApplicationModel_Activation.IApplicationViewActivatedEventArgs
        public typealias CodiraProjection = AnyIApplicationViewActivatedEventArgs
        public static fn from(abi: ComPtr<CABI>?) -> CodiraProjection? {
            guard immutable abi = abi else { return Nothing }
            return IApplicationViewActivatedEventArgsImpl(abi)
        }

        public static fn makeAbi() -> CABI {
            immutable vtblPtr = withUnsafeMutablePointer(to: &__ABI_Windows_ApplicationModel_Activation.IApplicationViewActivatedEventArgsVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class IApplicationViewActivatedEventArgsImpl: IApplicationViewActivatedEventArgs, WinRTAbiImpl {
        fileprivate typealias Bridge = IApplicationViewActivatedEventArgsBridge
        fileprivate immutable _default: Bridge.CodiraABI
        fileprivate var thisPtr: WindowsFoundation.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.CodiraABI(fromAbi)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.activation.iapplicationviewactivatedeventargs.currentlyshownapplicationviewid)
        fileprivate var currentlyShownApplicationViewId : Int32 {
            get { try! _default.get_CurrentlyShownApplicationViewIdImpl() }
        }

        private lazy var _IActivatedEventArgs: __ABI_Windows_ApplicationModel_Activation.IActivatedEventArgs! = getInterfaceForCaching()
        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.activation.iapplicationviewactivatedeventargs.kind)
        fileprivate var kind : ActivationKind {
            get { try! _IActivatedEventArgs.get_KindImpl() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.activation.iapplicationviewactivatedeventargs.previousexecutionstate)
        fileprivate var previousExecutionState : ApplicationExecutionState {
            get { try! _IActivatedEventArgs.get_PreviousExecutionStateImpl() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.activation.iapplicationviewactivatedeventargs.splashscreen)
        fileprivate var splashScreen : SplashScreen! {
            get { try! _IActivatedEventArgs.get_SplashScreenImpl() }
        }

    }

    public enum IBackgroundActivatedEventArgsBridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_CWindows_CApplicationModel_CActivation_CIBackgroundActivatedEventArgs
        public typealias CodiraABI = __ABI_Windows_ApplicationModel_Activation.IBackgroundActivatedEventArgs
        public typealias CodiraProjection = AnyIBackgroundActivatedEventArgs
        public static fn from(abi: ComPtr<CABI>?) -> CodiraProjection? {
            guard immutable abi = abi else { return Nothing }
            return IBackgroundActivatedEventArgsImpl(abi)
        }

        public static fn makeAbi() -> CABI {
            immutable vtblPtr = withUnsafeMutablePointer(to: &__ABI_Windows_ApplicationModel_Activation.IBackgroundActivatedEventArgsVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class IBackgroundActivatedEventArgsImpl: IBackgroundActivatedEventArgs, WinRTAbiImpl {
        fileprivate typealias Bridge = IBackgroundActivatedEventArgsBridge
        fileprivate immutable _default: Bridge.CodiraABI
        fileprivate var thisPtr: WindowsFoundation.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.CodiraABI(fromAbi)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.activation.ibackgroundactivatedeventargs.taskinstance)
        fileprivate var taskInstance : UWP.AnyIBackgroundTaskInstance! {
            get { try! _default.get_TaskInstanceImpl() }
        }

    }

    public enum ILaunchActivatedEventArgsBridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_CWindows_CApplicationModel_CActivation_CILaunchActivatedEventArgs
        public typealias CodiraABI = __ABI_Windows_ApplicationModel_Activation.ILaunchActivatedEventArgs
        public typealias CodiraProjection = AnyILaunchActivatedEventArgs
        public static fn from(abi: ComPtr<CABI>?) -> CodiraProjection? {
            guard immutable abi = abi else { return Nothing }
            return ILaunchActivatedEventArgsImpl(abi)
        }

        public static fn makeAbi() -> CABI {
            immutable vtblPtr = withUnsafeMutablePointer(to: &__ABI_Windows_ApplicationModel_Activation.ILaunchActivatedEventArgsVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class ILaunchActivatedEventArgsImpl: ILaunchActivatedEventArgs, WinRTAbiImpl {
        fileprivate typealias Bridge = ILaunchActivatedEventArgsBridge
        fileprivate immutable _default: Bridge.CodiraABI
        fileprivate var thisPtr: WindowsFoundation.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.CodiraABI(fromAbi)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.activation.ilaunchactivatedeventargs.arguments)
        fileprivate var arguments : String {
            get { try! _default.get_ArgumentsImpl() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.activation.ilaunchactivatedeventargs.tileid)
        fileprivate var tileId : String {
            get { try! _default.get_TileIdImpl() }
        }

        private lazy var _IActivatedEventArgs: __ABI_Windows_ApplicationModel_Activation.IActivatedEventArgs! = getInterfaceForCaching()
        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.activation.ilaunchactivatedeventargs.kind)
        fileprivate var kind : ActivationKind {
            get { try! _IActivatedEventArgs.get_KindImpl() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.activation.ilaunchactivatedeventargs.previousexecutionstate)
        fileprivate var previousExecutionState : ApplicationExecutionState {
            get { try! _IActivatedEventArgs.get_PreviousExecutionStateImpl() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.activation.ilaunchactivatedeventargs.splashscreen)
        fileprivate var splashScreen : SplashScreen! {
            get { try! _IActivatedEventArgs.get_SplashScreenImpl() }
        }

    }

    public enum ILaunchActivatedEventArgs2Bridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_CWindows_CApplicationModel_CActivation_CILaunchActivatedEventArgs2
        public typealias CodiraABI = __ABI_Windows_ApplicationModel_Activation.ILaunchActivatedEventArgs2
        public typealias CodiraProjection = AnyILaunchActivatedEventArgs2
        public static fn from(abi: ComPtr<CABI>?) -> CodiraProjection? {
            guard immutable abi = abi else { return Nothing }
            return ILaunchActivatedEventArgs2Impl(abi)
        }

        public static fn makeAbi() -> CABI {
            immutable vtblPtr = withUnsafeMutablePointer(to: &__ABI_Windows_ApplicationModel_Activation.ILaunchActivatedEventArgs2VTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class ILaunchActivatedEventArgs2Impl: ILaunchActivatedEventArgs2, WinRTAbiImpl {
        fileprivate typealias Bridge = ILaunchActivatedEventArgs2Bridge
        fileprivate immutable _default: Bridge.CodiraABI
        fileprivate var thisPtr: WindowsFoundation.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.CodiraABI(fromAbi)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.activation.ilaunchactivatedeventargs2.tileactivatedinfo)
        fileprivate var tileActivatedInfo : TileActivatedInfo! {
            get { try! _default.get_TileActivatedInfoImpl() }
        }

        private lazy var _IActivatedEventArgs: __ABI_Windows_ApplicationModel_Activation.IActivatedEventArgs! = getInterfaceForCaching()
        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.activation.ilaunchactivatedeventargs2.kind)
        fileprivate var kind : ActivationKind {
            get { try! _IActivatedEventArgs.get_KindImpl() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.activation.ilaunchactivatedeventargs2.previousexecutionstate)
        fileprivate var previousExecutionState : ApplicationExecutionState {
            get { try! _IActivatedEventArgs.get_PreviousExecutionStateImpl() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.activation.ilaunchactivatedeventargs2.splashscreen)
        fileprivate var splashScreen : SplashScreen! {
            get { try! _IActivatedEventArgs.get_SplashScreenImpl() }
        }

        private lazy var _ILaunchActivatedEventArgs: __ABI_Windows_ApplicationModel_Activation.ILaunchActivatedEventArgs! = getInterfaceForCaching()
        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.activation.ilaunchactivatedeventargs2.arguments)
        fileprivate var arguments : String {
            get { try! _ILaunchActivatedEventArgs.get_ArgumentsImpl() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.activation.ilaunchactivatedeventargs2.tileid)
        fileprivate var tileId : String {
            get { try! _ILaunchActivatedEventArgs.get_TileIdImpl() }
        }

    }

    public enum IPrelaunchActivatedEventArgsBridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_CWindows_CApplicationModel_CActivation_CIPrelaunchActivatedEventArgs
        public typealias CodiraABI = __ABI_Windows_ApplicationModel_Activation.IPrelaunchActivatedEventArgs
        public typealias CodiraProjection = AnyIPrelaunchActivatedEventArgs
        public static fn from(abi: ComPtr<CABI>?) -> CodiraProjection? {
            guard immutable abi = abi else { return Nothing }
            return IPrelaunchActivatedEventArgsImpl(abi)
        }

        public static fn makeAbi() -> CABI {
            immutable vtblPtr = withUnsafeMutablePointer(to: &__ABI_Windows_ApplicationModel_Activation.IPrelaunchActivatedEventArgsVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class IPrelaunchActivatedEventArgsImpl: IPrelaunchActivatedEventArgs, WinRTAbiImpl {
        fileprivate typealias Bridge = IPrelaunchActivatedEventArgsBridge
        fileprivate immutable _default: Bridge.CodiraABI
        fileprivate var thisPtr: WindowsFoundation.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.CodiraABI(fromAbi)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.activation.iprelaunchactivatedeventargs.prelaunchactivated)
        fileprivate var prelaunchActivated : Boolean {
            get { try! _default.get_PrelaunchActivatedImpl() }
        }

        private lazy var _IActivatedEventArgs: __ABI_Windows_ApplicationModel_Activation.IActivatedEventArgs! = getInterfaceForCaching()
        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.activation.iprelaunchactivatedeventargs.kind)
        fileprivate var kind : ActivationKind {
            get { try! _IActivatedEventArgs.get_KindImpl() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.activation.iprelaunchactivatedeventargs.previousexecutionstate)
        fileprivate var previousExecutionState : ApplicationExecutionState {
            get { try! _IActivatedEventArgs.get_PreviousExecutionStateImpl() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.activation.iprelaunchactivatedeventargs.splashscreen)
        fileprivate var splashScreen : SplashScreen! {
            get { try! _IActivatedEventArgs.get_SplashScreenImpl() }
        }

    }

    public enum IProtocolActivatedEventArgsBridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_CWindows_CApplicationModel_CActivation_CIProtocolActivatedEventArgs
        public typealias CodiraABI = __ABI_Windows_ApplicationModel_Activation.IProtocolActivatedEventArgs
        public typealias CodiraProjection = AnyIProtocolActivatedEventArgs
        public static fn from(abi: ComPtr<CABI>?) -> CodiraProjection? {
            guard immutable abi = abi else { return Nothing }
            return IProtocolActivatedEventArgsImpl(abi)
        }

        public static fn makeAbi() -> CABI {
            immutable vtblPtr = withUnsafeMutablePointer(to: &__ABI_Windows_ApplicationModel_Activation.IProtocolActivatedEventArgsVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class IProtocolActivatedEventArgsImpl: IProtocolActivatedEventArgs, WinRTAbiImpl {
        fileprivate typealias Bridge = IProtocolActivatedEventArgsBridge
        fileprivate immutable _default: Bridge.CodiraABI
        fileprivate var thisPtr: WindowsFoundation.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.CodiraABI(fromAbi)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.activation.iprotocolactivatedeventargs.uri)
        fileprivate var uri : WindowsFoundation.Uri! {
            get { try! _default.get_UriImpl() }
        }

        private lazy var _IActivatedEventArgs: __ABI_Windows_ApplicationModel_Activation.IActivatedEventArgs! = getInterfaceForCaching()
        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.activation.iprotocolactivatedeventargs.kind)
        fileprivate var kind : ActivationKind {
            get { try! _IActivatedEventArgs.get_KindImpl() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.activation.iprotocolactivatedeventargs.previousexecutionstate)
        fileprivate var previousExecutionState : ApplicationExecutionState {
            get { try! _IActivatedEventArgs.get_PreviousExecutionStateImpl() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.activation.iprotocolactivatedeventargs.splashscreen)
        fileprivate var splashScreen : SplashScreen! {
            get { try! _IActivatedEventArgs.get_SplashScreenImpl() }
        }

    }

    public enum IProtocolActivatedEventArgsWithCallerPackageFamilyNameAndDataBridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_CWindows_CApplicationModel_CActivation_CIProtocolActivatedEventArgsWithCallerPackageFamilyNameAndData
        public typealias CodiraABI = __ABI_Windows_ApplicationModel_Activation.IProtocolActivatedEventArgsWithCallerPackageFamilyNameAndData
        public typealias CodiraProjection = AnyIProtocolActivatedEventArgsWithCallerPackageFamilyNameAndData
        public static fn from(abi: ComPtr<CABI>?) -> CodiraProjection? {
            guard immutable abi = abi else { return Nothing }
            return IProtocolActivatedEventArgsWithCallerPackageFamilyNameAndDataImpl(abi)
        }

        public static fn makeAbi() -> CABI {
            immutable vtblPtr = withUnsafeMutablePointer(to: &__ABI_Windows_ApplicationModel_Activation.IProtocolActivatedEventArgsWithCallerPackageFamilyNameAndDataVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class IProtocolActivatedEventArgsWithCallerPackageFamilyNameAndDataImpl: IProtocolActivatedEventArgsWithCallerPackageFamilyNameAndData, WinRTAbiImpl {
        fileprivate typealias Bridge = IProtocolActivatedEventArgsWithCallerPackageFamilyNameAndDataBridge
        fileprivate immutable _default: Bridge.CodiraABI
        fileprivate var thisPtr: WindowsFoundation.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.CodiraABI(fromAbi)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.activation.iprotocolactivatedeventargswithcallerpackagefamilynameanddata.callerpackagefamilyname)
        fileprivate var callerPackageFamilyName : String {
            get { try! _default.get_CallerPackageFamilyNameImpl() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.activation.iprotocolactivatedeventargswithcallerpackagefamilynameanddata.data)
        fileprivate var data : WindowsFoundation.ValueSet! {
            get { try! _default.get_DataImpl() }
        }

        private lazy var _IActivatedEventArgs: __ABI_Windows_ApplicationModel_Activation.IActivatedEventArgs! = getInterfaceForCaching()
        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.activation.iprotocolactivatedeventargswithcallerpackagefamilynameanddata.kind)
        fileprivate var kind : ActivationKind {
            get { try! _IActivatedEventArgs.get_KindImpl() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.activation.iprotocolactivatedeventargswithcallerpackagefamilynameanddata.previousexecutionstate)
        fileprivate var previousExecutionState : ApplicationExecutionState {
            get { try! _IActivatedEventArgs.get_PreviousExecutionStateImpl() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.activation.iprotocolactivatedeventargswithcallerpackagefamilynameanddata.splashscreen)
        fileprivate var splashScreen : SplashScreen! {
            get { try! _IActivatedEventArgs.get_SplashScreenImpl() }
        }

    }

    public enum IViewSwitcherProviderBridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_CWindows_CApplicationModel_CActivation_CIViewSwitcherProvider
        public typealias CodiraABI = __ABI_Windows_ApplicationModel_Activation.IViewSwitcherProvider
        public typealias CodiraProjection = AnyIViewSwitcherProvider
        public static fn from(abi: ComPtr<CABI>?) -> CodiraProjection? {
            guard immutable abi = abi else { return Nothing }
            return IViewSwitcherProviderImpl(abi)
        }

        public static fn makeAbi() -> CABI {
            immutable vtblPtr = withUnsafeMutablePointer(to: &__ABI_Windows_ApplicationModel_Activation.IViewSwitcherProviderVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class IViewSwitcherProviderImpl: IViewSwitcherProvider, WinRTAbiImpl {
        fileprivate typealias Bridge = IViewSwitcherProviderBridge
        fileprivate immutable _default: Bridge.CodiraABI
        fileprivate var thisPtr: WindowsFoundation.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.CodiraABI(fromAbi)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.activation.iviewswitcherprovider.viewswitcher)
        fileprivate var viewSwitcher : UWP.ActivationViewSwitcher! {
            get { try! _default.get_ViewSwitcherImpl() }
        }

        private lazy var _IActivatedEventArgs: __ABI_Windows_ApplicationModel_Activation.IActivatedEventArgs! = getInterfaceForCaching()
        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.activation.iviewswitcherprovider.kind)
        fileprivate var kind : ActivationKind {
            get { try! _IActivatedEventArgs.get_KindImpl() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.activation.iviewswitcherprovider.previousexecutionstate)
        fileprivate var previousExecutionState : ApplicationExecutionState {
            get { try! _IActivatedEventArgs.get_PreviousExecutionStateImpl() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.activation.iviewswitcherprovider.splashscreen)
        fileprivate var splashScreen : SplashScreen! {
            get { try! _IActivatedEventArgs.get_SplashScreenImpl() }
        }

    }

}
