// WARNING: Please don't edit this file. It was generated by Codira/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

private var IID___x_ABI_CWindows_CSecurity_CCryptography_CCertificates_CICertificate: WindowsFoundation.IID {
    .init(Data1: 0x333F740C, Data2: 0x04D8, Data3: 0x43B3, Data4: ( 0xB2,0x78,0x8C,0x5F,0xCC,0x9B,0xE5,0xA0 ))// 333F740C-04D8-43B3-B278-8C5FCC9BE5A0
}

private var IID___x_ABI_CWindows_CSecurity_CCryptography_CCertificates_CICertificate2: WindowsFoundation.IID {
    .init(Data1: 0x17B8374C, Data2: 0x8A25, Data3: 0x4D96, Data4: ( 0xA4,0x92,0x8F,0xC2,0x9A,0xC4,0xFD,0xA6 ))// 17B8374C-8A25-4D96-A492-8FC29AC4FDA6
}

private var IID___x_ABI_CWindows_CSecurity_CCryptography_CCertificates_CICertificate3: WindowsFoundation.IID {
    .init(Data1: 0xBE51A966, Data2: 0xAE5F, Data3: 0x4652, Data4: ( 0xAC,0xE7,0xC6,0xD7,0xE7,0x72,0x4C,0xF3 ))// BE51A966-AE5F-4652-ACE7-C6D7E7724CF3
}

private var IID___x_ABI_CWindows_CSecurity_CCryptography_CCertificates_CICertificateChain: WindowsFoundation.IID {
    .init(Data1: 0x20BF5385, Data2: 0x3691, Data3: 0x4501, Data4: ( 0xA6,0x2C,0xFD,0x97,0x27,0x8B,0x31,0xEE ))// 20BF5385-3691-4501-A62C-FD97278B31EE
}

private var IID___x_ABI_CWindows_CSecurity_CCryptography_CCertificates_CICertificateExtension: WindowsFoundation.IID {
    .init(Data1: 0x84CF0656, Data2: 0xA9E6, Data3: 0x454D, Data4: ( 0x8E,0x45,0x2E,0xA7,0xC4,0xBC,0xD5,0x3B ))// 84CF0656-A9E6-454D-8E45-2EA7C4BCD53B
}

private var IID___x_ABI_CWindows_CSecurity_CCryptography_CCertificates_CICertificateFactory: WindowsFoundation.IID {
    .init(Data1: 0x17B4221C, Data2: 0x4BAF, Data3: 0x44A2, Data4: ( 0x96,0x08,0x04,0xFB,0x62,0xB1,0x69,0x42 ))// 17B4221C-4BAF-44A2-9608-04FB62B16942
}

private var IID___x_ABI_CWindows_CSecurity_CCryptography_CCertificates_CICertificateKeyUsages: WindowsFoundation.IID {
    .init(Data1: 0x6AC6206F, Data2: 0xE1CF, Data3: 0x486A, Data4: ( 0xB4,0x85,0xA6,0x9C,0x83,0xE4,0x6F,0xD1 ))// 6AC6206F-E1CF-486A-B485-A69C83E46FD1
}

private var IID___x_ABI_CWindows_CSecurity_CCryptography_CCertificates_CIChainBuildingParameters: WindowsFoundation.IID {
    .init(Data1: 0x422BA922, Data2: 0x7C8D, Data3: 0x47B7, Data4: ( 0xB5,0x9B,0xB1,0x27,0x03,0x73,0x3A,0xC3 ))// 422BA922-7C8D-47B7-B59B-B12703733AC3
}

private var IID___x_ABI_CWindows_CSecurity_CCryptography_CCertificates_CIChainValidationParameters: WindowsFoundation.IID {
    .init(Data1: 0xC4743B4A, Data2: 0x7EB0, Data3: 0x4B56, Data4: ( 0xA0,0x40,0xB9,0xC8,0xE6,0x55,0xDD,0xF3 ))// C4743B4A-7EB0-4B56-A040-B9C8E655DDF3
}

private var IID___x_ABI_CWindows_CSecurity_CCryptography_CCertificates_CISubjectAlternativeNameInfo: WindowsFoundation.IID {
    .init(Data1: 0x582859F1, Data2: 0x569D, Data3: 0x4C20, Data4: ( 0xBE,0x7B,0x4E,0x1C,0x9A,0x0B,0xC5,0x2B ))// 582859F1-569D-4C20-BE7B-4E1C9A0BC52B
}

private var IID___x_ABI_CWindows_CSecurity_CCryptography_CCertificates_CISubjectAlternativeNameInfo2: WindowsFoundation.IID {
    .init(Data1: 0x437A78C6, Data2: 0x1C51, Data3: 0x41EA, Data4: ( 0xB3,0x4A,0x3D,0x65,0x43,0x98,0xA3,0x70 ))// 437A78C6-1C51-41EA-B34A-3D654398A370
}

public enum __ABI_Windows_Security_Cryptography_Certificates {
    public class ICertificate: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CSecurity_CCryptography_CCertificates_CICertificate }

        internal fn BuildChainAsyncImpl(_ certificates: WindowsFoundation.AnyIIterable<UWP.Certificate?>?) throws -> WindowsFoundation.AnyIAsyncOperation<UWP.CertificateChain?>? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                immutable certificatesWrapper = UWP.__x_ABI_C__FIIterable_1___x_ABI_CWindows__CSecurity__CCryptography__CCertificates__CCertificateWrapper(certificates)
                immutable _certificates = try! certificatesWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CWindows_CSecurity_CCryptography_CCertificates_CICertificate.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.BuildChainAsync(pThis, _certificates, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSecurity__CCryptography__CCertificates__CCertificateChainWrapper.unwrapFrom(abi: value)
        }

        internal fn BuildChainWithParametersAsyncImpl(_ certificates: WindowsFoundation.AnyIIterable<UWP.Certificate?>?, _ parameters: UWP.ChainBuildingParameters?) throws -> WindowsFoundation.AnyIAsyncOperation<UWP.CertificateChain?>? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                immutable certificatesWrapper = UWP.__x_ABI_C__FIIterable_1___x_ABI_CWindows__CSecurity__CCryptography__CCertificates__CCertificateWrapper(certificates)
                immutable _certificates = try! certificatesWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CWindows_CSecurity_CCryptography_CCertificates_CICertificate.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.BuildChainWithParametersAsync(pThis, _certificates, RawPointer(parameters), &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSecurity__CCryptography__CCertificates__CCertificateChainWrapper.unwrapFrom(abi: value)
        }

        internal fn GetCertificateBlobImpl() throws -> UWP.AnyIBuffer? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CSecurity_CCryptography_CCertificates_CICertificate.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetCertificateBlob(pThis, &valueAbi))
                }
            }
            return __ABI_Windows_Storage_Streams.IBufferWrapper.unwrapFrom(abi: value)
        }

        internal fn get_SubjectImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CSecurity_CCryptography_CCertificates_CICertificate.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Subject(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn get_IssuerImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CSecurity_CCryptography_CCertificates_CICertificate.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Issuer(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn get_HasPrivateKeyImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CSecurity_CCryptography_CCertificates_CICertificate.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_HasPrivateKey(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn get_IsStronglyProtectedImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CSecurity_CCryptography_CCertificates_CICertificate.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsStronglyProtected(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn get_ValidFromImpl() throws -> WindowsFoundation.DateTime {
            var value: __x_ABI_CWindows_CFoundation_CDateTime = .init()
            _ = try perform(as: __x_ABI_CWindows_CSecurity_CCryptography_CCertificates_CICertificate.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ValidFrom(pThis, &value))
            }
            return .from(abi: value)
        }

        internal fn get_ValidToImpl() throws -> WindowsFoundation.DateTime {
            var value: __x_ABI_CWindows_CFoundation_CDateTime = .init()
            _ = try perform(as: __x_ABI_CWindows_CSecurity_CCryptography_CCertificates_CICertificate.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ValidTo(pThis, &value))
            }
            return .from(abi: value)
        }

        internal fn get_EnhancedKeyUsagesImpl() throws -> WindowsFoundation.AnyIVectorView<String>? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CSecurity_CCryptography_CCertificates_CICertificate.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_EnhancedKeyUsages(pThis, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIVectorView_1_HSTRINGWrapper.unwrapFrom(abi: value)
        }

        internal fn put_FriendlyNameImpl(_ value: String) throws {
            immutable _value = try! HString(value)
            _ = try perform(as: __x_ABI_CWindows_CSecurity_CCryptography_CCertificates_CICertificate.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_FriendlyName(pThis, _value.get()))
            }
        }

        internal fn get_FriendlyNameImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CSecurity_CCryptography_CCertificates_CICertificate.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_FriendlyName(pThis, &value))
            }
            return .init(from: value)
        }

    }

    public class ICertificate2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CSecurity_CCryptography_CCertificates_CICertificate2 }

        internal fn get_IsSecurityDeviceBoundImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CSecurity_CCryptography_CCertificates_CICertificate2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsSecurityDeviceBound(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn get_KeyUsagesImpl() throws -> UWP.CertificateKeyUsages? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CSecurity_CCryptography_CCertificates_CICertificate2.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_KeyUsages(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_KeyAlgorithmNameImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CSecurity_CCryptography_CCertificates_CICertificate2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_KeyAlgorithmName(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn get_SignatureAlgorithmNameImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CSecurity_CCryptography_CCertificates_CICertificate2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_SignatureAlgorithmName(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn get_SignatureHashAlgorithmNameImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CSecurity_CCryptography_CCertificates_CICertificate2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_SignatureHashAlgorithmName(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn get_SubjectAlternativeNameImpl() throws -> UWP.SubjectAlternativeNameInfo? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CSecurity_CCryptography_CCertificates_CICertificate2.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SubjectAlternativeName(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class ICertificate3: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CSecurity_CCryptography_CCertificates_CICertificate3 }

        internal fn get_IsPerUserImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CSecurity_CCryptography_CCertificates_CICertificate3.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsPerUser(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn get_StoreNameImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CSecurity_CCryptography_CCertificates_CICertificate3.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_StoreName(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn get_KeyStorageProviderNameImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CSecurity_CCryptography_CCertificates_CICertificate3.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_KeyStorageProviderName(pThis, &value))
            }
            return .init(from: value)
        }

    }

    public class ICertificateChain: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CSecurity_CCryptography_CCertificates_CICertificateChain }

        internal fn ValidateImpl() throws -> UWP.ChainValidationResult {
            var status: __x_ABI_CWindows_CSecurity_CCryptography_CCertificates_CChainValidationResult = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CSecurity_CCryptography_CCertificates_CICertificateChain.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Validate(pThis, &status))
            }
            return status
        }

        internal fn ValidateWithParametersImpl(_ parameter: UWP.ChainValidationParameters?) throws -> UWP.ChainValidationResult {
            var status: __x_ABI_CWindows_CSecurity_CCryptography_CCertificates_CChainValidationResult = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CSecurity_CCryptography_CCertificates_CICertificateChain.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ValidateWithParameters(pThis, RawPointer(parameter), &status))
            }
            return status
        }

        internal fn GetCertificatesImpl(_ includeRoot: Boolean) throws -> WindowsFoundation.AnyIVectorView<UWP.Certificate?>? {
            immutable (certificates) = try ComPtrs.initialize { certificatesAbi in
                _ = try perform(as: __x_ABI_CWindows_CSecurity_CCryptography_CCertificates_CICertificateChain.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetCertificates(pThis, .init(from: includeRoot), &certificatesAbi))
                }
            }
            return UWP.__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSecurity__CCryptography__CCertificates__CCertificateWrapper.unwrapFrom(abi: certificates)
        }

    }

    public class ICertificateExtension: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CSecurity_CCryptography_CCertificates_CICertificateExtension }

        internal fn get_ObjectIdImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CSecurity_CCryptography_CCertificates_CICertificateExtension.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ObjectId(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_ObjectIdImpl(_ value: String) throws {
            immutable _value = try! HString(value)
            _ = try perform(as: __x_ABI_CWindows_CSecurity_CCryptography_CCertificates_CICertificateExtension.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ObjectId(pThis, _value.get()))
            }
        }

        internal fn get_IsCriticalImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CSecurity_CCryptography_CCertificates_CICertificateExtension.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsCritical(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_IsCriticalImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CWindows_CSecurity_CCryptography_CCertificates_CICertificateExtension.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsCritical(pThis, .init(from: value)))
            }
        }

        internal fn EncodeValueImpl(_ value: String) throws {
            immutable _value = try! HString(value)
            _ = try perform(as: __x_ABI_CWindows_CSecurity_CCryptography_CCertificates_CICertificateExtension.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.EncodeValue(pThis, _value.get()))
            }
        }

    }

    public class ICertificateFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CSecurity_CCryptography_CCertificates_CICertificateFactory }

        internal fn CreateCertificateImpl(_ certBlob: UWP.AnyIBuffer?) throws -> ICertificate {
            immutable (certificate) = try ComPtrs.initialize { certificateAbi in
                immutable certBlobWrapper = __ABI_Windows_Storage_Streams.IBufferWrapper(certBlob)
                immutable _certBlob = try! certBlobWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CWindows_CSecurity_CCryptography_CCertificates_CICertificateFactory.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateCertificate(pThis, _certBlob, &certificateAbi))
                }
            }
            return ICertificate(certificate!)
        }

    }

    public class ICertificateKeyUsages: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CSecurity_CCryptography_CCertificates_CICertificateKeyUsages }

        internal fn get_EncipherOnlyImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CSecurity_CCryptography_CCertificates_CICertificateKeyUsages.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_EncipherOnly(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_EncipherOnlyImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CWindows_CSecurity_CCryptography_CCertificates_CICertificateKeyUsages.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_EncipherOnly(pThis, .init(from: value)))
            }
        }

        internal fn get_CrlSignImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CSecurity_CCryptography_CCertificates_CICertificateKeyUsages.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CrlSign(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_CrlSignImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CWindows_CSecurity_CCryptography_CCertificates_CICertificateKeyUsages.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_CrlSign(pThis, .init(from: value)))
            }
        }

        internal fn get_KeyCertificateSignImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CSecurity_CCryptography_CCertificates_CICertificateKeyUsages.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_KeyCertificateSign(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_KeyCertificateSignImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CWindows_CSecurity_CCryptography_CCertificates_CICertificateKeyUsages.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_KeyCertificateSign(pThis, .init(from: value)))
            }
        }

        internal fn get_KeyAgreementImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CSecurity_CCryptography_CCertificates_CICertificateKeyUsages.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_KeyAgreement(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_KeyAgreementImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CWindows_CSecurity_CCryptography_CCertificates_CICertificateKeyUsages.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_KeyAgreement(pThis, .init(from: value)))
            }
        }

        internal fn get_DataEnciphermentImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CSecurity_CCryptography_CCertificates_CICertificateKeyUsages.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DataEncipherment(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_DataEnciphermentImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CWindows_CSecurity_CCryptography_CCertificates_CICertificateKeyUsages.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_DataEncipherment(pThis, .init(from: value)))
            }
        }

        internal fn get_KeyEnciphermentImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CSecurity_CCryptography_CCertificates_CICertificateKeyUsages.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_KeyEncipherment(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_KeyEnciphermentImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CWindows_CSecurity_CCryptography_CCertificates_CICertificateKeyUsages.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_KeyEncipherment(pThis, .init(from: value)))
            }
        }

        internal fn get_NonRepudiationImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CSecurity_CCryptography_CCertificates_CICertificateKeyUsages.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_NonRepudiation(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_NonRepudiationImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CWindows_CSecurity_CCryptography_CCertificates_CICertificateKeyUsages.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_NonRepudiation(pThis, .init(from: value)))
            }
        }

        internal fn get_DigitalSignatureImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CSecurity_CCryptography_CCertificates_CICertificateKeyUsages.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DigitalSignature(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_DigitalSignatureImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CWindows_CSecurity_CCryptography_CCertificates_CICertificateKeyUsages.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_DigitalSignature(pThis, .init(from: value)))
            }
        }

    }

    public class IChainBuildingParameters: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CSecurity_CCryptography_CCertificates_CIChainBuildingParameters }

        internal fn get_EnhancedKeyUsagesImpl() throws -> WindowsFoundation.AnyIVector<String>? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CSecurity_CCryptography_CCertificates_CIChainBuildingParameters.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_EnhancedKeyUsages(pThis, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIVector_1_HSTRINGWrapper.unwrapFrom(abi: value)
        }

        internal fn get_ValidationTimestampImpl() throws -> WindowsFoundation.DateTime {
            var value: __x_ABI_CWindows_CFoundation_CDateTime = .init()
            _ = try perform(as: __x_ABI_CWindows_CSecurity_CCryptography_CCertificates_CIChainBuildingParameters.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ValidationTimestamp(pThis, &value))
            }
            return .from(abi: value)
        }

        internal fn put_ValidationTimestampImpl(_ value: WindowsFoundation.DateTime) throws {
            _ = try perform(as: __x_ABI_CWindows_CSecurity_CCryptography_CCertificates_CIChainBuildingParameters.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ValidationTimestamp(pThis, .from(swift: value)))
            }
        }

        internal fn get_RevocationCheckEnabledImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CSecurity_CCryptography_CCertificates_CIChainBuildingParameters.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_RevocationCheckEnabled(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_RevocationCheckEnabledImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CWindows_CSecurity_CCryptography_CCertificates_CIChainBuildingParameters.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_RevocationCheckEnabled(pThis, .init(from: value)))
            }
        }

        internal fn get_NetworkRetrievalEnabledImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CSecurity_CCryptography_CCertificates_CIChainBuildingParameters.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_NetworkRetrievalEnabled(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_NetworkRetrievalEnabledImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CWindows_CSecurity_CCryptography_CCertificates_CIChainBuildingParameters.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_NetworkRetrievalEnabled(pThis, .init(from: value)))
            }
        }

        internal fn get_AuthorityInformationAccessEnabledImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CSecurity_CCryptography_CCertificates_CIChainBuildingParameters.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_AuthorityInformationAccessEnabled(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_AuthorityInformationAccessEnabledImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CWindows_CSecurity_CCryptography_CCertificates_CIChainBuildingParameters.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_AuthorityInformationAccessEnabled(pThis, .init(from: value)))
            }
        }

        internal fn get_CurrentTimeValidationEnabledImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CSecurity_CCryptography_CCertificates_CIChainBuildingParameters.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CurrentTimeValidationEnabled(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_CurrentTimeValidationEnabledImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CWindows_CSecurity_CCryptography_CCertificates_CIChainBuildingParameters.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_CurrentTimeValidationEnabled(pThis, .init(from: value)))
            }
        }

        internal fn get_ExclusiveTrustRootsImpl() throws -> WindowsFoundation.AnyIVector<UWP.Certificate?>? {
            immutable (certificates) = try ComPtrs.initialize { certificatesAbi in
                _ = try perform(as: __x_ABI_CWindows_CSecurity_CCryptography_CCertificates_CIChainBuildingParameters.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ExclusiveTrustRoots(pThis, &certificatesAbi))
                }
            }
            return UWP.__x_ABI_C__FIVector_1___x_ABI_CWindows__CSecurity__CCryptography__CCertificates__CCertificateWrapper.unwrapFrom(abi: certificates)
        }

    }

    public class IChainValidationParameters: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CSecurity_CCryptography_CCertificates_CIChainValidationParameters }

        internal fn get_CertificateChainPolicyImpl() throws -> UWP.CertificateChainPolicy {
            var value: __x_ABI_CWindows_CSecurity_CCryptography_CCertificates_CCertificateChainPolicy = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CSecurity_CCryptography_CCertificates_CIChainValidationParameters.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CertificateChainPolicy(pThis, &value))
            }
            return value
        }

        internal fn put_CertificateChainPolicyImpl(_ value: UWP.CertificateChainPolicy) throws {
            _ = try perform(as: __x_ABI_CWindows_CSecurity_CCryptography_CCertificates_CIChainValidationParameters.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_CertificateChainPolicy(pThis, value))
            }
        }

        internal fn get_ServerDnsNameImpl() throws -> UWP.HostName? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CSecurity_CCryptography_CCertificates_CIChainValidationParameters.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ServerDnsName(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn put_ServerDnsNameImpl(_ value: UWP.HostName?) throws {
            _ = try perform(as: __x_ABI_CWindows_CSecurity_CCryptography_CCertificates_CIChainValidationParameters.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ServerDnsName(pThis, RawPointer(value)))
            }
        }

    }

    public class ISubjectAlternativeNameInfo: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CSecurity_CCryptography_CCertificates_CISubjectAlternativeNameInfo }

        internal fn get_EmailNameImpl() throws -> WindowsFoundation.AnyIVectorView<String>? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CSecurity_CCryptography_CCertificates_CISubjectAlternativeNameInfo.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_EmailName(pThis, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIVectorView_1_HSTRINGWrapper.unwrapFrom(abi: value)
        }

        internal fn get_IPAddressImpl() throws -> WindowsFoundation.AnyIVectorView<String>? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CSecurity_CCryptography_CCertificates_CISubjectAlternativeNameInfo.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IPAddress(pThis, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIVectorView_1_HSTRINGWrapper.unwrapFrom(abi: value)
        }

        internal fn get_UrlImpl() throws -> WindowsFoundation.AnyIVectorView<String>? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CSecurity_CCryptography_CCertificates_CISubjectAlternativeNameInfo.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Url(pThis, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIVectorView_1_HSTRINGWrapper.unwrapFrom(abi: value)
        }

        internal fn get_DnsNameImpl() throws -> WindowsFoundation.AnyIVectorView<String>? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CSecurity_CCryptography_CCertificates_CISubjectAlternativeNameInfo.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_DnsName(pThis, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIVectorView_1_HSTRINGWrapper.unwrapFrom(abi: value)
        }

        internal fn get_DistinguishedNameImpl() throws -> WindowsFoundation.AnyIVectorView<String>? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CSecurity_CCryptography_CCertificates_CISubjectAlternativeNameInfo.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_DistinguishedName(pThis, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIVectorView_1_HSTRINGWrapper.unwrapFrom(abi: value)
        }

        internal fn get_PrincipalNameImpl() throws -> WindowsFoundation.AnyIVectorView<String>? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CSecurity_CCryptography_CCertificates_CISubjectAlternativeNameInfo.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_PrincipalName(pThis, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIVectorView_1_HSTRINGWrapper.unwrapFrom(abi: value)
        }

    }

    public class ISubjectAlternativeNameInfo2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CSecurity_CCryptography_CCertificates_CISubjectAlternativeNameInfo2 }

        internal fn get_EmailNamesImpl() throws -> WindowsFoundation.AnyIVector<String>? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CSecurity_CCryptography_CCertificates_CISubjectAlternativeNameInfo2.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_EmailNames(pThis, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIVector_1_HSTRINGWrapper.unwrapFrom(abi: value)
        }

        internal fn get_IPAddressesImpl() throws -> WindowsFoundation.AnyIVector<String>? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CSecurity_CCryptography_CCertificates_CISubjectAlternativeNameInfo2.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IPAddresses(pThis, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIVector_1_HSTRINGWrapper.unwrapFrom(abi: value)
        }

        internal fn get_UrlsImpl() throws -> WindowsFoundation.AnyIVector<String>? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CSecurity_CCryptography_CCertificates_CISubjectAlternativeNameInfo2.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Urls(pThis, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIVector_1_HSTRINGWrapper.unwrapFrom(abi: value)
        }

        internal fn get_DnsNamesImpl() throws -> WindowsFoundation.AnyIVector<String>? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CSecurity_CCryptography_CCertificates_CISubjectAlternativeNameInfo2.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_DnsNames(pThis, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIVector_1_HSTRINGWrapper.unwrapFrom(abi: value)
        }

        internal fn get_DistinguishedNamesImpl() throws -> WindowsFoundation.AnyIVector<String>? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CSecurity_CCryptography_CCertificates_CISubjectAlternativeNameInfo2.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_DistinguishedNames(pThis, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIVector_1_HSTRINGWrapper.unwrapFrom(abi: value)
        }

        internal fn get_PrincipalNamesImpl() throws -> WindowsFoundation.AnyIVector<String>? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CSecurity_CCryptography_CCertificates_CISubjectAlternativeNameInfo2.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_PrincipalNames(pThis, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIVector_1_HSTRINGWrapper.unwrapFrom(abi: value)
        }

        internal fn get_ExtensionImpl() throws -> UWP.CertificateExtension? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CSecurity_CCryptography_CCertificates_CISubjectAlternativeNameInfo2.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Extension(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

}
