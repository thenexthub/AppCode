// WARNING: Please don't edit this file. It was generated by Codira/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

private var IID___x_ABI_CWindows_CMedia_CDevices_CIAdvancedPhotoCaptureSettings: WindowsFoundation.IID {
    .init(Data1: 0x08F3863A, Data2: 0x0018, Data3: 0x445B, Data4: ( 0x93,0xD2,0x64,0x6D,0x1C,0x5E,0xD0,0x5C ))// 08F3863A-0018-445B-93D2-646D1C5ED05C
}

private var IID___x_ABI_CWindows_CMedia_CDevices_CIAdvancedPhotoControl: WindowsFoundation.IID {
    .init(Data1: 0xC5B15486, Data2: 0x9001, Data3: 0x4682, Data4: ( 0x93,0x09,0x68,0xEA,0xE0,0x08,0x0E,0xEC ))// C5B15486-9001-4682-9309-68EAE0080EEC
}

private var IID___x_ABI_CWindows_CMedia_CDevices_CIAdvancedVideoCaptureDeviceController: WindowsFoundation.IID {
    .init(Data1: 0xDE6FF4D3, Data2: 0x2B96, Data3: 0x4583, Data4: ( 0x80,0xAB,0xB5,0xB0,0x1D,0xC6,0xA8,0xD7 ))// DE6FF4D3-2B96-4583-80AB-B5B01DC6A8D7
}

private var IID___x_ABI_CWindows_CMedia_CDevices_CIAdvancedVideoCaptureDeviceController2: WindowsFoundation.IID {
    .init(Data1: 0x8BB94F8F, Data2: 0xF11A, Data3: 0x43DB, Data4: ( 0xB4,0x02,0x11,0x93,0x0B,0x80,0xAE,0x56 ))// 8BB94F8F-F11A-43DB-B402-11930B80AE56
}

private var IID___x_ABI_CWindows_CMedia_CDevices_CIAdvancedVideoCaptureDeviceController3: WindowsFoundation.IID {
    .init(Data1: 0xA98B8F34, Data2: 0xEE0D, Data3: 0x470C, Data4: ( 0xB9,0xF0,0x42,0x29,0xC4,0xBB,0xD0,0x89 ))// A98B8F34-EE0D-470C-B9F0-4229C4BBD089
}

private var IID___x_ABI_CWindows_CMedia_CDevices_CIAdvancedVideoCaptureDeviceController4: WindowsFoundation.IID {
    .init(Data1: 0xEA9FBFAF, Data2: 0xD371, Data3: 0x41C3, Data4: ( 0x9A,0x17,0x82,0x4A,0x87,0xEB,0xDF,0xD2 ))// EA9FBFAF-D371-41C3-9A17-824A87EBDFD2
}

private var IID___x_ABI_CWindows_CMedia_CDevices_CIAdvancedVideoCaptureDeviceController5: WindowsFoundation.IID {
    .init(Data1: 0x33512B17, Data2: 0xB9CB, Data3: 0x4A23, Data4: ( 0xB8,0x75,0xF9,0xEA,0xAB,0x53,0x54,0x92 ))// 33512B17-B9CB-4A23-B875-F9EAAB535492
}

private var IID___x_ABI_CWindows_CMedia_CDevices_CIAdvancedVideoCaptureDeviceController6: WindowsFoundation.IID {
    .init(Data1: 0xB6563A53, Data2: 0x68A1, Data3: 0x44B7, Data4: ( 0x9F,0x89,0xB5,0xFA,0x97,0xAC,0x0C,0xBE ))// B6563A53-68A1-44B7-9F89-B5FA97AC0CBE
}

private var IID___x_ABI_CWindows_CMedia_CDevices_CIAdvancedVideoCaptureDeviceController7: WindowsFoundation.IID {
    .init(Data1: 0x8D2927F0, Data2: 0xA054, Data3: 0x50E7, Data4: ( 0xB7,0xDF,0x7C,0x04,0x23,0x4D,0x10,0xF0 ))// 8D2927F0-A054-50E7-B7DF-7C04234D10F0
}

private var IID___x_ABI_CWindows_CMedia_CDevices_CIAudioDeviceController: WindowsFoundation.IID {
    .init(Data1: 0xEDD4A388, Data2: 0x79C7, Data3: 0x4F7C, Data4: ( 0x90,0xE8,0xEF,0x93,0x4B,0x21,0x58,0x0A ))// EDD4A388-79C7-4F7C-90E8-EF934B21580A
}

private var IID___x_ABI_CWindows_CMedia_CDevices_CIExposureCompensationControl: WindowsFoundation.IID {
    .init(Data1: 0x81C8E834, Data2: 0xDCEC, Data3: 0x4011, Data4: ( 0xA6,0x10,0x1F,0x38,0x47,0xE6,0x4A,0xCA ))// 81C8E834-DCEC-4011-A610-1F3847E64ACA
}

private var IID___x_ABI_CWindows_CMedia_CDevices_CIExposureControl: WindowsFoundation.IID {
    .init(Data1: 0x09E8CBE2, Data2: 0xAD96, Data3: 0x4F28, Data4: ( 0xA0,0xE0,0x96,0xED,0x7E,0x1B,0x5F,0xD2 ))// 09E8CBE2-AD96-4F28-A0E0-96ED7E1B5FD2
}

private var IID___x_ABI_CWindows_CMedia_CDevices_CIExposurePriorityVideoControl: WindowsFoundation.IID {
    .init(Data1: 0x2CB240A3, Data2: 0x5168, Data3: 0x4271, Data4: ( 0x9E,0xA5,0x47,0x62,0x1A,0x98,0xA3,0x52 ))// 2CB240A3-5168-4271-9EA5-47621A98A352
}

private var IID___x_ABI_CWindows_CMedia_CDevices_CIFlashControl: WindowsFoundation.IID {
    .init(Data1: 0xDEF41DBE, Data2: 0x7D68, Data3: 0x45E3, Data4: ( 0x8C,0x0F,0xBE,0x7B,0xB3,0x28,0x37,0xD0 ))// DEF41DBE-7D68-45E3-8C0F-BE7BB32837D0
}

private var IID___x_ABI_CWindows_CMedia_CDevices_CIFlashControl2: WindowsFoundation.IID {
    .init(Data1: 0x7D29CC9E, Data2: 0x75E1, Data3: 0x4AF7, Data4: ( 0xBD,0x7D,0x4E,0x38,0xE1,0xC0,0x6C,0xD6 ))// 7D29CC9E-75E1-4AF7-BD7D-4E38E1C06CD6
}

private var IID___x_ABI_CWindows_CMedia_CDevices_CIFocusControl: WindowsFoundation.IID {
    .init(Data1: 0xC0D889F6, Data2: 0x5228, Data3: 0x4453, Data4: ( 0xB1,0x53,0x85,0x60,0x65,0x92,0xB2,0x38 ))// C0D889F6-5228-4453-B153-85606592B238
}

private var IID___x_ABI_CWindows_CMedia_CDevices_CIFocusControl2: WindowsFoundation.IID {
    .init(Data1: 0x3F7CFF48, Data2: 0xC534, Data3: 0x4E9E, Data4: ( 0x94,0xC3,0x52,0xEF,0x2A,0xFD,0x5D,0x07 ))// 3F7CFF48-C534-4E9E-94C3-52EF2AFD5D07
}

private var IID___x_ABI_CWindows_CMedia_CDevices_CIFocusSettings: WindowsFoundation.IID {
    .init(Data1: 0x79958F6B, Data2: 0x3263, Data3: 0x4275, Data4: ( 0x85,0xD6,0xAE,0xAE,0x89,0x1C,0x96,0xEE ))// 79958F6B-3263-4275-85D6-AEAE891C96EE
}

private var IID___x_ABI_CWindows_CMedia_CDevices_CIHdrVideoControl: WindowsFoundation.IID {
    .init(Data1: 0x55D8E2D0, Data2: 0x30C0, Data3: 0x43BF, Data4: ( 0x9B,0x9A,0x97,0x99,0xD7,0x0C,0xED,0x94 ))// 55D8E2D0-30C0-43BF-9B9A-9799D70CED94
}

private var IID___x_ABI_CWindows_CMedia_CDevices_CIInfraredTorchControl: WindowsFoundation.IID {
    .init(Data1: 0x1CBA2C83, Data2: 0x6CB6, Data3: 0x5A04, Data4: ( 0xA6,0xFC,0x3B,0xE7,0xB3,0x3F,0xF0,0x56 ))// 1CBA2C83-6CB6-5A04-A6FC-3BE7B33FF056
}

private var IID___x_ABI_CWindows_CMedia_CDevices_CIIsoSpeedControl: WindowsFoundation.IID {
    .init(Data1: 0x27B6C322, Data2: 0x25AD, Data3: 0x4F1B, Data4: ( 0xAA,0xAB,0x52,0x4A,0xB3,0x76,0xCA,0x33 ))// 27B6C322-25AD-4F1B-AAAB-524AB376CA33
}

private var IID___x_ABI_CWindows_CMedia_CDevices_CIIsoSpeedControl2: WindowsFoundation.IID {
    .init(Data1: 0x6F1578F2, Data2: 0x6D77, Data3: 0x4F8A, Data4: ( 0x8C,0x2F,0x61,0x30,0xB6,0x39,0x50,0x53 ))// 6F1578F2-6D77-4F8A-8C2F-6130B6395053
}

private var IID___x_ABI_CWindows_CMedia_CDevices_CILowLagPhotoControl: WindowsFoundation.IID {
    .init(Data1: 0x6D5C4DD0, Data2: 0xFADF, Data3: 0x415D, Data4: ( 0xAE,0xE6,0x3B,0xAA,0x52,0x93,0x00,0xC9 ))// 6D5C4DD0-FADF-415D-AEE6-3BAA529300C9
}

private var IID___x_ABI_CWindows_CMedia_CDevices_CILowLagPhotoSequenceControl: WindowsFoundation.IID {
    .init(Data1: 0x3DCF909D, Data2: 0x6D16, Data3: 0x409C, Data4: ( 0xBA,0xFE,0xB9,0xA5,0x94,0xC6,0xFD,0xE6 ))// 3DCF909D-6D16-409C-BAFE-B9A594C6FDE6
}

private var IID___x_ABI_CWindows_CMedia_CDevices_CIMediaDeviceControl: WindowsFoundation.IID {
    .init(Data1: 0xEFA8DFA9, Data2: 0x6F75, Data3: 0x4863, Data4: ( 0xBA,0x0B,0x58,0x3F,0x30,0x36,0xB4,0xDE ))// EFA8DFA9-6F75-4863-BA0B-583F3036B4DE
}

private var IID___x_ABI_CWindows_CMedia_CDevices_CIMediaDeviceControlCapabilities: WindowsFoundation.IID {
    .init(Data1: 0x23005816, Data2: 0xEB85, Data3: 0x43E2, Data4: ( 0xB9,0x2B,0x82,0x40,0xD5,0xEE,0x70,0xEC ))// 23005816-EB85-43E2-B92B-8240D5EE70EC
}

private var IID___x_ABI_CWindows_CMedia_CDevices_CIMediaDeviceController: WindowsFoundation.IID {
    .init(Data1: 0xF6F8F5CE, Data2: 0x209A, Data3: 0x48FB, Data4: ( 0x86,0xFC,0xD4,0x45,0x78,0xF3,0x17,0xE6 ))// F6F8F5CE-209A-48FB-86FC-D44578F317E6
}

private var IID___x_ABI_CWindows_CMedia_CDevices_CIOpticalImageStabilizationControl: WindowsFoundation.IID {
    .init(Data1: 0xBFAD9C1D, Data2: 0x00BC, Data3: 0x423B, Data4: ( 0x8E,0xB2,0xA0,0x17,0x8C,0xA9,0x42,0x47 ))// BFAD9C1D-00BC-423B-8EB2-A0178CA94247
}

private var IID___x_ABI_CWindows_CMedia_CDevices_CIPhotoConfirmationControl: WindowsFoundation.IID {
    .init(Data1: 0xC8F3F363, Data2: 0xFF5E, Data3: 0x4582, Data4: ( 0xA9,0xA8,0x05,0x50,0xF8,0x5A,0x4A,0x76 ))// C8F3F363-FF5E-4582-A9A8-0550F85A4A76
}

private var IID___x_ABI_CWindows_CMedia_CDevices_CIRegionOfInterest: WindowsFoundation.IID {
    .init(Data1: 0xE5ECC834, Data2: 0xCE66, Data3: 0x4E05, Data4: ( 0xA7,0x8F,0xCF,0x39,0x1A,0x5E,0xC2,0xD1 ))// E5ECC834-CE66-4E05-A78F-CF391A5EC2D1
}

private var IID___x_ABI_CWindows_CMedia_CDevices_CIRegionOfInterest2: WindowsFoundation.IID {
    .init(Data1: 0x19FE2A91, Data2: 0x73AA, Data3: 0x4D51, Data4: ( 0x8A,0x9D,0x56,0xCC,0xF7,0xDB,0x7F,0x54 ))// 19FE2A91-73AA-4D51-8A9D-56CCF7DB7F54
}

private var IID___x_ABI_CWindows_CMedia_CDevices_CIRegionsOfInterestControl: WindowsFoundation.IID {
    .init(Data1: 0xC323F527, Data2: 0xAB0B, Data3: 0x4558, Data4: ( 0x8B,0x5B,0xDF,0x56,0x93,0xDB,0x03,0x78 ))// C323F527-AB0B-4558-8B5B-DF5693DB0378
}

private var IID___x_ABI_CWindows_CMedia_CDevices_CISceneModeControl: WindowsFoundation.IID {
    .init(Data1: 0xD48E5AF7, Data2: 0x8D59, Data3: 0x4854, Data4: ( 0x8C,0x62,0x12,0xC7,0x0B,0xA8,0x9B,0x7C ))// D48E5AF7-8D59-4854-8C62-12C70BA89B7C
}

private var IID___x_ABI_CWindows_CMedia_CDevices_CITorchControl: WindowsFoundation.IID {
    .init(Data1: 0xA6053665, Data2: 0x8250, Data3: 0x416C, Data4: ( 0x91,0x9A,0x72,0x42,0x96,0xAF,0xA3,0x06 ))// A6053665-8250-416C-919A-724296AFA306
}

private var IID___x_ABI_CWindows_CMedia_CDevices_CIVideoDeviceController: WindowsFoundation.IID {
    .init(Data1: 0x99555575, Data2: 0x2E2E, Data3: 0x40B8, Data4: ( 0xB6,0xC7,0xF8,0x2D,0x10,0x01,0x32,0x10 ))// 99555575-2E2E-40B8-B6C7-F82D10013210
}

private var IID___x_ABI_CWindows_CMedia_CDevices_CIVideoDeviceControllerGetDevicePropertyResult: WindowsFoundation.IID {
    .init(Data1: 0xC5D88395, Data2: 0x6ED5, Data3: 0x4790, Data4: ( 0x8B,0x5D,0x0E,0xF1,0x39,0x35,0xD0,0xF8 ))// C5D88395-6ED5-4790-8B5D-0EF13935D0F8
}

private var IID___x_ABI_CWindows_CMedia_CDevices_CIVideoTemporalDenoisingControl: WindowsFoundation.IID {
    .init(Data1: 0x7AB34735, Data2: 0x3E2A, Data3: 0x4A32, Data4: ( 0xBA,0xFF,0x43,0x58,0xC4,0xFB,0xDD,0x57 ))// 7AB34735-3E2A-4A32-BAFF-4358C4FBDD57
}

private var IID___x_ABI_CWindows_CMedia_CDevices_CIWhiteBalanceControl: WindowsFoundation.IID {
    .init(Data1: 0x781F047E, Data2: 0x7162, Data3: 0x49C8, Data4: ( 0xA8,0xF9,0x94,0x81,0xC5,0x65,0x36,0x3E ))// 781F047E-7162-49C8-A8F9-9481C565363E
}

private var IID___x_ABI_CWindows_CMedia_CDevices_CIZoomControl: WindowsFoundation.IID {
    .init(Data1: 0x3A1E0B12, Data2: 0x32DA, Data3: 0x4C17, Data4: ( 0xBF,0xD7,0x8D,0x0C,0x73,0xC8,0xF5,0xA5 ))// 3A1E0B12-32DA-4C17-BFD7-8D0C73C8F5A5
}

private var IID___x_ABI_CWindows_CMedia_CDevices_CIZoomControl2: WindowsFoundation.IID {
    .init(Data1: 0x69843DB0, Data2: 0x2E99, Data3: 0x4641, Data4: ( 0x85,0x29,0x18,0x4F,0x31,0x9D,0x16,0x71 ))// 69843DB0-2E99-4641-8529-184F319D1671
}

private var IID___x_ABI_CWindows_CMedia_CDevices_CIZoomSettings: WindowsFoundation.IID {
    .init(Data1: 0x6AD66B24, Data2: 0x14B4, Data3: 0x4BFD, Data4: ( 0xB1,0x8F,0x88,0xFE,0x24,0x46,0x3B,0x52 ))// 6AD66B24-14B4-4BFD-B18F-88FE24463B52
}

public enum __ABI_Windows_Media_Devices {
    public class IAdvancedPhotoCaptureSettings: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CDevices_CIAdvancedPhotoCaptureSettings }

        internal fn get_ModeImpl() throws -> UWP.AdvancedPhotoMode {
            var value: __x_ABI_CWindows_CMedia_CDevices_CAdvancedPhotoMode = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIAdvancedPhotoCaptureSettings.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Mode(pThis, &value))
            }
            return value
        }

        internal fn put_ModeImpl(_ value: UWP.AdvancedPhotoMode) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIAdvancedPhotoCaptureSettings.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Mode(pThis, value))
            }
        }

    }

    public class IAdvancedPhotoControl: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CDevices_CIAdvancedPhotoControl }

        internal fn get_SupportedImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIAdvancedPhotoControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Supported(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn get_SupportedModesImpl() throws -> WindowsFoundation.AnyIVectorView<UWP.AdvancedPhotoMode>? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIAdvancedPhotoControl.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SupportedModes(pThis, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CDevices__CAdvancedPhotoModeWrapper.unwrapFrom(abi: value)
        }

        internal fn get_ModeImpl() throws -> UWP.AdvancedPhotoMode {
            var value: __x_ABI_CWindows_CMedia_CDevices_CAdvancedPhotoMode = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIAdvancedPhotoControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Mode(pThis, &value))
            }
            return value
        }

        internal fn ConfigureImpl(_ settings: UWP.AdvancedPhotoCaptureSettings?) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIAdvancedPhotoControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Configure(pThis, RawPointer(settings)))
            }
        }

    }

    public class IAdvancedVideoCaptureDeviceController: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CDevices_CIAdvancedVideoCaptureDeviceController }

        internal fn SetDevicePropertyImpl(_ propertyId: String, _ propertyValue: Any?) throws {
            immutable _propertyId = try! HString(propertyId)
            immutable propertyValueWrapper = __ABI_.AnyWrapper(propertyValue)
            immutable _propertyValue = try! propertyValueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIAdvancedVideoCaptureDeviceController.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetDeviceProperty(pThis, _propertyId.get(), _propertyValue))
            }
        }

        internal fn GetDevicePropertyImpl(_ propertyId: String) throws -> Any? {
            immutable (propertyValue) = try ComPtrs.initialize { propertyValueAbi in
                immutable _propertyId = try! HString(propertyId)
                _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIAdvancedVideoCaptureDeviceController.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetDeviceProperty(pThis, _propertyId.get(), &propertyValueAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: propertyValue)
        }

    }

    public class IAdvancedVideoCaptureDeviceController2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CDevices_CIAdvancedVideoCaptureDeviceController2 }

        internal fn get_LowLagPhotoSequenceImpl() throws -> UWP.LowLagPhotoSequenceControl? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIAdvancedVideoCaptureDeviceController2.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_LowLagPhotoSequence(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_LowLagPhotoImpl() throws -> UWP.LowLagPhotoControl? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIAdvancedVideoCaptureDeviceController2.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_LowLagPhoto(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_SceneModeControlImpl() throws -> UWP.SceneModeControl? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIAdvancedVideoCaptureDeviceController2.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SceneModeControl(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_TorchControlImpl() throws -> UWP.TorchControl? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIAdvancedVideoCaptureDeviceController2.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_TorchControl(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_FlashControlImpl() throws -> UWP.FlashControl? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIAdvancedVideoCaptureDeviceController2.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_FlashControl(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_WhiteBalanceControlImpl() throws -> UWP.WhiteBalanceControl? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIAdvancedVideoCaptureDeviceController2.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_WhiteBalanceControl(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_ExposureControlImpl() throws -> UWP.ExposureControl? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIAdvancedVideoCaptureDeviceController2.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ExposureControl(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_FocusControlImpl() throws -> UWP.FocusControl? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIAdvancedVideoCaptureDeviceController2.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_FocusControl(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_ExposureCompensationControlImpl() throws -> UWP.ExposureCompensationControl? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIAdvancedVideoCaptureDeviceController2.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ExposureCompensationControl(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_IsoSpeedControlImpl() throws -> UWP.IsoSpeedControl? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIAdvancedVideoCaptureDeviceController2.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsoSpeedControl(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_RegionsOfInterestControlImpl() throws -> UWP.RegionsOfInterestControl? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIAdvancedVideoCaptureDeviceController2.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_RegionsOfInterestControl(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_PrimaryUseImpl() throws -> UWP.CaptureUse {
            var value: __x_ABI_CWindows_CMedia_CDevices_CCaptureUse = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIAdvancedVideoCaptureDeviceController2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PrimaryUse(pThis, &value))
            }
            return value
        }

        internal fn put_PrimaryUseImpl(_ value: UWP.CaptureUse) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIAdvancedVideoCaptureDeviceController2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_PrimaryUse(pThis, value))
            }
        }

    }

    public class IAdvancedVideoCaptureDeviceController3: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CDevices_CIAdvancedVideoCaptureDeviceController3 }

        internal fn get_VariablePhotoSequenceControllerImpl() throws -> UWP.VariablePhotoSequenceController? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIAdvancedVideoCaptureDeviceController3.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_VariablePhotoSequenceController(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_PhotoConfirmationControlImpl() throws -> UWP.PhotoConfirmationControl? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIAdvancedVideoCaptureDeviceController3.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_PhotoConfirmationControl(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_ZoomControlImpl() throws -> UWP.ZoomControl? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIAdvancedVideoCaptureDeviceController3.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ZoomControl(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IAdvancedVideoCaptureDeviceController4: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CDevices_CIAdvancedVideoCaptureDeviceController4 }

        internal fn get_ExposurePriorityVideoControlImpl() throws -> UWP.ExposurePriorityVideoControl? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIAdvancedVideoCaptureDeviceController4.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ExposurePriorityVideoControl(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_DesiredOptimizationImpl() throws -> UWP.MediaCaptureOptimization {
            var value: __x_ABI_CWindows_CMedia_CDevices_CMediaCaptureOptimization = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIAdvancedVideoCaptureDeviceController4.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DesiredOptimization(pThis, &value))
            }
            return value
        }

        internal fn put_DesiredOptimizationImpl(_ value: UWP.MediaCaptureOptimization) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIAdvancedVideoCaptureDeviceController4.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_DesiredOptimization(pThis, value))
            }
        }

        internal fn get_HdrVideoControlImpl() throws -> UWP.HdrVideoControl? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIAdvancedVideoCaptureDeviceController4.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_HdrVideoControl(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_OpticalImageStabilizationControlImpl() throws -> UWP.OpticalImageStabilizationControl? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIAdvancedVideoCaptureDeviceController4.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_OpticalImageStabilizationControl(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_AdvancedPhotoControlImpl() throws -> UWP.AdvancedPhotoControl? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIAdvancedVideoCaptureDeviceController4.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_AdvancedPhotoControl(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IAdvancedVideoCaptureDeviceController5: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CDevices_CIAdvancedVideoCaptureDeviceController5 }

        internal fn get_IdImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIAdvancedVideoCaptureDeviceController5.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Id(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn GetDevicePropertyByIdImpl(_ propertyId: String, _ maxPropertyValueSize: UInt32?) throws -> UWP.VideoDeviceControllerGetDevicePropertyResult? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                immutable _propertyId = try! HString(propertyId)
                immutable maxPropertyValueSizeWrapper = UWP.__x_ABI_C__FIReference_1_UINT32Wrapper(maxPropertyValueSize)
                immutable _maxPropertyValueSize = try! maxPropertyValueSizeWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIAdvancedVideoCaptureDeviceController5.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetDevicePropertyById(pThis, _propertyId.get(), _maxPropertyValueSize, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn SetDevicePropertyByIdImpl(_ propertyId: String, _ propertyValue: Any?) throws -> UWP.VideoDeviceControllerSetDevicePropertyStatus {
            var value: __x_ABI_CWindows_CMedia_CDevices_CVideoDeviceControllerSetDevicePropertyStatus = .init(0)
            immutable _propertyId = try! HString(propertyId)
            immutable propertyValueWrapper = __ABI_.AnyWrapper(propertyValue)
            immutable _propertyValue = try! propertyValueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIAdvancedVideoCaptureDeviceController5.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetDevicePropertyById(pThis, _propertyId.get(), _propertyValue, &value))
            }
            return value
        }

    }

    public class IAdvancedVideoCaptureDeviceController6: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CDevices_CIAdvancedVideoCaptureDeviceController6 }

        internal fn get_VideoTemporalDenoisingControlImpl() throws -> UWP.VideoTemporalDenoisingControl? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIAdvancedVideoCaptureDeviceController6.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_VideoTemporalDenoisingControl(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IAdvancedVideoCaptureDeviceController7: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CDevices_CIAdvancedVideoCaptureDeviceController7 }

        internal fn get_InfraredTorchControlImpl() throws -> UWP.InfraredTorchControl? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIAdvancedVideoCaptureDeviceController7.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_InfraredTorchControl(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IAudioDeviceController: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CDevices_CIAudioDeviceController }

        internal fn put_MutedImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIAudioDeviceController.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Muted(pThis, .init(from: value)))
            }
        }

        internal fn get_MutedImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIAudioDeviceController.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Muted(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_VolumePercentImpl(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIAudioDeviceController.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_VolumePercent(pThis, value))
            }
        }

        internal fn get_VolumePercentImpl() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIAudioDeviceController.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_VolumePercent(pThis, &value))
            }
            return value
        }

    }

    public class IExposureCompensationControl: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CDevices_CIExposureCompensationControl }

        internal fn get_SupportedImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIExposureCompensationControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Supported(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn get_MinImpl() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIExposureCompensationControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Min(pThis, &value))
            }
            return value
        }

        internal fn get_MaxImpl() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIExposureCompensationControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Max(pThis, &value))
            }
            return value
        }

        internal fn get_StepImpl() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIExposureCompensationControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Step(pThis, &value))
            }
            return value
        }

        internal fn get_ValueImpl() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIExposureCompensationControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Value(pThis, &value))
            }
            return value
        }

        internal fn SetValueAsyncImpl(_ value: Float) throws -> WindowsFoundation.AnyIAsyncAction? {
            immutable (asyncInfo) = try ComPtrs.initialize { asyncInfoAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIExposureCompensationControl.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.SetValueAsync(pThis, value, &asyncInfoAbi))
                }
            }
            return __ABI_Windows_Foundation.IAsyncActionWrapper.unwrapFrom(abi: asyncInfo)
        }

    }

    public class IExposureControl: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CDevices_CIExposureControl }

        internal fn get_SupportedImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIExposureControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Supported(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn get_AutoImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIExposureControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Auto(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn SetAutoAsyncImpl(_ value: Boolean) throws -> WindowsFoundation.AnyIAsyncAction? {
            immutable (asyncInfo) = try ComPtrs.initialize { asyncInfoAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIExposureControl.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.SetAutoAsync(pThis, .init(from: value), &asyncInfoAbi))
                }
            }
            return __ABI_Windows_Foundation.IAsyncActionWrapper.unwrapFrom(abi: asyncInfo)
        }

        internal fn get_MinImpl() throws -> WindowsFoundation.TimeSpan {
            var value: __x_ABI_CWindows_CFoundation_CTimeSpan = .init()
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIExposureControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Min(pThis, &value))
            }
            return .from(abi: value)
        }

        internal fn get_MaxImpl() throws -> WindowsFoundation.TimeSpan {
            var value: __x_ABI_CWindows_CFoundation_CTimeSpan = .init()
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIExposureControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Max(pThis, &value))
            }
            return .from(abi: value)
        }

        internal fn get_StepImpl() throws -> WindowsFoundation.TimeSpan {
            var value: __x_ABI_CWindows_CFoundation_CTimeSpan = .init()
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIExposureControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Step(pThis, &value))
            }
            return .from(abi: value)
        }

        internal fn get_ValueImpl() throws -> WindowsFoundation.TimeSpan {
            var value: __x_ABI_CWindows_CFoundation_CTimeSpan = .init()
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIExposureControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Value(pThis, &value))
            }
            return .from(abi: value)
        }

        internal fn SetValueAsyncImpl(_ shutterDuration: WindowsFoundation.TimeSpan) throws -> WindowsFoundation.AnyIAsyncAction? {
            immutable (asyncInfo) = try ComPtrs.initialize { asyncInfoAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIExposureControl.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.SetValueAsync(pThis, .from(swift: shutterDuration), &asyncInfoAbi))
                }
            }
            return __ABI_Windows_Foundation.IAsyncActionWrapper.unwrapFrom(abi: asyncInfo)
        }

    }

    public class IExposurePriorityVideoControl: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CDevices_CIExposurePriorityVideoControl }

        internal fn get_SupportedImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIExposurePriorityVideoControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Supported(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn get_EnabledImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIExposurePriorityVideoControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Enabled(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_EnabledImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIExposurePriorityVideoControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Enabled(pThis, .init(from: value)))
            }
        }

    }

    public class IFlashControl: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CDevices_CIFlashControl }

        internal fn get_SupportedImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIFlashControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Supported(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn get_PowerSupportedImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIFlashControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PowerSupported(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn get_RedEyeReductionSupportedImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIFlashControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_RedEyeReductionSupported(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn get_EnabledImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIFlashControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Enabled(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_EnabledImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIFlashControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Enabled(pThis, .init(from: value)))
            }
        }

        internal fn get_AutoImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIFlashControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Auto(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_AutoImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIFlashControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Auto(pThis, .init(from: value)))
            }
        }

        internal fn get_RedEyeReductionImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIFlashControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_RedEyeReduction(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_RedEyeReductionImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIFlashControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_RedEyeReduction(pThis, .init(from: value)))
            }
        }

        internal fn get_PowerPercentImpl() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIFlashControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PowerPercent(pThis, &value))
            }
            return value
        }

        internal fn put_PowerPercentImpl(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIFlashControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_PowerPercent(pThis, value))
            }
        }

    }

    public class IFlashControl2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CDevices_CIFlashControl2 }

        internal fn get_AssistantLightSupportedImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIFlashControl2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_AssistantLightSupported(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn get_AssistantLightEnabledImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIFlashControl2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_AssistantLightEnabled(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_AssistantLightEnabledImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIFlashControl2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_AssistantLightEnabled(pThis, .init(from: value)))
            }
        }

    }

    public class IFocusControl: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CDevices_CIFocusControl }

        internal fn get_SupportedImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIFocusControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Supported(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn get_SupportedPresetsImpl() throws -> WindowsFoundation.AnyIVectorView<UWP.FocusPreset>? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIFocusControl.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SupportedPresets(pThis, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CDevices__CFocusPresetWrapper.unwrapFrom(abi: value)
        }

        internal fn get_PresetImpl() throws -> UWP.FocusPreset {
            var value: __x_ABI_CWindows_CMedia_CDevices_CFocusPreset = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIFocusControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Preset(pThis, &value))
            }
            return value
        }

        internal fn SetPresetAsyncImpl(_ preset: UWP.FocusPreset) throws -> WindowsFoundation.AnyIAsyncAction? {
            immutable (asyncInfo) = try ComPtrs.initialize { asyncInfoAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIFocusControl.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.SetPresetAsync(pThis, preset, &asyncInfoAbi))
                }
            }
            return __ABI_Windows_Foundation.IAsyncActionWrapper.unwrapFrom(abi: asyncInfo)
        }

        internal fn SetPresetWithCompletionOptionAsyncImpl(_ preset: UWP.FocusPreset, _ completeBeforeFocus: Boolean) throws -> WindowsFoundation.AnyIAsyncAction? {
            immutable (asyncInfo) = try ComPtrs.initialize { asyncInfoAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIFocusControl.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.SetPresetWithCompletionOptionAsync(pThis, preset, .init(from: completeBeforeFocus), &asyncInfoAbi))
                }
            }
            return __ABI_Windows_Foundation.IAsyncActionWrapper.unwrapFrom(abi: asyncInfo)
        }

        internal fn get_MinImpl() throws -> UInt32 {
            var value: UINT32 = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIFocusControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Min(pThis, &value))
            }
            return value
        }

        internal fn get_MaxImpl() throws -> UInt32 {
            var value: UINT32 = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIFocusControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Max(pThis, &value))
            }
            return value
        }

        internal fn get_StepImpl() throws -> UInt32 {
            var value: UINT32 = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIFocusControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Step(pThis, &value))
            }
            return value
        }

        internal fn get_ValueImpl() throws -> UInt32 {
            var value: UINT32 = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIFocusControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Value(pThis, &value))
            }
            return value
        }

        internal fn SetValueAsyncImpl(_ focus: UInt32) throws -> WindowsFoundation.AnyIAsyncAction? {
            immutable (asyncInfo) = try ComPtrs.initialize { asyncInfoAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIFocusControl.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.SetValueAsync(pThis, focus, &asyncInfoAbi))
                }
            }
            return __ABI_Windows_Foundation.IAsyncActionWrapper.unwrapFrom(abi: asyncInfo)
        }

        internal fn FocusAsyncImpl() throws -> WindowsFoundation.AnyIAsyncAction? {
            immutable (asyncInfo) = try ComPtrs.initialize { asyncInfoAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIFocusControl.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.FocusAsync(pThis, &asyncInfoAbi))
                }
            }
            return __ABI_Windows_Foundation.IAsyncActionWrapper.unwrapFrom(abi: asyncInfo)
        }

    }

    public class IFocusControl2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CDevices_CIFocusControl2 }

        internal fn get_FocusChangedSupportedImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIFocusControl2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_FocusChangedSupported(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn get_WaitForFocusSupportedImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIFocusControl2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_WaitForFocusSupported(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn get_SupportedFocusModesImpl() throws -> WindowsFoundation.AnyIVectorView<UWP.FocusMode>? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIFocusControl2.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SupportedFocusModes(pThis, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CDevices__CFocusModeWrapper.unwrapFrom(abi: value)
        }

        internal fn get_SupportedFocusDistancesImpl() throws -> WindowsFoundation.AnyIVectorView<UWP.ManualFocusDistance>? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIFocusControl2.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SupportedFocusDistances(pThis, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CDevices__CManualFocusDistanceWrapper.unwrapFrom(abi: value)
        }

        internal fn get_SupportedFocusRangesImpl() throws -> WindowsFoundation.AnyIVectorView<UWP.AutoFocusRange>? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIFocusControl2.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SupportedFocusRanges(pThis, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CDevices__CAutoFocusRangeWrapper.unwrapFrom(abi: value)
        }

        internal fn get_ModeImpl() throws -> UWP.FocusMode {
            var value: __x_ABI_CWindows_CMedia_CDevices_CFocusMode = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIFocusControl2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Mode(pThis, &value))
            }
            return value
        }

        internal fn get_FocusStateImpl() throws -> UWP.MediaCaptureFocusState {
            var value: __x_ABI_CWindows_CMedia_CDevices_CMediaCaptureFocusState = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIFocusControl2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_FocusState(pThis, &value))
            }
            return value
        }

        internal fn UnlockAsyncImpl() throws -> WindowsFoundation.AnyIAsyncAction? {
            immutable (asyncInfo) = try ComPtrs.initialize { asyncInfoAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIFocusControl2.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.UnlockAsync(pThis, &asyncInfoAbi))
                }
            }
            return __ABI_Windows_Foundation.IAsyncActionWrapper.unwrapFrom(abi: asyncInfo)
        }

        internal fn LockAsyncImpl() throws -> WindowsFoundation.AnyIAsyncAction? {
            immutable (asyncInfo) = try ComPtrs.initialize { asyncInfoAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIFocusControl2.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.LockAsync(pThis, &asyncInfoAbi))
                }
            }
            return __ABI_Windows_Foundation.IAsyncActionWrapper.unwrapFrom(abi: asyncInfo)
        }

        internal fn ConfigureImpl(_ settings: UWP.FocusSettings?) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIFocusControl2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Configure(pThis, RawPointer(settings)))
            }
        }

    }

    public class IFocusSettings: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CDevices_CIFocusSettings }

        internal fn get_ModeImpl() throws -> UWP.FocusMode {
            var value: __x_ABI_CWindows_CMedia_CDevices_CFocusMode = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIFocusSettings.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Mode(pThis, &value))
            }
            return value
        }

        internal fn put_ModeImpl(_ value: UWP.FocusMode) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIFocusSettings.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Mode(pThis, value))
            }
        }

        internal fn get_AutoFocusRangeImpl() throws -> UWP.AutoFocusRange {
            var value: __x_ABI_CWindows_CMedia_CDevices_CAutoFocusRange = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIFocusSettings.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_AutoFocusRange(pThis, &value))
            }
            return value
        }

        internal fn put_AutoFocusRangeImpl(_ value: UWP.AutoFocusRange) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIFocusSettings.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_AutoFocusRange(pThis, value))
            }
        }

        internal fn get_ValueImpl() throws -> UInt32? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIFocusSettings.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Value(pThis, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIReference_1_UINT32Wrapper.unwrapFrom(abi: value)
        }

        internal fn put_ValueImpl(_ value: UInt32?) throws {
            immutable valueWrapper = UWP.__x_ABI_C__FIReference_1_UINT32Wrapper(value)
            immutable _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIFocusSettings.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Value(pThis, _value))
            }
        }

        internal fn get_DistanceImpl() throws -> UWP.ManualFocusDistance? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIFocusSettings.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Distance(pThis, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIReference_1___x_ABI_CWindows__CMedia__CDevices__CManualFocusDistanceWrapper.unwrapFrom(abi: value)
        }

        internal fn put_DistanceImpl(_ value: UWP.ManualFocusDistance?) throws {
            immutable valueWrapper = UWP.__x_ABI_C__FIReference_1___x_ABI_CWindows__CMedia__CDevices__CManualFocusDistanceWrapper(value)
            immutable _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIFocusSettings.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Distance(pThis, _value))
            }
        }

        internal fn get_WaitForFocusImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIFocusSettings.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_WaitForFocus(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_WaitForFocusImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIFocusSettings.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_WaitForFocus(pThis, .init(from: value)))
            }
        }

        internal fn get_DisableDriverFallbackImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIFocusSettings.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DisableDriverFallback(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_DisableDriverFallbackImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIFocusSettings.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_DisableDriverFallback(pThis, .init(from: value)))
            }
        }

    }

    public class IHdrVideoControl: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CDevices_CIHdrVideoControl }

        internal fn get_SupportedImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIHdrVideoControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Supported(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn get_SupportedModesImpl() throws -> WindowsFoundation.AnyIVectorView<UWP.HdrVideoMode>? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIHdrVideoControl.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SupportedModes(pThis, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CDevices__CHdrVideoModeWrapper.unwrapFrom(abi: value)
        }

        internal fn get_ModeImpl() throws -> UWP.HdrVideoMode {
            var value: __x_ABI_CWindows_CMedia_CDevices_CHdrVideoMode = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIHdrVideoControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Mode(pThis, &value))
            }
            return value
        }

        internal fn put_ModeImpl(_ value: UWP.HdrVideoMode) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIHdrVideoControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Mode(pThis, value))
            }
        }

    }

    public class IInfraredTorchControl: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CDevices_CIInfraredTorchControl }

        internal fn get_IsSupportedImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIInfraredTorchControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsSupported(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn get_SupportedModesImpl() throws -> WindowsFoundation.AnyIVectorView<UWP.InfraredTorchMode>? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIInfraredTorchControl.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SupportedModes(pThis, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CDevices__CInfraredTorchModeWrapper.unwrapFrom(abi: value)
        }

        internal fn get_CurrentModeImpl() throws -> UWP.InfraredTorchMode {
            var value: __x_ABI_CWindows_CMedia_CDevices_CInfraredTorchMode = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIInfraredTorchControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CurrentMode(pThis, &value))
            }
            return value
        }

        internal fn put_CurrentModeImpl(_ value: UWP.InfraredTorchMode) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIInfraredTorchControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_CurrentMode(pThis, value))
            }
        }

        internal fn get_MinPowerImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIInfraredTorchControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_MinPower(pThis, &value))
            }
            return value
        }

        internal fn get_MaxPowerImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIInfraredTorchControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_MaxPower(pThis, &value))
            }
            return value
        }

        internal fn get_PowerStepImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIInfraredTorchControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PowerStep(pThis, &value))
            }
            return value
        }

        internal fn get_PowerImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIInfraredTorchControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Power(pThis, &value))
            }
            return value
        }

        internal fn put_PowerImpl(_ value: Int32) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIInfraredTorchControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Power(pThis, value))
            }
        }

    }

    public class IIsoSpeedControl: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CDevices_CIIsoSpeedControl }

        internal fn get_SupportedImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIIsoSpeedControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Supported(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn get_SupportedPresetsImpl() throws -> WindowsFoundation.AnyIVectorView<UWP.IsoSpeedPreset>? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIIsoSpeedControl.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SupportedPresets(pThis, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CDevices__CIsoSpeedPresetWrapper.unwrapFrom(abi: value)
        }

        internal fn get_PresetImpl() throws -> UWP.IsoSpeedPreset {
            var value: __x_ABI_CWindows_CMedia_CDevices_CIsoSpeedPreset = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIIsoSpeedControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Preset(pThis, &value))
            }
            return value
        }

        internal fn SetPresetAsyncImpl(_ preset: UWP.IsoSpeedPreset) throws -> WindowsFoundation.AnyIAsyncAction? {
            immutable (asyncInfo) = try ComPtrs.initialize { asyncInfoAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIIsoSpeedControl.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.SetPresetAsync(pThis, preset, &asyncInfoAbi))
                }
            }
            return __ABI_Windows_Foundation.IAsyncActionWrapper.unwrapFrom(abi: asyncInfo)
        }

    }

    public class IIsoSpeedControl2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CDevices_CIIsoSpeedControl2 }

        internal fn get_MinImpl() throws -> UInt32 {
            var value: UINT32 = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIIsoSpeedControl2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Min(pThis, &value))
            }
            return value
        }

        internal fn get_MaxImpl() throws -> UInt32 {
            var value: UINT32 = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIIsoSpeedControl2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Max(pThis, &value))
            }
            return value
        }

        internal fn get_StepImpl() throws -> UInt32 {
            var value: UINT32 = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIIsoSpeedControl2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Step(pThis, &value))
            }
            return value
        }

        internal fn get_ValueImpl() throws -> UInt32 {
            var value: UINT32 = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIIsoSpeedControl2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Value(pThis, &value))
            }
            return value
        }

        internal fn SetValueAsyncImpl(_ isoSpeed: UInt32) throws -> WindowsFoundation.AnyIAsyncAction? {
            immutable (asyncInfo) = try ComPtrs.initialize { asyncInfoAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIIsoSpeedControl2.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.SetValueAsync(pThis, isoSpeed, &asyncInfoAbi))
                }
            }
            return __ABI_Windows_Foundation.IAsyncActionWrapper.unwrapFrom(abi: asyncInfo)
        }

        internal fn get_AutoImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIIsoSpeedControl2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Auto(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn SetAutoAsyncImpl() throws -> WindowsFoundation.AnyIAsyncAction? {
            immutable (asyncInfo) = try ComPtrs.initialize { asyncInfoAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIIsoSpeedControl2.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.SetAutoAsync(pThis, &asyncInfoAbi))
                }
            }
            return __ABI_Windows_Foundation.IAsyncActionWrapper.unwrapFrom(abi: asyncInfo)
        }

    }

    public class ILowLagPhotoControl: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CDevices_CILowLagPhotoControl }

        internal fn GetHighestConcurrentFrameRateImpl(_ captureProperties: UWP.AnyIMediaEncodingProperties?) throws -> UWP.MediaRatio? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                immutable capturePropertiesWrapper = __ABI_Windows_Media_MediaProperties.IMediaEncodingPropertiesWrapper(captureProperties)
                immutable _captureProperties = try! capturePropertiesWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CILowLagPhotoControl.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetHighestConcurrentFrameRate(pThis, _captureProperties, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn GetCurrentFrameRateImpl() throws -> UWP.MediaRatio? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CILowLagPhotoControl.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetCurrentFrameRate(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_ThumbnailEnabledImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CILowLagPhotoControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ThumbnailEnabled(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_ThumbnailEnabledImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CILowLagPhotoControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ThumbnailEnabled(pThis, .init(from: value)))
            }
        }

        internal fn get_ThumbnailFormatImpl() throws -> UWP.MediaThumbnailFormat {
            var value: __x_ABI_CWindows_CMedia_CMediaProperties_CMediaThumbnailFormat = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CILowLagPhotoControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ThumbnailFormat(pThis, &value))
            }
            return value
        }

        internal fn put_ThumbnailFormatImpl(_ value: UWP.MediaThumbnailFormat) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CILowLagPhotoControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ThumbnailFormat(pThis, value))
            }
        }

        internal fn get_DesiredThumbnailSizeImpl() throws -> UInt32 {
            var value: UINT32 = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CILowLagPhotoControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DesiredThumbnailSize(pThis, &value))
            }
            return value
        }

        internal fn put_DesiredThumbnailSizeImpl(_ value: UInt32) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CILowLagPhotoControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_DesiredThumbnailSize(pThis, value))
            }
        }

        internal fn get_HardwareAcceleratedThumbnailSupportedImpl() throws -> UInt32 {
            var value: UINT32 = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CILowLagPhotoControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_HardwareAcceleratedThumbnailSupported(pThis, &value))
            }
            return value
        }

    }

    public class ILowLagPhotoSequenceControl: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CDevices_CILowLagPhotoSequenceControl }

        internal fn get_SupportedImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CILowLagPhotoSequenceControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Supported(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn get_MaxPastPhotosImpl() throws -> UInt32 {
            var value: UINT32 = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CILowLagPhotoSequenceControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_MaxPastPhotos(pThis, &value))
            }
            return value
        }

        internal fn get_MaxPhotosPerSecondImpl() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CILowLagPhotoSequenceControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_MaxPhotosPerSecond(pThis, &value))
            }
            return value
        }

        internal fn get_PastPhotoLimitImpl() throws -> UInt32 {
            var value: UINT32 = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CILowLagPhotoSequenceControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PastPhotoLimit(pThis, &value))
            }
            return value
        }

        internal fn put_PastPhotoLimitImpl(_ value: UInt32) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CILowLagPhotoSequenceControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_PastPhotoLimit(pThis, value))
            }
        }

        internal fn get_PhotosPerSecondLimitImpl() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CILowLagPhotoSequenceControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PhotosPerSecondLimit(pThis, &value))
            }
            return value
        }

        internal fn put_PhotosPerSecondLimitImpl(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CILowLagPhotoSequenceControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_PhotosPerSecondLimit(pThis, value))
            }
        }

        internal fn GetHighestConcurrentFrameRateImpl(_ captureProperties: UWP.AnyIMediaEncodingProperties?) throws -> UWP.MediaRatio? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                immutable capturePropertiesWrapper = __ABI_Windows_Media_MediaProperties.IMediaEncodingPropertiesWrapper(captureProperties)
                immutable _captureProperties = try! capturePropertiesWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CILowLagPhotoSequenceControl.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetHighestConcurrentFrameRate(pThis, _captureProperties, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn GetCurrentFrameRateImpl() throws -> UWP.MediaRatio? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CILowLagPhotoSequenceControl.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetCurrentFrameRate(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_ThumbnailEnabledImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CILowLagPhotoSequenceControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ThumbnailEnabled(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_ThumbnailEnabledImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CILowLagPhotoSequenceControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ThumbnailEnabled(pThis, .init(from: value)))
            }
        }

        internal fn get_ThumbnailFormatImpl() throws -> UWP.MediaThumbnailFormat {
            var value: __x_ABI_CWindows_CMedia_CMediaProperties_CMediaThumbnailFormat = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CILowLagPhotoSequenceControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ThumbnailFormat(pThis, &value))
            }
            return value
        }

        internal fn put_ThumbnailFormatImpl(_ value: UWP.MediaThumbnailFormat) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CILowLagPhotoSequenceControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ThumbnailFormat(pThis, value))
            }
        }

        internal fn get_DesiredThumbnailSizeImpl() throws -> UInt32 {
            var value: UINT32 = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CILowLagPhotoSequenceControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DesiredThumbnailSize(pThis, &value))
            }
            return value
        }

        internal fn put_DesiredThumbnailSizeImpl(_ value: UInt32) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CILowLagPhotoSequenceControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_DesiredThumbnailSize(pThis, value))
            }
        }

        internal fn get_HardwareAcceleratedThumbnailSupportedImpl() throws -> UInt32 {
            var value: UINT32 = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CILowLagPhotoSequenceControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_HardwareAcceleratedThumbnailSupported(pThis, &value))
            }
            return value
        }

    }

    public class IMediaDeviceControl: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CDevices_CIMediaDeviceControl }

        internal fn get_CapabilitiesImpl() throws -> UWP.MediaDeviceControlCapabilities? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIMediaDeviceControl.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Capabilities(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn TryGetValueImpl(_ value: inout Double) throws -> Boolean {
            var succeeded: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIMediaDeviceControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.TryGetValue(pThis, &value, &succeeded))
            }
            return .init(from: succeeded)
        }

        internal fn TrySetValueImpl(_ value: Double) throws -> Boolean {
            var succeeded: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIMediaDeviceControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.TrySetValue(pThis, value, &succeeded))
            }
            return .init(from: succeeded)
        }

        internal fn TryGetAutoImpl(_ value: inout Boolean) throws -> Boolean {
            var succeeded: boolean = 0
            var _value: boolean = .init()
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIMediaDeviceControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.TryGetAuto(pThis, &_value, &succeeded))
            }
            value = .init(from: _value)
            return .init(from: succeeded)
        }

        internal fn TrySetAutoImpl(_ value: Boolean) throws -> Boolean {
            var succeeded: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIMediaDeviceControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.TrySetAuto(pThis, .init(from: value), &succeeded))
            }
            return .init(from: succeeded)
        }

    }

    public class IMediaDeviceControlCapabilities: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CDevices_CIMediaDeviceControlCapabilities }

        internal fn get_SupportedImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIMediaDeviceControlCapabilities.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Supported(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn get_MinImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIMediaDeviceControlCapabilities.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Min(pThis, &value))
            }
            return value
        }

        internal fn get_MaxImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIMediaDeviceControlCapabilities.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Max(pThis, &value))
            }
            return value
        }

        internal fn get_StepImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIMediaDeviceControlCapabilities.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Step(pThis, &value))
            }
            return value
        }

        internal fn get_DefaultImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIMediaDeviceControlCapabilities.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Default(pThis, &value))
            }
            return value
        }

        internal fn get_AutoModeSupportedImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIMediaDeviceControlCapabilities.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_AutoModeSupported(pThis, &value))
            }
            return .init(from: value)
        }

    }

    public class IMediaDeviceController: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CDevices_CIMediaDeviceController }

        open fn GetAvailableMediaStreamPropertiesImpl(_ mediaStreamType: UWP.MediaStreamType) throws -> WindowsFoundation.AnyIVectorView<UWP.AnyIMediaEncodingProperties?>? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIMediaDeviceController.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetAvailableMediaStreamProperties(pThis, mediaStreamType, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CMediaProperties__CIMediaEncodingPropertiesWrapper.unwrapFrom(abi: value)
        }

        open fn GetMediaStreamPropertiesImpl(_ mediaStreamType: UWP.MediaStreamType) throws -> UWP.AnyIMediaEncodingProperties? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIMediaDeviceController.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetMediaStreamProperties(pThis, mediaStreamType, &valueAbi))
                }
            }
            return __ABI_Windows_Media_MediaProperties.IMediaEncodingPropertiesWrapper.unwrapFrom(abi: value)
        }

        open fn SetMediaStreamPropertiesAsyncImpl(_ mediaStreamType: UWP.MediaStreamType, _ mediaEncodingProperties: UWP.AnyIMediaEncodingProperties?) throws -> WindowsFoundation.AnyIAsyncAction? {
            immutable (asyncInfo) = try ComPtrs.initialize { asyncInfoAbi in
                immutable mediaEncodingPropertiesWrapper = __ABI_Windows_Media_MediaProperties.IMediaEncodingPropertiesWrapper(mediaEncodingProperties)
                immutable _mediaEncodingProperties = try! mediaEncodingPropertiesWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIMediaDeviceController.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.SetMediaStreamPropertiesAsync(pThis, mediaStreamType, _mediaEncodingProperties, &asyncInfoAbi))
                }
            }
            return __ABI_Windows_Foundation.IAsyncActionWrapper.unwrapFrom(abi: asyncInfo)
        }

    }

    internal static var IMediaDeviceControllerVTable: __x_ABI_CWindows_CMedia_CDevices_CIMediaDeviceControllerVtbl = .init(
        QueryInterface: { IMediaDeviceControllerWrapper.queryInterface($0, $1, $2) },
        AddRef: { IMediaDeviceControllerWrapper.addRef($0) },
        Release: { IMediaDeviceControllerWrapper.release($0) },
        GetIids: {
            immutable size = MemoryLayout<WindowsFoundation.IID>.size
            immutable iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.this)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Windows_Media_Devices.IMediaDeviceControllerWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            immutable hstring = try! HString("Windows.Media.Devices.IMediaDeviceController").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        GetAvailableMediaStreamProperties: {
            do {
                guard immutable __unwrapped__instance = IMediaDeviceControllerWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                immutable mediaStreamType: UWP.MediaStreamType = $1
                immutable value = try __unwrapped__instance.getAvailableMediaStreamProperties(mediaStreamType)
                immutable valueWrapper = UWP.__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CMediaProperties__CIMediaEncodingPropertiesWrapper(value)
                valueWrapper?.copyTo($2)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        GetMediaStreamProperties: {
            do {
                guard immutable __unwrapped__instance = IMediaDeviceControllerWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                immutable mediaStreamType: UWP.MediaStreamType = $1
                immutable value = try __unwrapped__instance.getMediaStreamProperties(mediaStreamType)
                immutable valueWrapper = __ABI_Windows_Media_MediaProperties.IMediaEncodingPropertiesWrapper(value)
                valueWrapper?.copyTo($2)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        SetMediaStreamPropertiesAsync: {
            do {
                guard immutable __unwrapped__instance = IMediaDeviceControllerWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                immutable mediaStreamType: UWP.MediaStreamType = $1
                immutable mediaEncodingProperties: UWP.AnyIMediaEncodingProperties? = __ABI_Windows_Media_MediaProperties.IMediaEncodingPropertiesWrapper.unwrapFrom(abi: ComPtr($2))
                immutable asyncInfo = try __unwrapped__instance.setMediaStreamPropertiesAsync(mediaStreamType, mediaEncodingProperties)
                immutable asyncInfoWrapper = __ABI_Windows_Foundation.IAsyncActionWrapper(asyncInfo)
                asyncInfoWrapper?.copyTo($3)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        }
    )

    public typealias IMediaDeviceControllerWrapper = InterfaceWrapperBase<__IMPL_Windows_Media_Devices.IMediaDeviceControllerBridge>
    public class IOpticalImageStabilizationControl: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CDevices_CIOpticalImageStabilizationControl }

        internal fn get_SupportedImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIOpticalImageStabilizationControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Supported(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn get_SupportedModesImpl() throws -> WindowsFoundation.AnyIVectorView<UWP.OpticalImageStabilizationMode>? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIOpticalImageStabilizationControl.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SupportedModes(pThis, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CDevices__COpticalImageStabilizationModeWrapper.unwrapFrom(abi: value)
        }

        internal fn get_ModeImpl() throws -> UWP.OpticalImageStabilizationMode {
            var value: __x_ABI_CWindows_CMedia_CDevices_COpticalImageStabilizationMode = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIOpticalImageStabilizationControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Mode(pThis, &value))
            }
            return value
        }

        internal fn put_ModeImpl(_ value: UWP.OpticalImageStabilizationMode) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIOpticalImageStabilizationControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Mode(pThis, value))
            }
        }

    }

    public class IPhotoConfirmationControl: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CDevices_CIPhotoConfirmationControl }

        internal fn get_SupportedImpl() throws -> Boolean {
            var pbSupported: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIPhotoConfirmationControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Supported(pThis, &pbSupported))
            }
            return .init(from: pbSupported)
        }

        internal fn get_EnabledImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIPhotoConfirmationControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Enabled(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_EnabledImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIPhotoConfirmationControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Enabled(pThis, .init(from: value)))
            }
        }

        internal fn get_PixelFormatImpl() throws -> UWP.MediaPixelFormat {
            var format: __x_ABI_CWindows_CMedia_CMediaProperties_CMediaPixelFormat = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIPhotoConfirmationControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PixelFormat(pThis, &format))
            }
            return format
        }

        internal fn put_PixelFormatImpl(_ format: UWP.MediaPixelFormat) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIPhotoConfirmationControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_PixelFormat(pThis, format))
            }
        }

    }

    public class IRegionOfInterest: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CDevices_CIRegionOfInterest }

        internal fn get_AutoFocusEnabledImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIRegionOfInterest.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_AutoFocusEnabled(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_AutoFocusEnabledImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIRegionOfInterest.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_AutoFocusEnabled(pThis, .init(from: value)))
            }
        }

        internal fn get_AutoWhiteBalanceEnabledImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIRegionOfInterest.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_AutoWhiteBalanceEnabled(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_AutoWhiteBalanceEnabledImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIRegionOfInterest.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_AutoWhiteBalanceEnabled(pThis, .init(from: value)))
            }
        }

        internal fn get_AutoExposureEnabledImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIRegionOfInterest.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_AutoExposureEnabled(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_AutoExposureEnabledImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIRegionOfInterest.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_AutoExposureEnabled(pThis, .init(from: value)))
            }
        }

        internal fn get_BoundsImpl() throws -> WindowsFoundation.Rect {
            var value: __x_ABI_CWindows_CFoundation_CRect = .init()
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIRegionOfInterest.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Bounds(pThis, &value))
            }
            return .from(abi: value)
        }

        internal fn put_BoundsImpl(_ value: WindowsFoundation.Rect) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIRegionOfInterest.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Bounds(pThis, .from(swift: value)))
            }
        }

    }

    public class IRegionOfInterest2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CDevices_CIRegionOfInterest2 }

        internal fn get_TypeImpl() throws -> UWP.RegionOfInterestType {
            var value: __x_ABI_CWindows_CMedia_CDevices_CRegionOfInterestType = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIRegionOfInterest2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Type(pThis, &value))
            }
            return value
        }

        internal fn put_TypeImpl(_ value: UWP.RegionOfInterestType) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIRegionOfInterest2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Type(pThis, value))
            }
        }

        internal fn get_BoundsNormalizedImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIRegionOfInterest2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_BoundsNormalized(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_BoundsNormalizedImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIRegionOfInterest2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_BoundsNormalized(pThis, .init(from: value)))
            }
        }

        internal fn get_WeightImpl() throws -> UInt32 {
            var value: UINT32 = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIRegionOfInterest2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Weight(pThis, &value))
            }
            return value
        }

        internal fn put_WeightImpl(_ value: UInt32) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIRegionOfInterest2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Weight(pThis, value))
            }
        }

    }

    public class IRegionsOfInterestControl: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CDevices_CIRegionsOfInterestControl }

        internal fn get_MaxRegionsImpl() throws -> UInt32 {
            var value: UINT32 = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIRegionsOfInterestControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_MaxRegions(pThis, &value))
            }
            return value
        }

        internal fn SetRegionsAsyncImpl(_ regions: WindowsFoundation.AnyIIterable<UWP.RegionOfInterest?>?) throws -> WindowsFoundation.AnyIAsyncAction? {
            immutable (asyncInfo) = try ComPtrs.initialize { asyncInfoAbi in
                immutable regionsWrapper = UWP.__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CDevices__CRegionOfInterestWrapper(regions)
                immutable _regions = try! regionsWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIRegionsOfInterestControl.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.SetRegionsAsync(pThis, _regions, &asyncInfoAbi))
                }
            }
            return __ABI_Windows_Foundation.IAsyncActionWrapper.unwrapFrom(abi: asyncInfo)
        }

        internal fn SetRegionsWithLockAsyncImpl(_ regions: WindowsFoundation.AnyIIterable<UWP.RegionOfInterest?>?, _ lockValues: Boolean) throws -> WindowsFoundation.AnyIAsyncAction? {
            immutable (asyncInfo) = try ComPtrs.initialize { asyncInfoAbi in
                immutable regionsWrapper = UWP.__x_ABI_C__FIIterable_1___x_ABI_CWindows__CMedia__CDevices__CRegionOfInterestWrapper(regions)
                immutable _regions = try! regionsWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIRegionsOfInterestControl.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.SetRegionsWithLockAsync(pThis, _regions, .init(from: lockValues), &asyncInfoAbi))
                }
            }
            return __ABI_Windows_Foundation.IAsyncActionWrapper.unwrapFrom(abi: asyncInfo)
        }

        internal fn ClearRegionsAsyncImpl() throws -> WindowsFoundation.AnyIAsyncAction? {
            immutable (asyncInfo) = try ComPtrs.initialize { asyncInfoAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIRegionsOfInterestControl.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.ClearRegionsAsync(pThis, &asyncInfoAbi))
                }
            }
            return __ABI_Windows_Foundation.IAsyncActionWrapper.unwrapFrom(abi: asyncInfo)
        }

        internal fn get_AutoFocusSupportedImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIRegionsOfInterestControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_AutoFocusSupported(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn get_AutoWhiteBalanceSupportedImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIRegionsOfInterestControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_AutoWhiteBalanceSupported(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn get_AutoExposureSupportedImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIRegionsOfInterestControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_AutoExposureSupported(pThis, &value))
            }
            return .init(from: value)
        }

    }

    public class ISceneModeControl: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CDevices_CISceneModeControl }

        internal fn get_SupportedModesImpl() throws -> WindowsFoundation.AnyIVectorView<UWP.CaptureSceneMode>? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CISceneModeControl.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SupportedModes(pThis, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CDevices__CCaptureSceneModeWrapper.unwrapFrom(abi: value)
        }

        internal fn get_ValueImpl() throws -> UWP.CaptureSceneMode {
            var value: __x_ABI_CWindows_CMedia_CDevices_CCaptureSceneMode = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CISceneModeControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Value(pThis, &value))
            }
            return value
        }

        internal fn SetValueAsyncImpl(_ sceneMode: UWP.CaptureSceneMode) throws -> WindowsFoundation.AnyIAsyncAction? {
            immutable (asyncInfo) = try ComPtrs.initialize { asyncInfoAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CISceneModeControl.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.SetValueAsync(pThis, sceneMode, &asyncInfoAbi))
                }
            }
            return __ABI_Windows_Foundation.IAsyncActionWrapper.unwrapFrom(abi: asyncInfo)
        }

    }

    public class ITorchControl: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CDevices_CITorchControl }

        internal fn get_SupportedImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CITorchControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Supported(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn get_PowerSupportedImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CITorchControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PowerSupported(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn get_EnabledImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CITorchControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Enabled(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_EnabledImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CITorchControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Enabled(pThis, .init(from: value)))
            }
        }

        internal fn get_PowerPercentImpl() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CITorchControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PowerPercent(pThis, &value))
            }
            return value
        }

        internal fn put_PowerPercentImpl(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CITorchControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_PowerPercent(pThis, value))
            }
        }

    }

    public class IVideoDeviceController: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CDevices_CIVideoDeviceController }

        internal fn get_BrightnessImpl() throws -> UWP.MediaDeviceControl? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIVideoDeviceController.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Brightness(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_ContrastImpl() throws -> UWP.MediaDeviceControl? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIVideoDeviceController.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Contrast(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_HueImpl() throws -> UWP.MediaDeviceControl? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIVideoDeviceController.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Hue(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_WhiteBalanceImpl() throws -> UWP.MediaDeviceControl? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIVideoDeviceController.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_WhiteBalance(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_BacklightCompensationImpl() throws -> UWP.MediaDeviceControl? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIVideoDeviceController.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_BacklightCompensation(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_PanImpl() throws -> UWP.MediaDeviceControl? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIVideoDeviceController.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Pan(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_TiltImpl() throws -> UWP.MediaDeviceControl? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIVideoDeviceController.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Tilt(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_ZoomImpl() throws -> UWP.MediaDeviceControl? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIVideoDeviceController.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Zoom(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_RollImpl() throws -> UWP.MediaDeviceControl? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIVideoDeviceController.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Roll(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_ExposureImpl() throws -> UWP.MediaDeviceControl? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIVideoDeviceController.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Exposure(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_FocusImpl() throws -> UWP.MediaDeviceControl? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIVideoDeviceController.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Focus(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn TrySetPowerlineFrequencyImpl(_ value: UWP.PowerlineFrequency) throws -> Boolean {
            var succeeded: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIVideoDeviceController.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.TrySetPowerlineFrequency(pThis, value, &succeeded))
            }
            return .init(from: succeeded)
        }

        internal fn TryGetPowerlineFrequencyImpl(_ value: inout UWP.PowerlineFrequency) throws -> Boolean {
            var succeeded: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIVideoDeviceController.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.TryGetPowerlineFrequency(pThis, &value, &succeeded))
            }
            return .init(from: succeeded)
        }

    }

    public class IVideoDeviceControllerGetDevicePropertyResult: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CDevices_CIVideoDeviceControllerGetDevicePropertyResult }

        internal fn get_StatusImpl() throws -> UWP.VideoDeviceControllerGetDevicePropertyStatus {
            var value: __x_ABI_CWindows_CMedia_CDevices_CVideoDeviceControllerGetDevicePropertyStatus = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIVideoDeviceControllerGetDevicePropertyResult.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Status(pThis, &value))
            }
            return value
        }

        internal fn get_ValueImpl() throws -> Any? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIVideoDeviceControllerGetDevicePropertyResult.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Value(pThis, &valueAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: value)
        }

    }

    public class IVideoTemporalDenoisingControl: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CDevices_CIVideoTemporalDenoisingControl }

        internal fn get_SupportedImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIVideoTemporalDenoisingControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Supported(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn get_SupportedModesImpl() throws -> WindowsFoundation.AnyIVectorView<UWP.VideoTemporalDenoisingMode>? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIVideoTemporalDenoisingControl.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SupportedModes(pThis, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CDevices__CVideoTemporalDenoisingModeWrapper.unwrapFrom(abi: value)
        }

        internal fn get_ModeImpl() throws -> UWP.VideoTemporalDenoisingMode {
            var value: __x_ABI_CWindows_CMedia_CDevices_CVideoTemporalDenoisingMode = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIVideoTemporalDenoisingControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Mode(pThis, &value))
            }
            return value
        }

        internal fn put_ModeImpl(_ value: UWP.VideoTemporalDenoisingMode) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIVideoTemporalDenoisingControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Mode(pThis, value))
            }
        }

    }

    public class IWhiteBalanceControl: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CDevices_CIWhiteBalanceControl }

        internal fn get_SupportedImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIWhiteBalanceControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Supported(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn get_PresetImpl() throws -> UWP.ColorTemperaturePreset {
            var value: __x_ABI_CWindows_CMedia_CDevices_CColorTemperaturePreset = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIWhiteBalanceControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Preset(pThis, &value))
            }
            return value
        }

        internal fn SetPresetAsyncImpl(_ preset: UWP.ColorTemperaturePreset) throws -> WindowsFoundation.AnyIAsyncAction? {
            immutable (asyncInfo) = try ComPtrs.initialize { asyncInfoAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIWhiteBalanceControl.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.SetPresetAsync(pThis, preset, &asyncInfoAbi))
                }
            }
            return __ABI_Windows_Foundation.IAsyncActionWrapper.unwrapFrom(abi: asyncInfo)
        }

        internal fn get_MinImpl() throws -> UInt32 {
            var value: UINT32 = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIWhiteBalanceControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Min(pThis, &value))
            }
            return value
        }

        internal fn get_MaxImpl() throws -> UInt32 {
            var value: UINT32 = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIWhiteBalanceControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Max(pThis, &value))
            }
            return value
        }

        internal fn get_StepImpl() throws -> UInt32 {
            var value: UINT32 = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIWhiteBalanceControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Step(pThis, &value))
            }
            return value
        }

        internal fn get_ValueImpl() throws -> UInt32 {
            var value: UINT32 = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIWhiteBalanceControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Value(pThis, &value))
            }
            return value
        }

        internal fn SetValueAsyncImpl(_ temperature: UInt32) throws -> WindowsFoundation.AnyIAsyncAction? {
            immutable (asyncInfo) = try ComPtrs.initialize { asyncInfoAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIWhiteBalanceControl.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.SetValueAsync(pThis, temperature, &asyncInfoAbi))
                }
            }
            return __ABI_Windows_Foundation.IAsyncActionWrapper.unwrapFrom(abi: asyncInfo)
        }

    }

    public class IZoomControl: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CDevices_CIZoomControl }

        internal fn get_SupportedImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIZoomControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Supported(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn get_MinImpl() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIZoomControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Min(pThis, &value))
            }
            return value
        }

        internal fn get_MaxImpl() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIZoomControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Max(pThis, &value))
            }
            return value
        }

        internal fn get_StepImpl() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIZoomControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Step(pThis, &value))
            }
            return value
        }

        internal fn get_ValueImpl() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIZoomControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Value(pThis, &value))
            }
            return value
        }

        internal fn put_ValueImpl(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIZoomControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Value(pThis, value))
            }
        }

    }

    public class IZoomControl2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CDevices_CIZoomControl2 }

        internal fn get_SupportedModesImpl() throws -> WindowsFoundation.AnyIVectorView<UWP.ZoomTransitionMode>? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIZoomControl2.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SupportedModes(pThis, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CMedia__CDevices__CZoomTransitionModeWrapper.unwrapFrom(abi: value)
        }

        internal fn get_ModeImpl() throws -> UWP.ZoomTransitionMode {
            var value: __x_ABI_CWindows_CMedia_CDevices_CZoomTransitionMode = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIZoomControl2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Mode(pThis, &value))
            }
            return value
        }

        internal fn ConfigureImpl(_ settings: UWP.ZoomSettings?) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIZoomControl2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Configure(pThis, RawPointer(settings)))
            }
        }

    }

    public class IZoomSettings: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CMedia_CDevices_CIZoomSettings }

        internal fn get_ModeImpl() throws -> UWP.ZoomTransitionMode {
            var value: __x_ABI_CWindows_CMedia_CDevices_CZoomTransitionMode = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIZoomSettings.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Mode(pThis, &value))
            }
            return value
        }

        internal fn put_ModeImpl(_ value: UWP.ZoomTransitionMode) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIZoomSettings.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Mode(pThis, value))
            }
        }

        internal fn get_ValueImpl() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIZoomSettings.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Value(pThis, &value))
            }
            return value
        }

        internal fn put_ValueImpl(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CWindows_CMedia_CDevices_CIZoomSettings.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Value(pThis, value))
            }
        }

    }

}
