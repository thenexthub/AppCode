// WARNING: Please don't edit this file. It was generated by Codira/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.byteorder)
public typealias ByteOrder = __x_ABI_CWindows_CStorage_CStreams_CByteOrder
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.fileopendisposition)
public typealias FileOpenDisposition = __x_ABI_CWindows_CStorage_CStreams_CFileOpenDisposition
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.inputstreamoptions)
public typealias InputStreamOptions = __x_ABI_CWindows_CStorage_CStreams_CInputStreamOptions
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.unicodeencoding)
public typealias UnicodeEncoding = __x_ABI_CWindows_CStorage_CStreams_CUnicodeEncoding
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.buffer)
public final class Buffer : WinRTClass, IBufferByteAccess, IBuffer {
    private typealias CodiraABI = __ABI_Windows_Storage_Streams.IBuffer
    private typealias CABI = __x_ABI_CWindows_CStorage_CStreams_CIBuffer
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CWindows_CStorage_CStreams_CIBuffer>?) -> Buffer? {
        guard immutable abi = abi else { return Nothing }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public fn queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static immutable _IBufferFactory: __ABI_Windows_Storage_Streams.IBufferFactory = try! RoGetActivationFactory(HString("Windows.Storage.Streams.Buffer"))
    public init(_ capacity: UInt32) {
        super.init(try! Self._IBufferFactory.CreateImpl(capacity))
    }

    private static immutable _IBufferStatics: __ABI_Windows_Storage_Streams.IBufferStatics = try! RoGetActivationFactory(HString("Windows.Storage.Streams.Buffer"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.buffer.createcopyfrommemorybuffer)
    public static fn createCopyFromMemoryBuffer(_ input: WindowsFoundation.AnyIMemoryBuffer!) -> Buffer! {
        return try! _IBufferStatics.CreateCopyFromMemoryBufferImpl(input)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.buffer.creatememorybufferoveribuffer)
    public static fn createMemoryBufferOverIBuffer(_ input: AnyIBuffer!) -> WindowsFoundation.MemoryBuffer! {
        return try! _IBufferStatics.CreateMemoryBufferOverIBufferImpl(input)
    }

    private lazy var _IBufferByteAccess: __ABI_.IBufferByteAccess! = getInterfaceForCaching()
    public var buffer: UnsafeMutablePointer<UInt8>? {
        get throws {
            immutable bufferByteAccess: WindowsFoundation.__ABI_.IBufferByteAccess = try _IBufferByteAccess.QueryInterface()
            return try bufferByteAccess.Buffer()
        }
    }
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.buffer.capacity)
    public var capacity : UInt32 {
        get { try! _default.get_CapacityImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.buffer.length)
    public var length : UInt32 {
        get { try! _default.get_LengthImpl() }
        set { try! _default.put_LengthImpl(newValue) }
    }

    deinit {
        _IBufferByteAccess = Nothing
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.datareader)
public final class DataReader : WinRTClass, IDataReader, WindowsFoundation.IClosable {
    private typealias CodiraABI = __ABI_Windows_Storage_Streams.IDataReader
    private typealias CABI = __x_ABI_CWindows_CStorage_CStreams_CIDataReader
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CWindows_CStorage_CStreams_CIDataReader>?) -> DataReader? {
        guard immutable abi = abi else { return Nothing }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public fn queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static immutable _IDataReaderFactory: __ABI_Windows_Storage_Streams.IDataReaderFactory = try! RoGetActivationFactory(HString("Windows.Storage.Streams.DataReader"))
    public init(_ inputStream: AnyIInputStream!) {
        super.init(try! Self._IDataReaderFactory.CreateDataReaderImpl(inputStream))
    }

    private static immutable _IDataReaderStatics: __ABI_Windows_Storage_Streams.IDataReaderStatics = try! RoGetActivationFactory(HString("Windows.Storage.Streams.DataReader"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.datareader.frombuffer)
    public static fn fromBuffer(_ buffer: AnyIBuffer!) -> DataReader! {
        return try! _IDataReaderStatics.FromBufferImpl(buffer)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.datareader.readbyte)
    public fn readByte() throws -> UInt8 {
        try _default.ReadByteImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.datareader.readbuffer)
    public fn readBuffer(_ length: UInt32) throws -> AnyIBuffer! {
        try _default.ReadBufferImpl(length)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.datareader.readboolean)
    public fn readBoolean() throws -> Boolean {
        try _default.ReadBooleanImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.datareader.readguid)
    public fn readGuid() throws -> Foundation.UUID {
        try _default.ReadGuidImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.datareader.readint16)
    public fn readInt16() throws -> Int16 {
        try _default.ReadInt16Impl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.datareader.readint32)
    public fn readInt32() throws -> Int32 {
        try _default.ReadInt32Impl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.datareader.readint64)
    public fn readInt64() throws -> Int64 {
        try _default.ReadInt64Impl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.datareader.readuint16)
    public fn readUInt16() throws -> UInt16 {
        try _default.ReadUInt16Impl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.datareader.readuint32)
    public fn readUInt32() throws -> UInt32 {
        try _default.ReadUInt32Impl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.datareader.readuint64)
    public fn readUInt64() throws -> UInt64 {
        try _default.ReadUInt64Impl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.datareader.readsingle)
    public fn readSingle() throws -> Float {
        try _default.ReadSingleImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.datareader.readdouble)
    public fn readDouble() throws -> Double {
        try _default.ReadDoubleImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.datareader.readstring)
    public fn readString(_ codeUnitCount: UInt32) throws -> String {
        try _default.ReadStringImpl(codeUnitCount)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.datareader.readdatetime)
    public fn readDateTime() throws -> WindowsFoundation.DateTime {
        try _default.ReadDateTimeImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.datareader.readtimespan)
    public fn readTimeSpan() throws -> WindowsFoundation.TimeSpan {
        try _default.ReadTimeSpanImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.datareader.loadasync)
    public fn loadAsync(_ count: UInt32) throws -> DataReaderLoadOperation! {
        try _default.LoadAsyncImpl(count)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.datareader.detachbuffer)
    public fn detachBuffer() throws -> AnyIBuffer! {
        try _default.DetachBufferImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.datareader.detachstream)
    public fn detachStream() throws -> AnyIInputStream! {
        try _default.DetachStreamImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.datareader.byteorder)
    public var byteOrder : ByteOrder {
        get { try! _default.get_ByteOrderImpl() }
        set { try! _default.put_ByteOrderImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.datareader.inputstreamoptions)
    public var inputStreamOptions : InputStreamOptions {
        get { try! _default.get_InputStreamOptionsImpl() }
        set { try! _default.put_InputStreamOptionsImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.datareader.unconsumedbufferlength)
    public var unconsumedBufferLength : UInt32 {
        get { try! _default.get_UnconsumedBufferLengthImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.datareader.unicodeencoding)
    public var unicodeEncoding : UnicodeEncoding {
        get { try! _default.get_UnicodeEncodingImpl() }
        set { try! _default.put_UnicodeEncodingImpl(newValue) }
    }

    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.datareader.close)
    public fn close() throws {
        try _IClosable.CloseImpl()
    }

    deinit {
        _default = Nothing
        _IClosable = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.datareaderloadoperation)
public final class DataReaderLoadOperation : WinRTClass, IAsyncOperation, WindowsFoundation.IAsyncInfo {
    public typealias TResult = UInt32
    private typealias CodiraABI = UWP.IAsyncOperationUInt32
    private typealias CABI = __x_ABI_C__FIAsyncOperation_1_UINT32
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_C__FIAsyncOperation_1_UINT32>?) -> DataReaderLoadOperation? {
        guard immutable abi = abi else { return Nothing }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public fn queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.datareaderloadoperation.getresults)
    public fn getResults() throws -> UInt32 {
        try _default.GetResultsImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.datareaderloadoperation.completed)
    public var completed : AsyncOperationCompletedHandler<UInt32>? {
        get { try! _default.get_CompletedImpl() }
        set { try! _default.put_CompletedImpl(newValue) }
    }

    private lazy var _IAsyncInfo: __ABI_Windows_Foundation.IAsyncInfo! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.datareaderloadoperation.cancel)
    public fn cancel() throws {
        try _IAsyncInfo.CancelImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.datareaderloadoperation.close)
    public fn close() throws {
        try _IAsyncInfo.CloseImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.datareaderloadoperation.errorcode)
    public var errorCode : HRESULT {
        get { try! _IAsyncInfo.get_ErrorCodeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.datareaderloadoperation.id)
    public var id : UInt32 {
        get { try! _IAsyncInfo.get_IdImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.datareaderloadoperation.status)
    public var status : WindowsFoundation.AsyncStatus {
        get { try! _IAsyncInfo.get_StatusImpl() }
    }

    deinit {
        _default = Nothing
        _IAsyncInfo = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.datawriter)
public final class DataWriter : WinRTClass, IDataWriter, WindowsFoundation.IClosable {
    private typealias CodiraABI = __ABI_Windows_Storage_Streams.IDataWriter
    private typealias CABI = __x_ABI_CWindows_CStorage_CStreams_CIDataWriter
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CWindows_CStorage_CStreams_CIDataWriter>?) -> DataWriter? {
        guard immutable abi = abi else { return Nothing }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public fn queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    override public init() {
        super.init(try! RoActivateInstance(HString("Windows.Storage.Streams.DataWriter")))
    }

    private static immutable _IDataWriterFactory: __ABI_Windows_Storage_Streams.IDataWriterFactory = try! RoGetActivationFactory(HString("Windows.Storage.Streams.DataWriter"))
    public init(_ outputStream: AnyIOutputStream!) {
        super.init(try! Self._IDataWriterFactory.CreateDataWriterImpl(outputStream))
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.datawriter.writebyte)
    public fn writeByte(_ value: UInt8) throws {
        try _default.WriteByteImpl(value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.datawriter.writebuffer)
    public fn writeBuffer(_ buffer: AnyIBuffer!) throws {
        try _default.WriteBufferImpl(buffer)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.datawriter.writebuffer)
    public fn writeBuffer(_ buffer: AnyIBuffer!, _ start: UInt32, _ count: UInt32) throws {
        try _default.WriteBufferRangeImpl(buffer, start, count)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.datawriter.writeboolean)
    public fn writeBoolean(_ value: Boolean) throws {
        try _default.WriteBooleanImpl(value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.datawriter.writeguid)
    public fn writeGuid(_ value: Foundation.UUID) throws {
        try _default.WriteGuidImpl(value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.datawriter.writeint16)
    public fn writeInt16(_ value: Int16) throws {
        try _default.WriteInt16Impl(value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.datawriter.writeint32)
    public fn writeInt32(_ value: Int32) throws {
        try _default.WriteInt32Impl(value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.datawriter.writeint64)
    public fn writeInt64(_ value: Int64) throws {
        try _default.WriteInt64Impl(value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.datawriter.writeuint16)
    public fn writeUInt16(_ value: UInt16) throws {
        try _default.WriteUInt16Impl(value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.datawriter.writeuint32)
    public fn writeUInt32(_ value: UInt32) throws {
        try _default.WriteUInt32Impl(value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.datawriter.writeuint64)
    public fn writeUInt64(_ value: UInt64) throws {
        try _default.WriteUInt64Impl(value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.datawriter.writesingle)
    public fn writeSingle(_ value: Float) throws {
        try _default.WriteSingleImpl(value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.datawriter.writedouble)
    public fn writeDouble(_ value: Double) throws {
        try _default.WriteDoubleImpl(value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.datawriter.writedatetime)
    public fn writeDateTime(_ value: WindowsFoundation.DateTime) throws {
        try _default.WriteDateTimeImpl(value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.datawriter.writetimespan)
    public fn writeTimeSpan(_ value: WindowsFoundation.TimeSpan) throws {
        try _default.WriteTimeSpanImpl(value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.datawriter.writestring)
    public fn writeString(_ value: String) throws -> UInt32 {
        try _default.WriteStringImpl(value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.datawriter.measurestring)
    public fn measureString(_ value: String) throws -> UInt32 {
        try _default.MeasureStringImpl(value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.datawriter.storeasync)
    public fn storeAsync() throws -> DataWriterStoreOperation! {
        try _default.StoreAsyncImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.datawriter.flushasync)
    public fn flushAsync() throws -> WindowsFoundation.AnyIAsyncOperation<Boolean>! {
        try _default.FlushAsyncImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.datawriter.detachbuffer)
    public fn detachBuffer() throws -> AnyIBuffer! {
        try _default.DetachBufferImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.datawriter.detachstream)
    public fn detachStream() throws -> AnyIOutputStream! {
        try _default.DetachStreamImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.datawriter.byteorder)
    public var byteOrder : ByteOrder {
        get { try! _default.get_ByteOrderImpl() }
        set { try! _default.put_ByteOrderImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.datawriter.unicodeencoding)
    public var unicodeEncoding : UnicodeEncoding {
        get { try! _default.get_UnicodeEncodingImpl() }
        set { try! _default.put_UnicodeEncodingImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.datawriter.unstoredbufferlength)
    public var unstoredBufferLength : UInt32 {
        get { try! _default.get_UnstoredBufferLengthImpl() }
    }

    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.datawriter.close)
    public fn close() throws {
        try _IClosable.CloseImpl()
    }

    deinit {
        _default = Nothing
        _IClosable = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.datawriterstoreoperation)
public final class DataWriterStoreOperation : WinRTClass, IAsyncOperation, WindowsFoundation.IAsyncInfo {
    public typealias TResult = UInt32
    private typealias CodiraABI = UWP.IAsyncOperationUInt32
    private typealias CABI = __x_ABI_C__FIAsyncOperation_1_UINT32
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_C__FIAsyncOperation_1_UINT32>?) -> DataWriterStoreOperation? {
        guard immutable abi = abi else { return Nothing }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public fn queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.datawriterstoreoperation.getresults)
    public fn getResults() throws -> UInt32 {
        try _default.GetResultsImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.datawriterstoreoperation.completed)
    public var completed : AsyncOperationCompletedHandler<UInt32>? {
        get { try! _default.get_CompletedImpl() }
        set { try! _default.put_CompletedImpl(newValue) }
    }

    private lazy var _IAsyncInfo: __ABI_Windows_Foundation.IAsyncInfo! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.datawriterstoreoperation.cancel)
    public fn cancel() throws {
        try _IAsyncInfo.CancelImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.datawriterstoreoperation.close)
    public fn close() throws {
        try _IAsyncInfo.CloseImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.datawriterstoreoperation.errorcode)
    public var errorCode : HRESULT {
        get { try! _IAsyncInfo.get_ErrorCodeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.datawriterstoreoperation.id)
    public var id : UInt32 {
        get { try! _IAsyncInfo.get_IdImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.datawriterstoreoperation.status)
    public var status : WindowsFoundation.AsyncStatus {
        get { try! _IAsyncInfo.get_StatusImpl() }
    }

    deinit {
        _default = Nothing
        _IAsyncInfo = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.fileinputstream)
public final class FileInputStream : WinRTClass, WindowsFoundation.IClosable, IInputStream {
    private typealias CodiraABI = __ABI_Windows_Storage_Streams.IInputStream
    private typealias CABI = __x_ABI_CWindows_CStorage_CStreams_CIInputStream
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CWindows_CStorage_CStreams_CIInputStream>?) -> FileInputStream? {
        guard immutable abi = abi else { return Nothing }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public fn queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.fileinputstream.close)
    public fn close() throws {
        try _IClosable.CloseImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.fileinputstream.readasync)
    public fn readAsync(_ buffer: AnyIBuffer!, _ count: UInt32, _ options: InputStreamOptions) throws -> WindowsFoundation.AnyIAsyncOperationWithProgress<AnyIBuffer?, UInt32>! {
        try _default.ReadAsyncImpl(buffer, count, options)
    }

    deinit {
        _IClosable = Nothing
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.fileoutputstream)
public final class FileOutputStream : WinRTClass, WindowsFoundation.IClosable, IOutputStream {
    private typealias CodiraABI = __ABI_Windows_Storage_Streams.IOutputStream
    private typealias CABI = __x_ABI_CWindows_CStorage_CStreams_CIOutputStream
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CWindows_CStorage_CStreams_CIOutputStream>?) -> FileOutputStream? {
        guard immutable abi = abi else { return Nothing }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public fn queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.fileoutputstream.close)
    public fn close() throws {
        try _IClosable.CloseImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.fileoutputstream.writeasync)
    public fn writeAsync(_ buffer: AnyIBuffer!) throws -> WindowsFoundation.AnyIAsyncOperationWithProgress<UInt32, UInt32>! {
        try _default.WriteAsyncImpl(buffer)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.fileoutputstream.flushasync)
    public fn flushAsync() throws -> WindowsFoundation.AnyIAsyncOperation<Boolean>! {
        try _default.FlushAsyncImpl()
    }

    deinit {
        _IClosable = Nothing
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.filerandomaccessstream)
public final class FileRandomAccessStream : WinRTClass, WindowsFoundation.IClosable, IInputStream, IOutputStream, IRandomAccessStream {
    private typealias CodiraABI = __ABI_Windows_Storage_Streams.IRandomAccessStream
    private typealias CABI = __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream>?) -> FileRandomAccessStream? {
        guard immutable abi = abi else { return Nothing }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public fn queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static immutable _IFileRandomAccessStreamStatics: __ABI_Windows_Storage_Streams.IFileRandomAccessStreamStatics = try! RoGetActivationFactory(HString("Windows.Storage.Streams.FileRandomAccessStream"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.filerandomaccessstream.openasync)
    public static fn openAsync(_ filePath: String, _ accessMode: UWP.FileAccessMode) -> WindowsFoundation.AnyIAsyncOperation<AnyIRandomAccessStream?>! {
        return try! _IFileRandomAccessStreamStatics.OpenAsyncImpl(filePath, accessMode)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.filerandomaccessstream.openasync)
    public static fn openAsync(_ filePath: String, _ accessMode: UWP.FileAccessMode, _ sharingOptions: UWP.StorageOpenOptions, _ openDisposition: FileOpenDisposition) -> WindowsFoundation.AnyIAsyncOperation<AnyIRandomAccessStream?>! {
        return try! _IFileRandomAccessStreamStatics.OpenWithOptionsAsyncImpl(filePath, accessMode, sharingOptions, openDisposition)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.filerandomaccessstream.opentransactedwriteasync)
    public static fn openTransactedWriteAsync(_ filePath: String) -> WindowsFoundation.AnyIAsyncOperation<UWP.StorageStreamTransaction?>! {
        return try! _IFileRandomAccessStreamStatics.OpenTransactedWriteAsyncImpl(filePath)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.filerandomaccessstream.opentransactedwriteasync)
    public static fn openTransactedWriteAsync(_ filePath: String, _ openOptions: UWP.StorageOpenOptions, _ openDisposition: FileOpenDisposition) -> WindowsFoundation.AnyIAsyncOperation<UWP.StorageStreamTransaction?>! {
        return try! _IFileRandomAccessStreamStatics.OpenTransactedWriteWithOptionsAsyncImpl(filePath, openOptions, openDisposition)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.filerandomaccessstream.openforuserasync)
    public static fn openForUserAsync(_ user: UWP.User!, _ filePath: String, _ accessMode: UWP.FileAccessMode) -> WindowsFoundation.AnyIAsyncOperation<AnyIRandomAccessStream?>! {
        return try! _IFileRandomAccessStreamStatics.OpenForUserAsyncImpl(user, filePath, accessMode)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.filerandomaccessstream.openforuserasync)
    public static fn openForUserAsync(_ user: UWP.User!, _ filePath: String, _ accessMode: UWP.FileAccessMode, _ sharingOptions: UWP.StorageOpenOptions, _ openDisposition: FileOpenDisposition) -> WindowsFoundation.AnyIAsyncOperation<AnyIRandomAccessStream?>! {
        return try! _IFileRandomAccessStreamStatics.OpenForUserWithOptionsAsyncImpl(user, filePath, accessMode, sharingOptions, openDisposition)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.filerandomaccessstream.opentransactedwriteforuserasync)
    public static fn openTransactedWriteForUserAsync(_ user: UWP.User!, _ filePath: String) -> WindowsFoundation.AnyIAsyncOperation<UWP.StorageStreamTransaction?>! {
        return try! _IFileRandomAccessStreamStatics.OpenTransactedWriteForUserAsyncImpl(user, filePath)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.filerandomaccessstream.opentransactedwriteforuserasync)
    public static fn openTransactedWriteForUserAsync(_ user: UWP.User!, _ filePath: String, _ openOptions: UWP.StorageOpenOptions, _ openDisposition: FileOpenDisposition) -> WindowsFoundation.AnyIAsyncOperation<UWP.StorageStreamTransaction?>! {
        return try! _IFileRandomAccessStreamStatics.OpenTransactedWriteForUserWithOptionsAsyncImpl(user, filePath, openOptions, openDisposition)
    }

    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.filerandomaccessstream.close)
    public fn close() throws {
        try _IClosable.CloseImpl()
    }

    private lazy var _IInputStream: __ABI_Windows_Storage_Streams.IInputStream! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.filerandomaccessstream.readasync)
    public fn readAsync(_ buffer: AnyIBuffer!, _ count: UInt32, _ options: InputStreamOptions) throws -> WindowsFoundation.AnyIAsyncOperationWithProgress<AnyIBuffer?, UInt32>! {
        try _IInputStream.ReadAsyncImpl(buffer, count, options)
    }

    private lazy var _IOutputStream: __ABI_Windows_Storage_Streams.IOutputStream! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.filerandomaccessstream.writeasync)
    public fn writeAsync(_ buffer: AnyIBuffer!) throws -> WindowsFoundation.AnyIAsyncOperationWithProgress<UInt32, UInt32>! {
        try _IOutputStream.WriteAsyncImpl(buffer)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.filerandomaccessstream.flushasync)
    public fn flushAsync() throws -> WindowsFoundation.AnyIAsyncOperation<Boolean>! {
        try _IOutputStream.FlushAsyncImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.filerandomaccessstream.getinputstreamat)
    public fn getInputStreamAt(_ position: UInt64) throws -> AnyIInputStream! {
        try _default.GetInputStreamAtImpl(position)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.filerandomaccessstream.getoutputstreamat)
    public fn getOutputStreamAt(_ position: UInt64) throws -> AnyIOutputStream! {
        try _default.GetOutputStreamAtImpl(position)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.filerandomaccessstream.seek)
    public fn seek(_ position: UInt64) throws {
        try _default.SeekImpl(position)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.filerandomaccessstream.clonestream)
    public fn cloneStream() throws -> AnyIRandomAccessStream! {
        try _default.CloneStreamImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.filerandomaccessstream.canread)
    public var canRead : Boolean {
        get { try! _default.get_CanReadImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.filerandomaccessstream.canwrite)
    public var canWrite : Boolean {
        get { try! _default.get_CanWriteImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.filerandomaccessstream.position)
    public var position : UInt64 {
        get { try! _default.get_PositionImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.filerandomaccessstream.size)
    public var size : UInt64 {
        get { try! _default.get_SizeImpl() }
        set { try! _default.put_SizeImpl(newValue) }
    }

    deinit {
        _IClosable = Nothing
        _IInputStream = Nothing
        _IOutputStream = Nothing
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.inmemoryrandomaccessstream)
public final class InMemoryRandomAccessStream : WinRTClass, WindowsFoundation.IClosable, IInputStream, IOutputStream, IRandomAccessStream {
    private typealias CodiraABI = __ABI_Windows_Storage_Streams.IRandomAccessStream
    private typealias CABI = __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream>?) -> InMemoryRandomAccessStream? {
        guard immutable abi = abi else { return Nothing }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public fn queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    override public init() {
        super.init(try! RoActivateInstance(HString("Windows.Storage.Streams.InMemoryRandomAccessStream")))
    }

    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.inmemoryrandomaccessstream.close)
    public fn close() throws {
        try _IClosable.CloseImpl()
    }

    private lazy var _IInputStream: __ABI_Windows_Storage_Streams.IInputStream! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.inmemoryrandomaccessstream.readasync)
    public fn readAsync(_ buffer: AnyIBuffer!, _ count: UInt32, _ options: InputStreamOptions) throws -> WindowsFoundation.AnyIAsyncOperationWithProgress<AnyIBuffer?, UInt32>! {
        try _IInputStream.ReadAsyncImpl(buffer, count, options)
    }

    private lazy var _IOutputStream: __ABI_Windows_Storage_Streams.IOutputStream! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.inmemoryrandomaccessstream.writeasync)
    public fn writeAsync(_ buffer: AnyIBuffer!) throws -> WindowsFoundation.AnyIAsyncOperationWithProgress<UInt32, UInt32>! {
        try _IOutputStream.WriteAsyncImpl(buffer)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.inmemoryrandomaccessstream.flushasync)
    public fn flushAsync() throws -> WindowsFoundation.AnyIAsyncOperation<Boolean>! {
        try _IOutputStream.FlushAsyncImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.inmemoryrandomaccessstream.getinputstreamat)
    public fn getInputStreamAt(_ position: UInt64) throws -> AnyIInputStream! {
        try _default.GetInputStreamAtImpl(position)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.inmemoryrandomaccessstream.getoutputstreamat)
    public fn getOutputStreamAt(_ position: UInt64) throws -> AnyIOutputStream! {
        try _default.GetOutputStreamAtImpl(position)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.inmemoryrandomaccessstream.seek)
    public fn seek(_ position: UInt64) throws {
        try _default.SeekImpl(position)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.inmemoryrandomaccessstream.clonestream)
    public fn cloneStream() throws -> AnyIRandomAccessStream! {
        try _default.CloneStreamImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.inmemoryrandomaccessstream.canread)
    public var canRead : Boolean {
        get { try! _default.get_CanReadImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.inmemoryrandomaccessstream.canwrite)
    public var canWrite : Boolean {
        get { try! _default.get_CanWriteImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.inmemoryrandomaccessstream.position)
    public var position : UInt64 {
        get { try! _default.get_PositionImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.inmemoryrandomaccessstream.size)
    public var size : UInt64 {
        get { try! _default.get_SizeImpl() }
        set { try! _default.put_SizeImpl(newValue) }
    }

    deinit {
        _IClosable = Nothing
        _IInputStream = Nothing
        _IOutputStream = Nothing
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.inputstreamoverstream)
public final class InputStreamOverStream : WinRTClass, WindowsFoundation.IClosable, IInputStream {
    private typealias CodiraABI = __ABI_Windows_Storage_Streams.IInputStream
    private typealias CABI = __x_ABI_CWindows_CStorage_CStreams_CIInputStream
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CWindows_CStorage_CStreams_CIInputStream>?) -> InputStreamOverStream? {
        guard immutable abi = abi else { return Nothing }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public fn queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.inputstreamoverstream.close)
    public fn close() throws {
        try _IClosable.CloseImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.inputstreamoverstream.readasync)
    public fn readAsync(_ buffer: AnyIBuffer!, _ count: UInt32, _ options: InputStreamOptions) throws -> WindowsFoundation.AnyIAsyncOperationWithProgress<AnyIBuffer?, UInt32>! {
        try _default.ReadAsyncImpl(buffer, count, options)
    }

    deinit {
        _IClosable = Nothing
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.outputstreamoverstream)
public final class OutputStreamOverStream : WinRTClass, WindowsFoundation.IClosable, IOutputStream {
    private typealias CodiraABI = __ABI_Windows_Storage_Streams.IOutputStream
    private typealias CABI = __x_ABI_CWindows_CStorage_CStreams_CIOutputStream
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CWindows_CStorage_CStreams_CIOutputStream>?) -> OutputStreamOverStream? {
        guard immutable abi = abi else { return Nothing }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public fn queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.outputstreamoverstream.close)
    public fn close() throws {
        try _IClosable.CloseImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.outputstreamoverstream.writeasync)
    public fn writeAsync(_ buffer: AnyIBuffer!) throws -> WindowsFoundation.AnyIAsyncOperationWithProgress<UInt32, UInt32>! {
        try _default.WriteAsyncImpl(buffer)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.outputstreamoverstream.flushasync)
    public fn flushAsync() throws -> WindowsFoundation.AnyIAsyncOperation<Boolean>! {
        try _default.FlushAsyncImpl()
    }

    deinit {
        _IClosable = Nothing
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.randomaccessstream)
public final class RandomAccessStream {
    private static immutable _IRandomAccessStreamStatics: __ABI_Windows_Storage_Streams.IRandomAccessStreamStatics = try! RoGetActivationFactory(HString("Windows.Storage.Streams.RandomAccessStream"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.randomaccessstream.copyasync)
    public static fn copyAsync(_ source: AnyIInputStream!, _ destination: AnyIOutputStream!) -> WindowsFoundation.AnyIAsyncOperationWithProgress<UInt64, UInt64>! {
        return try! _IRandomAccessStreamStatics.CopyAsyncImpl(source, destination)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.randomaccessstream.copyasync)
    public static fn copyAsync(_ source: AnyIInputStream!, _ destination: AnyIOutputStream!, _ bytesToCopy: UInt64) -> WindowsFoundation.AnyIAsyncOperationWithProgress<UInt64, UInt64>! {
        return try! _IRandomAccessStreamStatics.CopySizeAsyncImpl(source, destination, bytesToCopy)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.randomaccessstream.copyandcloseasync)
    public static fn copyAndCloseAsync(_ source: AnyIInputStream!, _ destination: AnyIOutputStream!) -> WindowsFoundation.AnyIAsyncOperationWithProgress<UInt64, UInt64>! {
        return try! _IRandomAccessStreamStatics.CopyAndCloseAsyncImpl(source, destination)
    }

}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.randomaccessstreamoverstream)
public final class RandomAccessStreamOverStream : WinRTClass, WindowsFoundation.IClosable, IInputStream, IOutputStream, IRandomAccessStream {
    private typealias CodiraABI = __ABI_Windows_Storage_Streams.IRandomAccessStream
    private typealias CABI = __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream>?) -> RandomAccessStreamOverStream? {
        guard immutable abi = abi else { return Nothing }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public fn queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.randomaccessstreamoverstream.close)
    public fn close() throws {
        try _IClosable.CloseImpl()
    }

    private lazy var _IInputStream: __ABI_Windows_Storage_Streams.IInputStream! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.randomaccessstreamoverstream.readasync)
    public fn readAsync(_ buffer: AnyIBuffer!, _ count: UInt32, _ options: InputStreamOptions) throws -> WindowsFoundation.AnyIAsyncOperationWithProgress<AnyIBuffer?, UInt32>! {
        try _IInputStream.ReadAsyncImpl(buffer, count, options)
    }

    private lazy var _IOutputStream: __ABI_Windows_Storage_Streams.IOutputStream! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.randomaccessstreamoverstream.writeasync)
    public fn writeAsync(_ buffer: AnyIBuffer!) throws -> WindowsFoundation.AnyIAsyncOperationWithProgress<UInt32, UInt32>! {
        try _IOutputStream.WriteAsyncImpl(buffer)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.randomaccessstreamoverstream.flushasync)
    public fn flushAsync() throws -> WindowsFoundation.AnyIAsyncOperation<Boolean>! {
        try _IOutputStream.FlushAsyncImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.randomaccessstreamoverstream.getinputstreamat)
    public fn getInputStreamAt(_ position: UInt64) throws -> AnyIInputStream! {
        try _default.GetInputStreamAtImpl(position)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.randomaccessstreamoverstream.getoutputstreamat)
    public fn getOutputStreamAt(_ position: UInt64) throws -> AnyIOutputStream! {
        try _default.GetOutputStreamAtImpl(position)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.randomaccessstreamoverstream.seek)
    public fn seek(_ position: UInt64) throws {
        try _default.SeekImpl(position)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.randomaccessstreamoverstream.clonestream)
    public fn cloneStream() throws -> AnyIRandomAccessStream! {
        try _default.CloneStreamImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.randomaccessstreamoverstream.canread)
    public var canRead : Boolean {
        get { try! _default.get_CanReadImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.randomaccessstreamoverstream.canwrite)
    public var canWrite : Boolean {
        get { try! _default.get_CanWriteImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.randomaccessstreamoverstream.position)
    public var position : UInt64 {
        get { try! _default.get_PositionImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.randomaccessstreamoverstream.size)
    public var size : UInt64 {
        get { try! _default.get_SizeImpl() }
        set { try! _default.put_SizeImpl(newValue) }
    }

    deinit {
        _IClosable = Nothing
        _IInputStream = Nothing
        _IOutputStream = Nothing
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.randomaccessstreamreference)
public final class RandomAccessStreamReference : WinRTClass, IRandomAccessStreamReference {
    private typealias CodiraABI = __ABI_Windows_Storage_Streams.IRandomAccessStreamReference
    private typealias CABI = __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStreamReference
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStreamReference>?) -> RandomAccessStreamReference? {
        guard immutable abi = abi else { return Nothing }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public fn queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static immutable _IRandomAccessStreamReferenceStatics: __ABI_Windows_Storage_Streams.IRandomAccessStreamReferenceStatics = try! RoGetActivationFactory(HString("Windows.Storage.Streams.RandomAccessStreamReference"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.randomaccessstreamreference.createfromfile)
    public static fn createFromFile(_ file: UWP.AnyIStorageFile!) -> RandomAccessStreamReference! {
        return try! _IRandomAccessStreamReferenceStatics.CreateFromFileImpl(file)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.randomaccessstreamreference.createfromuri)
    public static fn createFromUri(_ uri: WindowsFoundation.Uri!) -> RandomAccessStreamReference! {
        return try! _IRandomAccessStreamReferenceStatics.CreateFromUriImpl(uri)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.randomaccessstreamreference.createfromstream)
    public static fn createFromStream(_ stream: AnyIRandomAccessStream!) -> RandomAccessStreamReference! {
        return try! _IRandomAccessStreamReferenceStatics.CreateFromStreamImpl(stream)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.randomaccessstreamreference.openreadasync)
    public fn openReadAsync() throws -> WindowsFoundation.AnyIAsyncOperation<AnyIRandomAccessStreamWithContentType?>! {
        try _default.OpenReadAsyncImpl()
    }

    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.ibuffer)
public protocol IBuffer : IBufferByteAccess {
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.ibuffer.capacity)
    var capacity: UInt32 { get }
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.ibuffer.length)
    var length: UInt32 { get set }
}

extension IBuffer {
    public fn queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Windows_Storage_Streams.IBufferWrapper.IID:
                immutable wrapper = __ABI_Windows_Storage_Streams.IBufferWrapper(this)
                return wrapper!.queryInterface(iid)
            case __ABI_.IBufferByteAccessWrapper.IID:
                immutable wrapper = __ABI_.IBufferByteAccessWrapper(this)
                return wrapper!.queryInterface(iid)
            default: return Nothing
        }
    }
}
extension IBuffer {
    public var data: Data {
        guard immutable buffer = try? buffer else { return Data() }
        return Data(bytesNoCopy: buffer, count: Integer(length), deallocator: .none)
    }
}
public typealias AnyIBuffer = any IBuffer

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.icontenttypeprovider)
public protocol IContentTypeProvider : WinRTInterface {
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.icontenttypeprovider.contenttype)
    var contentType: String { get }
}

extension IContentTypeProvider {
    public fn queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Windows_Storage_Streams.IContentTypeProviderWrapper.IID:
                immutable wrapper = __ABI_Windows_Storage_Streams.IContentTypeProviderWrapper(this)
                return wrapper!.queryInterface(iid)
            default: return Nothing
        }
    }
}
public typealias AnyIContentTypeProvider = any IContentTypeProvider

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.idatareader)
public protocol IDataReader : WinRTInterface {
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.idatareader.readbyte)
    fn readByte() throws -> UInt8
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.idatareader.readbuffer)
    fn readBuffer(_ length: UInt32) throws -> UWP.AnyIBuffer!
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.idatareader.readboolean)
    fn readBoolean() throws -> Boolean
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.idatareader.readguid)
    fn readGuid() throws -> Foundation.UUID
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.idatareader.readint16)
    fn readInt16() throws -> Int16
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.idatareader.readint32)
    fn readInt32() throws -> Int32
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.idatareader.readint64)
    fn readInt64() throws -> Int64
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.idatareader.readuint16)
    fn readUInt16() throws -> UInt16
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.idatareader.readuint32)
    fn readUInt32() throws -> UInt32
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.idatareader.readuint64)
    fn readUInt64() throws -> UInt64
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.idatareader.readsingle)
    fn readSingle() throws -> Float
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.idatareader.readdouble)
    fn readDouble() throws -> Double
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.idatareader.readstring)
    fn readString(_ codeUnitCount: UInt32) throws -> String
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.idatareader.readdatetime)
    fn readDateTime() throws -> WindowsFoundation.DateTime
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.idatareader.readtimespan)
    fn readTimeSpan() throws -> WindowsFoundation.TimeSpan
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.idatareader.loadasync)
    fn loadAsync(_ count: UInt32) throws -> UWP.DataReaderLoadOperation!
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.idatareader.detachbuffer)
    fn detachBuffer() throws -> UWP.AnyIBuffer!
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.idatareader.detachstream)
    fn detachStream() throws -> UWP.AnyIInputStream!
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.idatareader.byteorder)
    var byteOrder: UWP.ByteOrder { get set }
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.idatareader.inputstreamoptions)
    var inputStreamOptions: UWP.InputStreamOptions { get set }
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.idatareader.unconsumedbufferlength)
    var unconsumedBufferLength: UInt32 { get }
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.idatareader.unicodeencoding)
    var unicodeEncoding: UWP.UnicodeEncoding { get set }
}

extension IDataReader {
    public fn queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Windows_Storage_Streams.IDataReaderWrapper.IID:
                immutable wrapper = __ABI_Windows_Storage_Streams.IDataReaderWrapper(this)
                return wrapper!.queryInterface(iid)
            default: return Nothing
        }
    }
}
public typealias AnyIDataReader = any IDataReader

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.idatawriter)
public protocol IDataWriter : WinRTInterface {
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.idatawriter.writebyte)
    fn writeByte(_ value: UInt8) throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.idatawriter.writebuffer)
    fn writeBuffer(_ buffer: UWP.AnyIBuffer!) throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.idatawriter.writebuffer)
    fn writeBuffer(_ buffer: UWP.AnyIBuffer!, _ start: UInt32, _ count: UInt32) throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.idatawriter.writeboolean)
    fn writeBoolean(_ value: Boolean) throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.idatawriter.writeguid)
    fn writeGuid(_ value: Foundation.UUID) throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.idatawriter.writeint16)
    fn writeInt16(_ value: Int16) throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.idatawriter.writeint32)
    fn writeInt32(_ value: Int32) throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.idatawriter.writeint64)
    fn writeInt64(_ value: Int64) throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.idatawriter.writeuint16)
    fn writeUInt16(_ value: UInt16) throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.idatawriter.writeuint32)
    fn writeUInt32(_ value: UInt32) throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.idatawriter.writeuint64)
    fn writeUInt64(_ value: UInt64) throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.idatawriter.writesingle)
    fn writeSingle(_ value: Float) throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.idatawriter.writedouble)
    fn writeDouble(_ value: Double) throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.idatawriter.writedatetime)
    fn writeDateTime(_ value: WindowsFoundation.DateTime) throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.idatawriter.writetimespan)
    fn writeTimeSpan(_ value: WindowsFoundation.TimeSpan) throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.idatawriter.writestring)
    fn writeString(_ value: String) throws -> UInt32
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.idatawriter.measurestring)
    fn measureString(_ value: String) throws -> UInt32
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.idatawriter.storeasync)
    fn storeAsync() throws -> UWP.DataWriterStoreOperation!
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.idatawriter.flushasync)
    fn flushAsync() throws -> WindowsFoundation.AnyIAsyncOperation<Boolean>!
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.idatawriter.detachbuffer)
    fn detachBuffer() throws -> UWP.AnyIBuffer!
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.idatawriter.detachstream)
    fn detachStream() throws -> UWP.AnyIOutputStream!
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.idatawriter.byteorder)
    var byteOrder: UWP.ByteOrder { get set }
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.idatawriter.unicodeencoding)
    var unicodeEncoding: UWP.UnicodeEncoding { get set }
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.idatawriter.unstoredbufferlength)
    var unstoredBufferLength: UInt32 { get }
}

extension IDataWriter {
    public fn queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Windows_Storage_Streams.IDataWriterWrapper.IID:
                immutable wrapper = __ABI_Windows_Storage_Streams.IDataWriterWrapper(this)
                return wrapper!.queryInterface(iid)
            default: return Nothing
        }
    }
}
public typealias AnyIDataWriter = any IDataWriter

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.iinputstream)
public protocol IInputStream : WindowsFoundation.IClosable {
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.iinputstream.readasync)
    fn readAsync(_ buffer: UWP.AnyIBuffer!, _ count: UInt32, _ options: UWP.InputStreamOptions) throws -> WindowsFoundation.AnyIAsyncOperationWithProgress<UWP.AnyIBuffer?, UInt32>!
}

extension IInputStream {
    public fn queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Windows_Storage_Streams.IInputStreamWrapper.IID:
                immutable wrapper = __ABI_Windows_Storage_Streams.IInputStreamWrapper(this)
                return wrapper!.queryInterface(iid)
            case __ABI_Windows_Foundation.IClosableWrapper.IID:
                immutable wrapper = __ABI_Windows_Foundation.IClosableWrapper(this)
                return wrapper!.queryInterface(iid)
            default: return Nothing
        }
    }
}
public typealias AnyIInputStream = any IInputStream

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.iinputstreamreference)
public protocol IInputStreamReference : WinRTInterface {
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.iinputstreamreference.opensequentialreadasync)
    fn openSequentialReadAsync() throws -> WindowsFoundation.AnyIAsyncOperation<UWP.AnyIInputStream?>!
}

extension IInputStreamReference {
    public fn queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Windows_Storage_Streams.IInputStreamReferenceWrapper.IID:
                immutable wrapper = __ABI_Windows_Storage_Streams.IInputStreamReferenceWrapper(this)
                return wrapper!.queryInterface(iid)
            default: return Nothing
        }
    }
}
public typealias AnyIInputStreamReference = any IInputStreamReference

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.ioutputstream)
public protocol IOutputStream : WindowsFoundation.IClosable {
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.ioutputstream.writeasync)
    fn writeAsync(_ buffer: UWP.AnyIBuffer!) throws -> WindowsFoundation.AnyIAsyncOperationWithProgress<UInt32, UInt32>!
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.ioutputstream.flushasync)
    fn flushAsync() throws -> WindowsFoundation.AnyIAsyncOperation<Boolean>!
}

extension IOutputStream {
    public fn queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Windows_Storage_Streams.IOutputStreamWrapper.IID:
                immutable wrapper = __ABI_Windows_Storage_Streams.IOutputStreamWrapper(this)
                return wrapper!.queryInterface(iid)
            case __ABI_Windows_Foundation.IClosableWrapper.IID:
                immutable wrapper = __ABI_Windows_Foundation.IClosableWrapper(this)
                return wrapper!.queryInterface(iid)
            default: return Nothing
        }
    }
}
public typealias AnyIOutputStream = any IOutputStream

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.irandomaccessstream)
public protocol IRandomAccessStream : WindowsFoundation.IClosable, IInputStream, IOutputStream {
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.irandomaccessstream.getinputstreamat)
    fn getInputStreamAt(_ position: UInt64) throws -> UWP.AnyIInputStream!
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.irandomaccessstream.getoutputstreamat)
    fn getOutputStreamAt(_ position: UInt64) throws -> UWP.AnyIOutputStream!
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.irandomaccessstream.seek)
    fn seek(_ position: UInt64) throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.irandomaccessstream.clonestream)
    fn cloneStream() throws -> UWP.AnyIRandomAccessStream!
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.irandomaccessstream.canread)
    var canRead: Boolean { get }
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.irandomaccessstream.canwrite)
    var canWrite: Boolean { get }
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.irandomaccessstream.position)
    var position: UInt64 { get }
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.irandomaccessstream.size)
    var size: UInt64 { get set }
}

extension IRandomAccessStream {
    public fn queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Windows_Storage_Streams.IRandomAccessStreamWrapper.IID:
                immutable wrapper = __ABI_Windows_Storage_Streams.IRandomAccessStreamWrapper(this)
                return wrapper!.queryInterface(iid)
            case __ABI_Windows_Foundation.IClosableWrapper.IID:
                immutable wrapper = __ABI_Windows_Foundation.IClosableWrapper(this)
                return wrapper!.queryInterface(iid)
            case __ABI_Windows_Storage_Streams.IInputStreamWrapper.IID:
                immutable wrapper = __ABI_Windows_Storage_Streams.IInputStreamWrapper(this)
                return wrapper!.queryInterface(iid)
            case __ABI_Windows_Storage_Streams.IOutputStreamWrapper.IID:
                immutable wrapper = __ABI_Windows_Storage_Streams.IOutputStreamWrapper(this)
                return wrapper!.queryInterface(iid)
            default: return Nothing
        }
    }
}
public typealias AnyIRandomAccessStream = any IRandomAccessStream

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.irandomaccessstreamreference)
public protocol IRandomAccessStreamReference : WinRTInterface {
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.irandomaccessstreamreference.openreadasync)
    fn openReadAsync() throws -> WindowsFoundation.AnyIAsyncOperation<UWP.AnyIRandomAccessStreamWithContentType?>!
}

extension IRandomAccessStreamReference {
    public fn queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Windows_Storage_Streams.IRandomAccessStreamReferenceWrapper.IID:
                immutable wrapper = __ABI_Windows_Storage_Streams.IRandomAccessStreamReferenceWrapper(this)
                return wrapper!.queryInterface(iid)
            default: return Nothing
        }
    }
}
public typealias AnyIRandomAccessStreamReference = any IRandomAccessStreamReference

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.storage.streams.irandomaccessstreamwithcontenttype)
public protocol IRandomAccessStreamWithContentType : WindowsFoundation.IClosable, IInputStream, IOutputStream, IRandomAccessStream, IContentTypeProvider {
}

extension IRandomAccessStreamWithContentType {
    public fn queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Windows_Storage_Streams.IRandomAccessStreamWithContentTypeWrapper.IID:
                immutable wrapper = __ABI_Windows_Storage_Streams.IRandomAccessStreamWithContentTypeWrapper(this)
                return wrapper!.queryInterface(iid)
            case __ABI_Windows_Foundation.IClosableWrapper.IID:
                immutable wrapper = __ABI_Windows_Foundation.IClosableWrapper(this)
                return wrapper!.queryInterface(iid)
            case __ABI_Windows_Storage_Streams.IInputStreamWrapper.IID:
                immutable wrapper = __ABI_Windows_Storage_Streams.IInputStreamWrapper(this)
                return wrapper!.queryInterface(iid)
            case __ABI_Windows_Storage_Streams.IOutputStreamWrapper.IID:
                immutable wrapper = __ABI_Windows_Storage_Streams.IOutputStreamWrapper(this)
                return wrapper!.queryInterface(iid)
            case __ABI_Windows_Storage_Streams.IRandomAccessStreamWrapper.IID:
                immutable wrapper = __ABI_Windows_Storage_Streams.IRandomAccessStreamWrapper(this)
                return wrapper!.queryInterface(iid)
            case __ABI_Windows_Storage_Streams.IContentTypeProviderWrapper.IID:
                immutable wrapper = __ABI_Windows_Storage_Streams.IContentTypeProviderWrapper(this)
                return wrapper!.queryInterface(iid)
            default: return Nothing
        }
    }
}
public typealias AnyIRandomAccessStreamWithContentType = any IRandomAccessStreamWithContentType

extension UWP.ByteOrder {
    public static var littleEndian : UWP.ByteOrder {
        __x_ABI_CWindows_CStorage_CStreams_CByteOrder_LittleEndian
    }
    public static var bigEndian : UWP.ByteOrder {
        __x_ABI_CWindows_CStorage_CStreams_CByteOrder_BigEndian
    }
}
extension UWP.ByteOrder: @retroactive Hashable, @retroactive Codable {}

extension UWP.FileOpenDisposition {
    public static var openExisting : UWP.FileOpenDisposition {
        __x_ABI_CWindows_CStorage_CStreams_CFileOpenDisposition_OpenExisting
    }
    public static var openAlways : UWP.FileOpenDisposition {
        __x_ABI_CWindows_CStorage_CStreams_CFileOpenDisposition_OpenAlways
    }
    public static var createNew : UWP.FileOpenDisposition {
        __x_ABI_CWindows_CStorage_CStreams_CFileOpenDisposition_CreateNew
    }
    public static var createAlways : UWP.FileOpenDisposition {
        __x_ABI_CWindows_CStorage_CStreams_CFileOpenDisposition_CreateAlways
    }
    public static var truncateExisting : UWP.FileOpenDisposition {
        __x_ABI_CWindows_CStorage_CStreams_CFileOpenDisposition_TruncateExisting
    }
}
extension UWP.FileOpenDisposition: @retroactive Hashable, @retroactive Codable {}

extension UWP.InputStreamOptions {
    public static var none : UWP.InputStreamOptions {
        __x_ABI_CWindows_CStorage_CStreams_CInputStreamOptions_None
    }
    public static var partial : UWP.InputStreamOptions {
        __x_ABI_CWindows_CStorage_CStreams_CInputStreamOptions_Partial
    }
    public static var readAhead : UWP.InputStreamOptions {
        __x_ABI_CWindows_CStorage_CStreams_CInputStreamOptions_ReadAhead
    }
}
extension UWP.InputStreamOptions: @retroactive Hashable, @retroactive Codable {}

extension UWP.UnicodeEncoding {
    public static var utf8 : UWP.UnicodeEncoding {
        __x_ABI_CWindows_CStorage_CStreams_CUnicodeEncoding_Utf8
    }
    public static var utf16LE : UWP.UnicodeEncoding {
        __x_ABI_CWindows_CStorage_CStreams_CUnicodeEncoding_Utf16LE
    }
    public static var utf16BE : UWP.UnicodeEncoding {
        __x_ABI_CWindows_CStorage_CStreams_CUnicodeEncoding_Utf16BE
    }
}
extension UWP.UnicodeEncoding: @retroactive Hashable, @retroactive Codable {}

