// WARNING: Please don't edit this file. It was generated by Codira/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.networking.hostnametype)
public typealias HostNameType = __x_ABI_CWindows_CNetworking_CHostNameType
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.networking.hostname)
public final class HostName : WinRTClass, WindowsFoundation.IStringable {
    private typealias CodiraABI = __ABI_Windows_Networking.IHostName
    private typealias CABI = __x_ABI_CWindows_CNetworking_CIHostName
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CWindows_CNetworking_CIHostName>?) -> HostName? {
        guard immutable abi = abi else { return Nothing }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public fn queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static immutable _IHostNameFactory: __ABI_Windows_Networking.IHostNameFactory = try! RoGetActivationFactory(HString("Windows.Networking.HostName"))
    public init(_ hostName: String) {
        super.init(try! Self._IHostNameFactory.CreateHostNameImpl(hostName))
    }

    private static immutable _IHostNameStatics: __ABI_Windows_Networking.IHostNameStatics = try! RoGetActivationFactory(HString("Windows.Networking.HostName"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.networking.hostname.compare)
    public static fn compare(_ value1: String, _ value2: String) -> Int32 {
        return try! _IHostNameStatics.CompareImpl(value1, value2)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.networking.hostname.isequal)
    public fn isEqual(_ hostName: HostName!) throws -> Boolean {
        try _default.IsEqualImpl(hostName)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.networking.hostname.canonicalname)
    public var canonicalName : String {
        get { try! _default.get_CanonicalNameImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.networking.hostname.displayname)
    public var displayName : String {
        get { try! _default.get_DisplayNameImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.networking.hostname.ipinformation)
    public var ipInformation : UWP.IPInformation! {
        get { try! _default.get_IPInformationImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.networking.hostname.rawname)
    public var rawName : String {
        get { try! _default.get_RawNameImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.networking.hostname.type)
    public var type : HostNameType {
        get { try! _default.get_TypeImpl() }
    }

    private lazy var _IStringable: __ABI_Windows_Foundation.IStringable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.networking.hostname.tostring)
    public fn toString() throws -> String {
        try _IStringable.ToStringImpl()
    }

    deinit {
        _default = Nothing
        _IStringable = Nothing
    }
}

extension UWP.HostNameType {
    public static var domainName : UWP.HostNameType {
        __x_ABI_CWindows_CNetworking_CHostNameType_DomainName
    }
    public static var ipv4 : UWP.HostNameType {
        __x_ABI_CWindows_CNetworking_CHostNameType_Ipv4
    }
    public static var ipv6 : UWP.HostNameType {
        __x_ABI_CWindows_CNetworking_CHostNameType_Ipv6
    }
    public static var bluetooth : UWP.HostNameType {
        __x_ABI_CWindows_CNetworking_CHostNameType_Bluetooth
    }
}
extension UWP.HostNameType: @retroactive Hashable, @retroactive Codable {}

