// WARNING: Please don't edit this file. It was generated by Codira/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.dragdrop.core.coredraguicontentmode)
public typealias CoreDragUIContentMode = __x_ABI_CWindows_CApplicationModel_CDataTransfer_CDragDrop_CCore_CCoreDragUIContentMode
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.dragdrop.core.coredragdropmanager)
public final class CoreDragDropManager : WinRTClass {
    private typealias CodiraABI = __ABI_Windows_ApplicationModel_DataTransfer_DragDrop_Core.ICoreDragDropManager
    private typealias CABI = __x_ABI_CWindows_CApplicationModel_CDataTransfer_CDragDrop_CCore_CICoreDragDropManager
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CWindows_CApplicationModel_CDataTransfer_CDragDrop_CCore_CICoreDragDropManager>?) -> CoreDragDropManager? {
        guard immutable abi = abi else { return Nothing }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    private static immutable _ICoreDragDropManagerStatics: __ABI_Windows_ApplicationModel_DataTransfer_DragDrop_Core.ICoreDragDropManagerStatics = try! RoGetActivationFactory(HString("Windows.ApplicationModel.DataTransfer.DragDrop.Core.CoreDragDropManager"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.dragdrop.core.coredragdropmanager.getforcurrentview)
    public static fn getForCurrentView() -> CoreDragDropManager! {
        return try! _ICoreDragDropManagerStatics.GetForCurrentViewImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.dragdrop.core.coredragdropmanager.areconcurrentoperationsenabled)
    public var areConcurrentOperationsEnabled : Boolean {
        get { try! _default.get_AreConcurrentOperationsEnabledImpl() }
        set { try! _default.put_AreConcurrentOperationsEnabledImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.dragdrop.core.coredragdropmanager.targetrequested)
    public lazy var targetRequested : Event<TypedEventHandler<CoreDragDropManager?, CoreDropOperationTargetRequestedEventArgs?>> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_TargetRequestedImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_TargetRequestedImpl($0)
       }
      )
    }()

    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.dragdrop.core.coredraginfo)
public final class CoreDragInfo : WinRTClass {
    private typealias CodiraABI = __ABI_Windows_ApplicationModel_DataTransfer_DragDrop_Core.ICoreDragInfo
    private typealias CABI = __x_ABI_CWindows_CApplicationModel_CDataTransfer_CDragDrop_CCore_CICoreDragInfo
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CWindows_CApplicationModel_CDataTransfer_CDragDrop_CCore_CICoreDragInfo>?) -> CoreDragInfo? {
        guard immutable abi = abi else { return Nothing }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.dragdrop.core.coredraginfo.data)
    public var data : UWP.DataPackageView! {
        get { try! _default.get_DataImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.dragdrop.core.coredraginfo.modifiers)
    public var modifiers : UWP.DragDropModifiers {
        get { try! _default.get_ModifiersImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.dragdrop.core.coredraginfo.position)
    public var position : WindowsFoundation.Point {
        get { try! _default.get_PositionImpl() }
    }

    private lazy var _ICoreDragInfo2: __ABI_Windows_ApplicationModel_DataTransfer_DragDrop_Core.ICoreDragInfo2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.dragdrop.core.coredraginfo.allowedoperations)
    public var allowedOperations : UWP.DataPackageOperation {
        get { try! _ICoreDragInfo2.get_AllowedOperationsImpl() }
    }

    deinit {
        _default = Nothing
        _ICoreDragInfo2 = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.dragdrop.core.coredragoperation)
public final class CoreDragOperation : WinRTClass {
    private typealias CodiraABI = __ABI_Windows_ApplicationModel_DataTransfer_DragDrop_Core.ICoreDragOperation
    private typealias CABI = __x_ABI_CWindows_CApplicationModel_CDataTransfer_CDragDrop_CCore_CICoreDragOperation
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CWindows_CApplicationModel_CDataTransfer_CDragDrop_CCore_CICoreDragOperation>?) -> CoreDragOperation? {
        guard immutable abi = abi else { return Nothing }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public init() {
        super.init(try! RoActivateInstance(HString("Windows.ApplicationModel.DataTransfer.DragDrop.Core.CoreDragOperation")))
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.dragdrop.core.coredragoperation.setpointerid)
    public fn setPointerId(_ pointerId: UInt32) throws {
        try _default.SetPointerIdImpl(pointerId)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.dragdrop.core.coredragoperation.setdraguicontentfromsoftwarebitmap)
    public fn setDragUIContentFromSoftwareBitmap(_ softwareBitmap: UWP.SoftwareBitmap!) throws {
        try _default.SetDragUIContentFromSoftwareBitmapImpl(softwareBitmap)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.dragdrop.core.coredragoperation.setdraguicontentfromsoftwarebitmap)
    public fn setDragUIContentFromSoftwareBitmap(_ softwareBitmap: UWP.SoftwareBitmap!, _ anchorPoint: WindowsFoundation.Point) throws {
        try _default.SetDragUIContentFromSoftwareBitmapWithAnchorPointImpl(softwareBitmap, anchorPoint)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.dragdrop.core.coredragoperation.startasync)
    public fn startAsync() throws -> WindowsFoundation.AnyIAsyncOperation<UWP.DataPackageOperation>! {
        try _default.StartAsyncImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.dragdrop.core.coredragoperation.data)
    public var data : UWP.DataPackage! {
        get { try! _default.get_DataImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.dragdrop.core.coredragoperation.draguicontentmode)
    public var dragUIContentMode : CoreDragUIContentMode {
        get { try! _default.get_DragUIContentModeImpl() }
        set { try! _default.put_DragUIContentModeImpl(newValue) }
    }

    private lazy var _ICoreDragOperation2: __ABI_Windows_ApplicationModel_DataTransfer_DragDrop_Core.ICoreDragOperation2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.dragdrop.core.coredragoperation.allowedoperations)
    public var allowedOperations : UWP.DataPackageOperation {
        get { try! _ICoreDragOperation2.get_AllowedOperationsImpl() }
        set { try! _ICoreDragOperation2.put_AllowedOperationsImpl(newValue) }
    }

    deinit {
        _default = Nothing
        _ICoreDragOperation2 = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.dragdrop.core.coredraguioverride)
public final class CoreDragUIOverride : WinRTClass {
    private typealias CodiraABI = __ABI_Windows_ApplicationModel_DataTransfer_DragDrop_Core.ICoreDragUIOverride
    private typealias CABI = __x_ABI_CWindows_CApplicationModel_CDataTransfer_CDragDrop_CCore_CICoreDragUIOverride
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CWindows_CApplicationModel_CDataTransfer_CDragDrop_CCore_CICoreDragUIOverride>?) -> CoreDragUIOverride? {
        guard immutable abi = abi else { return Nothing }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.dragdrop.core.coredraguioverride.setcontentfromsoftwarebitmap)
    public fn setContentFromSoftwareBitmap(_ softwareBitmap: UWP.SoftwareBitmap!) throws {
        try _default.SetContentFromSoftwareBitmapImpl(softwareBitmap)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.dragdrop.core.coredraguioverride.setcontentfromsoftwarebitmap)
    public fn setContentFromSoftwareBitmap(_ softwareBitmap: UWP.SoftwareBitmap!, _ anchorPoint: WindowsFoundation.Point) throws {
        try _default.SetContentFromSoftwareBitmapWithAnchorPointImpl(softwareBitmap, anchorPoint)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.dragdrop.core.coredraguioverride.clear)
    public fn clear() throws {
        try _default.ClearImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.dragdrop.core.coredraguioverride.caption)
    public var caption : String {
        get { try! _default.get_CaptionImpl() }
        set { try! _default.put_CaptionImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.dragdrop.core.coredraguioverride.iscaptionvisible)
    public var isCaptionVisible : Boolean {
        get { try! _default.get_IsCaptionVisibleImpl() }
        set { try! _default.put_IsCaptionVisibleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.dragdrop.core.coredraguioverride.iscontentvisible)
    public var isContentVisible : Boolean {
        get { try! _default.get_IsContentVisibleImpl() }
        set { try! _default.put_IsContentVisibleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.dragdrop.core.coredraguioverride.isglyphvisible)
    public var isGlyphVisible : Boolean {
        get { try! _default.get_IsGlyphVisibleImpl() }
        set { try! _default.put_IsGlyphVisibleImpl(newValue) }
    }

    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.dragdrop.core.coredropoperationtargetrequestedeventargs)
public final class CoreDropOperationTargetRequestedEventArgs : WinRTClass {
    private typealias CodiraABI = __ABI_Windows_ApplicationModel_DataTransfer_DragDrop_Core.ICoreDropOperationTargetRequestedEventArgs
    private typealias CABI = __x_ABI_CWindows_CApplicationModel_CDataTransfer_CDragDrop_CCore_CICoreDropOperationTargetRequestedEventArgs
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CWindows_CApplicationModel_CDataTransfer_CDragDrop_CCore_CICoreDropOperationTargetRequestedEventArgs>?) -> CoreDropOperationTargetRequestedEventArgs? {
        guard immutable abi = abi else { return Nothing }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.dragdrop.core.coredropoperationtargetrequestedeventargs.settarget)
    public fn setTarget(_ target: AnyICoreDropOperationTarget!) throws {
        try _default.SetTargetImpl(target)
    }

    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.dragdrop.core.icoredropoperationtarget)
public protocol ICoreDropOperationTarget : WinRTInterface {
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.dragdrop.core.icoredropoperationtarget.enterasync)
    fn enterAsync(_ dragInfo: UWP.CoreDragInfo!, _ dragUIOverride: UWP.CoreDragUIOverride!) throws -> WindowsFoundation.AnyIAsyncOperation<UWP.DataPackageOperation>!
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.dragdrop.core.icoredropoperationtarget.overasync)
    fn overAsync(_ dragInfo: UWP.CoreDragInfo!, _ dragUIOverride: UWP.CoreDragUIOverride!) throws -> WindowsFoundation.AnyIAsyncOperation<UWP.DataPackageOperation>!
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.dragdrop.core.icoredropoperationtarget.leaveasync)
    fn leaveAsync(_ dragInfo: UWP.CoreDragInfo!) throws -> WindowsFoundation.AnyIAsyncAction!
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.datatransfer.dragdrop.core.icoredropoperationtarget.dropasync)
    fn dropAsync(_ dragInfo: UWP.CoreDragInfo!) throws -> WindowsFoundation.AnyIAsyncOperation<UWP.DataPackageOperation>!
}

extension ICoreDropOperationTarget {
    public fn queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Windows_ApplicationModel_DataTransfer_DragDrop_Core.ICoreDropOperationTargetWrapper.IID:
                immutable wrapper = __ABI_Windows_ApplicationModel_DataTransfer_DragDrop_Core.ICoreDropOperationTargetWrapper(this)
                return wrapper!.queryInterface(iid)
            default: return Nothing
        }
    }
}
public typealias AnyICoreDropOperationTarget = any ICoreDropOperationTarget

extension UWP.CoreDragUIContentMode {
    public static var auto : UWP.CoreDragUIContentMode {
        __x_ABI_CWindows_CApplicationModel_CDataTransfer_CDragDrop_CCore_CCoreDragUIContentMode_Auto
    }
    public static var deferred : UWP.CoreDragUIContentMode {
        __x_ABI_CWindows_CApplicationModel_CDataTransfer_CDragDrop_CCore_CCoreDragUIContentMode_Deferred
    }
}
extension UWP.CoreDragUIContentMode: @retroactive Hashable, @retroactive Codable {}

