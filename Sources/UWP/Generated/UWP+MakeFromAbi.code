// WARNING: Please don't edit this file. It was generated by Codira/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

fileprivate fn makeIEnteredBackgroundEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    immutable swiftAbi: __ABI_Windows_ApplicationModel.IEnteredBackgroundEventArgs = try! abi.QueryInterface()
    return __IMPL_Windows_ApplicationModel.IEnteredBackgroundEventArgsBridge.from(abi: RawPointer(swiftAbi))!
}

fileprivate fn makeILeavingBackgroundEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    immutable swiftAbi: __ABI_Windows_ApplicationModel.ILeavingBackgroundEventArgs = try! abi.QueryInterface()
    return __IMPL_Windows_ApplicationModel.ILeavingBackgroundEventArgsBridge.from(abi: RawPointer(swiftAbi))!
}

fileprivate fn makeISuspendingDeferralFrom(abi: WindowsFoundation.IInspectable) -> Any {
    immutable swiftAbi: __ABI_Windows_ApplicationModel.ISuspendingDeferral = try! abi.QueryInterface()
    return __IMPL_Windows_ApplicationModel.ISuspendingDeferralBridge.from(abi: RawPointer(swiftAbi))!
}

fileprivate fn makeISuspendingEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    immutable swiftAbi: __ABI_Windows_ApplicationModel.ISuspendingEventArgs = try! abi.QueryInterface()
    return __IMPL_Windows_ApplicationModel.ISuspendingEventArgsBridge.from(abi: RawPointer(swiftAbi))!
}

fileprivate fn makeISuspendingOperationFrom(abi: WindowsFoundation.IInspectable) -> Any {
    immutable swiftAbi: __ABI_Windows_ApplicationModel.ISuspendingOperation = try! abi.QueryInterface()
    return __IMPL_Windows_ApplicationModel.ISuspendingOperationBridge.from(abi: RawPointer(swiftAbi))!
}

fileprivate fn makeIActivatedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    immutable swiftAbi: __ABI_Windows_ApplicationModel_Activation.IActivatedEventArgs = try! abi.QueryInterface()
    return __IMPL_Windows_ApplicationModel_Activation.IActivatedEventArgsBridge.from(abi: RawPointer(swiftAbi))!
}

fileprivate fn makeIActivatedEventArgsWithUserFrom(abi: WindowsFoundation.IInspectable) -> Any {
    immutable swiftAbi: __ABI_Windows_ApplicationModel_Activation.IActivatedEventArgsWithUser = try! abi.QueryInterface()
    return __IMPL_Windows_ApplicationModel_Activation.IActivatedEventArgsWithUserBridge.from(abi: RawPointer(swiftAbi))!
}

fileprivate fn makeIApplicationViewActivatedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    immutable swiftAbi: __ABI_Windows_ApplicationModel_Activation.IApplicationViewActivatedEventArgs = try! abi.QueryInterface()
    return __IMPL_Windows_ApplicationModel_Activation.IApplicationViewActivatedEventArgsBridge.from(abi: RawPointer(swiftAbi))!
}

fileprivate fn makeIBackgroundActivatedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    immutable swiftAbi: __ABI_Windows_ApplicationModel_Activation.IBackgroundActivatedEventArgs = try! abi.QueryInterface()
    return __IMPL_Windows_ApplicationModel_Activation.IBackgroundActivatedEventArgsBridge.from(abi: RawPointer(swiftAbi))!
}

fileprivate fn makeILaunchActivatedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    immutable swiftAbi: __ABI_Windows_ApplicationModel_Activation.ILaunchActivatedEventArgs = try! abi.QueryInterface()
    return __IMPL_Windows_ApplicationModel_Activation.ILaunchActivatedEventArgsBridge.from(abi: RawPointer(swiftAbi))!
}

fileprivate fn makeILaunchActivatedEventArgs2From(abi: WindowsFoundation.IInspectable) -> Any {
    immutable swiftAbi: __ABI_Windows_ApplicationModel_Activation.ILaunchActivatedEventArgs2 = try! abi.QueryInterface()
    return __IMPL_Windows_ApplicationModel_Activation.ILaunchActivatedEventArgs2Bridge.from(abi: RawPointer(swiftAbi))!
}

fileprivate fn makeIPrelaunchActivatedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    immutable swiftAbi: __ABI_Windows_ApplicationModel_Activation.IPrelaunchActivatedEventArgs = try! abi.QueryInterface()
    return __IMPL_Windows_ApplicationModel_Activation.IPrelaunchActivatedEventArgsBridge.from(abi: RawPointer(swiftAbi))!
}

fileprivate fn makeIProtocolActivatedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    immutable swiftAbi: __ABI_Windows_ApplicationModel_Activation.IProtocolActivatedEventArgs = try! abi.QueryInterface()
    return __IMPL_Windows_ApplicationModel_Activation.IProtocolActivatedEventArgsBridge.from(abi: RawPointer(swiftAbi))!
}

fileprivate fn makeIProtocolActivatedEventArgsWithCallerPackageFamilyNameAndDataFrom(abi: WindowsFoundation.IInspectable) -> Any {
    immutable swiftAbi: __ABI_Windows_ApplicationModel_Activation.IProtocolActivatedEventArgsWithCallerPackageFamilyNameAndData = try! abi.QueryInterface()
    return __IMPL_Windows_ApplicationModel_Activation.IProtocolActivatedEventArgsWithCallerPackageFamilyNameAndDataBridge.from(abi: RawPointer(swiftAbi))!
}

fileprivate fn makeIViewSwitcherProviderFrom(abi: WindowsFoundation.IInspectable) -> Any {
    immutable swiftAbi: __ABI_Windows_ApplicationModel_Activation.IViewSwitcherProvider = try! abi.QueryInterface()
    return __IMPL_Windows_ApplicationModel_Activation.IViewSwitcherProviderBridge.from(abi: RawPointer(swiftAbi))!
}

fileprivate fn makeIBackgroundTaskInstanceFrom(abi: WindowsFoundation.IInspectable) -> Any {
    immutable swiftAbi: __ABI_Windows_ApplicationModel_Background.IBackgroundTaskInstance = try! abi.QueryInterface()
    return __IMPL_Windows_ApplicationModel_Background.IBackgroundTaskInstanceBridge.from(abi: RawPointer(swiftAbi))!
}

fileprivate fn makeIBackgroundTaskRegistrationFrom(abi: WindowsFoundation.IInspectable) -> Any {
    immutable swiftAbi: __ABI_Windows_ApplicationModel_Background.IBackgroundTaskRegistration = try! abi.QueryInterface()
    return __IMPL_Windows_ApplicationModel_Background.IBackgroundTaskRegistrationBridge.from(abi: RawPointer(swiftAbi))!
}

fileprivate fn makeIBackgroundTaskRegistration2From(abi: WindowsFoundation.IInspectable) -> Any {
    immutable swiftAbi: __ABI_Windows_ApplicationModel_Background.IBackgroundTaskRegistration2 = try! abi.QueryInterface()
    return __IMPL_Windows_ApplicationModel_Background.IBackgroundTaskRegistration2Bridge.from(abi: RawPointer(swiftAbi))!
}

fileprivate fn makeIBackgroundTaskRegistration3From(abi: WindowsFoundation.IInspectable) -> Any {
    immutable swiftAbi: __ABI_Windows_ApplicationModel_Background.IBackgroundTaskRegistration3 = try! abi.QueryInterface()
    return __IMPL_Windows_ApplicationModel_Background.IBackgroundTaskRegistration3Bridge.from(abi: RawPointer(swiftAbi))!
}

fileprivate fn makeIBackgroundTriggerFrom(abi: WindowsFoundation.IInspectable) -> Any {
    immutable swiftAbi: __ABI_Windows_ApplicationModel_Background.IBackgroundTrigger = try! abi.QueryInterface()
    return __IMPL_Windows_ApplicationModel_Background.IBackgroundTriggerBridge.from(abi: RawPointer(swiftAbi))!
}

fileprivate fn makeICoreApplicationUnhandledErrorFrom(abi: WindowsFoundation.IInspectable) -> Any {
    immutable swiftAbi: __ABI_Windows_ApplicationModel_Core.ICoreApplicationUnhandledError = try! abi.QueryInterface()
    return __IMPL_Windows_ApplicationModel_Core.ICoreApplicationUnhandledErrorBridge.from(abi: RawPointer(swiftAbi))!
}

fileprivate fn makeIFrameworkViewFrom(abi: WindowsFoundation.IInspectable) -> Any {
    immutable swiftAbi: __ABI_Windows_ApplicationModel_Core.IFrameworkView = try! abi.QueryInterface()
    return __IMPL_Windows_ApplicationModel_Core.IFrameworkViewBridge.from(abi: RawPointer(swiftAbi))!
}

fileprivate fn makeIFrameworkViewSourceFrom(abi: WindowsFoundation.IInspectable) -> Any {
    immutable swiftAbi: __ABI_Windows_ApplicationModel_Core.IFrameworkViewSource = try! abi.QueryInterface()
    return __IMPL_Windows_ApplicationModel_Core.IFrameworkViewSourceBridge.from(abi: RawPointer(swiftAbi))!
}

fileprivate fn makeICoreDropOperationTargetFrom(abi: WindowsFoundation.IInspectable) -> Any {
    immutable swiftAbi: __ABI_Windows_ApplicationModel_DataTransfer_DragDrop_Core.ICoreDropOperationTarget = try! abi.QueryInterface()
    return __IMPL_Windows_ApplicationModel_DataTransfer_DragDrop_Core.ICoreDropOperationTargetBridge.from(abi: RawPointer(swiftAbi))!
}

fileprivate fn makeIDevicePairingSettingsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    immutable swiftAbi: __ABI_Windows_Devices_Enumeration.IDevicePairingSettings = try! abi.QueryInterface()
    return __IMPL_Windows_Devices_Enumeration.IDevicePairingSettingsBridge.from(abi: RawPointer(swiftAbi))!
}

fileprivate fn makeIGeometrySource2DFrom(abi: WindowsFoundation.IInspectable) -> Any {
    immutable swiftAbi: __ABI_Windows_Graphics.IGeometrySource2D = try! abi.QueryInterface()
    return __IMPL_Windows_Graphics.IGeometrySource2DBridge.from(abi: RawPointer(swiftAbi))!
}

fileprivate fn makeIDirect3DSurfaceFrom(abi: WindowsFoundation.IInspectable) -> Any {
    immutable swiftAbi: __ABI_Windows_Graphics_DirectX_Direct3D11.IDirect3DSurface = try! abi.QueryInterface()
    return __IMPL_Windows_Graphics_DirectX_Direct3D11.IDirect3DSurfaceBridge.from(abi: RawPointer(swiftAbi))!
}

fileprivate fn makeIGraphicsEffectFrom(abi: WindowsFoundation.IInspectable) -> Any {
    immutable swiftAbi: __ABI_Windows_Graphics_Effects.IGraphicsEffect = try! abi.QueryInterface()
    return __IMPL_Windows_Graphics_Effects.IGraphicsEffectBridge.from(abi: RawPointer(swiftAbi))!
}

fileprivate fn makeIGraphicsEffectSourceFrom(abi: WindowsFoundation.IInspectable) -> Any {
    immutable swiftAbi: __ABI_Windows_Graphics_Effects.IGraphicsEffectSource = try! abi.QueryInterface()
    return __IMPL_Windows_Graphics_Effects.IGraphicsEffectSourceBridge.from(abi: RawPointer(swiftAbi))!
}

fileprivate fn makeIBitmapFrameFrom(abi: WindowsFoundation.IInspectable) -> Any {
    immutable swiftAbi: __ABI_Windows_Graphics_Imaging.IBitmapFrame = try! abi.QueryInterface()
    return __IMPL_Windows_Graphics_Imaging.IBitmapFrameBridge.from(abi: RawPointer(swiftAbi))!
}

fileprivate fn makeIBitmapFrameWithSoftwareBitmapFrom(abi: WindowsFoundation.IInspectable) -> Any {
    immutable swiftAbi: __ABI_Windows_Graphics_Imaging.IBitmapFrameWithSoftwareBitmap = try! abi.QueryInterface()
    return __IMPL_Windows_Graphics_Imaging.IBitmapFrameWithSoftwareBitmapBridge.from(abi: RawPointer(swiftAbi))!
}

fileprivate fn makeIBitmapPropertiesViewFrom(abi: WindowsFoundation.IInspectable) -> Any {
    immutable swiftAbi: __ABI_Windows_Graphics_Imaging.IBitmapPropertiesView = try! abi.QueryInterface()
    return __IMPL_Windows_Graphics_Imaging.IBitmapPropertiesViewBridge.from(abi: RawPointer(swiftAbi))!
}

fileprivate fn makeIMediaCueFrom(abi: WindowsFoundation.IInspectable) -> Any {
    immutable swiftAbi: __ABI_Windows_Media_Core.IMediaCue = try! abi.QueryInterface()
    return __IMPL_Windows_Media_Core.IMediaCueBridge.from(abi: RawPointer(swiftAbi))!
}

fileprivate fn makeIMediaSourceFrom(abi: WindowsFoundation.IInspectable) -> Any {
    immutable swiftAbi: __ABI_Windows_Media_Core.IMediaSource = try! abi.QueryInterface()
    return __IMPL_Windows_Media_Core.IMediaSourceBridge.from(abi: RawPointer(swiftAbi))!
}

fileprivate fn makeIMediaStreamDescriptorFrom(abi: WindowsFoundation.IInspectable) -> Any {
    immutable swiftAbi: __ABI_Windows_Media_Core.IMediaStreamDescriptor = try! abi.QueryInterface()
    return __IMPL_Windows_Media_Core.IMediaStreamDescriptorBridge.from(abi: RawPointer(swiftAbi))!
}

fileprivate fn makeIMediaTrackFrom(abi: WindowsFoundation.IInspectable) -> Any {
    immutable swiftAbi: __ABI_Windows_Media_Core.IMediaTrack = try! abi.QueryInterface()
    return __IMPL_Windows_Media_Core.IMediaTrackBridge.from(abi: RawPointer(swiftAbi))!
}

fileprivate fn makeISingleSelectMediaTrackListFrom(abi: WindowsFoundation.IInspectable) -> Any {
    immutable swiftAbi: __ABI_Windows_Media_Core.ISingleSelectMediaTrackList = try! abi.QueryInterface()
    return __IMPL_Windows_Media_Core.ISingleSelectMediaTrackListBridge.from(abi: RawPointer(swiftAbi))!
}

fileprivate fn makeIMediaDeviceControllerFrom(abi: WindowsFoundation.IInspectable) -> Any {
    immutable swiftAbi: __ABI_Windows_Media_Devices.IMediaDeviceController = try! abi.QueryInterface()
    return __IMPL_Windows_Media_Devices.IMediaDeviceControllerBridge.from(abi: RawPointer(swiftAbi))!
}

fileprivate fn makeIMediaEncodingPropertiesFrom(abi: WindowsFoundation.IInspectable) -> Any {
    immutable swiftAbi: __ABI_Windows_Media_MediaProperties.IMediaEncodingProperties = try! abi.QueryInterface()
    return __IMPL_Windows_Media_MediaProperties.IMediaEncodingPropertiesBridge.from(abi: RawPointer(swiftAbi))!
}

fileprivate fn makeIMediaPlaybackSourceFrom(abi: WindowsFoundation.IInspectable) -> Any {
    immutable swiftAbi: __ABI_Windows_Media_Playback.IMediaPlaybackSource = try! abi.QueryInterface()
    return __IMPL_Windows_Media_Playback.IMediaPlaybackSourceBridge.from(abi: RawPointer(swiftAbi))!
}

fileprivate fn makeIMediaProtectionServiceRequestFrom(abi: WindowsFoundation.IInspectable) -> Any {
    immutable swiftAbi: __ABI_Windows_Media_Protection.IMediaProtectionServiceRequest = try! abi.QueryInterface()
    return __IMPL_Windows_Media_Protection.IMediaProtectionServiceRequestBridge.from(abi: RawPointer(swiftAbi))!
}

fileprivate fn makeIBackgroundTransferOperationFrom(abi: WindowsFoundation.IInspectable) -> Any {
    immutable swiftAbi: __ABI_Windows_Networking_BackgroundTransfer.IBackgroundTransferOperation = try! abi.QueryInterface()
    return __IMPL_Windows_Networking_BackgroundTransfer.IBackgroundTransferOperationBridge.from(abi: RawPointer(swiftAbi))!
}

fileprivate fn makeIBackgroundTransferOperationPriorityFrom(abi: WindowsFoundation.IInspectable) -> Any {
    immutable swiftAbi: __ABI_Windows_Networking_BackgroundTransfer.IBackgroundTransferOperationPriority = try! abi.QueryInterface()
    return __IMPL_Windows_Networking_BackgroundTransfer.IBackgroundTransferOperationPriorityBridge.from(abi: RawPointer(swiftAbi))!
}

fileprivate fn makeIStorageFileFrom(abi: WindowsFoundation.IInspectable) -> Any {
    immutable swiftAbi: __ABI_Windows_Storage.IStorageFile = try! abi.QueryInterface()
    return __IMPL_Windows_Storage.IStorageFileBridge.from(abi: RawPointer(swiftAbi))!
}

fileprivate fn makeIStorageFile2From(abi: WindowsFoundation.IInspectable) -> Any {
    immutable swiftAbi: __ABI_Windows_Storage.IStorageFile2 = try! abi.QueryInterface()
    return __IMPL_Windows_Storage.IStorageFile2Bridge.from(abi: RawPointer(swiftAbi))!
}

fileprivate fn makeIStorageFilePropertiesWithAvailabilityFrom(abi: WindowsFoundation.IInspectable) -> Any {
    immutable swiftAbi: __ABI_Windows_Storage.IStorageFilePropertiesWithAvailability = try! abi.QueryInterface()
    return __IMPL_Windows_Storage.IStorageFilePropertiesWithAvailabilityBridge.from(abi: RawPointer(swiftAbi))!
}

fileprivate fn makeIStorageFolderFrom(abi: WindowsFoundation.IInspectable) -> Any {
    immutable swiftAbi: __ABI_Windows_Storage.IStorageFolder = try! abi.QueryInterface()
    return __IMPL_Windows_Storage.IStorageFolderBridge.from(abi: RawPointer(swiftAbi))!
}

fileprivate fn makeIStorageFolder2From(abi: WindowsFoundation.IInspectable) -> Any {
    immutable swiftAbi: __ABI_Windows_Storage.IStorageFolder2 = try! abi.QueryInterface()
    return __IMPL_Windows_Storage.IStorageFolder2Bridge.from(abi: RawPointer(swiftAbi))!
}

fileprivate fn makeIStorageItemFrom(abi: WindowsFoundation.IInspectable) -> Any {
    immutable swiftAbi: __ABI_Windows_Storage.IStorageItem = try! abi.QueryInterface()
    return __IMPL_Windows_Storage.IStorageItemBridge.from(abi: RawPointer(swiftAbi))!
}

fileprivate fn makeIStorageItem2From(abi: WindowsFoundation.IInspectable) -> Any {
    immutable swiftAbi: __ABI_Windows_Storage.IStorageItem2 = try! abi.QueryInterface()
    return __IMPL_Windows_Storage.IStorageItem2Bridge.from(abi: RawPointer(swiftAbi))!
}

fileprivate fn makeIStorageItemPropertiesFrom(abi: WindowsFoundation.IInspectable) -> Any {
    immutable swiftAbi: __ABI_Windows_Storage.IStorageItemProperties = try! abi.QueryInterface()
    return __IMPL_Windows_Storage.IStorageItemPropertiesBridge.from(abi: RawPointer(swiftAbi))!
}

fileprivate fn makeIStorageItemProperties2From(abi: WindowsFoundation.IInspectable) -> Any {
    immutable swiftAbi: __ABI_Windows_Storage.IStorageItemProperties2 = try! abi.QueryInterface()
    return __IMPL_Windows_Storage.IStorageItemProperties2Bridge.from(abi: RawPointer(swiftAbi))!
}

fileprivate fn makeIStorageItemPropertiesWithProviderFrom(abi: WindowsFoundation.IInspectable) -> Any {
    immutable swiftAbi: __ABI_Windows_Storage.IStorageItemPropertiesWithProvider = try! abi.QueryInterface()
    return __IMPL_Windows_Storage.IStorageItemPropertiesWithProviderBridge.from(abi: RawPointer(swiftAbi))!
}

fileprivate fn makeIStreamedFileDataRequestFrom(abi: WindowsFoundation.IInspectable) -> Any {
    immutable swiftAbi: __ABI_Windows_Storage.IStreamedFileDataRequest = try! abi.QueryInterface()
    return __IMPL_Windows_Storage.IStreamedFileDataRequestBridge.from(abi: RawPointer(swiftAbi))!
}

fileprivate fn makeIStorageItemExtraPropertiesFrom(abi: WindowsFoundation.IInspectable) -> Any {
    immutable swiftAbi: __ABI_Windows_Storage_FileProperties.IStorageItemExtraProperties = try! abi.QueryInterface()
    return __IMPL_Windows_Storage_FileProperties.IStorageItemExtraPropertiesBridge.from(abi: RawPointer(swiftAbi))!
}

fileprivate fn makeIStorageFolderQueryOperationsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    immutable swiftAbi: __ABI_Windows_Storage_Search.IStorageFolderQueryOperations = try! abi.QueryInterface()
    return __IMPL_Windows_Storage_Search.IStorageFolderQueryOperationsBridge.from(abi: RawPointer(swiftAbi))!
}

fileprivate fn makeIStorageQueryResultBaseFrom(abi: WindowsFoundation.IInspectable) -> Any {
    immutable swiftAbi: __ABI_Windows_Storage_Search.IStorageQueryResultBase = try! abi.QueryInterface()
    return __IMPL_Windows_Storage_Search.IStorageQueryResultBaseBridge.from(abi: RawPointer(swiftAbi))!
}

fileprivate fn makeIBufferFrom(abi: WindowsFoundation.IInspectable) -> Any {
    immutable swiftAbi: __ABI_Windows_Storage_Streams.IBuffer = try! abi.QueryInterface()
    return __IMPL_Windows_Storage_Streams.IBufferBridge.from(abi: RawPointer(swiftAbi))!
}

fileprivate fn makeIContentTypeProviderFrom(abi: WindowsFoundation.IInspectable) -> Any {
    immutable swiftAbi: __ABI_Windows_Storage_Streams.IContentTypeProvider = try! abi.QueryInterface()
    return __IMPL_Windows_Storage_Streams.IContentTypeProviderBridge.from(abi: RawPointer(swiftAbi))!
}

fileprivate fn makeIDataReaderFrom(abi: WindowsFoundation.IInspectable) -> Any {
    immutable swiftAbi: __ABI_Windows_Storage_Streams.IDataReader = try! abi.QueryInterface()
    return __IMPL_Windows_Storage_Streams.IDataReaderBridge.from(abi: RawPointer(swiftAbi))!
}

fileprivate fn makeIDataWriterFrom(abi: WindowsFoundation.IInspectable) -> Any {
    immutable swiftAbi: __ABI_Windows_Storage_Streams.IDataWriter = try! abi.QueryInterface()
    return __IMPL_Windows_Storage_Streams.IDataWriterBridge.from(abi: RawPointer(swiftAbi))!
}

fileprivate fn makeIInputStreamFrom(abi: WindowsFoundation.IInspectable) -> Any {
    immutable swiftAbi: __ABI_Windows_Storage_Streams.IInputStream = try! abi.QueryInterface()
    return __IMPL_Windows_Storage_Streams.IInputStreamBridge.from(abi: RawPointer(swiftAbi))!
}

fileprivate fn makeIInputStreamReferenceFrom(abi: WindowsFoundation.IInspectable) -> Any {
    immutable swiftAbi: __ABI_Windows_Storage_Streams.IInputStreamReference = try! abi.QueryInterface()
    return __IMPL_Windows_Storage_Streams.IInputStreamReferenceBridge.from(abi: RawPointer(swiftAbi))!
}

fileprivate fn makeIOutputStreamFrom(abi: WindowsFoundation.IInspectable) -> Any {
    immutable swiftAbi: __ABI_Windows_Storage_Streams.IOutputStream = try! abi.QueryInterface()
    return __IMPL_Windows_Storage_Streams.IOutputStreamBridge.from(abi: RawPointer(swiftAbi))!
}

fileprivate fn makeIRandomAccessStreamFrom(abi: WindowsFoundation.IInspectable) -> Any {
    immutable swiftAbi: __ABI_Windows_Storage_Streams.IRandomAccessStream = try! abi.QueryInterface()
    return __IMPL_Windows_Storage_Streams.IRandomAccessStreamBridge.from(abi: RawPointer(swiftAbi))!
}

fileprivate fn makeIRandomAccessStreamReferenceFrom(abi: WindowsFoundation.IInspectable) -> Any {
    immutable swiftAbi: __ABI_Windows_Storage_Streams.IRandomAccessStreamReference = try! abi.QueryInterface()
    return __IMPL_Windows_Storage_Streams.IRandomAccessStreamReferenceBridge.from(abi: RawPointer(swiftAbi))!
}

fileprivate fn makeIRandomAccessStreamWithContentTypeFrom(abi: WindowsFoundation.IInspectable) -> Any {
    immutable swiftAbi: __ABI_Windows_Storage_Streams.IRandomAccessStreamWithContentType = try! abi.QueryInterface()
    return __IMPL_Windows_Storage_Streams.IRandomAccessStreamWithContentTypeBridge.from(abi: RawPointer(swiftAbi))!
}

fileprivate fn makeILauncherViewOptionsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    immutable swiftAbi: __ABI_Windows_System.ILauncherViewOptions = try! abi.QueryInterface()
    return __IMPL_Windows_System.ILauncherViewOptionsBridge.from(abi: RawPointer(swiftAbi))!
}

fileprivate fn makeIAnimationObjectFrom(abi: WindowsFoundation.IInspectable) -> Any {
    immutable swiftAbi: __ABI_Windows_UI_Composition.IAnimationObject = try! abi.QueryInterface()
    return __IMPL_Windows_UI_Composition.IAnimationObjectBridge.from(abi: RawPointer(swiftAbi))!
}

fileprivate fn makeICompositionAnimationBaseFrom(abi: WindowsFoundation.IInspectable) -> Any {
    immutable swiftAbi: __ABI_Windows_UI_Composition.ICompositionAnimationBase = try! abi.QueryInterface()
    return __IMPL_Windows_UI_Composition.ICompositionAnimationBaseBridge.from(abi: RawPointer(swiftAbi))!
}

fileprivate fn makeICompositionSurfaceFrom(abi: WindowsFoundation.IInspectable) -> Any {
    immutable swiftAbi: __ABI_Windows_UI_Composition.ICompositionSurface = try! abi.QueryInterface()
    return __IMPL_Windows_UI_Composition.ICompositionSurfaceBridge.from(abi: RawPointer(swiftAbi))!
}

fileprivate fn makeIVisualElementFrom(abi: WindowsFoundation.IInspectable) -> Any {
    immutable swiftAbi: __ABI_Windows_UI_Composition.IVisualElement = try! abi.QueryInterface()
    return __IMPL_Windows_UI_Composition.IVisualElementBridge.from(abi: RawPointer(swiftAbi))!
}

fileprivate fn makeICoreAcceleratorKeysFrom(abi: WindowsFoundation.IInspectable) -> Any {
    immutable swiftAbi: __ABI_Windows_UI_Core.ICoreAcceleratorKeys = try! abi.QueryInterface()
    return __IMPL_Windows_UI_Core.ICoreAcceleratorKeysBridge.from(abi: RawPointer(swiftAbi))!
}

fileprivate fn makeICorePointerRedirectorFrom(abi: WindowsFoundation.IInspectable) -> Any {
    immutable swiftAbi: __ABI_Windows_UI_Core.ICorePointerRedirector = try! abi.QueryInterface()
    return __IMPL_Windows_UI_Core.ICorePointerRedirectorBridge.from(abi: RawPointer(swiftAbi))!
}

fileprivate fn makeICoreWindowFrom(abi: WindowsFoundation.IInspectable) -> Any {
    immutable swiftAbi: __ABI_Windows_UI_Core.ICoreWindow = try! abi.QueryInterface()
    return __IMPL_Windows_UI_Core.ICoreWindowBridge.from(abi: RawPointer(swiftAbi))!
}

fileprivate fn makeICoreWindowEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    immutable swiftAbi: __ABI_Windows_UI_Core.ICoreWindowEventArgs = try! abi.QueryInterface()
    return __IMPL_Windows_UI_Core.ICoreWindowEventArgsBridge.from(abi: RawPointer(swiftAbi))!
}

fileprivate fn makeIPointerPointTransformFrom(abi: WindowsFoundation.IInspectable) -> Any {
    immutable swiftAbi: __ABI_Windows_UI_Input.IPointerPointTransform = try! abi.QueryInterface()
    return __IMPL_Windows_UI_Input.IPointerPointTransformBridge.from(abi: RawPointer(swiftAbi))!
}

fileprivate fn makeIHttpContentFrom(abi: WindowsFoundation.IInspectable) -> Any {
    immutable swiftAbi: __ABI_Windows_Web_Http.IHttpContent = try! abi.QueryInterface()
    return __IMPL_Windows_Web_Http.IHttpContentBridge.from(abi: RawPointer(swiftAbi))!
}

fileprivate fn makeIHttpFilterFrom(abi: WindowsFoundation.IInspectable) -> Any {
    immutable swiftAbi: __ABI_Windows_Web_Http_Filters.IHttpFilter = try! abi.QueryInterface()
    return __IMPL_Windows_Web_Http_Filters.IHttpFilterBridge.from(abi: RawPointer(swiftAbi))!
}

fileprivate fn makeAppDisplayInfoFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return AppDisplayInfo(fromAbi: abi)
}

fileprivate fn makeAppInfoFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return AppInfo(fromAbi: abi)
}

fileprivate fn makeAppInstallerInfoFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return AppInstallerInfo(fromAbi: abi)
}

fileprivate fn makeEnteredBackgroundEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return EnteredBackgroundEventArgs(fromAbi: abi)
}

fileprivate fn makeLeavingBackgroundEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return LeavingBackgroundEventArgs(fromAbi: abi)
}

fileprivate fn makePackageFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return Package(fromAbi: abi)
}

fileprivate fn makePackageContentGroupFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return PackageContentGroup(fromAbi: abi)
}

fileprivate fn makePackageIdFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return PackageId(fromAbi: abi)
}

fileprivate fn makePackageStatusFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return PackageStatus(fromAbi: abi)
}

fileprivate fn makePackageUpdateAvailabilityResultFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return PackageUpdateAvailabilityResult(fromAbi: abi)
}

fileprivate fn makeSuspendingDeferralFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return SuspendingDeferral(fromAbi: abi)
}

fileprivate fn makeSuspendingEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return SuspendingEventArgs(fromAbi: abi)
}

fileprivate fn makeSuspendingOperationFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return SuspendingOperation(fromAbi: abi)
}

fileprivate fn makeBackgroundActivatedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return BackgroundActivatedEventArgs(fromAbi: abi)
}

fileprivate fn makeLaunchActivatedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return LaunchActivatedEventArgs(fromAbi: abi)
}

fileprivate fn makeProtocolActivatedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ProtocolActivatedEventArgs(fromAbi: abi)
}

fileprivate fn makeSplashScreenFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return SplashScreen(fromAbi: abi)
}

fileprivate fn makeTileActivatedInfoFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return TileActivatedInfo(fromAbi: abi)
}

fileprivate fn makeBackgroundTaskCompletedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return BackgroundTaskCompletedEventArgs(fromAbi: abi)
}

fileprivate fn makeBackgroundTaskDeferralFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return BackgroundTaskDeferral(fromAbi: abi)
}

fileprivate fn makeBackgroundTaskProgressEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return BackgroundTaskProgressEventArgs(fromAbi: abi)
}

fileprivate fn makeBackgroundTaskRegistrationFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return BackgroundTaskRegistration(fromAbi: abi)
}

fileprivate fn makeBackgroundTaskRegistrationGroupFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return BackgroundTaskRegistrationGroup(fromAbi: abi)
}

fileprivate fn makeDeviceWatcherTriggerFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return DeviceWatcherTrigger(fromAbi: abi)
}

fileprivate fn makeAppListEntryFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return AppListEntry(fromAbi: abi)
}

fileprivate fn makeCoreApplicationViewFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CoreApplicationView(fromAbi: abi)
}

fileprivate fn makeCoreApplicationViewTitleBarFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CoreApplicationViewTitleBar(fromAbi: abi)
}

fileprivate fn makeHostedViewClosingEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return HostedViewClosingEventArgs(fromAbi: abi)
}

fileprivate fn makeUnhandledErrorFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return UnhandledError(fromAbi: abi)
}

fileprivate fn makeUnhandledErrorDetectedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return UnhandledErrorDetectedEventArgs(fromAbi: abi)
}

fileprivate fn makeClipboardContentOptionsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ClipboardContentOptions(fromAbi: abi)
}

fileprivate fn makeClipboardHistoryChangedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ClipboardHistoryChangedEventArgs(fromAbi: abi)
}

fileprivate fn makeClipboardHistoryItemFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ClipboardHistoryItem(fromAbi: abi)
}

fileprivate fn makeClipboardHistoryItemsResultFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ClipboardHistoryItemsResult(fromAbi: abi)
}

fileprivate fn makeDataPackageFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return DataPackage(fromAbi: abi)
}

fileprivate fn makeDataPackagePropertySetFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return DataPackagePropertySet(fromAbi: abi)
}

fileprivate fn makeDataPackagePropertySetViewFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return DataPackagePropertySetView(fromAbi: abi)
}

fileprivate fn makeDataPackageViewFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return DataPackageView(fromAbi: abi)
}

fileprivate fn makeDataProviderDeferralFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return DataProviderDeferral(fromAbi: abi)
}

fileprivate fn makeDataProviderRequestFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return DataProviderRequest(fromAbi: abi)
}

fileprivate fn makeDataRequestFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return DataRequest(fromAbi: abi)
}

fileprivate fn makeDataRequestDeferralFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return DataRequestDeferral(fromAbi: abi)
}

fileprivate fn makeDataRequestedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return DataRequestedEventArgs(fromAbi: abi)
}

fileprivate fn makeDataTransferManagerFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return DataTransferManager(fromAbi: abi)
}

fileprivate fn makeOperationCompletedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return OperationCompletedEventArgs(fromAbi: abi)
}

fileprivate fn makeShareCompletedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ShareCompletedEventArgs(fromAbi: abi)
}

fileprivate fn makeShareProviderFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ShareProvider(fromAbi: abi)
}

fileprivate fn makeShareProviderOperationFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ShareProviderOperation(fromAbi: abi)
}

fileprivate fn makeShareProvidersRequestedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ShareProvidersRequestedEventArgs(fromAbi: abi)
}

fileprivate fn makeShareTargetInfoFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ShareTargetInfo(fromAbi: abi)
}

fileprivate fn makeShareUIOptionsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ShareUIOptions(fromAbi: abi)
}

fileprivate fn makeTargetApplicationChosenEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return TargetApplicationChosenEventArgs(fromAbi: abi)
}

fileprivate fn makeCoreDragDropManagerFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CoreDragDropManager(fromAbi: abi)
}

fileprivate fn makeCoreDragInfoFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CoreDragInfo(fromAbi: abi)
}

fileprivate fn makeCoreDragOperationFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CoreDragOperation(fromAbi: abi)
}

fileprivate fn makeCoreDragUIOverrideFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CoreDragUIOverride(fromAbi: abi)
}

fileprivate fn makeCoreDropOperationTargetRequestedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CoreDropOperationTargetRequestedEventArgs(fromAbi: abi)
}

fileprivate fn makeDeviceInformationFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return DeviceInformation(fromAbi: abi)
}

fileprivate fn makeDeviceInformationCollectionFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return DeviceInformationCollection(fromAbi: abi)
}

fileprivate fn makeDeviceInformationCustomPairingFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return DeviceInformationCustomPairing(fromAbi: abi)
}

fileprivate fn makeDeviceInformationPairingFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return DeviceInformationPairing(fromAbi: abi)
}

fileprivate fn makeDeviceInformationUpdateFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return DeviceInformationUpdate(fromAbi: abi)
}

fileprivate fn makeDevicePairingRequestedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return DevicePairingRequestedEventArgs(fromAbi: abi)
}

fileprivate fn makeDevicePairingResultFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return DevicePairingResult(fromAbi: abi)
}

fileprivate fn makeDeviceThumbnailFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return DeviceThumbnail(fromAbi: abi)
}

fileprivate fn makeDeviceUnpairingResultFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return DeviceUnpairingResult(fromAbi: abi)
}

fileprivate fn makeDeviceWatcherFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return DeviceWatcher(fromAbi: abi)
}

fileprivate fn makeEnclosureLocationFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return EnclosureLocation(fromAbi: abi)
}

fileprivate fn makePointerDeviceFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return PointerDevice(fromAbi: abi)
}

fileprivate fn makeLanguageFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return Language(fromAbi: abi)
}

fileprivate fn makeBitmapBufferFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return BitmapBuffer(fromAbi: abi)
}

fileprivate fn makeBitmapCodecInformationFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return BitmapCodecInformation(fromAbi: abi)
}

fileprivate fn makeBitmapDecoderFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return BitmapDecoder(fromAbi: abi)
}

fileprivate fn makeBitmapEncoderFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return BitmapEncoder(fromAbi: abi)
}

fileprivate fn makeBitmapFrameFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return BitmapFrame(fromAbi: abi)
}

fileprivate fn makeBitmapPropertiesFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return BitmapProperties(fromAbi: abi)
}

fileprivate fn makeBitmapPropertiesViewFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return BitmapPropertiesView(fromAbi: abi)
}

fileprivate fn makeBitmapPropertySetFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return BitmapPropertySet(fromAbi: abi)
}

fileprivate fn makeBitmapTransformFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return BitmapTransform(fromAbi: abi)
}

fileprivate fn makeBitmapTypedValueFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return BitmapTypedValue(fromAbi: abi)
}

fileprivate fn makeImageStreamFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ImageStream(fromAbi: abi)
}

fileprivate fn makePixelDataProviderFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return PixelDataProvider(fromAbi: abi)
}

fileprivate fn makeSoftwareBitmapFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return SoftwareBitmap(fromAbi: abi)
}

fileprivate fn makeDeploymentResultFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return DeploymentResult(fromAbi: abi)
}

fileprivate fn makePackageManagerFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return PackageManager(fromAbi: abi)
}

fileprivate fn makePackageManagerDebugSettingsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return PackageManagerDebugSettings(fromAbi: abi)
}

fileprivate fn makePackageUserInformationFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return PackageUserInformation(fromAbi: abi)
}

fileprivate fn makePackageVolumeFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return PackageVolume(fromAbi: abi)
}

fileprivate fn makeAutoRepeatModeChangeRequestedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return AutoRepeatModeChangeRequestedEventArgs(fromAbi: abi)
}

fileprivate fn makeImageDisplayPropertiesFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ImageDisplayProperties(fromAbi: abi)
}

fileprivate fn makeMediaTimelineControllerFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return MediaTimelineController(fromAbi: abi)
}

fileprivate fn makeMediaTimelineControllerFailedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return MediaTimelineControllerFailedEventArgs(fromAbi: abi)
}

fileprivate fn makeMusicDisplayPropertiesFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return MusicDisplayProperties(fromAbi: abi)
}

fileprivate fn makePlaybackPositionChangeRequestedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return PlaybackPositionChangeRequestedEventArgs(fromAbi: abi)
}

fileprivate fn makePlaybackRateChangeRequestedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return PlaybackRateChangeRequestedEventArgs(fromAbi: abi)
}

fileprivate fn makeShuffleEnabledChangeRequestedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ShuffleEnabledChangeRequestedEventArgs(fromAbi: abi)
}

fileprivate fn makeSystemMediaTransportControlsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return SystemMediaTransportControls(fromAbi: abi)
}

fileprivate fn makeSystemMediaTransportControlsButtonPressedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return SystemMediaTransportControlsButtonPressedEventArgs(fromAbi: abi)
}

fileprivate fn makeSystemMediaTransportControlsDisplayUpdaterFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return SystemMediaTransportControlsDisplayUpdater(fromAbi: abi)
}

fileprivate fn makeSystemMediaTransportControlsPropertyChangedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return SystemMediaTransportControlsPropertyChangedEventArgs(fromAbi: abi)
}

fileprivate fn makeSystemMediaTransportControlsTimelinePropertiesFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return SystemMediaTransportControlsTimelineProperties(fromAbi: abi)
}

fileprivate fn makeVideoDisplayPropertiesFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return VideoDisplayProperties(fromAbi: abi)
}

fileprivate fn makeAudioStateMonitorFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return AudioStateMonitor(fromAbi: abi)
}

fileprivate fn makeMediaCaptureVideoProfileMediaDescriptionFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return MediaCaptureVideoProfileMediaDescription(fromAbi: abi)
}

fileprivate fn makeDepthMediaFrameFormatFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return DepthMediaFrameFormat(fromAbi: abi)
}

fileprivate fn makeMediaFrameFormatFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return MediaFrameFormat(fromAbi: abi)
}

fileprivate fn makeMediaFrameSourceFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return MediaFrameSource(fromAbi: abi)
}

fileprivate fn makeMediaFrameSourceControllerFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return MediaFrameSourceController(fromAbi: abi)
}

fileprivate fn makeMediaFrameSourceGetPropertyResultFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return MediaFrameSourceGetPropertyResult(fromAbi: abi)
}

fileprivate fn makeMediaFrameSourceGroupFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return MediaFrameSourceGroup(fromAbi: abi)
}

fileprivate fn makeMediaFrameSourceInfoFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return MediaFrameSourceInfo(fromAbi: abi)
}

fileprivate fn makeVideoMediaFrameFormatFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return VideoMediaFrameFormat(fromAbi: abi)
}

fileprivate fn makeCastingSourceFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CastingSource(fromAbi: abi)
}

fileprivate fn makeAudioTrackFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return AudioTrack(fromAbi: abi)
}

fileprivate fn makeAudioTrackOpenFailedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return AudioTrackOpenFailedEventArgs(fromAbi: abi)
}

fileprivate fn makeAudioTrackSupportInfoFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return AudioTrackSupportInfo(fromAbi: abi)
}

fileprivate fn makeMediaBinderFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return MediaBinder(fromAbi: abi)
}

fileprivate fn makeMediaBindingEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return MediaBindingEventArgs(fromAbi: abi)
}

fileprivate fn makeMediaCueEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return MediaCueEventArgs(fromAbi: abi)
}

fileprivate fn makeMediaSourceFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return MediaSource(fromAbi: abi)
}

fileprivate fn makeMediaSourceErrorFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return MediaSourceError(fromAbi: abi)
}

fileprivate fn makeMediaSourceOpenOperationCompletedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return MediaSourceOpenOperationCompletedEventArgs(fromAbi: abi)
}

fileprivate fn makeMediaSourceStateChangedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return MediaSourceStateChangedEventArgs(fromAbi: abi)
}

fileprivate fn makeMediaStreamSampleFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return MediaStreamSample(fromAbi: abi)
}

fileprivate fn makeMediaStreamSamplePropertySetFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return MediaStreamSamplePropertySet(fromAbi: abi)
}

fileprivate fn makeMediaStreamSampleProtectionPropertiesFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return MediaStreamSampleProtectionProperties(fromAbi: abi)
}

fileprivate fn makeMediaStreamSourceFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return MediaStreamSource(fromAbi: abi)
}

fileprivate fn makeMediaStreamSourceClosedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return MediaStreamSourceClosedEventArgs(fromAbi: abi)
}

fileprivate fn makeMediaStreamSourceClosedRequestFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return MediaStreamSourceClosedRequest(fromAbi: abi)
}

fileprivate fn makeMediaStreamSourceSampleRenderedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return MediaStreamSourceSampleRenderedEventArgs(fromAbi: abi)
}

fileprivate fn makeMediaStreamSourceSampleRequestFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return MediaStreamSourceSampleRequest(fromAbi: abi)
}

fileprivate fn makeMediaStreamSourceSampleRequestDeferralFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return MediaStreamSourceSampleRequestDeferral(fromAbi: abi)
}

fileprivate fn makeMediaStreamSourceSampleRequestedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return MediaStreamSourceSampleRequestedEventArgs(fromAbi: abi)
}

fileprivate fn makeMediaStreamSourceStartingEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return MediaStreamSourceStartingEventArgs(fromAbi: abi)
}

fileprivate fn makeMediaStreamSourceStartingRequestFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return MediaStreamSourceStartingRequest(fromAbi: abi)
}

fileprivate fn makeMediaStreamSourceStartingRequestDeferralFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return MediaStreamSourceStartingRequestDeferral(fromAbi: abi)
}

fileprivate fn makeMediaStreamSourceSwitchStreamsRequestFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return MediaStreamSourceSwitchStreamsRequest(fromAbi: abi)
}

fileprivate fn makeMediaStreamSourceSwitchStreamsRequestDeferralFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return MediaStreamSourceSwitchStreamsRequestDeferral(fromAbi: abi)
}

fileprivate fn makeMediaStreamSourceSwitchStreamsRequestedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return MediaStreamSourceSwitchStreamsRequestedEventArgs(fromAbi: abi)
}

fileprivate fn makeMseSourceBufferFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return MseSourceBuffer(fromAbi: abi)
}

fileprivate fn makeMseSourceBufferListFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return MseSourceBufferList(fromAbi: abi)
}

fileprivate fn makeMseStreamSourceFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return MseStreamSource(fromAbi: abi)
}

fileprivate fn makeTimedMetadataTrackFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return TimedMetadataTrack(fromAbi: abi)
}

fileprivate fn makeTimedMetadataTrackErrorFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return TimedMetadataTrackError(fromAbi: abi)
}

fileprivate fn makeTimedMetadataTrackFailedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return TimedMetadataTrackFailedEventArgs(fromAbi: abi)
}

fileprivate fn makeTimedTextSourceFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return TimedTextSource(fromAbi: abi)
}

fileprivate fn makeTimedTextSourceResolveResultEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return TimedTextSourceResolveResultEventArgs(fromAbi: abi)
}

fileprivate fn makeVideoTrackFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return VideoTrack(fromAbi: abi)
}

fileprivate fn makeVideoTrackOpenFailedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return VideoTrackOpenFailedEventArgs(fromAbi: abi)
}

fileprivate fn makeVideoTrackSupportInfoFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return VideoTrackSupportInfo(fromAbi: abi)
}

fileprivate fn makeAdvancedPhotoCaptureSettingsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return AdvancedPhotoCaptureSettings(fromAbi: abi)
}

fileprivate fn makeAdvancedPhotoControlFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return AdvancedPhotoControl(fromAbi: abi)
}

fileprivate fn makeAudioDeviceControllerFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return AudioDeviceController(fromAbi: abi)
}

fileprivate fn makeExposureCompensationControlFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ExposureCompensationControl(fromAbi: abi)
}

fileprivate fn makeExposureControlFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ExposureControl(fromAbi: abi)
}

fileprivate fn makeExposurePriorityVideoControlFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ExposurePriorityVideoControl(fromAbi: abi)
}

fileprivate fn makeFlashControlFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return FlashControl(fromAbi: abi)
}

fileprivate fn makeFocusControlFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return FocusControl(fromAbi: abi)
}

fileprivate fn makeFocusSettingsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return FocusSettings(fromAbi: abi)
}

fileprivate fn makeHdrVideoControlFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return HdrVideoControl(fromAbi: abi)
}

fileprivate fn makeInfraredTorchControlFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return InfraredTorchControl(fromAbi: abi)
}

fileprivate fn makeIsoSpeedControlFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return IsoSpeedControl(fromAbi: abi)
}

fileprivate fn makeLowLagPhotoControlFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return LowLagPhotoControl(fromAbi: abi)
}

fileprivate fn makeLowLagPhotoSequenceControlFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return LowLagPhotoSequenceControl(fromAbi: abi)
}

fileprivate fn makeMediaDeviceControlFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return MediaDeviceControl(fromAbi: abi)
}

fileprivate fn makeMediaDeviceControlCapabilitiesFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return MediaDeviceControlCapabilities(fromAbi: abi)
}

fileprivate fn makeOpticalImageStabilizationControlFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return OpticalImageStabilizationControl(fromAbi: abi)
}

fileprivate fn makePhotoConfirmationControlFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return PhotoConfirmationControl(fromAbi: abi)
}

fileprivate fn makeRegionOfInterestFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return RegionOfInterest(fromAbi: abi)
}

fileprivate fn makeRegionsOfInterestControlFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return RegionsOfInterestControl(fromAbi: abi)
}

fileprivate fn makeSceneModeControlFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return SceneModeControl(fromAbi: abi)
}

fileprivate fn makeTorchControlFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return TorchControl(fromAbi: abi)
}

fileprivate fn makeVideoDeviceControllerFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return VideoDeviceController(fromAbi: abi)
}

fileprivate fn makeVideoDeviceControllerGetDevicePropertyResultFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return VideoDeviceControllerGetDevicePropertyResult(fromAbi: abi)
}

fileprivate fn makeVideoTemporalDenoisingControlFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return VideoTemporalDenoisingControl(fromAbi: abi)
}

fileprivate fn makeWhiteBalanceControlFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return WhiteBalanceControl(fromAbi: abi)
}

fileprivate fn makeZoomControlFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ZoomControl(fromAbi: abi)
}

fileprivate fn makeZoomSettingsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ZoomSettings(fromAbi: abi)
}

fileprivate fn makeCameraIntrinsicsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CameraIntrinsics(fromAbi: abi)
}

fileprivate fn makeFrameControlCapabilitiesFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return FrameControlCapabilities(fromAbi: abi)
}

fileprivate fn makeFrameControllerFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return FrameController(fromAbi: abi)
}

fileprivate fn makeFrameExposureCapabilitiesFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return FrameExposureCapabilities(fromAbi: abi)
}

fileprivate fn makeFrameExposureCompensationCapabilitiesFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return FrameExposureCompensationCapabilities(fromAbi: abi)
}

fileprivate fn makeFrameExposureCompensationControlFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return FrameExposureCompensationControl(fromAbi: abi)
}

fileprivate fn makeFrameExposureControlFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return FrameExposureControl(fromAbi: abi)
}

fileprivate fn makeFrameFlashCapabilitiesFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return FrameFlashCapabilities(fromAbi: abi)
}

fileprivate fn makeFrameFlashControlFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return FrameFlashControl(fromAbi: abi)
}

fileprivate fn makeFrameFocusCapabilitiesFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return FrameFocusCapabilities(fromAbi: abi)
}

fileprivate fn makeFrameFocusControlFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return FrameFocusControl(fromAbi: abi)
}

fileprivate fn makeFrameIsoSpeedCapabilitiesFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return FrameIsoSpeedCapabilities(fromAbi: abi)
}

fileprivate fn makeFrameIsoSpeedControlFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return FrameIsoSpeedControl(fromAbi: abi)
}

fileprivate fn makeVariablePhotoSequenceControllerFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return VariablePhotoSequenceController(fromAbi: abi)
}

fileprivate fn makeAudioEncodingPropertiesFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return AudioEncodingProperties(fromAbi: abi)
}

fileprivate fn makeMediaPropertySetFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return MediaPropertySet(fromAbi: abi)
}

fileprivate fn makeMediaRatioFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return MediaRatio(fromAbi: abi)
}

fileprivate fn makeVideoEncodingPropertiesFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return VideoEncodingProperties(fromAbi: abi)
}

fileprivate fn makeCurrentMediaPlaybackItemChangedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CurrentMediaPlaybackItemChangedEventArgs(fromAbi: abi)
}

fileprivate fn makeMediaBreakFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return MediaBreak(fromAbi: abi)
}

fileprivate fn makeMediaBreakEndedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return MediaBreakEndedEventArgs(fromAbi: abi)
}

fileprivate fn makeMediaBreakManagerFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return MediaBreakManager(fromAbi: abi)
}

fileprivate fn makeMediaBreakScheduleFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return MediaBreakSchedule(fromAbi: abi)
}

fileprivate fn makeMediaBreakSeekedOverEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return MediaBreakSeekedOverEventArgs(fromAbi: abi)
}

fileprivate fn makeMediaBreakSkippedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return MediaBreakSkippedEventArgs(fromAbi: abi)
}

fileprivate fn makeMediaBreakStartedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return MediaBreakStartedEventArgs(fromAbi: abi)
}

fileprivate fn makeMediaItemDisplayPropertiesFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return MediaItemDisplayProperties(fromAbi: abi)
}

fileprivate fn makeMediaPlaybackAudioTrackListFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return MediaPlaybackAudioTrackList(fromAbi: abi)
}

fileprivate fn makeMediaPlaybackCommandManagerFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return MediaPlaybackCommandManager(fromAbi: abi)
}

fileprivate fn makeMediaPlaybackCommandManagerAutoRepeatModeReceivedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return MediaPlaybackCommandManagerAutoRepeatModeReceivedEventArgs(fromAbi: abi)
}

fileprivate fn makeMediaPlaybackCommandManagerCommandBehaviorFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return MediaPlaybackCommandManagerCommandBehavior(fromAbi: abi)
}

fileprivate fn makeMediaPlaybackCommandManagerFastForwardReceivedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return MediaPlaybackCommandManagerFastForwardReceivedEventArgs(fromAbi: abi)
}

fileprivate fn makeMediaPlaybackCommandManagerNextReceivedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return MediaPlaybackCommandManagerNextReceivedEventArgs(fromAbi: abi)
}

fileprivate fn makeMediaPlaybackCommandManagerPauseReceivedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return MediaPlaybackCommandManagerPauseReceivedEventArgs(fromAbi: abi)
}

fileprivate fn makeMediaPlaybackCommandManagerPlayReceivedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return MediaPlaybackCommandManagerPlayReceivedEventArgs(fromAbi: abi)
}

fileprivate fn makeMediaPlaybackCommandManagerPositionReceivedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return MediaPlaybackCommandManagerPositionReceivedEventArgs(fromAbi: abi)
}

fileprivate fn makeMediaPlaybackCommandManagerPreviousReceivedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return MediaPlaybackCommandManagerPreviousReceivedEventArgs(fromAbi: abi)
}

fileprivate fn makeMediaPlaybackCommandManagerRateReceivedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return MediaPlaybackCommandManagerRateReceivedEventArgs(fromAbi: abi)
}

fileprivate fn makeMediaPlaybackCommandManagerRewindReceivedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return MediaPlaybackCommandManagerRewindReceivedEventArgs(fromAbi: abi)
}

fileprivate fn makeMediaPlaybackCommandManagerShuffleReceivedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return MediaPlaybackCommandManagerShuffleReceivedEventArgs(fromAbi: abi)
}

fileprivate fn makeMediaPlaybackItemFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return MediaPlaybackItem(fromAbi: abi)
}

fileprivate fn makeMediaPlaybackItemErrorFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return MediaPlaybackItemError(fromAbi: abi)
}

fileprivate fn makeMediaPlaybackItemFailedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return MediaPlaybackItemFailedEventArgs(fromAbi: abi)
}

fileprivate fn makeMediaPlaybackItemOpenedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return MediaPlaybackItemOpenedEventArgs(fromAbi: abi)
}

fileprivate fn makeMediaPlaybackListFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return MediaPlaybackList(fromAbi: abi)
}

fileprivate fn makeMediaPlaybackSessionFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return MediaPlaybackSession(fromAbi: abi)
}

fileprivate fn makeMediaPlaybackSessionOutputDegradationPolicyStateFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return MediaPlaybackSessionOutputDegradationPolicyState(fromAbi: abi)
}

fileprivate fn makeMediaPlaybackSphericalVideoProjectionFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return MediaPlaybackSphericalVideoProjection(fromAbi: abi)
}

fileprivate fn makeMediaPlaybackTimedMetadataTrackListFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return MediaPlaybackTimedMetadataTrackList(fromAbi: abi)
}

fileprivate fn makeMediaPlaybackVideoTrackListFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return MediaPlaybackVideoTrackList(fromAbi: abi)
}

fileprivate fn makeMediaPlayerFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return MediaPlayer(fromAbi: abi)
}

fileprivate fn makeMediaPlayerFailedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return MediaPlayerFailedEventArgs(fromAbi: abi)
}

fileprivate fn makeMediaPlayerRateChangedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return MediaPlayerRateChangedEventArgs(fromAbi: abi)
}

fileprivate fn makeMediaPlayerSurfaceFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return MediaPlayerSurface(fromAbi: abi)
}

fileprivate fn makePlaybackMediaMarkerFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return PlaybackMediaMarker(fromAbi: abi)
}

fileprivate fn makePlaybackMediaMarkerReachedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return PlaybackMediaMarkerReachedEventArgs(fromAbi: abi)
}

fileprivate fn makePlaybackMediaMarkerSequenceFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return PlaybackMediaMarkerSequence(fromAbi: abi)
}

fileprivate fn makeTimedMetadataPresentationModeChangedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return TimedMetadataPresentationModeChangedEventArgs(fromAbi: abi)
}

fileprivate fn makeComponentLoadFailedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ComponentLoadFailedEventArgs(fromAbi: abi)
}

fileprivate fn makeMediaProtectionManagerFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return MediaProtectionManager(fromAbi: abi)
}

fileprivate fn makeMediaProtectionServiceCompletionFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return MediaProtectionServiceCompletion(fromAbi: abi)
}

fileprivate fn makeRevocationAndRenewalInformationFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return RevocationAndRenewalInformation(fromAbi: abi)
}

fileprivate fn makeRevocationAndRenewalItemFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return RevocationAndRenewalItem(fromAbi: abi)
}

fileprivate fn makeServiceRequestedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ServiceRequestedEventArgs(fromAbi: abi)
}

fileprivate fn makeAdaptiveMediaSourceFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return AdaptiveMediaSource(fromAbi: abi)
}

fileprivate fn makeAdaptiveMediaSourceAdvancedSettingsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return AdaptiveMediaSourceAdvancedSettings(fromAbi: abi)
}

fileprivate fn makeAdaptiveMediaSourceCorrelatedTimesFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return AdaptiveMediaSourceCorrelatedTimes(fromAbi: abi)
}

fileprivate fn makeAdaptiveMediaSourceCreationResultFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return AdaptiveMediaSourceCreationResult(fromAbi: abi)
}

fileprivate fn makeAdaptiveMediaSourceDiagnosticAvailableEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return AdaptiveMediaSourceDiagnosticAvailableEventArgs(fromAbi: abi)
}

fileprivate fn makeAdaptiveMediaSourceDiagnosticsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return AdaptiveMediaSourceDiagnostics(fromAbi: abi)
}

fileprivate fn makeAdaptiveMediaSourceDownloadBitrateChangedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return AdaptiveMediaSourceDownloadBitrateChangedEventArgs(fromAbi: abi)
}

fileprivate fn makeAdaptiveMediaSourceDownloadCompletedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return AdaptiveMediaSourceDownloadCompletedEventArgs(fromAbi: abi)
}

fileprivate fn makeAdaptiveMediaSourceDownloadFailedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return AdaptiveMediaSourceDownloadFailedEventArgs(fromAbi: abi)
}

fileprivate fn makeAdaptiveMediaSourceDownloadRequestedDeferralFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return AdaptiveMediaSourceDownloadRequestedDeferral(fromAbi: abi)
}

fileprivate fn makeAdaptiveMediaSourceDownloadRequestedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return AdaptiveMediaSourceDownloadRequestedEventArgs(fromAbi: abi)
}

fileprivate fn makeAdaptiveMediaSourceDownloadResultFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return AdaptiveMediaSourceDownloadResult(fromAbi: abi)
}

fileprivate fn makeAdaptiveMediaSourceDownloadStatisticsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return AdaptiveMediaSourceDownloadStatistics(fromAbi: abi)
}

fileprivate fn makeAdaptiveMediaSourcePlaybackBitrateChangedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return AdaptiveMediaSourcePlaybackBitrateChangedEventArgs(fromAbi: abi)
}

fileprivate fn makeHostNameFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return HostName(fromAbi: abi)
}

fileprivate fn makeBackgroundTransferGroupFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return BackgroundTransferGroup(fromAbi: abi)
}

fileprivate fn makeBackgroundTransferRangesDownloadedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return BackgroundTransferRangesDownloadedEventArgs(fromAbi: abi)
}

fileprivate fn makeDownloadOperationFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return DownloadOperation(fromAbi: abi)
}

fileprivate fn makeResponseInformationFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ResponseInformation(fromAbi: abi)
}

fileprivate fn makeAttributedNetworkUsageFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return AttributedNetworkUsage(fromAbi: abi)
}

fileprivate fn makeConnectionCostFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ConnectionCost(fromAbi: abi)
}

fileprivate fn makeConnectionProfileFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ConnectionProfile(fromAbi: abi)
}

fileprivate fn makeConnectivityIntervalFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ConnectivityInterval(fromAbi: abi)
}

fileprivate fn makeDataPlanStatusFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return DataPlanStatus(fromAbi: abi)
}

fileprivate fn makeDataPlanUsageFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return DataPlanUsage(fromAbi: abi)
}

fileprivate fn makeDataUsageFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return DataUsage(fromAbi: abi)
}

fileprivate fn makeIPInformationFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return IPInformation(fromAbi: abi)
}

fileprivate fn makeNetworkAdapterFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return NetworkAdapter(fromAbi: abi)
}

fileprivate fn makeNetworkItemFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return NetworkItem(fromAbi: abi)
}

fileprivate fn makeNetworkSecuritySettingsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return NetworkSecuritySettings(fromAbi: abi)
}

fileprivate fn makeNetworkUsageFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return NetworkUsage(fromAbi: abi)
}

fileprivate fn makeProviderNetworkUsageFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ProviderNetworkUsage(fromAbi: abi)
}

fileprivate fn makeWlanConnectionProfileDetailsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return WlanConnectionProfileDetails(fromAbi: abi)
}

fileprivate fn makeWwanConnectionProfileDetailsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return WwanConnectionProfileDetails(fromAbi: abi)
}

fileprivate fn makeSpatialCoordinateSystemFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return SpatialCoordinateSystem(fromAbi: abi)
}

fileprivate fn makePasswordCredentialFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return PasswordCredential(fromAbi: abi)
}

fileprivate fn makeCertificateFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return Certificate(fromAbi: abi)
}

fileprivate fn makeCertificateChainFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CertificateChain(fromAbi: abi)
}

fileprivate fn makeCertificateExtensionFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CertificateExtension(fromAbi: abi)
}

fileprivate fn makeCertificateKeyUsagesFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CertificateKeyUsages(fromAbi: abi)
}

fileprivate fn makeChainBuildingParametersFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ChainBuildingParameters(fromAbi: abi)
}

fileprivate fn makeChainValidationParametersFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ChainValidationParameters(fromAbi: abi)
}

fileprivate fn makeSubjectAlternativeNameInfoFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return SubjectAlternativeNameInfo(fromAbi: abi)
}

fileprivate fn makeStorageFileFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return StorageFile(fromAbi: abi)
}

fileprivate fn makeStorageFolderFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return StorageFolder(fromAbi: abi)
}

fileprivate fn makeStorageLibraryChangeFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return StorageLibraryChange(fromAbi: abi)
}

fileprivate fn makeStorageLibraryChangeReaderFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return StorageLibraryChangeReader(fromAbi: abi)
}

fileprivate fn makeStorageLibraryChangeTrackerFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return StorageLibraryChangeTracker(fromAbi: abi)
}

fileprivate fn makeStorageProviderFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return StorageProvider(fromAbi: abi)
}

fileprivate fn makeStorageStreamTransactionFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return StorageStreamTransaction(fromAbi: abi)
}

fileprivate fn makeStreamedFileDataRequestFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return StreamedFileDataRequest(fromAbi: abi)
}

fileprivate fn makeBasicPropertiesFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return BasicProperties(fromAbi: abi)
}

fileprivate fn makeDocumentPropertiesFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return DocumentProperties(fromAbi: abi)
}

fileprivate fn makeImagePropertiesFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ImageProperties(fromAbi: abi)
}

fileprivate fn makeMusicPropertiesFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return MusicProperties(fromAbi: abi)
}

fileprivate fn makeStorageItemContentPropertiesFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return StorageItemContentProperties(fromAbi: abi)
}

fileprivate fn makeStorageItemThumbnailFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return StorageItemThumbnail(fromAbi: abi)
}

fileprivate fn makeVideoPropertiesFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return VideoProperties(fromAbi: abi)
}

fileprivate fn makeFileExtensionVectorFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return FileExtensionVector(fromAbi: abi)
}

fileprivate fn makeFileOpenPickerFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return FileOpenPicker(fromAbi: abi)
}

fileprivate fn makeFilePickerFileTypesOrderedMapFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return FilePickerFileTypesOrderedMap(fromAbi: abi)
}

fileprivate fn makeFilePickerSelectedFilesArrayFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return FilePickerSelectedFilesArray(fromAbi: abi)
}

fileprivate fn makeFileSavePickerFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return FileSavePicker(fromAbi: abi)
}

fileprivate fn makeFolderPickerFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return FolderPicker(fromAbi: abi)
}

fileprivate fn makeQueryOptionsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return QueryOptions(fromAbi: abi)
}

fileprivate fn makeStorageFileQueryResultFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return StorageFileQueryResult(fromAbi: abi)
}

fileprivate fn makeStorageFolderQueryResultFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return StorageFolderQueryResult(fromAbi: abi)
}

fileprivate fn makeStorageItemQueryResultFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return StorageItemQueryResult(fromAbi: abi)
}

fileprivate fn makeBufferFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return Buffer(fromAbi: abi)
}

fileprivate fn makeDataReaderFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return DataReader(fromAbi: abi)
}

fileprivate fn makeDataReaderLoadOperationFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return DataReaderLoadOperation(fromAbi: abi)
}

fileprivate fn makeDataWriterFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return DataWriter(fromAbi: abi)
}

fileprivate fn makeDataWriterStoreOperationFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return DataWriterStoreOperation(fromAbi: abi)
}

fileprivate fn makeFileInputStreamFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return FileInputStream(fromAbi: abi)
}

fileprivate fn makeFileOutputStreamFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return FileOutputStream(fromAbi: abi)
}

fileprivate fn makeFileRandomAccessStreamFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return FileRandomAccessStream(fromAbi: abi)
}

fileprivate fn makeInMemoryRandomAccessStreamFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return InMemoryRandomAccessStream(fromAbi: abi)
}

fileprivate fn makeInputStreamOverStreamFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return InputStreamOverStream(fromAbi: abi)
}

fileprivate fn makeOutputStreamOverStreamFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return OutputStreamOverStream(fromAbi: abi)
}

fileprivate fn makeRandomAccessStreamOverStreamFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return RandomAccessStreamOverStream(fromAbi: abi)
}

fileprivate fn makeRandomAccessStreamReferenceFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return RandomAccessStreamReference(fromAbi: abi)
}

fileprivate fn makeDispatcherQueueFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return DispatcherQueue(fromAbi: abi)
}

fileprivate fn makeDispatcherQueueShutdownStartingEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return DispatcherQueueShutdownStartingEventArgs(fromAbi: abi)
}

fileprivate fn makeDispatcherQueueTimerFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return DispatcherQueueTimer(fromAbi: abi)
}

fileprivate fn makeFolderLauncherOptionsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return FolderLauncherOptions(fromAbi: abi)
}

fileprivate fn makeLaunchUriResultFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return LaunchUriResult(fromAbi: abi)
}

fileprivate fn makeLauncherOptionsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return LauncherOptions(fromAbi: abi)
}

fileprivate fn makeLauncherUIOptionsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return LauncherUIOptions(fromAbi: abi)
}

fileprivate fn makeUserFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return User(fromAbi: abi)
}

fileprivate fn makeUserAuthenticationStatusChangeDeferralFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return UserAuthenticationStatusChangeDeferral(fromAbi: abi)
}

fileprivate fn makeUserAuthenticationStatusChangingEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return UserAuthenticationStatusChangingEventArgs(fromAbi: abi)
}

fileprivate fn makeUserChangedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return UserChangedEventArgs(fromAbi: abi)
}

fileprivate fn makeUserWatcherFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return UserWatcher(fromAbi: abi)
}

fileprivate fn makeUIContextFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return UIContext(fromAbi: abi)
}

fileprivate fn makeAmbientLightFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return AmbientLight(fromAbi: abi)
}

fileprivate fn makeAnimationControllerFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return AnimationController(fromAbi: abi)
}

fileprivate fn makeAnimationPropertyInfoFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return AnimationPropertyInfo(fromAbi: abi)
}

fileprivate fn makeBooleanKeyFrameAnimationFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return BooleanKeyFrameAnimation(fromAbi: abi)
}

fileprivate fn makeBounceScalarNaturalMotionAnimationFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return BounceScalarNaturalMotionAnimation(fromAbi: abi)
}

fileprivate fn makeBounceVector2NaturalMotionAnimationFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return BounceVector2NaturalMotionAnimation(fromAbi: abi)
}

fileprivate fn makeBounceVector3NaturalMotionAnimationFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return BounceVector3NaturalMotionAnimation(fromAbi: abi)
}

fileprivate fn makeColorKeyFrameAnimationFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ColorKeyFrameAnimation(fromAbi: abi)
}

fileprivate fn makeCompositionAnimationFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CompositionAnimation(fromAbi: abi)
}

fileprivate fn makeCompositionAnimationGroupFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CompositionAnimationGroup(fromAbi: abi)
}

fileprivate fn makeCompositionBackdropBrushFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CompositionBackdropBrush(fromAbi: abi)
}

fileprivate fn makeCompositionBatchCompletedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CompositionBatchCompletedEventArgs(fromAbi: abi)
}

fileprivate fn makeCompositionBrushFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CompositionBrush(fromAbi: abi)
}

fileprivate fn makeCompositionCapabilitiesFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CompositionCapabilities(fromAbi: abi)
}

fileprivate fn makeCompositionClipFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CompositionClip(fromAbi: abi)
}

fileprivate fn makeCompositionColorBrushFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CompositionColorBrush(fromAbi: abi)
}

fileprivate fn makeCompositionColorGradientStopFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CompositionColorGradientStop(fromAbi: abi)
}

fileprivate fn makeCompositionColorGradientStopCollectionFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CompositionColorGradientStopCollection(fromAbi: abi)
}

fileprivate fn makeCompositionCommitBatchFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CompositionCommitBatch(fromAbi: abi)
}

fileprivate fn makeCompositionContainerShapeFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CompositionContainerShape(fromAbi: abi)
}

fileprivate fn makeCompositionDrawingSurfaceFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CompositionDrawingSurface(fromAbi: abi)
}

fileprivate fn makeCompositionEasingFunctionFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CompositionEasingFunction(fromAbi: abi)
}

fileprivate fn makeCompositionEffectBrushFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CompositionEffectBrush(fromAbi: abi)
}

fileprivate fn makeCompositionEffectFactoryFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CompositionEffectFactory(fromAbi: abi)
}

fileprivate fn makeCompositionEffectSourceParameterFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CompositionEffectSourceParameter(fromAbi: abi)
}

fileprivate fn makeCompositionEllipseGeometryFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CompositionEllipseGeometry(fromAbi: abi)
}

fileprivate fn makeCompositionGeometricClipFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CompositionGeometricClip(fromAbi: abi)
}

fileprivate fn makeCompositionGeometryFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CompositionGeometry(fromAbi: abi)
}

fileprivate fn makeCompositionGradientBrushFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CompositionGradientBrush(fromAbi: abi)
}

fileprivate fn makeCompositionGraphicsDeviceFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CompositionGraphicsDevice(fromAbi: abi)
}

fileprivate fn makeCompositionLightFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CompositionLight(fromAbi: abi)
}

fileprivate fn makeCompositionLineGeometryFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CompositionLineGeometry(fromAbi: abi)
}

fileprivate fn makeCompositionLinearGradientBrushFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CompositionLinearGradientBrush(fromAbi: abi)
}

fileprivate fn makeCompositionMaskBrushFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CompositionMaskBrush(fromAbi: abi)
}

fileprivate fn makeCompositionMipmapSurfaceFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CompositionMipmapSurface(fromAbi: abi)
}

fileprivate fn makeCompositionNineGridBrushFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CompositionNineGridBrush(fromAbi: abi)
}

fileprivate fn makeCompositionObjectFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CompositionObject(fromAbi: abi)
}

fileprivate fn makeCompositionPathFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CompositionPath(fromAbi: abi)
}

fileprivate fn makeCompositionPathGeometryFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CompositionPathGeometry(fromAbi: abi)
}

fileprivate fn makeCompositionProjectedShadowFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CompositionProjectedShadow(fromAbi: abi)
}

fileprivate fn makeCompositionProjectedShadowCasterFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CompositionProjectedShadowCaster(fromAbi: abi)
}

fileprivate fn makeCompositionProjectedShadowCasterCollectionFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CompositionProjectedShadowCasterCollection(fromAbi: abi)
}

fileprivate fn makeCompositionProjectedShadowReceiverFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CompositionProjectedShadowReceiver(fromAbi: abi)
}

fileprivate fn makeCompositionProjectedShadowReceiverUnorderedCollectionFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CompositionProjectedShadowReceiverUnorderedCollection(fromAbi: abi)
}

fileprivate fn makeCompositionPropertySetFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CompositionPropertySet(fromAbi: abi)
}

fileprivate fn makeCompositionRadialGradientBrushFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CompositionRadialGradientBrush(fromAbi: abi)
}

fileprivate fn makeCompositionRectangleGeometryFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CompositionRectangleGeometry(fromAbi: abi)
}

fileprivate fn makeCompositionRoundedRectangleGeometryFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CompositionRoundedRectangleGeometry(fromAbi: abi)
}

fileprivate fn makeCompositionScopedBatchFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CompositionScopedBatch(fromAbi: abi)
}

fileprivate fn makeCompositionShadowFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CompositionShadow(fromAbi: abi)
}

fileprivate fn makeCompositionShapeFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CompositionShape(fromAbi: abi)
}

fileprivate fn makeCompositionShapeCollectionFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CompositionShapeCollection(fromAbi: abi)
}

fileprivate fn makeCompositionSpriteShapeFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CompositionSpriteShape(fromAbi: abi)
}

fileprivate fn makeCompositionStrokeDashArrayFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CompositionStrokeDashArray(fromAbi: abi)
}

fileprivate fn makeCompositionSurfaceBrushFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CompositionSurfaceBrush(fromAbi: abi)
}

fileprivate fn makeCompositionTargetFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CompositionTarget(fromAbi: abi)
}

fileprivate fn makeCompositionTransformFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CompositionTransform(fromAbi: abi)
}

fileprivate fn makeCompositionViewBoxFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CompositionViewBox(fromAbi: abi)
}

fileprivate fn makeCompositionVirtualDrawingSurfaceFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CompositionVirtualDrawingSurface(fromAbi: abi)
}

fileprivate fn makeCompositionVisualSurfaceFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CompositionVisualSurface(fromAbi: abi)
}

fileprivate fn makeCompositorFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return Compositor(fromAbi: abi)
}

fileprivate fn makeContainerVisualFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ContainerVisual(fromAbi: abi)
}

fileprivate fn makeCubicBezierEasingFunctionFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CubicBezierEasingFunction(fromAbi: abi)
}

fileprivate fn makeDistantLightFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return DistantLight(fromAbi: abi)
}

fileprivate fn makeDropShadowFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return DropShadow(fromAbi: abi)
}

fileprivate fn makeExpressionAnimationFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ExpressionAnimation(fromAbi: abi)
}

fileprivate fn makeImplicitAnimationCollectionFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ImplicitAnimationCollection(fromAbi: abi)
}

fileprivate fn makeInitialValueExpressionCollectionFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return InitialValueExpressionCollection(fromAbi: abi)
}

fileprivate fn makeInsetClipFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return InsetClip(fromAbi: abi)
}

fileprivate fn makeKeyFrameAnimationFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return KeyFrameAnimation(fromAbi: abi)
}

fileprivate fn makeLayerVisualFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return LayerVisual(fromAbi: abi)
}

fileprivate fn makeLinearEasingFunctionFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return LinearEasingFunction(fromAbi: abi)
}

fileprivate fn makeNaturalMotionAnimationFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return NaturalMotionAnimation(fromAbi: abi)
}

fileprivate fn makePathKeyFrameAnimationFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return PathKeyFrameAnimation(fromAbi: abi)
}

fileprivate fn makePointLightFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return PointLight(fromAbi: abi)
}

fileprivate fn makeQuaternionKeyFrameAnimationFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return QuaternionKeyFrameAnimation(fromAbi: abi)
}

fileprivate fn makeRedirectVisualFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return RedirectVisual(fromAbi: abi)
}

fileprivate fn makeRenderingDeviceReplacedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return RenderingDeviceReplacedEventArgs(fromAbi: abi)
}

fileprivate fn makeScalarKeyFrameAnimationFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ScalarKeyFrameAnimation(fromAbi: abi)
}

fileprivate fn makeScalarNaturalMotionAnimationFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ScalarNaturalMotionAnimation(fromAbi: abi)
}

fileprivate fn makeShapeVisualFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ShapeVisual(fromAbi: abi)
}

fileprivate fn makeSpotLightFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return SpotLight(fromAbi: abi)
}

fileprivate fn makeSpringScalarNaturalMotionAnimationFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return SpringScalarNaturalMotionAnimation(fromAbi: abi)
}

fileprivate fn makeSpringVector2NaturalMotionAnimationFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return SpringVector2NaturalMotionAnimation(fromAbi: abi)
}

fileprivate fn makeSpringVector3NaturalMotionAnimationFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return SpringVector3NaturalMotionAnimation(fromAbi: abi)
}

fileprivate fn makeSpriteVisualFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return SpriteVisual(fromAbi: abi)
}

fileprivate fn makeStepEasingFunctionFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return StepEasingFunction(fromAbi: abi)
}

fileprivate fn makeVector2KeyFrameAnimationFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return Vector2KeyFrameAnimation(fromAbi: abi)
}

fileprivate fn makeVector2NaturalMotionAnimationFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return Vector2NaturalMotionAnimation(fromAbi: abi)
}

fileprivate fn makeVector3KeyFrameAnimationFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return Vector3KeyFrameAnimation(fromAbi: abi)
}

fileprivate fn makeVector3NaturalMotionAnimationFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return Vector3NaturalMotionAnimation(fromAbi: abi)
}

fileprivate fn makeVector4KeyFrameAnimationFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return Vector4KeyFrameAnimation(fromAbi: abi)
}

fileprivate fn makeVisualFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return Visual(fromAbi: abi)
}

fileprivate fn makeVisualCollectionFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return VisualCollection(fromAbi: abi)
}

fileprivate fn makeVisualUnorderedCollectionFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return VisualUnorderedCollection(fromAbi: abi)
}

fileprivate fn makeAcceleratorKeyEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return AcceleratorKeyEventArgs(fromAbi: abi)
}

fileprivate fn makeAutomationProviderRequestedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return AutomationProviderRequestedEventArgs(fromAbi: abi)
}

fileprivate fn makeCharacterReceivedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CharacterReceivedEventArgs(fromAbi: abi)
}

fileprivate fn makeClosestInteractiveBoundsRequestedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ClosestInteractiveBoundsRequestedEventArgs(fromAbi: abi)
}

fileprivate fn makeCoreCursorFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CoreCursor(fromAbi: abi)
}

fileprivate fn makeCoreDispatcherFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CoreDispatcher(fromAbi: abi)
}

fileprivate fn makeCoreWindowFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CoreWindow(fromAbi: abi)
}

fileprivate fn makeCoreWindowEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return CoreWindowEventArgs(fromAbi: abi)
}

fileprivate fn makeIdleDispatchedHandlerArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return IdleDispatchedHandlerArgs(fromAbi: abi)
}

fileprivate fn makeInputEnabledEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return InputEnabledEventArgs(fromAbi: abi)
}

fileprivate fn makeKeyEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return KeyEventArgs(fromAbi: abi)
}

fileprivate fn makePointerEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return PointerEventArgs(fromAbi: abi)
}

fileprivate fn makeTouchHitTestingEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return TouchHitTestingEventArgs(fromAbi: abi)
}

fileprivate fn makeVisibilityChangedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return VisibilityChangedEventArgs(fromAbi: abi)
}

fileprivate fn makeWindowActivatedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return WindowActivatedEventArgs(fromAbi: abi)
}

fileprivate fn makeWindowSizeChangedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return WindowSizeChangedEventArgs(fromAbi: abi)
}

fileprivate fn makePointerPointFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return PointerPoint(fromAbi: abi)
}

fileprivate fn makePointerPointPropertiesFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return PointerPointProperties(fromAbi: abi)
}

fileprivate fn makeShownTileNotificationFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ShownTileNotification(fromAbi: abi)
}

fileprivate fn makeFontWeightsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return FontWeights(fromAbi: abi)
}

fileprivate fn makeActivationViewSwitcherFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return ActivationViewSwitcher(fromAbi: abi)
}

fileprivate fn makeUISettingsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return UISettings(fromAbi: abi)
}

fileprivate fn makeUISettingsAutoHideScrollBarsChangedEventArgsFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return UISettingsAutoHideScrollBarsChangedEventArgs(fromAbi: abi)
}

fileprivate fn makeHttpClientFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return HttpClient(fromAbi: abi)
}

fileprivate fn makeHttpGetBufferResultFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return HttpGetBufferResult(fromAbi: abi)
}

fileprivate fn makeHttpGetInputStreamResultFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return HttpGetInputStreamResult(fromAbi: abi)
}

fileprivate fn makeHttpGetStringResultFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return HttpGetStringResult(fromAbi: abi)
}

fileprivate fn makeHttpMethodFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return HttpMethod(fromAbi: abi)
}

fileprivate fn makeHttpRequestMessageFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return HttpRequestMessage(fromAbi: abi)
}

fileprivate fn makeHttpRequestResultFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return HttpRequestResult(fromAbi: abi)
}

fileprivate fn makeHttpResponseMessageFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return HttpResponseMessage(fromAbi: abi)
}

fileprivate fn makeHttpTransportInformationFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return HttpTransportInformation(fromAbi: abi)
}

fileprivate fn makeHttpCacheDirectiveHeaderValueCollectionFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return HttpCacheDirectiveHeaderValueCollection(fromAbi: abi)
}

fileprivate fn makeHttpChallengeHeaderValueFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return HttpChallengeHeaderValue(fromAbi: abi)
}

fileprivate fn makeHttpChallengeHeaderValueCollectionFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return HttpChallengeHeaderValueCollection(fromAbi: abi)
}

fileprivate fn makeHttpConnectionOptionHeaderValueFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return HttpConnectionOptionHeaderValue(fromAbi: abi)
}

fileprivate fn makeHttpConnectionOptionHeaderValueCollectionFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return HttpConnectionOptionHeaderValueCollection(fromAbi: abi)
}

fileprivate fn makeHttpContentCodingHeaderValueFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return HttpContentCodingHeaderValue(fromAbi: abi)
}

fileprivate fn makeHttpContentCodingHeaderValueCollectionFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return HttpContentCodingHeaderValueCollection(fromAbi: abi)
}

fileprivate fn makeHttpContentCodingWithQualityHeaderValueFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return HttpContentCodingWithQualityHeaderValue(fromAbi: abi)
}

fileprivate fn makeHttpContentCodingWithQualityHeaderValueCollectionFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return HttpContentCodingWithQualityHeaderValueCollection(fromAbi: abi)
}

fileprivate fn makeHttpContentDispositionHeaderValueFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return HttpContentDispositionHeaderValue(fromAbi: abi)
}

fileprivate fn makeHttpContentHeaderCollectionFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return HttpContentHeaderCollection(fromAbi: abi)
}

fileprivate fn makeHttpContentRangeHeaderValueFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return HttpContentRangeHeaderValue(fromAbi: abi)
}

fileprivate fn makeHttpCookiePairHeaderValueFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return HttpCookiePairHeaderValue(fromAbi: abi)
}

fileprivate fn makeHttpCookiePairHeaderValueCollectionFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return HttpCookiePairHeaderValueCollection(fromAbi: abi)
}

fileprivate fn makeHttpCredentialsHeaderValueFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return HttpCredentialsHeaderValue(fromAbi: abi)
}

fileprivate fn makeHttpDateOrDeltaHeaderValueFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return HttpDateOrDeltaHeaderValue(fromAbi: abi)
}

fileprivate fn makeHttpExpectationHeaderValueFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return HttpExpectationHeaderValue(fromAbi: abi)
}

fileprivate fn makeHttpExpectationHeaderValueCollectionFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return HttpExpectationHeaderValueCollection(fromAbi: abi)
}

fileprivate fn makeHttpLanguageHeaderValueCollectionFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return HttpLanguageHeaderValueCollection(fromAbi: abi)
}

fileprivate fn makeHttpLanguageRangeWithQualityHeaderValueFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return HttpLanguageRangeWithQualityHeaderValue(fromAbi: abi)
}

fileprivate fn makeHttpLanguageRangeWithQualityHeaderValueCollectionFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return HttpLanguageRangeWithQualityHeaderValueCollection(fromAbi: abi)
}

fileprivate fn makeHttpMediaTypeHeaderValueFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return HttpMediaTypeHeaderValue(fromAbi: abi)
}

fileprivate fn makeHttpMediaTypeWithQualityHeaderValueFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return HttpMediaTypeWithQualityHeaderValue(fromAbi: abi)
}

fileprivate fn makeHttpMediaTypeWithQualityHeaderValueCollectionFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return HttpMediaTypeWithQualityHeaderValueCollection(fromAbi: abi)
}

fileprivate fn makeHttpMethodHeaderValueCollectionFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return HttpMethodHeaderValueCollection(fromAbi: abi)
}

fileprivate fn makeHttpNameValueHeaderValueFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return HttpNameValueHeaderValue(fromAbi: abi)
}

fileprivate fn makeHttpProductHeaderValueFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return HttpProductHeaderValue(fromAbi: abi)
}

fileprivate fn makeHttpProductInfoHeaderValueFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return HttpProductInfoHeaderValue(fromAbi: abi)
}

fileprivate fn makeHttpProductInfoHeaderValueCollectionFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return HttpProductInfoHeaderValueCollection(fromAbi: abi)
}

fileprivate fn makeHttpRequestHeaderCollectionFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return HttpRequestHeaderCollection(fromAbi: abi)
}

fileprivate fn makeHttpResponseHeaderCollectionFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return HttpResponseHeaderCollection(fromAbi: abi)
}

fileprivate fn makeHttpTransferCodingHeaderValueFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return HttpTransferCodingHeaderValue(fromAbi: abi)
}

fileprivate fn makeHttpTransferCodingHeaderValueCollectionFrom(abi: WindowsFoundation.IInspectable) -> Any {
    return HttpTransferCodingHeaderValueCollection(fromAbi: abi)
}

@_spi(__MakeFromAbi_DoNotImport)
public class __MakeFromAbi: MakeFromAbi {
    public static fn from(typeName: String, abi: WindowsFoundation.IInspectable) -> Any? {
        switch typeName {
            case "IEnteredBackgroundEventArgs": return makeIEnteredBackgroundEventArgsFrom(abi: abi)
            case "ILeavingBackgroundEventArgs": return makeILeavingBackgroundEventArgsFrom(abi: abi)
            case "ISuspendingDeferral": return makeISuspendingDeferralFrom(abi: abi)
            case "ISuspendingEventArgs": return makeISuspendingEventArgsFrom(abi: abi)
            case "ISuspendingOperation": return makeISuspendingOperationFrom(abi: abi)
            case "IActivatedEventArgs": return makeIActivatedEventArgsFrom(abi: abi)
            case "IActivatedEventArgsWithUser": return makeIActivatedEventArgsWithUserFrom(abi: abi)
            case "IApplicationViewActivatedEventArgs": return makeIApplicationViewActivatedEventArgsFrom(abi: abi)
            case "IBackgroundActivatedEventArgs": return makeIBackgroundActivatedEventArgsFrom(abi: abi)
            case "ILaunchActivatedEventArgs": return makeILaunchActivatedEventArgsFrom(abi: abi)
            case "ILaunchActivatedEventArgs2": return makeILaunchActivatedEventArgs2From(abi: abi)
            case "IPrelaunchActivatedEventArgs": return makeIPrelaunchActivatedEventArgsFrom(abi: abi)
            case "IProtocolActivatedEventArgs": return makeIProtocolActivatedEventArgsFrom(abi: abi)
            case "IProtocolActivatedEventArgsWithCallerPackageFamilyNameAndData": return makeIProtocolActivatedEventArgsWithCallerPackageFamilyNameAndDataFrom(abi: abi)
            case "IViewSwitcherProvider": return makeIViewSwitcherProviderFrom(abi: abi)
            case "IBackgroundTaskInstance": return makeIBackgroundTaskInstanceFrom(abi: abi)
            case "IBackgroundTaskRegistration": return makeIBackgroundTaskRegistrationFrom(abi: abi)
            case "IBackgroundTaskRegistration2": return makeIBackgroundTaskRegistration2From(abi: abi)
            case "IBackgroundTaskRegistration3": return makeIBackgroundTaskRegistration3From(abi: abi)
            case "IBackgroundTrigger": return makeIBackgroundTriggerFrom(abi: abi)
            case "ICoreApplicationUnhandledError": return makeICoreApplicationUnhandledErrorFrom(abi: abi)
            case "IFrameworkView": return makeIFrameworkViewFrom(abi: abi)
            case "IFrameworkViewSource": return makeIFrameworkViewSourceFrom(abi: abi)
            case "ICoreDropOperationTarget": return makeICoreDropOperationTargetFrom(abi: abi)
            case "IDevicePairingSettings": return makeIDevicePairingSettingsFrom(abi: abi)
            case "IGeometrySource2D": return makeIGeometrySource2DFrom(abi: abi)
            case "IDirect3DSurface": return makeIDirect3DSurfaceFrom(abi: abi)
            case "IGraphicsEffect": return makeIGraphicsEffectFrom(abi: abi)
            case "IGraphicsEffectSource": return makeIGraphicsEffectSourceFrom(abi: abi)
            case "IBitmapFrame": return makeIBitmapFrameFrom(abi: abi)
            case "IBitmapFrameWithSoftwareBitmap": return makeIBitmapFrameWithSoftwareBitmapFrom(abi: abi)
            case "IBitmapPropertiesView": return makeIBitmapPropertiesViewFrom(abi: abi)
            case "IMediaCue": return makeIMediaCueFrom(abi: abi)
            case "IMediaSource": return makeIMediaSourceFrom(abi: abi)
            case "IMediaStreamDescriptor": return makeIMediaStreamDescriptorFrom(abi: abi)
            case "IMediaTrack": return makeIMediaTrackFrom(abi: abi)
            case "ISingleSelectMediaTrackList": return makeISingleSelectMediaTrackListFrom(abi: abi)
            case "IMediaDeviceController": return makeIMediaDeviceControllerFrom(abi: abi)
            case "IMediaEncodingProperties": return makeIMediaEncodingPropertiesFrom(abi: abi)
            case "IMediaPlaybackSource": return makeIMediaPlaybackSourceFrom(abi: abi)
            case "IMediaProtectionServiceRequest": return makeIMediaProtectionServiceRequestFrom(abi: abi)
            case "IBackgroundTransferOperation": return makeIBackgroundTransferOperationFrom(abi: abi)
            case "IBackgroundTransferOperationPriority": return makeIBackgroundTransferOperationPriorityFrom(abi: abi)
            case "IStorageFile": return makeIStorageFileFrom(abi: abi)
            case "IStorageFile2": return makeIStorageFile2From(abi: abi)
            case "IStorageFilePropertiesWithAvailability": return makeIStorageFilePropertiesWithAvailabilityFrom(abi: abi)
            case "IStorageFolder": return makeIStorageFolderFrom(abi: abi)
            case "IStorageFolder2": return makeIStorageFolder2From(abi: abi)
            case "IStorageItem": return makeIStorageItemFrom(abi: abi)
            case "IStorageItem2": return makeIStorageItem2From(abi: abi)
            case "IStorageItemProperties": return makeIStorageItemPropertiesFrom(abi: abi)
            case "IStorageItemProperties2": return makeIStorageItemProperties2From(abi: abi)
            case "IStorageItemPropertiesWithProvider": return makeIStorageItemPropertiesWithProviderFrom(abi: abi)
            case "IStreamedFileDataRequest": return makeIStreamedFileDataRequestFrom(abi: abi)
            case "IStorageItemExtraProperties": return makeIStorageItemExtraPropertiesFrom(abi: abi)
            case "IStorageFolderQueryOperations": return makeIStorageFolderQueryOperationsFrom(abi: abi)
            case "IStorageQueryResultBase": return makeIStorageQueryResultBaseFrom(abi: abi)
            case "IBuffer": return makeIBufferFrom(abi: abi)
            case "IContentTypeProvider": return makeIContentTypeProviderFrom(abi: abi)
            case "IDataReader": return makeIDataReaderFrom(abi: abi)
            case "IDataWriter": return makeIDataWriterFrom(abi: abi)
            case "IInputStream": return makeIInputStreamFrom(abi: abi)
            case "IInputStreamReference": return makeIInputStreamReferenceFrom(abi: abi)
            case "IOutputStream": return makeIOutputStreamFrom(abi: abi)
            case "IRandomAccessStream": return makeIRandomAccessStreamFrom(abi: abi)
            case "IRandomAccessStreamReference": return makeIRandomAccessStreamReferenceFrom(abi: abi)
            case "IRandomAccessStreamWithContentType": return makeIRandomAccessStreamWithContentTypeFrom(abi: abi)
            case "ILauncherViewOptions": return makeILauncherViewOptionsFrom(abi: abi)
            case "IAnimationObject": return makeIAnimationObjectFrom(abi: abi)
            case "ICompositionAnimationBase": return makeICompositionAnimationBaseFrom(abi: abi)
            case "ICompositionSurface": return makeICompositionSurfaceFrom(abi: abi)
            case "IVisualElement": return makeIVisualElementFrom(abi: abi)
            case "ICoreAcceleratorKeys": return makeICoreAcceleratorKeysFrom(abi: abi)
            case "ICorePointerRedirector": return makeICorePointerRedirectorFrom(abi: abi)
            case "ICoreWindow": return makeICoreWindowFrom(abi: abi)
            case "ICoreWindowEventArgs": return makeICoreWindowEventArgsFrom(abi: abi)
            case "IPointerPointTransform": return makeIPointerPointTransformFrom(abi: abi)
            case "IHttpContent": return makeIHttpContentFrom(abi: abi)
            case "IHttpFilter": return makeIHttpFilterFrom(abi: abi)
            case "AppDisplayInfo": return makeAppDisplayInfoFrom(abi: abi)
            case "AppInfo": return makeAppInfoFrom(abi: abi)
            case "AppInstallerInfo": return makeAppInstallerInfoFrom(abi: abi)
            case "EnteredBackgroundEventArgs": return makeEnteredBackgroundEventArgsFrom(abi: abi)
            case "LeavingBackgroundEventArgs": return makeLeavingBackgroundEventArgsFrom(abi: abi)
            case "Package": return makePackageFrom(abi: abi)
            case "PackageContentGroup": return makePackageContentGroupFrom(abi: abi)
            case "PackageId": return makePackageIdFrom(abi: abi)
            case "PackageStatus": return makePackageStatusFrom(abi: abi)
            case "PackageUpdateAvailabilityResult": return makePackageUpdateAvailabilityResultFrom(abi: abi)
            case "SuspendingDeferral": return makeSuspendingDeferralFrom(abi: abi)
            case "SuspendingEventArgs": return makeSuspendingEventArgsFrom(abi: abi)
            case "SuspendingOperation": return makeSuspendingOperationFrom(abi: abi)
            case "BackgroundActivatedEventArgs": return makeBackgroundActivatedEventArgsFrom(abi: abi)
            case "LaunchActivatedEventArgs": return makeLaunchActivatedEventArgsFrom(abi: abi)
            case "ProtocolActivatedEventArgs": return makeProtocolActivatedEventArgsFrom(abi: abi)
            case "SplashScreen": return makeSplashScreenFrom(abi: abi)
            case "TileActivatedInfo": return makeTileActivatedInfoFrom(abi: abi)
            case "BackgroundTaskCompletedEventArgs": return makeBackgroundTaskCompletedEventArgsFrom(abi: abi)
            case "BackgroundTaskDeferral": return makeBackgroundTaskDeferralFrom(abi: abi)
            case "BackgroundTaskProgressEventArgs": return makeBackgroundTaskProgressEventArgsFrom(abi: abi)
            case "BackgroundTaskRegistration": return makeBackgroundTaskRegistrationFrom(abi: abi)
            case "BackgroundTaskRegistrationGroup": return makeBackgroundTaskRegistrationGroupFrom(abi: abi)
            case "DeviceWatcherTrigger": return makeDeviceWatcherTriggerFrom(abi: abi)
            case "AppListEntry": return makeAppListEntryFrom(abi: abi)
            case "CoreApplicationView": return makeCoreApplicationViewFrom(abi: abi)
            case "CoreApplicationViewTitleBar": return makeCoreApplicationViewTitleBarFrom(abi: abi)
            case "HostedViewClosingEventArgs": return makeHostedViewClosingEventArgsFrom(abi: abi)
            case "UnhandledError": return makeUnhandledErrorFrom(abi: abi)
            case "UnhandledErrorDetectedEventArgs": return makeUnhandledErrorDetectedEventArgsFrom(abi: abi)
            case "ClipboardContentOptions": return makeClipboardContentOptionsFrom(abi: abi)
            case "ClipboardHistoryChangedEventArgs": return makeClipboardHistoryChangedEventArgsFrom(abi: abi)
            case "ClipboardHistoryItem": return makeClipboardHistoryItemFrom(abi: abi)
            case "ClipboardHistoryItemsResult": return makeClipboardHistoryItemsResultFrom(abi: abi)
            case "DataPackage": return makeDataPackageFrom(abi: abi)
            case "DataPackagePropertySet": return makeDataPackagePropertySetFrom(abi: abi)
            case "DataPackagePropertySetView": return makeDataPackagePropertySetViewFrom(abi: abi)
            case "DataPackageView": return makeDataPackageViewFrom(abi: abi)
            case "DataProviderDeferral": return makeDataProviderDeferralFrom(abi: abi)
            case "DataProviderRequest": return makeDataProviderRequestFrom(abi: abi)
            case "DataRequest": return makeDataRequestFrom(abi: abi)
            case "DataRequestDeferral": return makeDataRequestDeferralFrom(abi: abi)
            case "DataRequestedEventArgs": return makeDataRequestedEventArgsFrom(abi: abi)
            case "DataTransferManager": return makeDataTransferManagerFrom(abi: abi)
            case "OperationCompletedEventArgs": return makeOperationCompletedEventArgsFrom(abi: abi)
            case "ShareCompletedEventArgs": return makeShareCompletedEventArgsFrom(abi: abi)
            case "ShareProvider": return makeShareProviderFrom(abi: abi)
            case "ShareProviderOperation": return makeShareProviderOperationFrom(abi: abi)
            case "ShareProvidersRequestedEventArgs": return makeShareProvidersRequestedEventArgsFrom(abi: abi)
            case "ShareTargetInfo": return makeShareTargetInfoFrom(abi: abi)
            case "ShareUIOptions": return makeShareUIOptionsFrom(abi: abi)
            case "TargetApplicationChosenEventArgs": return makeTargetApplicationChosenEventArgsFrom(abi: abi)
            case "CoreDragDropManager": return makeCoreDragDropManagerFrom(abi: abi)
            case "CoreDragInfo": return makeCoreDragInfoFrom(abi: abi)
            case "CoreDragOperation": return makeCoreDragOperationFrom(abi: abi)
            case "CoreDragUIOverride": return makeCoreDragUIOverrideFrom(abi: abi)
            case "CoreDropOperationTargetRequestedEventArgs": return makeCoreDropOperationTargetRequestedEventArgsFrom(abi: abi)
            case "DeviceInformation": return makeDeviceInformationFrom(abi: abi)
            case "DeviceInformationCollection": return makeDeviceInformationCollectionFrom(abi: abi)
            case "DeviceInformationCustomPairing": return makeDeviceInformationCustomPairingFrom(abi: abi)
            case "DeviceInformationPairing": return makeDeviceInformationPairingFrom(abi: abi)
            case "DeviceInformationUpdate": return makeDeviceInformationUpdateFrom(abi: abi)
            case "DevicePairingRequestedEventArgs": return makeDevicePairingRequestedEventArgsFrom(abi: abi)
            case "DevicePairingResult": return makeDevicePairingResultFrom(abi: abi)
            case "DeviceThumbnail": return makeDeviceThumbnailFrom(abi: abi)
            case "DeviceUnpairingResult": return makeDeviceUnpairingResultFrom(abi: abi)
            case "DeviceWatcher": return makeDeviceWatcherFrom(abi: abi)
            case "EnclosureLocation": return makeEnclosureLocationFrom(abi: abi)
            case "PointerDevice": return makePointerDeviceFrom(abi: abi)
            case "Language": return makeLanguageFrom(abi: abi)
            case "BitmapBuffer": return makeBitmapBufferFrom(abi: abi)
            case "BitmapCodecInformation": return makeBitmapCodecInformationFrom(abi: abi)
            case "BitmapDecoder": return makeBitmapDecoderFrom(abi: abi)
            case "BitmapEncoder": return makeBitmapEncoderFrom(abi: abi)
            case "BitmapFrame": return makeBitmapFrameFrom(abi: abi)
            case "BitmapProperties": return makeBitmapPropertiesFrom(abi: abi)
            case "BitmapPropertiesView": return makeBitmapPropertiesViewFrom(abi: abi)
            case "BitmapPropertySet": return makeBitmapPropertySetFrom(abi: abi)
            case "BitmapTransform": return makeBitmapTransformFrom(abi: abi)
            case "BitmapTypedValue": return makeBitmapTypedValueFrom(abi: abi)
            case "ImageStream": return makeImageStreamFrom(abi: abi)
            case "PixelDataProvider": return makePixelDataProviderFrom(abi: abi)
            case "SoftwareBitmap": return makeSoftwareBitmapFrom(abi: abi)
            case "DeploymentResult": return makeDeploymentResultFrom(abi: abi)
            case "PackageManager": return makePackageManagerFrom(abi: abi)
            case "PackageManagerDebugSettings": return makePackageManagerDebugSettingsFrom(abi: abi)
            case "PackageUserInformation": return makePackageUserInformationFrom(abi: abi)
            case "PackageVolume": return makePackageVolumeFrom(abi: abi)
            case "AutoRepeatModeChangeRequestedEventArgs": return makeAutoRepeatModeChangeRequestedEventArgsFrom(abi: abi)
            case "ImageDisplayProperties": return makeImageDisplayPropertiesFrom(abi: abi)
            case "MediaTimelineController": return makeMediaTimelineControllerFrom(abi: abi)
            case "MediaTimelineControllerFailedEventArgs": return makeMediaTimelineControllerFailedEventArgsFrom(abi: abi)
            case "MusicDisplayProperties": return makeMusicDisplayPropertiesFrom(abi: abi)
            case "PlaybackPositionChangeRequestedEventArgs": return makePlaybackPositionChangeRequestedEventArgsFrom(abi: abi)
            case "PlaybackRateChangeRequestedEventArgs": return makePlaybackRateChangeRequestedEventArgsFrom(abi: abi)
            case "ShuffleEnabledChangeRequestedEventArgs": return makeShuffleEnabledChangeRequestedEventArgsFrom(abi: abi)
            case "SystemMediaTransportControls": return makeSystemMediaTransportControlsFrom(abi: abi)
            case "SystemMediaTransportControlsButtonPressedEventArgs": return makeSystemMediaTransportControlsButtonPressedEventArgsFrom(abi: abi)
            case "SystemMediaTransportControlsDisplayUpdater": return makeSystemMediaTransportControlsDisplayUpdaterFrom(abi: abi)
            case "SystemMediaTransportControlsPropertyChangedEventArgs": return makeSystemMediaTransportControlsPropertyChangedEventArgsFrom(abi: abi)
            case "SystemMediaTransportControlsTimelineProperties": return makeSystemMediaTransportControlsTimelinePropertiesFrom(abi: abi)
            case "VideoDisplayProperties": return makeVideoDisplayPropertiesFrom(abi: abi)
            case "AudioStateMonitor": return makeAudioStateMonitorFrom(abi: abi)
            case "MediaCaptureVideoProfileMediaDescription": return makeMediaCaptureVideoProfileMediaDescriptionFrom(abi: abi)
            case "DepthMediaFrameFormat": return makeDepthMediaFrameFormatFrom(abi: abi)
            case "MediaFrameFormat": return makeMediaFrameFormatFrom(abi: abi)
            case "MediaFrameSource": return makeMediaFrameSourceFrom(abi: abi)
            case "MediaFrameSourceController": return makeMediaFrameSourceControllerFrom(abi: abi)
            case "MediaFrameSourceGetPropertyResult": return makeMediaFrameSourceGetPropertyResultFrom(abi: abi)
            case "MediaFrameSourceGroup": return makeMediaFrameSourceGroupFrom(abi: abi)
            case "MediaFrameSourceInfo": return makeMediaFrameSourceInfoFrom(abi: abi)
            case "VideoMediaFrameFormat": return makeVideoMediaFrameFormatFrom(abi: abi)
            case "CastingSource": return makeCastingSourceFrom(abi: abi)
            case "AudioTrack": return makeAudioTrackFrom(abi: abi)
            case "AudioTrackOpenFailedEventArgs": return makeAudioTrackOpenFailedEventArgsFrom(abi: abi)
            case "AudioTrackSupportInfo": return makeAudioTrackSupportInfoFrom(abi: abi)
            case "MediaBinder": return makeMediaBinderFrom(abi: abi)
            case "MediaBindingEventArgs": return makeMediaBindingEventArgsFrom(abi: abi)
            case "MediaCueEventArgs": return makeMediaCueEventArgsFrom(abi: abi)
            case "MediaSource": return makeMediaSourceFrom(abi: abi)
            case "MediaSourceError": return makeMediaSourceErrorFrom(abi: abi)
            case "MediaSourceOpenOperationCompletedEventArgs": return makeMediaSourceOpenOperationCompletedEventArgsFrom(abi: abi)
            case "MediaSourceStateChangedEventArgs": return makeMediaSourceStateChangedEventArgsFrom(abi: abi)
            case "MediaStreamSample": return makeMediaStreamSampleFrom(abi: abi)
            case "MediaStreamSamplePropertySet": return makeMediaStreamSamplePropertySetFrom(abi: abi)
            case "MediaStreamSampleProtectionProperties": return makeMediaStreamSampleProtectionPropertiesFrom(abi: abi)
            case "MediaStreamSource": return makeMediaStreamSourceFrom(abi: abi)
            case "MediaStreamSourceClosedEventArgs": return makeMediaStreamSourceClosedEventArgsFrom(abi: abi)
            case "MediaStreamSourceClosedRequest": return makeMediaStreamSourceClosedRequestFrom(abi: abi)
            case "MediaStreamSourceSampleRenderedEventArgs": return makeMediaStreamSourceSampleRenderedEventArgsFrom(abi: abi)
            case "MediaStreamSourceSampleRequest": return makeMediaStreamSourceSampleRequestFrom(abi: abi)
            case "MediaStreamSourceSampleRequestDeferral": return makeMediaStreamSourceSampleRequestDeferralFrom(abi: abi)
            case "MediaStreamSourceSampleRequestedEventArgs": return makeMediaStreamSourceSampleRequestedEventArgsFrom(abi: abi)
            case "MediaStreamSourceStartingEventArgs": return makeMediaStreamSourceStartingEventArgsFrom(abi: abi)
            case "MediaStreamSourceStartingRequest": return makeMediaStreamSourceStartingRequestFrom(abi: abi)
            case "MediaStreamSourceStartingRequestDeferral": return makeMediaStreamSourceStartingRequestDeferralFrom(abi: abi)
            case "MediaStreamSourceSwitchStreamsRequest": return makeMediaStreamSourceSwitchStreamsRequestFrom(abi: abi)
            case "MediaStreamSourceSwitchStreamsRequestDeferral": return makeMediaStreamSourceSwitchStreamsRequestDeferralFrom(abi: abi)
            case "MediaStreamSourceSwitchStreamsRequestedEventArgs": return makeMediaStreamSourceSwitchStreamsRequestedEventArgsFrom(abi: abi)
            case "MseSourceBuffer": return makeMseSourceBufferFrom(abi: abi)
            case "MseSourceBufferList": return makeMseSourceBufferListFrom(abi: abi)
            case "MseStreamSource": return makeMseStreamSourceFrom(abi: abi)
            case "TimedMetadataTrack": return makeTimedMetadataTrackFrom(abi: abi)
            case "TimedMetadataTrackError": return makeTimedMetadataTrackErrorFrom(abi: abi)
            case "TimedMetadataTrackFailedEventArgs": return makeTimedMetadataTrackFailedEventArgsFrom(abi: abi)
            case "TimedTextSource": return makeTimedTextSourceFrom(abi: abi)
            case "TimedTextSourceResolveResultEventArgs": return makeTimedTextSourceResolveResultEventArgsFrom(abi: abi)
            case "VideoTrack": return makeVideoTrackFrom(abi: abi)
            case "VideoTrackOpenFailedEventArgs": return makeVideoTrackOpenFailedEventArgsFrom(abi: abi)
            case "VideoTrackSupportInfo": return makeVideoTrackSupportInfoFrom(abi: abi)
            case "AdvancedPhotoCaptureSettings": return makeAdvancedPhotoCaptureSettingsFrom(abi: abi)
            case "AdvancedPhotoControl": return makeAdvancedPhotoControlFrom(abi: abi)
            case "AudioDeviceController": return makeAudioDeviceControllerFrom(abi: abi)
            case "ExposureCompensationControl": return makeExposureCompensationControlFrom(abi: abi)
            case "ExposureControl": return makeExposureControlFrom(abi: abi)
            case "ExposurePriorityVideoControl": return makeExposurePriorityVideoControlFrom(abi: abi)
            case "FlashControl": return makeFlashControlFrom(abi: abi)
            case "FocusControl": return makeFocusControlFrom(abi: abi)
            case "FocusSettings": return makeFocusSettingsFrom(abi: abi)
            case "HdrVideoControl": return makeHdrVideoControlFrom(abi: abi)
            case "InfraredTorchControl": return makeInfraredTorchControlFrom(abi: abi)
            case "IsoSpeedControl": return makeIsoSpeedControlFrom(abi: abi)
            case "LowLagPhotoControl": return makeLowLagPhotoControlFrom(abi: abi)
            case "LowLagPhotoSequenceControl": return makeLowLagPhotoSequenceControlFrom(abi: abi)
            case "MediaDeviceControl": return makeMediaDeviceControlFrom(abi: abi)
            case "MediaDeviceControlCapabilities": return makeMediaDeviceControlCapabilitiesFrom(abi: abi)
            case "OpticalImageStabilizationControl": return makeOpticalImageStabilizationControlFrom(abi: abi)
            case "PhotoConfirmationControl": return makePhotoConfirmationControlFrom(abi: abi)
            case "RegionOfInterest": return makeRegionOfInterestFrom(abi: abi)
            case "RegionsOfInterestControl": return makeRegionsOfInterestControlFrom(abi: abi)
            case "SceneModeControl": return makeSceneModeControlFrom(abi: abi)
            case "TorchControl": return makeTorchControlFrom(abi: abi)
            case "VideoDeviceController": return makeVideoDeviceControllerFrom(abi: abi)
            case "VideoDeviceControllerGetDevicePropertyResult": return makeVideoDeviceControllerGetDevicePropertyResultFrom(abi: abi)
            case "VideoTemporalDenoisingControl": return makeVideoTemporalDenoisingControlFrom(abi: abi)
            case "WhiteBalanceControl": return makeWhiteBalanceControlFrom(abi: abi)
            case "ZoomControl": return makeZoomControlFrom(abi: abi)
            case "ZoomSettings": return makeZoomSettingsFrom(abi: abi)
            case "CameraIntrinsics": return makeCameraIntrinsicsFrom(abi: abi)
            case "FrameControlCapabilities": return makeFrameControlCapabilitiesFrom(abi: abi)
            case "FrameController": return makeFrameControllerFrom(abi: abi)
            case "FrameExposureCapabilities": return makeFrameExposureCapabilitiesFrom(abi: abi)
            case "FrameExposureCompensationCapabilities": return makeFrameExposureCompensationCapabilitiesFrom(abi: abi)
            case "FrameExposureCompensationControl": return makeFrameExposureCompensationControlFrom(abi: abi)
            case "FrameExposureControl": return makeFrameExposureControlFrom(abi: abi)
            case "FrameFlashCapabilities": return makeFrameFlashCapabilitiesFrom(abi: abi)
            case "FrameFlashControl": return makeFrameFlashControlFrom(abi: abi)
            case "FrameFocusCapabilities": return makeFrameFocusCapabilitiesFrom(abi: abi)
            case "FrameFocusControl": return makeFrameFocusControlFrom(abi: abi)
            case "FrameIsoSpeedCapabilities": return makeFrameIsoSpeedCapabilitiesFrom(abi: abi)
            case "FrameIsoSpeedControl": return makeFrameIsoSpeedControlFrom(abi: abi)
            case "VariablePhotoSequenceController": return makeVariablePhotoSequenceControllerFrom(abi: abi)
            case "AudioEncodingProperties": return makeAudioEncodingPropertiesFrom(abi: abi)
            case "MediaPropertySet": return makeMediaPropertySetFrom(abi: abi)
            case "MediaRatio": return makeMediaRatioFrom(abi: abi)
            case "VideoEncodingProperties": return makeVideoEncodingPropertiesFrom(abi: abi)
            case "CurrentMediaPlaybackItemChangedEventArgs": return makeCurrentMediaPlaybackItemChangedEventArgsFrom(abi: abi)
            case "MediaBreak": return makeMediaBreakFrom(abi: abi)
            case "MediaBreakEndedEventArgs": return makeMediaBreakEndedEventArgsFrom(abi: abi)
            case "MediaBreakManager": return makeMediaBreakManagerFrom(abi: abi)
            case "MediaBreakSchedule": return makeMediaBreakScheduleFrom(abi: abi)
            case "MediaBreakSeekedOverEventArgs": return makeMediaBreakSeekedOverEventArgsFrom(abi: abi)
            case "MediaBreakSkippedEventArgs": return makeMediaBreakSkippedEventArgsFrom(abi: abi)
            case "MediaBreakStartedEventArgs": return makeMediaBreakStartedEventArgsFrom(abi: abi)
            case "MediaItemDisplayProperties": return makeMediaItemDisplayPropertiesFrom(abi: abi)
            case "MediaPlaybackAudioTrackList": return makeMediaPlaybackAudioTrackListFrom(abi: abi)
            case "MediaPlaybackCommandManager": return makeMediaPlaybackCommandManagerFrom(abi: abi)
            case "MediaPlaybackCommandManagerAutoRepeatModeReceivedEventArgs": return makeMediaPlaybackCommandManagerAutoRepeatModeReceivedEventArgsFrom(abi: abi)
            case "MediaPlaybackCommandManagerCommandBehavior": return makeMediaPlaybackCommandManagerCommandBehaviorFrom(abi: abi)
            case "MediaPlaybackCommandManagerFastForwardReceivedEventArgs": return makeMediaPlaybackCommandManagerFastForwardReceivedEventArgsFrom(abi: abi)
            case "MediaPlaybackCommandManagerNextReceivedEventArgs": return makeMediaPlaybackCommandManagerNextReceivedEventArgsFrom(abi: abi)
            case "MediaPlaybackCommandManagerPauseReceivedEventArgs": return makeMediaPlaybackCommandManagerPauseReceivedEventArgsFrom(abi: abi)
            case "MediaPlaybackCommandManagerPlayReceivedEventArgs": return makeMediaPlaybackCommandManagerPlayReceivedEventArgsFrom(abi: abi)
            case "MediaPlaybackCommandManagerPositionReceivedEventArgs": return makeMediaPlaybackCommandManagerPositionReceivedEventArgsFrom(abi: abi)
            case "MediaPlaybackCommandManagerPreviousReceivedEventArgs": return makeMediaPlaybackCommandManagerPreviousReceivedEventArgsFrom(abi: abi)
            case "MediaPlaybackCommandManagerRateReceivedEventArgs": return makeMediaPlaybackCommandManagerRateReceivedEventArgsFrom(abi: abi)
            case "MediaPlaybackCommandManagerRewindReceivedEventArgs": return makeMediaPlaybackCommandManagerRewindReceivedEventArgsFrom(abi: abi)
            case "MediaPlaybackCommandManagerShuffleReceivedEventArgs": return makeMediaPlaybackCommandManagerShuffleReceivedEventArgsFrom(abi: abi)
            case "MediaPlaybackItem": return makeMediaPlaybackItemFrom(abi: abi)
            case "MediaPlaybackItemError": return makeMediaPlaybackItemErrorFrom(abi: abi)
            case "MediaPlaybackItemFailedEventArgs": return makeMediaPlaybackItemFailedEventArgsFrom(abi: abi)
            case "MediaPlaybackItemOpenedEventArgs": return makeMediaPlaybackItemOpenedEventArgsFrom(abi: abi)
            case "MediaPlaybackList": return makeMediaPlaybackListFrom(abi: abi)
            case "MediaPlaybackSession": return makeMediaPlaybackSessionFrom(abi: abi)
            case "MediaPlaybackSessionOutputDegradationPolicyState": return makeMediaPlaybackSessionOutputDegradationPolicyStateFrom(abi: abi)
            case "MediaPlaybackSphericalVideoProjection": return makeMediaPlaybackSphericalVideoProjectionFrom(abi: abi)
            case "MediaPlaybackTimedMetadataTrackList": return makeMediaPlaybackTimedMetadataTrackListFrom(abi: abi)
            case "MediaPlaybackVideoTrackList": return makeMediaPlaybackVideoTrackListFrom(abi: abi)
            case "MediaPlayer": return makeMediaPlayerFrom(abi: abi)
            case "MediaPlayerFailedEventArgs": return makeMediaPlayerFailedEventArgsFrom(abi: abi)
            case "MediaPlayerRateChangedEventArgs": return makeMediaPlayerRateChangedEventArgsFrom(abi: abi)
            case "MediaPlayerSurface": return makeMediaPlayerSurfaceFrom(abi: abi)
            case "PlaybackMediaMarker": return makePlaybackMediaMarkerFrom(abi: abi)
            case "PlaybackMediaMarkerReachedEventArgs": return makePlaybackMediaMarkerReachedEventArgsFrom(abi: abi)
            case "PlaybackMediaMarkerSequence": return makePlaybackMediaMarkerSequenceFrom(abi: abi)
            case "TimedMetadataPresentationModeChangedEventArgs": return makeTimedMetadataPresentationModeChangedEventArgsFrom(abi: abi)
            case "ComponentLoadFailedEventArgs": return makeComponentLoadFailedEventArgsFrom(abi: abi)
            case "MediaProtectionManager": return makeMediaProtectionManagerFrom(abi: abi)
            case "MediaProtectionServiceCompletion": return makeMediaProtectionServiceCompletionFrom(abi: abi)
            case "RevocationAndRenewalInformation": return makeRevocationAndRenewalInformationFrom(abi: abi)
            case "RevocationAndRenewalItem": return makeRevocationAndRenewalItemFrom(abi: abi)
            case "ServiceRequestedEventArgs": return makeServiceRequestedEventArgsFrom(abi: abi)
            case "AdaptiveMediaSource": return makeAdaptiveMediaSourceFrom(abi: abi)
            case "AdaptiveMediaSourceAdvancedSettings": return makeAdaptiveMediaSourceAdvancedSettingsFrom(abi: abi)
            case "AdaptiveMediaSourceCorrelatedTimes": return makeAdaptiveMediaSourceCorrelatedTimesFrom(abi: abi)
            case "AdaptiveMediaSourceCreationResult": return makeAdaptiveMediaSourceCreationResultFrom(abi: abi)
            case "AdaptiveMediaSourceDiagnosticAvailableEventArgs": return makeAdaptiveMediaSourceDiagnosticAvailableEventArgsFrom(abi: abi)
            case "AdaptiveMediaSourceDiagnostics": return makeAdaptiveMediaSourceDiagnosticsFrom(abi: abi)
            case "AdaptiveMediaSourceDownloadBitrateChangedEventArgs": return makeAdaptiveMediaSourceDownloadBitrateChangedEventArgsFrom(abi: abi)
            case "AdaptiveMediaSourceDownloadCompletedEventArgs": return makeAdaptiveMediaSourceDownloadCompletedEventArgsFrom(abi: abi)
            case "AdaptiveMediaSourceDownloadFailedEventArgs": return makeAdaptiveMediaSourceDownloadFailedEventArgsFrom(abi: abi)
            case "AdaptiveMediaSourceDownloadRequestedDeferral": return makeAdaptiveMediaSourceDownloadRequestedDeferralFrom(abi: abi)
            case "AdaptiveMediaSourceDownloadRequestedEventArgs": return makeAdaptiveMediaSourceDownloadRequestedEventArgsFrom(abi: abi)
            case "AdaptiveMediaSourceDownloadResult": return makeAdaptiveMediaSourceDownloadResultFrom(abi: abi)
            case "AdaptiveMediaSourceDownloadStatistics": return makeAdaptiveMediaSourceDownloadStatisticsFrom(abi: abi)
            case "AdaptiveMediaSourcePlaybackBitrateChangedEventArgs": return makeAdaptiveMediaSourcePlaybackBitrateChangedEventArgsFrom(abi: abi)
            case "HostName": return makeHostNameFrom(abi: abi)
            case "BackgroundTransferGroup": return makeBackgroundTransferGroupFrom(abi: abi)
            case "BackgroundTransferRangesDownloadedEventArgs": return makeBackgroundTransferRangesDownloadedEventArgsFrom(abi: abi)
            case "DownloadOperation": return makeDownloadOperationFrom(abi: abi)
            case "ResponseInformation": return makeResponseInformationFrom(abi: abi)
            case "AttributedNetworkUsage": return makeAttributedNetworkUsageFrom(abi: abi)
            case "ConnectionCost": return makeConnectionCostFrom(abi: abi)
            case "ConnectionProfile": return makeConnectionProfileFrom(abi: abi)
            case "ConnectivityInterval": return makeConnectivityIntervalFrom(abi: abi)
            case "DataPlanStatus": return makeDataPlanStatusFrom(abi: abi)
            case "DataPlanUsage": return makeDataPlanUsageFrom(abi: abi)
            case "DataUsage": return makeDataUsageFrom(abi: abi)
            case "IPInformation": return makeIPInformationFrom(abi: abi)
            case "NetworkAdapter": return makeNetworkAdapterFrom(abi: abi)
            case "NetworkItem": return makeNetworkItemFrom(abi: abi)
            case "NetworkSecuritySettings": return makeNetworkSecuritySettingsFrom(abi: abi)
            case "NetworkUsage": return makeNetworkUsageFrom(abi: abi)
            case "ProviderNetworkUsage": return makeProviderNetworkUsageFrom(abi: abi)
            case "WlanConnectionProfileDetails": return makeWlanConnectionProfileDetailsFrom(abi: abi)
            case "WwanConnectionProfileDetails": return makeWwanConnectionProfileDetailsFrom(abi: abi)
            case "SpatialCoordinateSystem": return makeSpatialCoordinateSystemFrom(abi: abi)
            case "PasswordCredential": return makePasswordCredentialFrom(abi: abi)
            case "Certificate": return makeCertificateFrom(abi: abi)
            case "CertificateChain": return makeCertificateChainFrom(abi: abi)
            case "CertificateExtension": return makeCertificateExtensionFrom(abi: abi)
            case "CertificateKeyUsages": return makeCertificateKeyUsagesFrom(abi: abi)
            case "ChainBuildingParameters": return makeChainBuildingParametersFrom(abi: abi)
            case "ChainValidationParameters": return makeChainValidationParametersFrom(abi: abi)
            case "SubjectAlternativeNameInfo": return makeSubjectAlternativeNameInfoFrom(abi: abi)
            case "StorageFile": return makeStorageFileFrom(abi: abi)
            case "StorageFolder": return makeStorageFolderFrom(abi: abi)
            case "StorageLibraryChange": return makeStorageLibraryChangeFrom(abi: abi)
            case "StorageLibraryChangeReader": return makeStorageLibraryChangeReaderFrom(abi: abi)
            case "StorageLibraryChangeTracker": return makeStorageLibraryChangeTrackerFrom(abi: abi)
            case "StorageProvider": return makeStorageProviderFrom(abi: abi)
            case "StorageStreamTransaction": return makeStorageStreamTransactionFrom(abi: abi)
            case "StreamedFileDataRequest": return makeStreamedFileDataRequestFrom(abi: abi)
            case "BasicProperties": return makeBasicPropertiesFrom(abi: abi)
            case "DocumentProperties": return makeDocumentPropertiesFrom(abi: abi)
            case "ImageProperties": return makeImagePropertiesFrom(abi: abi)
            case "MusicProperties": return makeMusicPropertiesFrom(abi: abi)
            case "StorageItemContentProperties": return makeStorageItemContentPropertiesFrom(abi: abi)
            case "StorageItemThumbnail": return makeStorageItemThumbnailFrom(abi: abi)
            case "VideoProperties": return makeVideoPropertiesFrom(abi: abi)
            case "FileExtensionVector": return makeFileExtensionVectorFrom(abi: abi)
            case "FileOpenPicker": return makeFileOpenPickerFrom(abi: abi)
            case "FilePickerFileTypesOrderedMap": return makeFilePickerFileTypesOrderedMapFrom(abi: abi)
            case "FilePickerSelectedFilesArray": return makeFilePickerSelectedFilesArrayFrom(abi: abi)
            case "FileSavePicker": return makeFileSavePickerFrom(abi: abi)
            case "FolderPicker": return makeFolderPickerFrom(abi: abi)
            case "QueryOptions": return makeQueryOptionsFrom(abi: abi)
            case "StorageFileQueryResult": return makeStorageFileQueryResultFrom(abi: abi)
            case "StorageFolderQueryResult": return makeStorageFolderQueryResultFrom(abi: abi)
            case "StorageItemQueryResult": return makeStorageItemQueryResultFrom(abi: abi)
            case "Buffer": return makeBufferFrom(abi: abi)
            case "DataReader": return makeDataReaderFrom(abi: abi)
            case "DataReaderLoadOperation": return makeDataReaderLoadOperationFrom(abi: abi)
            case "DataWriter": return makeDataWriterFrom(abi: abi)
            case "DataWriterStoreOperation": return makeDataWriterStoreOperationFrom(abi: abi)
            case "FileInputStream": return makeFileInputStreamFrom(abi: abi)
            case "FileOutputStream": return makeFileOutputStreamFrom(abi: abi)
            case "FileRandomAccessStream": return makeFileRandomAccessStreamFrom(abi: abi)
            case "InMemoryRandomAccessStream": return makeInMemoryRandomAccessStreamFrom(abi: abi)
            case "InputStreamOverStream": return makeInputStreamOverStreamFrom(abi: abi)
            case "OutputStreamOverStream": return makeOutputStreamOverStreamFrom(abi: abi)
            case "RandomAccessStreamOverStream": return makeRandomAccessStreamOverStreamFrom(abi: abi)
            case "RandomAccessStreamReference": return makeRandomAccessStreamReferenceFrom(abi: abi)
            case "DispatcherQueue": return makeDispatcherQueueFrom(abi: abi)
            case "DispatcherQueueShutdownStartingEventArgs": return makeDispatcherQueueShutdownStartingEventArgsFrom(abi: abi)
            case "DispatcherQueueTimer": return makeDispatcherQueueTimerFrom(abi: abi)
            case "FolderLauncherOptions": return makeFolderLauncherOptionsFrom(abi: abi)
            case "LaunchUriResult": return makeLaunchUriResultFrom(abi: abi)
            case "LauncherOptions": return makeLauncherOptionsFrom(abi: abi)
            case "LauncherUIOptions": return makeLauncherUIOptionsFrom(abi: abi)
            case "User": return makeUserFrom(abi: abi)
            case "UserAuthenticationStatusChangeDeferral": return makeUserAuthenticationStatusChangeDeferralFrom(abi: abi)
            case "UserAuthenticationStatusChangingEventArgs": return makeUserAuthenticationStatusChangingEventArgsFrom(abi: abi)
            case "UserChangedEventArgs": return makeUserChangedEventArgsFrom(abi: abi)
            case "UserWatcher": return makeUserWatcherFrom(abi: abi)
            case "UIContext": return makeUIContextFrom(abi: abi)
            case "AmbientLight": return makeAmbientLightFrom(abi: abi)
            case "AnimationController": return makeAnimationControllerFrom(abi: abi)
            case "AnimationPropertyInfo": return makeAnimationPropertyInfoFrom(abi: abi)
            case "BooleanKeyFrameAnimation": return makeBooleanKeyFrameAnimationFrom(abi: abi)
            case "BounceScalarNaturalMotionAnimation": return makeBounceScalarNaturalMotionAnimationFrom(abi: abi)
            case "BounceVector2NaturalMotionAnimation": return makeBounceVector2NaturalMotionAnimationFrom(abi: abi)
            case "BounceVector3NaturalMotionAnimation": return makeBounceVector3NaturalMotionAnimationFrom(abi: abi)
            case "ColorKeyFrameAnimation": return makeColorKeyFrameAnimationFrom(abi: abi)
            case "CompositionAnimation": return makeCompositionAnimationFrom(abi: abi)
            case "CompositionAnimationGroup": return makeCompositionAnimationGroupFrom(abi: abi)
            case "CompositionBackdropBrush": return makeCompositionBackdropBrushFrom(abi: abi)
            case "CompositionBatchCompletedEventArgs": return makeCompositionBatchCompletedEventArgsFrom(abi: abi)
            case "CompositionBrush": return makeCompositionBrushFrom(abi: abi)
            case "CompositionCapabilities": return makeCompositionCapabilitiesFrom(abi: abi)
            case "CompositionClip": return makeCompositionClipFrom(abi: abi)
            case "CompositionColorBrush": return makeCompositionColorBrushFrom(abi: abi)
            case "CompositionColorGradientStop": return makeCompositionColorGradientStopFrom(abi: abi)
            case "CompositionColorGradientStopCollection": return makeCompositionColorGradientStopCollectionFrom(abi: abi)
            case "CompositionCommitBatch": return makeCompositionCommitBatchFrom(abi: abi)
            case "CompositionContainerShape": return makeCompositionContainerShapeFrom(abi: abi)
            case "CompositionDrawingSurface": return makeCompositionDrawingSurfaceFrom(abi: abi)
            case "CompositionEasingFunction": return makeCompositionEasingFunctionFrom(abi: abi)
            case "CompositionEffectBrush": return makeCompositionEffectBrushFrom(abi: abi)
            case "CompositionEffectFactory": return makeCompositionEffectFactoryFrom(abi: abi)
            case "CompositionEffectSourceParameter": return makeCompositionEffectSourceParameterFrom(abi: abi)
            case "CompositionEllipseGeometry": return makeCompositionEllipseGeometryFrom(abi: abi)
            case "CompositionGeometricClip": return makeCompositionGeometricClipFrom(abi: abi)
            case "CompositionGeometry": return makeCompositionGeometryFrom(abi: abi)
            case "CompositionGradientBrush": return makeCompositionGradientBrushFrom(abi: abi)
            case "CompositionGraphicsDevice": return makeCompositionGraphicsDeviceFrom(abi: abi)
            case "CompositionLight": return makeCompositionLightFrom(abi: abi)
            case "CompositionLineGeometry": return makeCompositionLineGeometryFrom(abi: abi)
            case "CompositionLinearGradientBrush": return makeCompositionLinearGradientBrushFrom(abi: abi)
            case "CompositionMaskBrush": return makeCompositionMaskBrushFrom(abi: abi)
            case "CompositionMipmapSurface": return makeCompositionMipmapSurfaceFrom(abi: abi)
            case "CompositionNineGridBrush": return makeCompositionNineGridBrushFrom(abi: abi)
            case "CompositionObject": return makeCompositionObjectFrom(abi: abi)
            case "CompositionPath": return makeCompositionPathFrom(abi: abi)
            case "CompositionPathGeometry": return makeCompositionPathGeometryFrom(abi: abi)
            case "CompositionProjectedShadow": return makeCompositionProjectedShadowFrom(abi: abi)
            case "CompositionProjectedShadowCaster": return makeCompositionProjectedShadowCasterFrom(abi: abi)
            case "CompositionProjectedShadowCasterCollection": return makeCompositionProjectedShadowCasterCollectionFrom(abi: abi)
            case "CompositionProjectedShadowReceiver": return makeCompositionProjectedShadowReceiverFrom(abi: abi)
            case "CompositionProjectedShadowReceiverUnorderedCollection": return makeCompositionProjectedShadowReceiverUnorderedCollectionFrom(abi: abi)
            case "CompositionPropertySet": return makeCompositionPropertySetFrom(abi: abi)
            case "CompositionRadialGradientBrush": return makeCompositionRadialGradientBrushFrom(abi: abi)
            case "CompositionRectangleGeometry": return makeCompositionRectangleGeometryFrom(abi: abi)
            case "CompositionRoundedRectangleGeometry": return makeCompositionRoundedRectangleGeometryFrom(abi: abi)
            case "CompositionScopedBatch": return makeCompositionScopedBatchFrom(abi: abi)
            case "CompositionShadow": return makeCompositionShadowFrom(abi: abi)
            case "CompositionShape": return makeCompositionShapeFrom(abi: abi)
            case "CompositionShapeCollection": return makeCompositionShapeCollectionFrom(abi: abi)
            case "CompositionSpriteShape": return makeCompositionSpriteShapeFrom(abi: abi)
            case "CompositionStrokeDashArray": return makeCompositionStrokeDashArrayFrom(abi: abi)
            case "CompositionSurfaceBrush": return makeCompositionSurfaceBrushFrom(abi: abi)
            case "CompositionTarget": return makeCompositionTargetFrom(abi: abi)
            case "CompositionTransform": return makeCompositionTransformFrom(abi: abi)
            case "CompositionViewBox": return makeCompositionViewBoxFrom(abi: abi)
            case "CompositionVirtualDrawingSurface": return makeCompositionVirtualDrawingSurfaceFrom(abi: abi)
            case "CompositionVisualSurface": return makeCompositionVisualSurfaceFrom(abi: abi)
            case "Compositor": return makeCompositorFrom(abi: abi)
            case "ContainerVisual": return makeContainerVisualFrom(abi: abi)
            case "CubicBezierEasingFunction": return makeCubicBezierEasingFunctionFrom(abi: abi)
            case "DistantLight": return makeDistantLightFrom(abi: abi)
            case "DropShadow": return makeDropShadowFrom(abi: abi)
            case "ExpressionAnimation": return makeExpressionAnimationFrom(abi: abi)
            case "ImplicitAnimationCollection": return makeImplicitAnimationCollectionFrom(abi: abi)
            case "InitialValueExpressionCollection": return makeInitialValueExpressionCollectionFrom(abi: abi)
            case "InsetClip": return makeInsetClipFrom(abi: abi)
            case "KeyFrameAnimation": return makeKeyFrameAnimationFrom(abi: abi)
            case "LayerVisual": return makeLayerVisualFrom(abi: abi)
            case "LinearEasingFunction": return makeLinearEasingFunctionFrom(abi: abi)
            case "NaturalMotionAnimation": return makeNaturalMotionAnimationFrom(abi: abi)
            case "PathKeyFrameAnimation": return makePathKeyFrameAnimationFrom(abi: abi)
            case "PointLight": return makePointLightFrom(abi: abi)
            case "QuaternionKeyFrameAnimation": return makeQuaternionKeyFrameAnimationFrom(abi: abi)
            case "RedirectVisual": return makeRedirectVisualFrom(abi: abi)
            case "RenderingDeviceReplacedEventArgs": return makeRenderingDeviceReplacedEventArgsFrom(abi: abi)
            case "ScalarKeyFrameAnimation": return makeScalarKeyFrameAnimationFrom(abi: abi)
            case "ScalarNaturalMotionAnimation": return makeScalarNaturalMotionAnimationFrom(abi: abi)
            case "ShapeVisual": return makeShapeVisualFrom(abi: abi)
            case "SpotLight": return makeSpotLightFrom(abi: abi)
            case "SpringScalarNaturalMotionAnimation": return makeSpringScalarNaturalMotionAnimationFrom(abi: abi)
            case "SpringVector2NaturalMotionAnimation": return makeSpringVector2NaturalMotionAnimationFrom(abi: abi)
            case "SpringVector3NaturalMotionAnimation": return makeSpringVector3NaturalMotionAnimationFrom(abi: abi)
            case "SpriteVisual": return makeSpriteVisualFrom(abi: abi)
            case "StepEasingFunction": return makeStepEasingFunctionFrom(abi: abi)
            case "Vector2KeyFrameAnimation": return makeVector2KeyFrameAnimationFrom(abi: abi)
            case "Vector2NaturalMotionAnimation": return makeVector2NaturalMotionAnimationFrom(abi: abi)
            case "Vector3KeyFrameAnimation": return makeVector3KeyFrameAnimationFrom(abi: abi)
            case "Vector3NaturalMotionAnimation": return makeVector3NaturalMotionAnimationFrom(abi: abi)
            case "Vector4KeyFrameAnimation": return makeVector4KeyFrameAnimationFrom(abi: abi)
            case "Visual": return makeVisualFrom(abi: abi)
            case "VisualCollection": return makeVisualCollectionFrom(abi: abi)
            case "VisualUnorderedCollection": return makeVisualUnorderedCollectionFrom(abi: abi)
            case "AcceleratorKeyEventArgs": return makeAcceleratorKeyEventArgsFrom(abi: abi)
            case "AutomationProviderRequestedEventArgs": return makeAutomationProviderRequestedEventArgsFrom(abi: abi)
            case "CharacterReceivedEventArgs": return makeCharacterReceivedEventArgsFrom(abi: abi)
            case "ClosestInteractiveBoundsRequestedEventArgs": return makeClosestInteractiveBoundsRequestedEventArgsFrom(abi: abi)
            case "CoreCursor": return makeCoreCursorFrom(abi: abi)
            case "CoreDispatcher": return makeCoreDispatcherFrom(abi: abi)
            case "CoreWindow": return makeCoreWindowFrom(abi: abi)
            case "CoreWindowEventArgs": return makeCoreWindowEventArgsFrom(abi: abi)
            case "IdleDispatchedHandlerArgs": return makeIdleDispatchedHandlerArgsFrom(abi: abi)
            case "InputEnabledEventArgs": return makeInputEnabledEventArgsFrom(abi: abi)
            case "KeyEventArgs": return makeKeyEventArgsFrom(abi: abi)
            case "PointerEventArgs": return makePointerEventArgsFrom(abi: abi)
            case "TouchHitTestingEventArgs": return makeTouchHitTestingEventArgsFrom(abi: abi)
            case "VisibilityChangedEventArgs": return makeVisibilityChangedEventArgsFrom(abi: abi)
            case "WindowActivatedEventArgs": return makeWindowActivatedEventArgsFrom(abi: abi)
            case "WindowSizeChangedEventArgs": return makeWindowSizeChangedEventArgsFrom(abi: abi)
            case "PointerPoint": return makePointerPointFrom(abi: abi)
            case "PointerPointProperties": return makePointerPointPropertiesFrom(abi: abi)
            case "ShownTileNotification": return makeShownTileNotificationFrom(abi: abi)
            case "FontWeights": return makeFontWeightsFrom(abi: abi)
            case "ActivationViewSwitcher": return makeActivationViewSwitcherFrom(abi: abi)
            case "UISettings": return makeUISettingsFrom(abi: abi)
            case "UISettingsAutoHideScrollBarsChangedEventArgs": return makeUISettingsAutoHideScrollBarsChangedEventArgsFrom(abi: abi)
            case "HttpClient": return makeHttpClientFrom(abi: abi)
            case "HttpGetBufferResult": return makeHttpGetBufferResultFrom(abi: abi)
            case "HttpGetInputStreamResult": return makeHttpGetInputStreamResultFrom(abi: abi)
            case "HttpGetStringResult": return makeHttpGetStringResultFrom(abi: abi)
            case "HttpMethod": return makeHttpMethodFrom(abi: abi)
            case "HttpRequestMessage": return makeHttpRequestMessageFrom(abi: abi)
            case "HttpRequestResult": return makeHttpRequestResultFrom(abi: abi)
            case "HttpResponseMessage": return makeHttpResponseMessageFrom(abi: abi)
            case "HttpTransportInformation": return makeHttpTransportInformationFrom(abi: abi)
            case "HttpCacheDirectiveHeaderValueCollection": return makeHttpCacheDirectiveHeaderValueCollectionFrom(abi: abi)
            case "HttpChallengeHeaderValue": return makeHttpChallengeHeaderValueFrom(abi: abi)
            case "HttpChallengeHeaderValueCollection": return makeHttpChallengeHeaderValueCollectionFrom(abi: abi)
            case "HttpConnectionOptionHeaderValue": return makeHttpConnectionOptionHeaderValueFrom(abi: abi)
            case "HttpConnectionOptionHeaderValueCollection": return makeHttpConnectionOptionHeaderValueCollectionFrom(abi: abi)
            case "HttpContentCodingHeaderValue": return makeHttpContentCodingHeaderValueFrom(abi: abi)
            case "HttpContentCodingHeaderValueCollection": return makeHttpContentCodingHeaderValueCollectionFrom(abi: abi)
            case "HttpContentCodingWithQualityHeaderValue": return makeHttpContentCodingWithQualityHeaderValueFrom(abi: abi)
            case "HttpContentCodingWithQualityHeaderValueCollection": return makeHttpContentCodingWithQualityHeaderValueCollectionFrom(abi: abi)
            case "HttpContentDispositionHeaderValue": return makeHttpContentDispositionHeaderValueFrom(abi: abi)
            case "HttpContentHeaderCollection": return makeHttpContentHeaderCollectionFrom(abi: abi)
            case "HttpContentRangeHeaderValue": return makeHttpContentRangeHeaderValueFrom(abi: abi)
            case "HttpCookiePairHeaderValue": return makeHttpCookiePairHeaderValueFrom(abi: abi)
            case "HttpCookiePairHeaderValueCollection": return makeHttpCookiePairHeaderValueCollectionFrom(abi: abi)
            case "HttpCredentialsHeaderValue": return makeHttpCredentialsHeaderValueFrom(abi: abi)
            case "HttpDateOrDeltaHeaderValue": return makeHttpDateOrDeltaHeaderValueFrom(abi: abi)
            case "HttpExpectationHeaderValue": return makeHttpExpectationHeaderValueFrom(abi: abi)
            case "HttpExpectationHeaderValueCollection": return makeHttpExpectationHeaderValueCollectionFrom(abi: abi)
            case "HttpLanguageHeaderValueCollection": return makeHttpLanguageHeaderValueCollectionFrom(abi: abi)
            case "HttpLanguageRangeWithQualityHeaderValue": return makeHttpLanguageRangeWithQualityHeaderValueFrom(abi: abi)
            case "HttpLanguageRangeWithQualityHeaderValueCollection": return makeHttpLanguageRangeWithQualityHeaderValueCollectionFrom(abi: abi)
            case "HttpMediaTypeHeaderValue": return makeHttpMediaTypeHeaderValueFrom(abi: abi)
            case "HttpMediaTypeWithQualityHeaderValue": return makeHttpMediaTypeWithQualityHeaderValueFrom(abi: abi)
            case "HttpMediaTypeWithQualityHeaderValueCollection": return makeHttpMediaTypeWithQualityHeaderValueCollectionFrom(abi: abi)
            case "HttpMethodHeaderValueCollection": return makeHttpMethodHeaderValueCollectionFrom(abi: abi)
            case "HttpNameValueHeaderValue": return makeHttpNameValueHeaderValueFrom(abi: abi)
            case "HttpProductHeaderValue": return makeHttpProductHeaderValueFrom(abi: abi)
            case "HttpProductInfoHeaderValue": return makeHttpProductInfoHeaderValueFrom(abi: abi)
            case "HttpProductInfoHeaderValueCollection": return makeHttpProductInfoHeaderValueCollectionFrom(abi: abi)
            case "HttpRequestHeaderCollection": return makeHttpRequestHeaderCollectionFrom(abi: abi)
            case "HttpResponseHeaderCollection": return makeHttpResponseHeaderCollectionFrom(abi: abi)
            case "HttpTransferCodingHeaderValue": return makeHttpTransferCodingHeaderValueFrom(abi: abi)
            case "HttpTransferCodingHeaderValueCollection": return makeHttpTransferCodingHeaderValueCollectionFrom(abi: abi)
            default: return Nothing
        }
    }
}
