// WARNING: Please don't edit this file. It was generated by Codira/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

public enum __IMPL_Windows_System {
    public enum ILauncherViewOptionsBridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_CWindows_CSystem_CILauncherViewOptions
        public typealias CodiraABI = __ABI_Windows_System.ILauncherViewOptions
        public typealias CodiraProjection = AnyILauncherViewOptions
        public static fn from(abi: ComPtr<CABI>?) -> CodiraProjection? {
            guard immutable abi = abi else { return Nothing }
            return ILauncherViewOptionsImpl(abi)
        }

        public static fn makeAbi() -> CABI {
            immutable vtblPtr = withUnsafeMutablePointer(to: &__ABI_Windows_System.ILauncherViewOptionsVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class ILauncherViewOptionsImpl: ILauncherViewOptions, WinRTAbiImpl {
        fileprivate typealias Bridge = ILauncherViewOptionsBridge
        fileprivate immutable _default: Bridge.CodiraABI
        fileprivate var thisPtr: WindowsFoundation.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.CodiraABI(fromAbi)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.system.ilauncherviewoptions.desiredremainingview)
        fileprivate var desiredRemainingView : UWP.ViewSizePreference {
            get { try! _default.get_DesiredRemainingViewImpl() }
            set { try! _default.put_DesiredRemainingViewImpl(newValue) }
        }

    }

    public class DispatcherQueueHandlerBridge : WinRTDelegateBridge {
        public typealias Handler = DispatcherQueueHandler
        public typealias CABI = __x_ABI_CWindows_CSystem_CIDispatcherQueueHandler
        public typealias CodiraABI = __ABI_Windows_System.DispatcherQueueHandler

        public static fn from(abi: ComPtr<CABI>?) -> Handler? {
            guard immutable abi = abi else { return Nothing }
            immutable _default = CodiraABI(abi)
            immutable handler: Handler = { () in
                try! _default.InvokeImpl()
            }
            return handler
        }
    }
}
