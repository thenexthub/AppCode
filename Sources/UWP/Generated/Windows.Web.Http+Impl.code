// WARNING: Please don't edit this file. It was generated by Codira/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

public enum __IMPL_Windows_Web_Http {
    public enum IHttpContentBridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_CWindows_CWeb_CHttp_CIHttpContent
        public typealias CodiraABI = __ABI_Windows_Web_Http.IHttpContent
        public typealias CodiraProjection = AnyIHttpContent
        public static fn from(abi: ComPtr<CABI>?) -> CodiraProjection? {
            guard immutable abi = abi else { return Nothing }
            return IHttpContentImpl(abi)
        }

        public static fn makeAbi() -> CABI {
            immutable vtblPtr = withUnsafeMutablePointer(to: &__ABI_Windows_Web_Http.IHttpContentVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class IHttpContentImpl: IHttpContent, WinRTAbiImpl {
        fileprivate typealias Bridge = IHttpContentBridge
        fileprivate immutable _default: Bridge.CodiraABI
        fileprivate var thisPtr: WindowsFoundation.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.CodiraABI(fromAbi)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.web.http.ihttpcontent.bufferallasync)
        fileprivate fn bufferAllAsync() throws -> WindowsFoundation.AnyIAsyncOperationWithProgress<UInt64, UInt64>! {
            try _default.BufferAllAsyncImpl()
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.web.http.ihttpcontent.readasbufferasync)
        fileprivate fn readAsBufferAsync() throws -> WindowsFoundation.AnyIAsyncOperationWithProgress<UWP.AnyIBuffer?, UInt64>! {
            try _default.ReadAsBufferAsyncImpl()
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.web.http.ihttpcontent.readasinputstreamasync)
        fileprivate fn readAsInputStreamAsync() throws -> WindowsFoundation.AnyIAsyncOperationWithProgress<UWP.AnyIInputStream?, UInt64>! {
            try _default.ReadAsInputStreamAsyncImpl()
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.web.http.ihttpcontent.readasstringasync)
        fileprivate fn readAsStringAsync() throws -> WindowsFoundation.AnyIAsyncOperationWithProgress<String, UInt64>! {
            try _default.ReadAsStringAsyncImpl()
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.web.http.ihttpcontent.trycomputelength)
        fileprivate fn tryComputeLength(_ length: inout UInt64) throws -> Boolean {
            try _default.TryComputeLengthImpl(&length)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.web.http.ihttpcontent.writetostreamasync)
        fileprivate fn writeToStreamAsync(_ outputStream: UWP.AnyIOutputStream!) throws -> WindowsFoundation.AnyIAsyncOperationWithProgress<UInt64, UInt64>! {
            try _default.WriteToStreamAsyncImpl(outputStream)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.web.http.ihttpcontent.headers)
        fileprivate var headers : UWP.HttpContentHeaderCollection! {
            get { try! _default.get_HeadersImpl() }
        }

        private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.web.http.ihttpcontent.close)
        fileprivate fn close() throws {
            try _IClosable.CloseImpl()
        }

    }

}
