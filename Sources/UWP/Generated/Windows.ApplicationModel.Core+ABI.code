// WARNING: Please don't edit this file. It was generated by Codira/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

private var IID___x_ABI_CWindows_CApplicationModel_CCore_CIAppListEntry: WindowsFoundation.IID {
    .init(Data1: 0xEF00F07F, Data2: 0x2108, Data3: 0x490A, Data4: ( 0x87,0x7A,0x8A,0x9F,0x17,0xC2,0x5F,0xAD ))// EF00F07F-2108-490A-877A-8A9F17C25FAD
}

private var IID___x_ABI_CWindows_CApplicationModel_CCore_CIAppListEntry2: WindowsFoundation.IID {
    .init(Data1: 0xD0A618AD, Data2: 0xBF35, Data3: 0x42AC, Data4: ( 0xAC,0x06,0x86,0xEE,0xEB,0x41,0xD0,0x4B ))// D0A618AD-BF35-42AC-AC06-86EEEB41D04B
}

private var IID___x_ABI_CWindows_CApplicationModel_CCore_CIAppListEntry3: WindowsFoundation.IID {
    .init(Data1: 0x6099F28D, Data2: 0xFC32, Data3: 0x470A, Data4: ( 0xBC,0x69,0x4B,0x06,0x1A,0x76,0xEF,0x2E ))// 6099F28D-FC32-470A-BC69-4B061A76EF2E
}

private var IID___x_ABI_CWindows_CApplicationModel_CCore_CICoreApplication: WindowsFoundation.IID {
    .init(Data1: 0x0AACF7A4, Data2: 0x5E1D, Data3: 0x49DF, Data4: ( 0x80,0x34,0xFB,0x6A,0x68,0xBC,0x5E,0xD1 ))// 0AACF7A4-5E1D-49DF-8034-FB6A68BC5ED1
}

private var IID___x_ABI_CWindows_CApplicationModel_CCore_CICoreApplication2: WindowsFoundation.IID {
    .init(Data1: 0x998681FB, Data2: 0x1AB6, Data3: 0x4B7F, Data4: ( 0xBE,0x4A,0x9A,0x06,0x45,0x22,0x4C,0x04 ))// 998681FB-1AB6-4B7F-BE4A-9A0645224C04
}

private var IID___x_ABI_CWindows_CApplicationModel_CCore_CICoreApplication3: WindowsFoundation.IID {
    .init(Data1: 0xFEEC0D39, Data2: 0x598B, Data3: 0x4507, Data4: ( 0x8A,0x67,0x77,0x26,0x32,0x58,0x0A,0x57 ))// FEEC0D39-598B-4507-8A67-772632580A57
}

private var IID___x_ABI_CWindows_CApplicationModel_CCore_CICoreApplicationExit: WindowsFoundation.IID {
    .init(Data1: 0xCF86461D, Data2: 0x261E, Data3: 0x4B72, Data4: ( 0x9A,0xCD,0x44,0xED,0x2A,0xCE,0x6A,0x29 ))// CF86461D-261E-4B72-9ACD-44ED2ACE6A29
}

private var IID___x_ABI_CWindows_CApplicationModel_CCore_CICoreApplicationUnhandledError: WindowsFoundation.IID {
    .init(Data1: 0xF0E24AB0, Data2: 0xDD09, Data3: 0x42E1, Data4: ( 0xB0,0xBC,0xE0,0xE1,0x31,0xF7,0x8D,0x7E ))// F0E24AB0-DD09-42E1-B0BC-E0E131F78D7E
}

private var IID___x_ABI_CWindows_CApplicationModel_CCore_CICoreApplicationUseCount: WindowsFoundation.IID {
    .init(Data1: 0x518DC408, Data2: 0xC077, Data3: 0x475B, Data4: ( 0x80,0x9E,0x0B,0xC0,0xC5,0x7E,0x4B,0x74 ))// 518DC408-C077-475B-809E-0BC0C57E4B74
}

private var IID___x_ABI_CWindows_CApplicationModel_CCore_CICoreApplicationView: WindowsFoundation.IID {
    .init(Data1: 0x638BB2DB, Data2: 0x451D, Data3: 0x4661, Data4: ( 0xB0,0x99,0x41,0x4F,0x34,0xFF,0xB9,0xF1 ))// 638BB2DB-451D-4661-B099-414F34FFB9F1
}

private var IID___x_ABI_CWindows_CApplicationModel_CCore_CICoreApplicationView2: WindowsFoundation.IID {
    .init(Data1: 0x68EB7ADF, Data2: 0x917F, Data3: 0x48EB, Data4: ( 0x9A,0xEB,0x7D,0xE5,0x3E,0x08,0x6A,0xB1 ))// 68EB7ADF-917F-48EB-9AEB-7DE53E086AB1
}

private var IID___x_ABI_CWindows_CApplicationModel_CCore_CICoreApplicationView3: WindowsFoundation.IID {
    .init(Data1: 0x07EBE1B3, Data2: 0xA4CF, Data3: 0x4550, Data4: ( 0xAB,0x70,0xB0,0x7E,0x85,0x33,0x0B,0xC8 ))// 07EBE1B3-A4CF-4550-AB70-B07E85330BC8
}

private var IID___x_ABI_CWindows_CApplicationModel_CCore_CICoreApplicationView5: WindowsFoundation.IID {
    .init(Data1: 0x2BC095A8, Data2: 0x8EF0, Data3: 0x446D, Data4: ( 0x9E,0x60,0x3A,0x3E,0x04,0x28,0xC6,0x71 ))// 2BC095A8-8EF0-446D-9E60-3A3E0428C671
}

private var IID___x_ABI_CWindows_CApplicationModel_CCore_CICoreApplicationView6: WindowsFoundation.IID {
    .init(Data1: 0xC119D49A, Data2: 0x0679, Data3: 0x49BA, Data4: ( 0x80,0x3F,0xB7,0x9C,0x5C,0xF3,0x4C,0xCA ))// C119D49A-0679-49BA-803F-B79C5CF34CCA
}

private var IID___x_ABI_CWindows_CApplicationModel_CCore_CICoreApplicationViewTitleBar: WindowsFoundation.IID {
    .init(Data1: 0x006D35E3, Data2: 0xE1F1, Data3: 0x431B, Data4: ( 0x95,0x08,0x29,0xB9,0x69,0x26,0xAC,0x53 ))// 006D35E3-E1F1-431B-9508-29B96926AC53
}

private var IID___x_ABI_CWindows_CApplicationModel_CCore_CICoreImmersiveApplication: WindowsFoundation.IID {
    .init(Data1: 0x1ADA0E3E, Data2: 0xE4A2, Data3: 0x4123, Data4: ( 0xB4,0x51,0xDC,0x96,0xBF,0x80,0x04,0x19 ))// 1ADA0E3E-E4A2-4123-B451-DC96BF800419
}

private var IID___x_ABI_CWindows_CApplicationModel_CCore_CICoreImmersiveApplication2: WindowsFoundation.IID {
    .init(Data1: 0x828E1E36, Data2: 0xE9E3, Data3: 0x4CFC, Data4: ( 0x9B,0x66,0x48,0xB7,0x8E,0xA9,0xBB,0x2C ))// 828E1E36-E9E3-4CFC-9B66-48B78EA9BB2C
}

private var IID___x_ABI_CWindows_CApplicationModel_CCore_CICoreImmersiveApplication3: WindowsFoundation.IID {
    .init(Data1: 0x34A05B2F, Data2: 0xEE0D, Data3: 0x41E5, Data4: ( 0x83,0x14,0xCF,0x10,0xC9,0x1B,0xF0,0xAF ))// 34A05B2F-EE0D-41E5-8314-CF10C91BF0AF
}

private var IID___x_ABI_CWindows_CApplicationModel_CCore_CIFrameworkView: WindowsFoundation.IID {
    .init(Data1: 0xFAAB5CD0, Data2: 0x8924, Data3: 0x45AC, Data4: ( 0xAD,0x0F,0xA0,0x8F,0xAE,0x5D,0x03,0x24 ))// FAAB5CD0-8924-45AC-AD0F-A08FAE5D0324
}

private var IID___x_ABI_CWindows_CApplicationModel_CCore_CIFrameworkViewSource: WindowsFoundation.IID {
    .init(Data1: 0xCD770614, Data2: 0x65C4, Data3: 0x426C, Data4: ( 0x94,0x94,0x34,0xFC,0x43,0x55,0x48,0x62 ))// CD770614-65C4-426C-9494-34FC43554862
}

private var IID___x_ABI_CWindows_CApplicationModel_CCore_CIHostedViewClosingEventArgs: WindowsFoundation.IID {
    .init(Data1: 0xD238943C, Data2: 0xB24E, Data3: 0x4790, Data4: ( 0xAC,0xB5,0x3E,0x42,0x43,0xC4,0xFF,0x87 ))// D238943C-B24E-4790-ACB5-3E4243C4FF87
}

private var IID___x_ABI_CWindows_CApplicationModel_CCore_CIUnhandledError: WindowsFoundation.IID {
    .init(Data1: 0x9459B726, Data2: 0x53B5, Data3: 0x4686, Data4: ( 0x9E,0xAF,0xFA,0x81,0x62,0xDC,0x39,0x80 ))// 9459B726-53B5-4686-9EAF-FA8162DC3980
}

private var IID___x_ABI_CWindows_CApplicationModel_CCore_CIUnhandledErrorDetectedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x679AB78B, Data2: 0xB336, Data3: 0x4822, Data4: ( 0xAC,0x40,0x0D,0x75,0x0F,0x0B,0x7A,0x2B ))// 679AB78B-B336-4822-AC40-0D750F0B7A2B
}

public enum __ABI_Windows_ApplicationModel_Core {
    public class IAppListEntry: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CApplicationModel_CCore_CIAppListEntry }

        internal fn get_DisplayInfoImpl() throws -> UWP.AppDisplayInfo? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CApplicationModel_CCore_CIAppListEntry.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_DisplayInfo(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn LaunchAsyncImpl() throws -> WindowsFoundation.AnyIAsyncOperation<Boolean>? {
            immutable (operation) = try ComPtrs.initialize { operationAbi in
                _ = try perform(as: __x_ABI_CWindows_CApplicationModel_CCore_CIAppListEntry.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.LaunchAsync(pThis, &operationAbi))
                }
            }
            return UWP.__x_ABI_C__FIAsyncOperation_1_booleanWrapper.unwrapFrom(abi: operation)
        }

    }

    public class IAppListEntry2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CApplicationModel_CCore_CIAppListEntry2 }

        internal fn get_AppUserModelIdImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CApplicationModel_CCore_CIAppListEntry2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_AppUserModelId(pThis, &value))
            }
            return .init(from: value)
        }

    }

    public class IAppListEntry3: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CApplicationModel_CCore_CIAppListEntry3 }

        internal fn LaunchForUserAsyncImpl(_ user: UWP.User?) throws -> WindowsFoundation.AnyIAsyncOperation<Boolean>? {
            immutable (operation) = try ComPtrs.initialize { operationAbi in
                _ = try perform(as: __x_ABI_CWindows_CApplicationModel_CCore_CIAppListEntry3.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.LaunchForUserAsync(pThis, RawPointer(user), &operationAbi))
                }
            }
            return UWP.__x_ABI_C__FIAsyncOperation_1_booleanWrapper.unwrapFrom(abi: operation)
        }

    }

    public class ICoreApplicationUnhandledError: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CApplicationModel_CCore_CICoreApplicationUnhandledError }

        open fn add_UnhandledErrorDetectedImpl(_ handler: EventHandler<UWP.UnhandledErrorDetectedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = UWP.__x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CApplicationModel__CCore__CUnhandledErrorDetectedEventArgsWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CApplicationModel_CCore_CICoreApplicationUnhandledError.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_UnhandledErrorDetected(pThis, _handler, &token))
            }
            return token
        }

        open fn remove_UnhandledErrorDetectedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CApplicationModel_CCore_CICoreApplicationUnhandledError.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_UnhandledErrorDetected(pThis, token))
            }
        }

    }

    internal static var ICoreApplicationUnhandledErrorVTable: __x_ABI_CWindows_CApplicationModel_CCore_CICoreApplicationUnhandledErrorVtbl = .init(
        QueryInterface: { ICoreApplicationUnhandledErrorWrapper.queryInterface($0, $1, $2) },
        AddRef: { ICoreApplicationUnhandledErrorWrapper.addRef($0) },
        Release: { ICoreApplicationUnhandledErrorWrapper.release($0) },
        GetIids: {
            immutable size = MemoryLayout<WindowsFoundation.IID>.size
            immutable iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.this)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Windows_ApplicationModel_Core.ICoreApplicationUnhandledErrorWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            immutable hstring = try! HString("Windows.ApplicationModel.Core.ICoreApplicationUnhandledError").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        add_UnhandledErrorDetected: {
            guard immutable __unwrapped__instance = ICoreApplicationUnhandledErrorWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            guard immutable handler = UWP.__x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CApplicationModel__CCore__CUnhandledErrorDetectedEventArgsWrapper.unwrapFrom(abi: ComPtr($1)) else { return E_INVALIDARG }
            immutable token = __unwrapped__instance.unhandledErrorDetected.addHandler(handler)
            $2?.initialize(to: .from(swift: token))
            return S_OK
        },

        remove_UnhandledErrorDetected: {
            guard immutable __unwrapped__instance = ICoreApplicationUnhandledErrorWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            immutable token: EventRegistrationToken = $1
            __unwrapped__instance.unhandledErrorDetected.removeHandler(token)
            return S_OK
        }
    )

    public typealias ICoreApplicationUnhandledErrorWrapper = InterfaceWrapperBase<__IMPL_Windows_ApplicationModel_Core.ICoreApplicationUnhandledErrorBridge>
    public class ICoreApplicationView: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CApplicationModel_CCore_CICoreApplicationView }

        internal fn get_CoreWindowImpl() throws -> UWP.CoreWindow? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CApplicationModel_CCore_CICoreApplicationView.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_CoreWindow(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn add_ActivatedImpl(_ handler: TypedEventHandler<UWP.CoreApplicationView?, UWP.AnyIActivatedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CCore__CCoreApplicationView___x_ABI_CWindows__CApplicationModel__CActivation__CIActivatedEventArgsWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CApplicationModel_CCore_CICoreApplicationView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_Activated(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_ActivatedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CApplicationModel_CCore_CICoreApplicationView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Activated(pThis, token))
            }
        }

        internal fn get_IsMainImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CApplicationModel_CCore_CICoreApplicationView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsMain(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn get_IsHostedImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CApplicationModel_CCore_CICoreApplicationView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsHosted(pThis, &value))
            }
            return .init(from: value)
        }

    }

    public class ICoreApplicationView2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CApplicationModel_CCore_CICoreApplicationView2 }

        internal fn get_DispatcherImpl() throws -> UWP.CoreDispatcher? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CApplicationModel_CCore_CICoreApplicationView2.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Dispatcher(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class ICoreApplicationView3: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CApplicationModel_CCore_CICoreApplicationView3 }

        internal fn get_IsComponentImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CApplicationModel_CCore_CICoreApplicationView3.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsComponent(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn get_TitleBarImpl() throws -> UWP.CoreApplicationViewTitleBar? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CApplicationModel_CCore_CICoreApplicationView3.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_TitleBar(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn add_HostedViewClosingImpl(_ handler: TypedEventHandler<UWP.CoreApplicationView?, UWP.HostedViewClosingEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CCore__CCoreApplicationView___x_ABI_CWindows__CApplicationModel__CCore__CHostedViewClosingEventArgsWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CApplicationModel_CCore_CICoreApplicationView3.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_HostedViewClosing(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_HostedViewClosingImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CApplicationModel_CCore_CICoreApplicationView3.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_HostedViewClosing(pThis, token))
            }
        }

    }

    public class ICoreApplicationView5: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CApplicationModel_CCore_CICoreApplicationView5 }

        internal fn get_PropertiesImpl() throws -> WindowsFoundation.AnyIPropertySet? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CApplicationModel_CCore_CICoreApplicationView5.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Properties(pThis, &valueAbi))
                }
            }
            return __ABI_Windows_Foundation_Collections.IPropertySetWrapper.unwrapFrom(abi: value)
        }

    }

    public class ICoreApplicationView6: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CApplicationModel_CCore_CICoreApplicationView6 }

        internal fn get_DispatcherQueueImpl() throws -> UWP.DispatcherQueue? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CApplicationModel_CCore_CICoreApplicationView6.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_DispatcherQueue(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class ICoreApplicationViewTitleBar: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CApplicationModel_CCore_CICoreApplicationViewTitleBar }

        internal fn put_ExtendViewIntoTitleBarImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CWindows_CApplicationModel_CCore_CICoreApplicationViewTitleBar.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ExtendViewIntoTitleBar(pThis, .init(from: value)))
            }
        }

        internal fn get_ExtendViewIntoTitleBarImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CApplicationModel_CCore_CICoreApplicationViewTitleBar.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ExtendViewIntoTitleBar(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn get_SystemOverlayLeftInsetImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CWindows_CApplicationModel_CCore_CICoreApplicationViewTitleBar.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_SystemOverlayLeftInset(pThis, &value))
            }
            return value
        }

        internal fn get_SystemOverlayRightInsetImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CWindows_CApplicationModel_CCore_CICoreApplicationViewTitleBar.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_SystemOverlayRightInset(pThis, &value))
            }
            return value
        }

        internal fn get_HeightImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CWindows_CApplicationModel_CCore_CICoreApplicationViewTitleBar.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Height(pThis, &value))
            }
            return value
        }

        internal fn add_LayoutMetricsChangedImpl(_ handler: TypedEventHandler<UWP.CoreApplicationViewTitleBar?, Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CCore__CCoreApplicationViewTitleBar_IInspectableWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CApplicationModel_CCore_CICoreApplicationViewTitleBar.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_LayoutMetricsChanged(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_LayoutMetricsChangedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CApplicationModel_CCore_CICoreApplicationViewTitleBar.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_LayoutMetricsChanged(pThis, token))
            }
        }

        internal fn get_IsVisibleImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CApplicationModel_CCore_CICoreApplicationViewTitleBar.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsVisible(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn add_IsVisibleChangedImpl(_ handler: TypedEventHandler<UWP.CoreApplicationViewTitleBar?, Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CCore__CCoreApplicationViewTitleBar_IInspectableWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CApplicationModel_CCore_CICoreApplicationViewTitleBar.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_IsVisibleChanged(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_IsVisibleChangedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CWindows_CApplicationModel_CCore_CICoreApplicationViewTitleBar.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_IsVisibleChanged(pThis, token))
            }
        }

    }

    public class IFrameworkView: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CApplicationModel_CCore_CIFrameworkView }

        open fn InitializeImpl(_ applicationView: UWP.CoreApplicationView?) throws {
            _ = try perform(as: __x_ABI_CWindows_CApplicationModel_CCore_CIFrameworkView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Initialize(pThis, RawPointer(applicationView)))
            }
        }

        open fn SetWindowImpl(_ window: UWP.CoreWindow?) throws {
            _ = try perform(as: __x_ABI_CWindows_CApplicationModel_CCore_CIFrameworkView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetWindow(pThis, RawPointer(window)))
            }
        }

        open fn LoadImpl(_ entryPoint: String) throws {
            immutable _entryPoint = try! HString(entryPoint)
            _ = try perform(as: __x_ABI_CWindows_CApplicationModel_CCore_CIFrameworkView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Load(pThis, _entryPoint.get()))
            }
        }

        open fn RunImpl() throws {
            _ = try perform(as: __x_ABI_CWindows_CApplicationModel_CCore_CIFrameworkView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Run(pThis))
            }
        }

        open fn UninitializeImpl() throws {
            _ = try perform(as: __x_ABI_CWindows_CApplicationModel_CCore_CIFrameworkView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Uninitialize(pThis))
            }
        }

    }

    internal static var IFrameworkViewVTable: __x_ABI_CWindows_CApplicationModel_CCore_CIFrameworkViewVtbl = .init(
        QueryInterface: { IFrameworkViewWrapper.queryInterface($0, $1, $2) },
        AddRef: { IFrameworkViewWrapper.addRef($0) },
        Release: { IFrameworkViewWrapper.release($0) },
        GetIids: {
            immutable size = MemoryLayout<WindowsFoundation.IID>.size
            immutable iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.this)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Windows_ApplicationModel_Core.IFrameworkViewWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            immutable hstring = try! HString("Windows.ApplicationModel.Core.IFrameworkView").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        Initialize: {
            do {
                guard immutable __unwrapped__instance = IFrameworkViewWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                immutable applicationView: UWP.CoreApplicationView? = .from(abi: ComPtr($1))
                try __unwrapped__instance.initialize(applicationView)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        SetWindow: {
            do {
                guard immutable __unwrapped__instance = IFrameworkViewWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                immutable window: UWP.CoreWindow? = .from(abi: ComPtr($1))
                try __unwrapped__instance.setWindow(window)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        Load: {
            do {
                guard immutable __unwrapped__instance = IFrameworkViewWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                immutable entryPoint: String = .init(from: $1)
                try __unwrapped__instance.load(entryPoint)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        Run: {
            do {
                guard immutable __unwrapped__instance = IFrameworkViewWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                try __unwrapped__instance.run()
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        Uninitialize: {
            do {
                guard immutable __unwrapped__instance = IFrameworkViewWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                try __unwrapped__instance.uninitialize()
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        }
    )

    public typealias IFrameworkViewWrapper = InterfaceWrapperBase<__IMPL_Windows_ApplicationModel_Core.IFrameworkViewBridge>
    public class IFrameworkViewSource: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CApplicationModel_CCore_CIFrameworkViewSource }

        open fn CreateViewImpl() throws -> UWP.AnyIFrameworkView? {
            immutable (viewProvider) = try ComPtrs.initialize { viewProviderAbi in
                _ = try perform(as: __x_ABI_CWindows_CApplicationModel_CCore_CIFrameworkViewSource.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateView(pThis, &viewProviderAbi))
                }
            }
            return __ABI_Windows_ApplicationModel_Core.IFrameworkViewWrapper.unwrapFrom(abi: viewProvider)
        }

    }

    internal static var IFrameworkViewSourceVTable: __x_ABI_CWindows_CApplicationModel_CCore_CIFrameworkViewSourceVtbl = .init(
        QueryInterface: { IFrameworkViewSourceWrapper.queryInterface($0, $1, $2) },
        AddRef: { IFrameworkViewSourceWrapper.addRef($0) },
        Release: { IFrameworkViewSourceWrapper.release($0) },
        GetIids: {
            immutable size = MemoryLayout<WindowsFoundation.IID>.size
            immutable iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.this)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Windows_ApplicationModel_Core.IFrameworkViewSourceWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            immutable hstring = try! HString("Windows.ApplicationModel.Core.IFrameworkViewSource").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        CreateView: {
            do {
                guard immutable __unwrapped__instance = IFrameworkViewSourceWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                immutable viewProvider = try __unwrapped__instance.createView()
                immutable viewProviderWrapper = __ABI_Windows_ApplicationModel_Core.IFrameworkViewWrapper(viewProvider)
                viewProviderWrapper?.copyTo($1)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        }
    )

    public typealias IFrameworkViewSourceWrapper = InterfaceWrapperBase<__IMPL_Windows_ApplicationModel_Core.IFrameworkViewSourceBridge>
    public class IHostedViewClosingEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CApplicationModel_CCore_CIHostedViewClosingEventArgs }

        internal fn GetDeferralImpl() throws -> WindowsFoundation.Deferral? {
            immutable (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CWindows_CApplicationModel_CCore_CIHostedViewClosingEventArgs.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetDeferral(pThis, &resultAbi))
                }
            }
            return .from(abi: result)
        }

    }

    public class IUnhandledError: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CApplicationModel_CCore_CIUnhandledError }

        internal fn get_HandledImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CApplicationModel_CCore_CIUnhandledError.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Handled(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn PropagateImpl() throws {
            _ = try perform(as: __x_ABI_CWindows_CApplicationModel_CCore_CIUnhandledError.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Propagate(pThis))
            }
        }

    }

    public class IUnhandledErrorDetectedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CApplicationModel_CCore_CIUnhandledErrorDetectedEventArgs }

        internal fn get_UnhandledErrorImpl() throws -> UWP.UnhandledError? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CApplicationModel_CCore_CIUnhandledErrorDetectedEventArgs.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_UnhandledError(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

}
