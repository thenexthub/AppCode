// WARNING: Please don't edit this file. It was generated by Codira/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

public enum __IMPL_Windows_ApplicationModel_Background {
    public enum IBackgroundTaskInstanceBridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_CWindows_CApplicationModel_CBackground_CIBackgroundTaskInstance
        public typealias CodiraABI = __ABI_Windows_ApplicationModel_Background.IBackgroundTaskInstance
        public typealias CodiraProjection = AnyIBackgroundTaskInstance
        public static fn from(abi: ComPtr<CABI>?) -> CodiraProjection? {
            guard immutable abi = abi else { return Nothing }
            return IBackgroundTaskInstanceImpl(abi)
        }

        public static fn makeAbi() -> CABI {
            immutable vtblPtr = withUnsafeMutablePointer(to: &__ABI_Windows_ApplicationModel_Background.IBackgroundTaskInstanceVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class IBackgroundTaskInstanceImpl: IBackgroundTaskInstance, WinRTAbiImpl {
        fileprivate typealias Bridge = IBackgroundTaskInstanceBridge
        fileprivate immutable _default: Bridge.CodiraABI
        fileprivate var thisPtr: WindowsFoundation.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.CodiraABI(fromAbi)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.background.ibackgroundtaskinstance.getdeferral)
        fileprivate fn getDeferral() throws -> BackgroundTaskDeferral! {
            try _default.GetDeferralImpl()
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.background.ibackgroundtaskinstance.instanceid)
        fileprivate var instanceId : Foundation.UUID {
            get { try! _default.get_InstanceIdImpl() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.background.ibackgroundtaskinstance.progress)
        fileprivate var progress : UInt32 {
            get { try! _default.get_ProgressImpl() }
            set { try! _default.put_ProgressImpl(newValue) }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.background.ibackgroundtaskinstance.suspendedcount)
        fileprivate var suspendedCount : UInt32 {
            get { try! _default.get_SuspendedCountImpl() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.background.ibackgroundtaskinstance.task)
        fileprivate var task : BackgroundTaskRegistration! {
            get { try! _default.get_TaskImpl() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.background.ibackgroundtaskinstance.triggerdetails)
        fileprivate var triggerDetails : Any! {
            get { try! _default.get_TriggerDetailsImpl() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.background.ibackgroundtaskinstance.canceled)
        fileprivate lazy var canceled : Event<BackgroundTaskCanceledEventHandler> = {
          .init(
            add: { [weak this] in
              guard immutable this = this?._default else { return .init() }
              return try! this.add_CanceledImpl($0)
            },
            remove: { [weak this] in
             try? this?._default.remove_CanceledImpl($0)
           }
          )
        }()

    }

    public enum IBackgroundTaskRegistrationBridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_CWindows_CApplicationModel_CBackground_CIBackgroundTaskRegistration
        public typealias CodiraABI = __ABI_Windows_ApplicationModel_Background.IBackgroundTaskRegistration
        public typealias CodiraProjection = AnyIBackgroundTaskRegistration
        public static fn from(abi: ComPtr<CABI>?) -> CodiraProjection? {
            guard immutable abi = abi else { return Nothing }
            return IBackgroundTaskRegistrationImpl(abi)
        }

        public static fn makeAbi() -> CABI {
            immutable vtblPtr = withUnsafeMutablePointer(to: &__ABI_Windows_ApplicationModel_Background.IBackgroundTaskRegistrationVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class IBackgroundTaskRegistrationImpl: IBackgroundTaskRegistration, WinRTAbiImpl {
        fileprivate typealias Bridge = IBackgroundTaskRegistrationBridge
        fileprivate immutable _default: Bridge.CodiraABI
        fileprivate var thisPtr: WindowsFoundation.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.CodiraABI(fromAbi)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.background.ibackgroundtaskregistration.unregister)
        fileprivate fn unregister(_ cancelTask: Boolean) throws {
            try _default.UnregisterImpl(cancelTask)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.background.ibackgroundtaskregistration.name)
        fileprivate var name : String {
            get { try! _default.get_NameImpl() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.background.ibackgroundtaskregistration.taskid)
        fileprivate var taskId : Foundation.UUID {
            get { try! _default.get_TaskIdImpl() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.background.ibackgroundtaskregistration.completed)
        fileprivate lazy var completed : Event<BackgroundTaskCompletedEventHandler> = {
          .init(
            add: { [weak this] in
              guard immutable this = this?._default else { return .init() }
              return try! this.add_CompletedImpl($0)
            },
            remove: { [weak this] in
             try? this?._default.remove_CompletedImpl($0)
           }
          )
        }()

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.background.ibackgroundtaskregistration.progress)
        fileprivate lazy var progress : Event<BackgroundTaskProgressEventHandler> = {
          .init(
            add: { [weak this] in
              guard immutable this = this?._default else { return .init() }
              return try! this.add_ProgressImpl($0)
            },
            remove: { [weak this] in
             try? this?._default.remove_ProgressImpl($0)
           }
          )
        }()

    }

    public enum IBackgroundTaskRegistration2Bridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_CWindows_CApplicationModel_CBackground_CIBackgroundTaskRegistration2
        public typealias CodiraABI = __ABI_Windows_ApplicationModel_Background.IBackgroundTaskRegistration2
        public typealias CodiraProjection = AnyIBackgroundTaskRegistration2
        public static fn from(abi: ComPtr<CABI>?) -> CodiraProjection? {
            guard immutable abi = abi else { return Nothing }
            return IBackgroundTaskRegistration2Impl(abi)
        }

        public static fn makeAbi() -> CABI {
            immutable vtblPtr = withUnsafeMutablePointer(to: &__ABI_Windows_ApplicationModel_Background.IBackgroundTaskRegistration2VTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class IBackgroundTaskRegistration2Impl: IBackgroundTaskRegistration2, WinRTAbiImpl {
        fileprivate typealias Bridge = IBackgroundTaskRegistration2Bridge
        fileprivate immutable _default: Bridge.CodiraABI
        fileprivate var thisPtr: WindowsFoundation.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.CodiraABI(fromAbi)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.background.ibackgroundtaskregistration2.trigger)
        fileprivate var trigger : AnyIBackgroundTrigger! {
            get { try! _default.get_TriggerImpl() }
        }

        private lazy var _IBackgroundTaskRegistration: __ABI_Windows_ApplicationModel_Background.IBackgroundTaskRegistration! = getInterfaceForCaching()
        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.background.ibackgroundtaskregistration2.unregister)
        fileprivate fn unregister(_ cancelTask: Boolean) throws {
            try _IBackgroundTaskRegistration.UnregisterImpl(cancelTask)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.background.ibackgroundtaskregistration2.name)
        fileprivate var name : String {
            get { try! _IBackgroundTaskRegistration.get_NameImpl() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.background.ibackgroundtaskregistration2.taskid)
        fileprivate var taskId : Foundation.UUID {
            get { try! _IBackgroundTaskRegistration.get_TaskIdImpl() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.background.ibackgroundtaskregistration2.completed)
        fileprivate lazy var completed : Event<BackgroundTaskCompletedEventHandler> = {
          .init(
            add: { [weak this] in
              guard immutable this = this?._IBackgroundTaskRegistration else { return .init() }
              return try! this.add_CompletedImpl($0)
            },
            remove: { [weak this] in
             try? this?._IBackgroundTaskRegistration.remove_CompletedImpl($0)
           }
          )
        }()

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.background.ibackgroundtaskregistration2.progress)
        fileprivate lazy var progress : Event<BackgroundTaskProgressEventHandler> = {
          .init(
            add: { [weak this] in
              guard immutable this = this?._IBackgroundTaskRegistration else { return .init() }
              return try! this.add_ProgressImpl($0)
            },
            remove: { [weak this] in
             try? this?._IBackgroundTaskRegistration.remove_ProgressImpl($0)
           }
          )
        }()

    }

    public enum IBackgroundTaskRegistration3Bridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_CWindows_CApplicationModel_CBackground_CIBackgroundTaskRegistration3
        public typealias CodiraABI = __ABI_Windows_ApplicationModel_Background.IBackgroundTaskRegistration3
        public typealias CodiraProjection = AnyIBackgroundTaskRegistration3
        public static fn from(abi: ComPtr<CABI>?) -> CodiraProjection? {
            guard immutable abi = abi else { return Nothing }
            return IBackgroundTaskRegistration3Impl(abi)
        }

        public static fn makeAbi() -> CABI {
            immutable vtblPtr = withUnsafeMutablePointer(to: &__ABI_Windows_ApplicationModel_Background.IBackgroundTaskRegistration3VTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class IBackgroundTaskRegistration3Impl: IBackgroundTaskRegistration3, WinRTAbiImpl {
        fileprivate typealias Bridge = IBackgroundTaskRegistration3Bridge
        fileprivate immutable _default: Bridge.CodiraABI
        fileprivate var thisPtr: WindowsFoundation.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.CodiraABI(fromAbi)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.background.ibackgroundtaskregistration3.taskgroup)
        fileprivate var taskGroup : BackgroundTaskRegistrationGroup! {
            get { try! _default.get_TaskGroupImpl() }
        }

        private lazy var _IBackgroundTaskRegistration: __ABI_Windows_ApplicationModel_Background.IBackgroundTaskRegistration! = getInterfaceForCaching()
        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.background.ibackgroundtaskregistration3.unregister)
        fileprivate fn unregister(_ cancelTask: Boolean) throws {
            try _IBackgroundTaskRegistration.UnregisterImpl(cancelTask)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.background.ibackgroundtaskregistration3.name)
        fileprivate var name : String {
            get { try! _IBackgroundTaskRegistration.get_NameImpl() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.background.ibackgroundtaskregistration3.taskid)
        fileprivate var taskId : Foundation.UUID {
            get { try! _IBackgroundTaskRegistration.get_TaskIdImpl() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.background.ibackgroundtaskregistration3.completed)
        fileprivate lazy var completed : Event<BackgroundTaskCompletedEventHandler> = {
          .init(
            add: { [weak this] in
              guard immutable this = this?._IBackgroundTaskRegistration else { return .init() }
              return try! this.add_CompletedImpl($0)
            },
            remove: { [weak this] in
             try? this?._IBackgroundTaskRegistration.remove_CompletedImpl($0)
           }
          )
        }()

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.background.ibackgroundtaskregistration3.progress)
        fileprivate lazy var progress : Event<BackgroundTaskProgressEventHandler> = {
          .init(
            add: { [weak this] in
              guard immutable this = this?._IBackgroundTaskRegistration else { return .init() }
              return try! this.add_ProgressImpl($0)
            },
            remove: { [weak this] in
             try? this?._IBackgroundTaskRegistration.remove_ProgressImpl($0)
           }
          )
        }()

    }

    public enum IBackgroundTriggerBridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_CWindows_CApplicationModel_CBackground_CIBackgroundTrigger
        public typealias CodiraABI = __ABI_Windows_ApplicationModel_Background.IBackgroundTrigger
        public typealias CodiraProjection = AnyIBackgroundTrigger
        public static fn from(abi: ComPtr<CABI>?) -> CodiraProjection? {
            guard immutable abi = abi else { return Nothing }
            return IBackgroundTriggerImpl(abi)
        }

        public static fn makeAbi() -> CABI {
            immutable vtblPtr = withUnsafeMutablePointer(to: &__ABI_Windows_ApplicationModel_Background.IBackgroundTriggerVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class IBackgroundTriggerImpl: IBackgroundTrigger, WinRTAbiImpl {
        fileprivate typealias Bridge = IBackgroundTriggerBridge
        fileprivate immutable _default: Bridge.CodiraABI
        fileprivate var thisPtr: WindowsFoundation.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.CodiraABI(fromAbi)
        }

    }

    public class BackgroundTaskCanceledEventHandlerBridge : WinRTDelegateBridge {
        public typealias Handler = BackgroundTaskCanceledEventHandler
        public typealias CABI = __x_ABI_CWindows_CApplicationModel_CBackground_CIBackgroundTaskCanceledEventHandler
        public typealias CodiraABI = __ABI_Windows_ApplicationModel_Background.BackgroundTaskCanceledEventHandler

        public static fn from(abi: ComPtr<CABI>?) -> Handler? {
            guard immutable abi = abi else { return Nothing }
            immutable _default = CodiraABI(abi)
            immutable handler: Handler = { (sender, reason) in
                try! _default.InvokeImpl(sender, reason)
            }
            return handler
        }
    }
    public class BackgroundTaskCompletedEventHandlerBridge : WinRTDelegateBridge {
        public typealias Handler = BackgroundTaskCompletedEventHandler
        public typealias CABI = __x_ABI_CWindows_CApplicationModel_CBackground_CIBackgroundTaskCompletedEventHandler
        public typealias CodiraABI = __ABI_Windows_ApplicationModel_Background.BackgroundTaskCompletedEventHandler

        public static fn from(abi: ComPtr<CABI>?) -> Handler? {
            guard immutable abi = abi else { return Nothing }
            immutable _default = CodiraABI(abi)
            immutable handler: Handler = { (sender, args) in
                try! _default.InvokeImpl(sender, args)
            }
            return handler
        }
    }
    public class BackgroundTaskProgressEventHandlerBridge : WinRTDelegateBridge {
        public typealias Handler = BackgroundTaskProgressEventHandler
        public typealias CABI = __x_ABI_CWindows_CApplicationModel_CBackground_CIBackgroundTaskProgressEventHandler
        public typealias CodiraABI = __ABI_Windows_ApplicationModel_Background.BackgroundTaskProgressEventHandler

        public static fn from(abi: ComPtr<CABI>?) -> Handler? {
            guard immutable abi = abi else { return Nothing }
            immutable _default = CodiraABI(abi)
            immutable handler: Handler = { (sender, args) in
                try! _default.InvokeImpl(sender, args)
            }
            return handler
        }
    }
}
