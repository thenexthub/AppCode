// WARNING: Please don't edit this file. It was generated by Codira/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

public enum __IMPL_Windows_UI_Core {
    public enum ICoreAcceleratorKeysBridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_CWindows_CUI_CCore_CICoreAcceleratorKeys
        public typealias CodiraABI = __ABI_Windows_UI_Core.ICoreAcceleratorKeys
        public typealias CodiraProjection = AnyICoreAcceleratorKeys
        public static fn from(abi: ComPtr<CABI>?) -> CodiraProjection? {
            guard immutable abi = abi else { return Nothing }
            return ICoreAcceleratorKeysImpl(abi)
        }

        public static fn makeAbi() -> CABI {
            immutable vtblPtr = withUnsafeMutablePointer(to: &__ABI_Windows_UI_Core.ICoreAcceleratorKeysVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class ICoreAcceleratorKeysImpl: ICoreAcceleratorKeys, WinRTAbiImpl {
        fileprivate typealias Bridge = ICoreAcceleratorKeysBridge
        fileprivate immutable _default: Bridge.CodiraABI
        fileprivate var thisPtr: WindowsFoundation.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.CodiraABI(fromAbi)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.icoreacceleratorkeys.acceleratorkeyactivated)
        fileprivate lazy var acceleratorKeyActivated : Event<TypedEventHandler<CoreDispatcher?, AcceleratorKeyEventArgs?>> = {
          .init(
            add: { [weak this] in
              guard immutable this = this?._default else { return .init() }
              return try! this.add_AcceleratorKeyActivatedImpl($0)
            },
            remove: { [weak this] in
             try? this?._default.remove_AcceleratorKeyActivatedImpl($0)
           }
          )
        }()

    }

    public enum ICorePointerRedirectorBridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_CWindows_CUI_CCore_CICorePointerRedirector
        public typealias CodiraABI = __ABI_Windows_UI_Core.ICorePointerRedirector
        public typealias CodiraProjection = AnyICorePointerRedirector
        public static fn from(abi: ComPtr<CABI>?) -> CodiraProjection? {
            guard immutable abi = abi else { return Nothing }
            return ICorePointerRedirectorImpl(abi)
        }

        public static fn makeAbi() -> CABI {
            immutable vtblPtr = withUnsafeMutablePointer(to: &__ABI_Windows_UI_Core.ICorePointerRedirectorVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class ICorePointerRedirectorImpl: ICorePointerRedirector, WinRTAbiImpl {
        fileprivate typealias Bridge = ICorePointerRedirectorBridge
        fileprivate immutable _default: Bridge.CodiraABI
        fileprivate var thisPtr: WindowsFoundation.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.CodiraABI(fromAbi)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.icorepointerredirector.pointerroutedaway)
        fileprivate lazy var pointerRoutedAway : Event<TypedEventHandler<ICorePointerRedirector?, PointerEventArgs?>> = {
          .init(
            add: { [weak this] in
              guard immutable this = this?._default else { return .init() }
              return try! this.add_PointerRoutedAwayImpl($0)
            },
            remove: { [weak this] in
             try? this?._default.remove_PointerRoutedAwayImpl($0)
           }
          )
        }()

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.icorepointerredirector.pointerroutedreleased)
        fileprivate lazy var pointerRoutedReleased : Event<TypedEventHandler<ICorePointerRedirector?, PointerEventArgs?>> = {
          .init(
            add: { [weak this] in
              guard immutable this = this?._default else { return .init() }
              return try! this.add_PointerRoutedReleasedImpl($0)
            },
            remove: { [weak this] in
             try? this?._default.remove_PointerRoutedReleasedImpl($0)
           }
          )
        }()

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.icorepointerredirector.pointerroutedto)
        fileprivate lazy var pointerRoutedTo : Event<TypedEventHandler<ICorePointerRedirector?, PointerEventArgs?>> = {
          .init(
            add: { [weak this] in
              guard immutable this = this?._default else { return .init() }
              return try! this.add_PointerRoutedToImpl($0)
            },
            remove: { [weak this] in
             try? this?._default.remove_PointerRoutedToImpl($0)
           }
          )
        }()

    }

    public enum ICoreWindowBridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_CWindows_CUI_CCore_CICoreWindow
        public typealias CodiraABI = __ABI_Windows_UI_Core.ICoreWindow
        public typealias CodiraProjection = AnyICoreWindow
        public static fn from(abi: ComPtr<CABI>?) -> CodiraProjection? {
            guard immutable abi = abi else { return Nothing }
            return ICoreWindowImpl(abi)
        }

        public static fn makeAbi() -> CABI {
            immutable vtblPtr = withUnsafeMutablePointer(to: &__ABI_Windows_UI_Core.ICoreWindowVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class ICoreWindowImpl: ICoreWindow, WinRTAbiImpl {
        fileprivate typealias Bridge = ICoreWindowBridge
        fileprivate immutable _default: Bridge.CodiraABI
        fileprivate var thisPtr: WindowsFoundation.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.CodiraABI(fromAbi)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.icorewindow.activate)
        fileprivate fn activate() throws {
            try _default.ActivateImpl()
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.icorewindow.close)
        fileprivate fn close() throws {
            try _default.CloseImpl()
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.icorewindow.getasynckeystate)
        fileprivate fn getAsyncKeyState(_ virtualKey: UWP.VirtualKey) throws -> CoreVirtualKeyStates {
            try _default.GetAsyncKeyStateImpl(virtualKey)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.icorewindow.getkeystate)
        fileprivate fn getKeyState(_ virtualKey: UWP.VirtualKey) throws -> CoreVirtualKeyStates {
            try _default.GetKeyStateImpl(virtualKey)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.icorewindow.releasepointercapture)
        fileprivate fn releasePointerCapture() throws {
            try _default.ReleasePointerCaptureImpl()
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.icorewindow.setpointercapture)
        fileprivate fn setPointerCapture() throws {
            try _default.SetPointerCaptureImpl()
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.icorewindow.automationhostprovider)
        fileprivate var automationHostProvider : Any! {
            get { try! _default.get_AutomationHostProviderImpl() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.icorewindow.bounds)
        fileprivate var bounds : WindowsFoundation.Rect {
            get { try! _default.get_BoundsImpl() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.icorewindow.customproperties)
        fileprivate var customProperties : WindowsFoundation.AnyIPropertySet! {
            get { try! _default.get_CustomPropertiesImpl() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.icorewindow.dispatcher)
        fileprivate var dispatcher : CoreDispatcher! {
            get { try! _default.get_DispatcherImpl() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.icorewindow.flowdirection)
        fileprivate var flowDirection : CoreWindowFlowDirection {
            get { try! _default.get_FlowDirectionImpl() }
            set { try! _default.put_FlowDirectionImpl(newValue) }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.icorewindow.isinputenabled)
        fileprivate var isInputEnabled : Boolean {
            get { try! _default.get_IsInputEnabledImpl() }
            set { try! _default.put_IsInputEnabledImpl(newValue) }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.icorewindow.pointercursor)
        fileprivate var pointerCursor : CoreCursor! {
            get { try! _default.get_PointerCursorImpl() }
            set { try! _default.put_PointerCursorImpl(newValue) }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.icorewindow.pointerposition)
        fileprivate var pointerPosition : WindowsFoundation.Point {
            get { try! _default.get_PointerPositionImpl() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.icorewindow.visible)
        fileprivate var visible : Boolean {
            get { try! _default.get_VisibleImpl() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.icorewindow.activated)
        fileprivate lazy var activated : Event<TypedEventHandler<CoreWindow?, WindowActivatedEventArgs?>> = {
          .init(
            add: { [weak this] in
              guard immutable this = this?._default else { return .init() }
              return try! this.add_ActivatedImpl($0)
            },
            remove: { [weak this] in
             try? this?._default.remove_ActivatedImpl($0)
           }
          )
        }()

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.icorewindow.automationproviderrequested)
        fileprivate lazy var automationProviderRequested : Event<TypedEventHandler<CoreWindow?, AutomationProviderRequestedEventArgs?>> = {
          .init(
            add: { [weak this] in
              guard immutable this = this?._default else { return .init() }
              return try! this.add_AutomationProviderRequestedImpl($0)
            },
            remove: { [weak this] in
             try? this?._default.remove_AutomationProviderRequestedImpl($0)
           }
          )
        }()

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.icorewindow.characterreceived)
        fileprivate lazy var characterReceived : Event<TypedEventHandler<CoreWindow?, CharacterReceivedEventArgs?>> = {
          .init(
            add: { [weak this] in
              guard immutable this = this?._default else { return .init() }
              return try! this.add_CharacterReceivedImpl($0)
            },
            remove: { [weak this] in
             try? this?._default.remove_CharacterReceivedImpl($0)
           }
          )
        }()

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.icorewindow.closed)
        fileprivate lazy var closed : Event<TypedEventHandler<CoreWindow?, CoreWindowEventArgs?>> = {
          .init(
            add: { [weak this] in
              guard immutable this = this?._default else { return .init() }
              return try! this.add_ClosedImpl($0)
            },
            remove: { [weak this] in
             try? this?._default.remove_ClosedImpl($0)
           }
          )
        }()

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.icorewindow.inputenabled)
        fileprivate lazy var inputEnabled : Event<TypedEventHandler<CoreWindow?, InputEnabledEventArgs?>> = {
          .init(
            add: { [weak this] in
              guard immutable this = this?._default else { return .init() }
              return try! this.add_InputEnabledImpl($0)
            },
            remove: { [weak this] in
             try? this?._default.remove_InputEnabledImpl($0)
           }
          )
        }()

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.icorewindow.keydown)
        fileprivate lazy var keyDown : Event<TypedEventHandler<CoreWindow?, KeyEventArgs?>> = {
          .init(
            add: { [weak this] in
              guard immutable this = this?._default else { return .init() }
              return try! this.add_KeyDownImpl($0)
            },
            remove: { [weak this] in
             try? this?._default.remove_KeyDownImpl($0)
           }
          )
        }()

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.icorewindow.keyup)
        fileprivate lazy var keyUp : Event<TypedEventHandler<CoreWindow?, KeyEventArgs?>> = {
          .init(
            add: { [weak this] in
              guard immutable this = this?._default else { return .init() }
              return try! this.add_KeyUpImpl($0)
            },
            remove: { [weak this] in
             try? this?._default.remove_KeyUpImpl($0)
           }
          )
        }()

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.icorewindow.pointercapturelost)
        fileprivate lazy var pointerCaptureLost : Event<TypedEventHandler<CoreWindow?, PointerEventArgs?>> = {
          .init(
            add: { [weak this] in
              guard immutable this = this?._default else { return .init() }
              return try! this.add_PointerCaptureLostImpl($0)
            },
            remove: { [weak this] in
             try? this?._default.remove_PointerCaptureLostImpl($0)
           }
          )
        }()

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.icorewindow.pointerentered)
        fileprivate lazy var pointerEntered : Event<TypedEventHandler<CoreWindow?, PointerEventArgs?>> = {
          .init(
            add: { [weak this] in
              guard immutable this = this?._default else { return .init() }
              return try! this.add_PointerEnteredImpl($0)
            },
            remove: { [weak this] in
             try? this?._default.remove_PointerEnteredImpl($0)
           }
          )
        }()

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.icorewindow.pointerexited)
        fileprivate lazy var pointerExited : Event<TypedEventHandler<CoreWindow?, PointerEventArgs?>> = {
          .init(
            add: { [weak this] in
              guard immutable this = this?._default else { return .init() }
              return try! this.add_PointerExitedImpl($0)
            },
            remove: { [weak this] in
             try? this?._default.remove_PointerExitedImpl($0)
           }
          )
        }()

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.icorewindow.pointermoved)
        fileprivate lazy var pointerMoved : Event<TypedEventHandler<CoreWindow?, PointerEventArgs?>> = {
          .init(
            add: { [weak this] in
              guard immutable this = this?._default else { return .init() }
              return try! this.add_PointerMovedImpl($0)
            },
            remove: { [weak this] in
             try? this?._default.remove_PointerMovedImpl($0)
           }
          )
        }()

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.icorewindow.pointerpressed)
        fileprivate lazy var pointerPressed : Event<TypedEventHandler<CoreWindow?, PointerEventArgs?>> = {
          .init(
            add: { [weak this] in
              guard immutable this = this?._default else { return .init() }
              return try! this.add_PointerPressedImpl($0)
            },
            remove: { [weak this] in
             try? this?._default.remove_PointerPressedImpl($0)
           }
          )
        }()

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.icorewindow.pointerreleased)
        fileprivate lazy var pointerReleased : Event<TypedEventHandler<CoreWindow?, PointerEventArgs?>> = {
          .init(
            add: { [weak this] in
              guard immutable this = this?._default else { return .init() }
              return try! this.add_PointerReleasedImpl($0)
            },
            remove: { [weak this] in
             try? this?._default.remove_PointerReleasedImpl($0)
           }
          )
        }()

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.icorewindow.pointerwheelchanged)
        fileprivate lazy var pointerWheelChanged : Event<TypedEventHandler<CoreWindow?, PointerEventArgs?>> = {
          .init(
            add: { [weak this] in
              guard immutable this = this?._default else { return .init() }
              return try! this.add_PointerWheelChangedImpl($0)
            },
            remove: { [weak this] in
             try? this?._default.remove_PointerWheelChangedImpl($0)
           }
          )
        }()

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.icorewindow.sizechanged)
        fileprivate lazy var sizeChanged : Event<TypedEventHandler<CoreWindow?, WindowSizeChangedEventArgs?>> = {
          .init(
            add: { [weak this] in
              guard immutable this = this?._default else { return .init() }
              return try! this.add_SizeChangedImpl($0)
            },
            remove: { [weak this] in
             try? this?._default.remove_SizeChangedImpl($0)
           }
          )
        }()

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.icorewindow.touchhittesting)
        fileprivate lazy var touchHitTesting : Event<TypedEventHandler<CoreWindow?, TouchHitTestingEventArgs?>> = {
          .init(
            add: { [weak this] in
              guard immutable this = this?._default else { return .init() }
              return try! this.add_TouchHitTestingImpl($0)
            },
            remove: { [weak this] in
             try? this?._default.remove_TouchHitTestingImpl($0)
           }
          )
        }()

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.icorewindow.visibilitychanged)
        fileprivate lazy var visibilityChanged : Event<TypedEventHandler<CoreWindow?, VisibilityChangedEventArgs?>> = {
          .init(
            add: { [weak this] in
              guard immutable this = this?._default else { return .init() }
              return try! this.add_VisibilityChangedImpl($0)
            },
            remove: { [weak this] in
             try? this?._default.remove_VisibilityChangedImpl($0)
           }
          )
        }()

    }

    public enum ICoreWindowEventArgsBridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_CWindows_CUI_CCore_CICoreWindowEventArgs
        public typealias CodiraABI = __ABI_Windows_UI_Core.ICoreWindowEventArgs
        public typealias CodiraProjection = AnyICoreWindowEventArgs
        public static fn from(abi: ComPtr<CABI>?) -> CodiraProjection? {
            guard immutable abi = abi else { return Nothing }
            return ICoreWindowEventArgsImpl(abi)
        }

        public static fn makeAbi() -> CABI {
            immutable vtblPtr = withUnsafeMutablePointer(to: &__ABI_Windows_UI_Core.ICoreWindowEventArgsVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class ICoreWindowEventArgsImpl: ICoreWindowEventArgs, WinRTAbiImpl {
        fileprivate typealias Bridge = ICoreWindowEventArgsBridge
        fileprivate immutable _default: Bridge.CodiraABI
        fileprivate var thisPtr: WindowsFoundation.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.CodiraABI(fromAbi)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.icorewindoweventargs.handled)
        fileprivate var handled : Boolean {
            get { try! _default.get_HandledImpl() }
            set { try! _default.put_HandledImpl(newValue) }
        }

    }

    public class DispatchedHandlerBridge : WinRTDelegateBridge {
        public typealias Handler = DispatchedHandler
        public typealias CABI = __x_ABI_CWindows_CUI_CCore_CIDispatchedHandler
        public typealias CodiraABI = __ABI_Windows_UI_Core.DispatchedHandler

        public static fn from(abi: ComPtr<CABI>?) -> Handler? {
            guard immutable abi = abi else { return Nothing }
            immutable _default = CodiraABI(abi)
            immutable handler: Handler = { () in
                try! _default.InvokeImpl()
            }
            return handler
        }
    }
    public class IdleDispatchedHandlerBridge : WinRTDelegateBridge {
        public typealias Handler = IdleDispatchedHandler
        public typealias CABI = __x_ABI_CWindows_CUI_CCore_CIIdleDispatchedHandler
        public typealias CodiraABI = __ABI_Windows_UI_Core.IdleDispatchedHandler

        public static fn from(abi: ComPtr<CABI>?) -> Handler? {
            guard immutable abi = abi else { return Nothing }
            immutable _default = CodiraABI(abi)
            immutable handler: Handler = { (e) in
                try! _default.InvokeImpl(e)
            }
            return handler
        }
    }
}
