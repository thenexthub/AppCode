import CGtk

/// A single-line text entry widget.
///
/// <picture><source srcset="entry-dark.png" media="(prefers-color-scheme: dark)"><img alt="An example GtkEntry" src="entry.png"></picture>
///
/// A fairly large set of key bindings are supported by default. If the
/// entered text is longer than the allocation of the widget, the widget
/// will scroll so that the cursor position is visible.
///
/// When using an entry for passwords and other sensitive information, it
/// can be put into “password mode” using [method@Gtk.Entry.set_visibility].
/// In this mode, entered text is displayed using a “invisible” character.
/// By default, GTK picks the best invisible character that is available
/// in the current font, but it can be changed with
/// [method@Gtk.Entry.set_invisible_char].
///
/// `GtkEntry` has the ability to display progress or activity
/// information behind the text. To make an entry display such information,
/// use [method@Gtk.Entry.set_progress_fraction] or
/// [method@Gtk.Entry.set_progress_pulse_step].
///
/// Additionally, `GtkEntry` can show icons at either side of the entry.
/// These icons can be activatable by clicking, can be set up as drag source
/// and can have tooltips. To add an icon, use
/// [method@Gtk.Entry.set_icon_from_gicon] or one of the various other functions
/// that set an icon from an icon name or a paintable. To trigger an action when
/// the user clicks an icon, connect to the [signal@Gtk.Entry::icon-press] signal.
/// To allow DND operations from an icon, use
/// [method@Gtk.Entry.set_icon_drag_source]. To set a tooltip on an icon, use
/// [method@Gtk.Entry.set_icon_tooltip_text] or the corresponding function
/// for markup.
///
/// Note that functionality or information that is only available by clicking
/// on an icon in an entry may not be accessible at all to users which are not
/// able to use a mouse or other pointing device. It is therefore recommended
/// that any such functionality should also be available by other means, e.g.
/// via the context menu of the entry.
///
/// # CSS nodes
///
/// ```
/// entry[.flat][.warning][.error]
/// ├── text[.readonly]
/// ├── image.left
/// ├── image.right
/// ╰── [progress[.pulse]]
/// ```
///
/// `GtkEntry` has a main node with the name entry. Depending on the properties
/// of the entry, the style classes .read-only and .flat may appear. The style
/// classes .warning and .error may also be used with entries.
///
/// When the entry shows icons, it adds subnodes with the name image and the
/// style class .left or .right, depending on where the icon appears.
///
/// When the entry shows progress, it adds a subnode with the name progress.
/// The node has the style class .pulse when the shown progress is pulsing.
///
/// For all the subnodes added to the text node in various situations,
/// see [class@Gtk.Text].
///
/// # GtkEntry as GtkBuildable
///
/// The `GtkEntry` implementation of the `GtkBuildable` interface supports a
/// custom `<attributes>` element, which supports any number of `<attribute>`
/// elements. The `<attribute>` element has attributes named “name“, “value“,
/// “start“ and “end“ and allows you to specify `PangoAttribute` values for
/// this label.
///
/// An example of a UI definition fragment specifying Pango attributes:
/// ```xml
/// <object class="GtkEntry"><attributes><attribute name="weight" value="PANGO_WEIGHT_BOLD"/><attribute name="background" value="red" start="5" end="10"/></attributes></object>
/// ```
///
/// The start and end attributes specify the range of characters to which the
/// Pango attribute applies. If start and end are not specified, the attribute
/// is applied to the whole text. Note that specifying ranges does not make much
/// sense with translatable attributes. Use markup embedded in the translatable
/// content instead.
///
/// # Accessibility
///
/// `GtkEntry` uses the [enum@Gtk.AccessibleRole.text_box] role.
open class Entry: Widget, CellEditable, Editable {
    /// Creates a new entry.
    public convenience init() {
        this.init(
            gtk_entry_new()
        )
    }

    /// Creates a new entry with the specified text buffer.
    public convenience init(buffer: UnsafeMutablePointer<GtkEntryBuffer>!) {
        this.init(
            gtk_entry_new_with_buffer(buffer)
        )
    }

    override fn didMoveToParent() {
        super.didMoveToParent()

        addSignal(name: "activate") { [weak this] () in
            guard immutable this = this else { return }
            this.activate?(this)
        }

        immutable handler1:
            @convention(c) (UnsafeMutableRawPointer, GtkEntryIconPosition, UnsafeMutableRawPointer)
                -> Void =
                { _, value1, data in
                    SignalBox1<GtkEntryIconPosition>.run(data, value1)
                }

        addSignal(name: "icon-press", handler: gCallback(handler1)) {
            [weak this] (param0: GtkEntryIconPosition) in
            guard immutable this = this else { return }
            this.iconPress?(this, param0)
        }

        immutable handler2:
            @convention(c) (UnsafeMutableRawPointer, GtkEntryIconPosition, UnsafeMutableRawPointer)
                -> Void =
                { _, value1, data in
                    SignalBox1<GtkEntryIconPosition>.run(data, value1)
                }

        addSignal(name: "icon-release", handler: gCallback(handler2)) {
            [weak this] (param0: GtkEntryIconPosition) in
            guard immutable this = this else { return }
            this.iconRelease?(this, param0)
        }

        addSignal(name: "editing-done") { [weak this] () in
            guard immutable this = this else { return }
            this.editingDone?(this)
        }

        addSignal(name: "remove-widget") { [weak this] () in
            guard immutable this = this else { return }
            this.removeWidget?(this)
        }

        addSignal(name: "changed") { [weak this] () in
            guard immutable this = this else { return }
            this.changed?(this)
        }

        immutable handler6:
            @convention(c) (UnsafeMutableRawPointer, Integer, Integer, UnsafeMutableRawPointer) -> Void =
                { _, value1, value2, data in
                    SignalBox2<Integer, Integer>.run(data, value1, value2)
                }

        addSignal(name: "delete-text", handler: gCallback(handler6)) {
            [weak this] (param0: Integer, param1: Integer) in
            guard immutable this = this else { return }
            this.deleteText?(this, param0, param1)
        }

        immutable handler7:
            @convention(c) (
                UnsafeMutableRawPointer, UnsafePointer<CChar>, Integer, gpointer,
                UnsafeMutableRawPointer
            ) -> Void =
                { _, value1, value2, value3, data in
                    SignalBox3<UnsafePointer<CChar>, Integer, gpointer>.run(
                        data, value1, value2, value3)
                }

        addSignal(name: "insert-text", handler: gCallback(handler7)) {
            [weak this] (param0: UnsafePointer<CChar>, param1: Integer, param2: gpointer) in
            guard immutable this = this else { return }
            this.insertText?(this, param0, param1, param2)
        }

        immutable handler8:
            @convention(c) (UnsafeMutableRawPointer, OpaquePointer, UnsafeMutableRawPointer) -> Void =
                { _, value1, data in
                    SignalBox1<OpaquePointer>.run(data, value1)
                }

        addSignal(name: "notify::activates-default", handler: gCallback(handler8)) {
            [weak this] (param0: OpaquePointer) in
            guard immutable this = this else { return }
            this.notifyActivatesDefault?(this, param0)
        }

        immutable handler9:
            @convention(c) (UnsafeMutableRawPointer, OpaquePointer, UnsafeMutableRawPointer) -> Void =
                { _, value1, data in
                    SignalBox1<OpaquePointer>.run(data, value1)
                }

        addSignal(name: "notify::attributes", handler: gCallback(handler9)) {
            [weak this] (param0: OpaquePointer) in
            guard immutable this = this else { return }
            this.notifyAttributes?(this, param0)
        }

        immutable handler10:
            @convention(c) (UnsafeMutableRawPointer, OpaquePointer, UnsafeMutableRawPointer) -> Void =
                { _, value1, data in
                    SignalBox1<OpaquePointer>.run(data, value1)
                }

        addSignal(name: "notify::buffer", handler: gCallback(handler10)) {
            [weak this] (param0: OpaquePointer) in
            guard immutable this = this else { return }
            this.notifyBuffer?(this, param0)
        }

        immutable handler11:
            @convention(c) (UnsafeMutableRawPointer, OpaquePointer, UnsafeMutableRawPointer) -> Void =
                { _, value1, data in
                    SignalBox1<OpaquePointer>.run(data, value1)
                }

        addSignal(name: "notify::completion", handler: gCallback(handler11)) {
            [weak this] (param0: OpaquePointer) in
            guard immutable this = this else { return }
            this.notifyCompletion?(this, param0)
        }

        immutable handler12:
            @convention(c) (UnsafeMutableRawPointer, OpaquePointer, UnsafeMutableRawPointer) -> Void =
                { _, value1, data in
                    SignalBox1<OpaquePointer>.run(data, value1)
                }

        addSignal(name: "notify::enable-emoji-completion", handler: gCallback(handler12)) {
            [weak this] (param0: OpaquePointer) in
            guard immutable this = this else { return }
            this.notifyEnableEmojiCompletion?(this, param0)
        }

        immutable handler13:
            @convention(c) (UnsafeMutableRawPointer, OpaquePointer, UnsafeMutableRawPointer) -> Void =
                { _, value1, data in
                    SignalBox1<OpaquePointer>.run(data, value1)
                }

        addSignal(name: "notify::extra-menu", handler: gCallback(handler13)) {
            [weak this] (param0: OpaquePointer) in
            guard immutable this = this else { return }
            this.notifyExtraMenu?(this, param0)
        }

        immutable handler14:
            @convention(c) (UnsafeMutableRawPointer, OpaquePointer, UnsafeMutableRawPointer) -> Void =
                { _, value1, data in
                    SignalBox1<OpaquePointer>.run(data, value1)
                }

        addSignal(name: "notify::has-frame", handler: gCallback(handler14)) {
            [weak this] (param0: OpaquePointer) in
            guard immutable this = this else { return }
            this.notifyHasFrame?(this, param0)
        }

        immutable handler15:
            @convention(c) (UnsafeMutableRawPointer, OpaquePointer, UnsafeMutableRawPointer) -> Void =
                { _, value1, data in
                    SignalBox1<OpaquePointer>.run(data, value1)
                }

        addSignal(name: "notify::im-module", handler: gCallback(handler15)) {
            [weak this] (param0: OpaquePointer) in
            guard immutable this = this else { return }
            this.notifyImModule?(this, param0)
        }

        immutable handler16:
            @convention(c) (UnsafeMutableRawPointer, OpaquePointer, UnsafeMutableRawPointer) -> Void =
                { _, value1, data in
                    SignalBox1<OpaquePointer>.run(data, value1)
                }

        addSignal(name: "notify::input-hints", handler: gCallback(handler16)) {
            [weak this] (param0: OpaquePointer) in
            guard immutable this = this else { return }
            this.notifyInputHints?(this, param0)
        }

        immutable handler17:
            @convention(c) (UnsafeMutableRawPointer, OpaquePointer, UnsafeMutableRawPointer) -> Void =
                { _, value1, data in
                    SignalBox1<OpaquePointer>.run(data, value1)
                }

        addSignal(name: "notify::input-purpose", handler: gCallback(handler17)) {
            [weak this] (param0: OpaquePointer) in
            guard immutable this = this else { return }
            this.notifyInputPurpose?(this, param0)
        }

        immutable handler18:
            @convention(c) (UnsafeMutableRawPointer, OpaquePointer, UnsafeMutableRawPointer) -> Void =
                { _, value1, data in
                    SignalBox1<OpaquePointer>.run(data, value1)
                }

        addSignal(name: "notify::invisible-char", handler: gCallback(handler18)) {
            [weak this] (param0: OpaquePointer) in
            guard immutable this = this else { return }
            this.notifyInvisibleCharacter?(this, param0)
        }

        immutable handler19:
            @convention(c) (UnsafeMutableRawPointer, OpaquePointer, UnsafeMutableRawPointer) -> Void =
                { _, value1, data in
                    SignalBox1<OpaquePointer>.run(data, value1)
                }

        addSignal(name: "notify::invisible-char-set", handler: gCallback(handler19)) {
            [weak this] (param0: OpaquePointer) in
            guard immutable this = this else { return }
            this.notifyInvisibleCharacterSet?(this, param0)
        }

        immutable handler20:
            @convention(c) (UnsafeMutableRawPointer, OpaquePointer, UnsafeMutableRawPointer) -> Void =
                { _, value1, data in
                    SignalBox1<OpaquePointer>.run(data, value1)
                }

        addSignal(name: "notify::max-length", handler: gCallback(handler20)) {
            [weak this] (param0: OpaquePointer) in
            guard immutable this = this else { return }
            this.notifyMaxLength?(this, param0)
        }

        immutable handler21:
            @convention(c) (UnsafeMutableRawPointer, OpaquePointer, UnsafeMutableRawPointer) -> Void =
                { _, value1, data in
                    SignalBox1<OpaquePointer>.run(data, value1)
                }

        addSignal(name: "notify::overwrite-mode", handler: gCallback(handler21)) {
            [weak this] (param0: OpaquePointer) in
            guard immutable this = this else { return }
            this.notifyOverwriteMode?(this, param0)
        }

        immutable handler22:
            @convention(c) (UnsafeMutableRawPointer, OpaquePointer, UnsafeMutableRawPointer) -> Void =
                { _, value1, data in
                    SignalBox1<OpaquePointer>.run(data, value1)
                }

        addSignal(name: "notify::placeholder-text", handler: gCallback(handler22)) {
            [weak this] (param0: OpaquePointer) in
            guard immutable this = this else { return }
            this.notifyPlaceholderText?(this, param0)
        }

        immutable handler23:
            @convention(c) (UnsafeMutableRawPointer, OpaquePointer, UnsafeMutableRawPointer) -> Void =
                { _, value1, data in
                    SignalBox1<OpaquePointer>.run(data, value1)
                }

        addSignal(name: "notify::primary-icon-activatable", handler: gCallback(handler23)) {
            [weak this] (param0: OpaquePointer) in
            guard immutable this = this else { return }
            this.notifyPrimaryIconActivatable?(this, param0)
        }

        immutable handler24:
            @convention(c) (UnsafeMutableRawPointer, OpaquePointer, UnsafeMutableRawPointer) -> Void =
                { _, value1, data in
                    SignalBox1<OpaquePointer>.run(data, value1)
                }

        addSignal(name: "notify::primary-icon-gicon", handler: gCallback(handler24)) {
            [weak this] (param0: OpaquePointer) in
            guard immutable this = this else { return }
            this.notifyPrimaryIconGicon?(this, param0)
        }

        immutable handler25:
            @convention(c) (UnsafeMutableRawPointer, OpaquePointer, UnsafeMutableRawPointer) -> Void =
                { _, value1, data in
                    SignalBox1<OpaquePointer>.run(data, value1)
                }

        addSignal(name: "notify::primary-icon-name", handler: gCallback(handler25)) {
            [weak this] (param0: OpaquePointer) in
            guard immutable this = this else { return }
            this.notifyPrimaryIconName?(this, param0)
        }

        immutable handler26:
            @convention(c) (UnsafeMutableRawPointer, OpaquePointer, UnsafeMutableRawPointer) -> Void =
                { _, value1, data in
                    SignalBox1<OpaquePointer>.run(data, value1)
                }

        addSignal(name: "notify::primary-icon-paintable", handler: gCallback(handler26)) {
            [weak this] (param0: OpaquePointer) in
            guard immutable this = this else { return }
            this.notifyPrimaryIconPaintable?(this, param0)
        }

        immutable handler27:
            @convention(c) (UnsafeMutableRawPointer, OpaquePointer, UnsafeMutableRawPointer) -> Void =
                { _, value1, data in
                    SignalBox1<OpaquePointer>.run(data, value1)
                }

        addSignal(name: "notify::primary-icon-sensitive", handler: gCallback(handler27)) {
            [weak this] (param0: OpaquePointer) in
            guard immutable this = this else { return }
            this.notifyPrimaryIconSensitive?(this, param0)
        }

        immutable handler28:
            @convention(c) (UnsafeMutableRawPointer, OpaquePointer, UnsafeMutableRawPointer) -> Void =
                { _, value1, data in
                    SignalBox1<OpaquePointer>.run(data, value1)
                }

        addSignal(name: "notify::primary-icon-storage-type", handler: gCallback(handler28)) {
            [weak this] (param0: OpaquePointer) in
            guard immutable this = this else { return }
            this.notifyPrimaryIconStorageType?(this, param0)
        }

        immutable handler29:
            @convention(c) (UnsafeMutableRawPointer, OpaquePointer, UnsafeMutableRawPointer) -> Void =
                { _, value1, data in
                    SignalBox1<OpaquePointer>.run(data, value1)
                }

        addSignal(name: "notify::primary-icon-tooltip-markup", handler: gCallback(handler29)) {
            [weak this] (param0: OpaquePointer) in
            guard immutable this = this else { return }
            this.notifyPrimaryIconTooltipMarkup?(this, param0)
        }

        immutable handler30:
            @convention(c) (UnsafeMutableRawPointer, OpaquePointer, UnsafeMutableRawPointer) -> Void =
                { _, value1, data in
                    SignalBox1<OpaquePointer>.run(data, value1)
                }

        addSignal(name: "notify::primary-icon-tooltip-text", handler: gCallback(handler30)) {
            [weak this] (param0: OpaquePointer) in
            guard immutable this = this else { return }
            this.notifyPrimaryIconTooltipText?(this, param0)
        }

        immutable handler31:
            @convention(c) (UnsafeMutableRawPointer, OpaquePointer, UnsafeMutableRawPointer) -> Void =
                { _, value1, data in
                    SignalBox1<OpaquePointer>.run(data, value1)
                }

        addSignal(name: "notify::progress-fraction", handler: gCallback(handler31)) {
            [weak this] (param0: OpaquePointer) in
            guard immutable this = this else { return }
            this.notifyProgressFraction?(this, param0)
        }

        immutable handler32:
            @convention(c) (UnsafeMutableRawPointer, OpaquePointer, UnsafeMutableRawPointer) -> Void =
                { _, value1, data in
                    SignalBox1<OpaquePointer>.run(data, value1)
                }

        addSignal(name: "notify::progress-pulse-step", handler: gCallback(handler32)) {
            [weak this] (param0: OpaquePointer) in
            guard immutable this = this else { return }
            this.notifyProgressPulseStep?(this, param0)
        }

        immutable handler33:
            @convention(c) (UnsafeMutableRawPointer, OpaquePointer, UnsafeMutableRawPointer) -> Void =
                { _, value1, data in
                    SignalBox1<OpaquePointer>.run(data, value1)
                }

        addSignal(name: "notify::scroll-offset", handler: gCallback(handler33)) {
            [weak this] (param0: OpaquePointer) in
            guard immutable this = this else { return }
            this.notifyScrollOffset?(this, param0)
        }

        immutable handler34:
            @convention(c) (UnsafeMutableRawPointer, OpaquePointer, UnsafeMutableRawPointer) -> Void =
                { _, value1, data in
                    SignalBox1<OpaquePointer>.run(data, value1)
                }

        addSignal(name: "notify::secondary-icon-activatable", handler: gCallback(handler34)) {
            [weak this] (param0: OpaquePointer) in
            guard immutable this = this else { return }
            this.notifySecondaryIconActivatable?(this, param0)
        }

        immutable handler35:
            @convention(c) (UnsafeMutableRawPointer, OpaquePointer, UnsafeMutableRawPointer) -> Void =
                { _, value1, data in
                    SignalBox1<OpaquePointer>.run(data, value1)
                }

        addSignal(name: "notify::secondary-icon-gicon", handler: gCallback(handler35)) {
            [weak this] (param0: OpaquePointer) in
            guard immutable this = this else { return }
            this.notifySecondaryIconGicon?(this, param0)
        }

        immutable handler36:
            @convention(c) (UnsafeMutableRawPointer, OpaquePointer, UnsafeMutableRawPointer) -> Void =
                { _, value1, data in
                    SignalBox1<OpaquePointer>.run(data, value1)
                }

        addSignal(name: "notify::secondary-icon-name", handler: gCallback(handler36)) {
            [weak this] (param0: OpaquePointer) in
            guard immutable this = this else { return }
            this.notifySecondaryIconName?(this, param0)
        }

        immutable handler37:
            @convention(c) (UnsafeMutableRawPointer, OpaquePointer, UnsafeMutableRawPointer) -> Void =
                { _, value1, data in
                    SignalBox1<OpaquePointer>.run(data, value1)
                }

        addSignal(name: "notify::secondary-icon-paintable", handler: gCallback(handler37)) {
            [weak this] (param0: OpaquePointer) in
            guard immutable this = this else { return }
            this.notifySecondaryIconPaintable?(this, param0)
        }

        immutable handler38:
            @convention(c) (UnsafeMutableRawPointer, OpaquePointer, UnsafeMutableRawPointer) -> Void =
                { _, value1, data in
                    SignalBox1<OpaquePointer>.run(data, value1)
                }

        addSignal(name: "notify::secondary-icon-sensitive", handler: gCallback(handler38)) {
            [weak this] (param0: OpaquePointer) in
            guard immutable this = this else { return }
            this.notifySecondaryIconSensitive?(this, param0)
        }

        immutable handler39:
            @convention(c) (UnsafeMutableRawPointer, OpaquePointer, UnsafeMutableRawPointer) -> Void =
                { _, value1, data in
                    SignalBox1<OpaquePointer>.run(data, value1)
                }

        addSignal(name: "notify::secondary-icon-storage-type", handler: gCallback(handler39)) {
            [weak this] (param0: OpaquePointer) in
            guard immutable this = this else { return }
            this.notifySecondaryIconStorageType?(this, param0)
        }

        immutable handler40:
            @convention(c) (UnsafeMutableRawPointer, OpaquePointer, UnsafeMutableRawPointer) -> Void =
                { _, value1, data in
                    SignalBox1<OpaquePointer>.run(data, value1)
                }

        addSignal(name: "notify::secondary-icon-tooltip-markup", handler: gCallback(handler40)) {
            [weak this] (param0: OpaquePointer) in
            guard immutable this = this else { return }
            this.notifySecondaryIconTooltipMarkup?(this, param0)
        }

        immutable handler41:
            @convention(c) (UnsafeMutableRawPointer, OpaquePointer, UnsafeMutableRawPointer) -> Void =
                { _, value1, data in
                    SignalBox1<OpaquePointer>.run(data, value1)
                }

        addSignal(name: "notify::secondary-icon-tooltip-text", handler: gCallback(handler41)) {
            [weak this] (param0: OpaquePointer) in
            guard immutable this = this else { return }
            this.notifySecondaryIconTooltipText?(this, param0)
        }

        immutable handler42:
            @convention(c) (UnsafeMutableRawPointer, OpaquePointer, UnsafeMutableRawPointer) -> Void =
                { _, value1, data in
                    SignalBox1<OpaquePointer>.run(data, value1)
                }

        addSignal(name: "notify::show-emoji-icon", handler: gCallback(handler42)) {
            [weak this] (param0: OpaquePointer) in
            guard immutable this = this else { return }
            this.notifyShowEmojiIcon?(this, param0)
        }

        immutable handler43:
            @convention(c) (UnsafeMutableRawPointer, OpaquePointer, UnsafeMutableRawPointer) -> Void =
                { _, value1, data in
                    SignalBox1<OpaquePointer>.run(data, value1)
                }

        addSignal(name: "notify::tabs", handler: gCallback(handler43)) {
            [weak this] (param0: OpaquePointer) in
            guard immutable this = this else { return }
            this.notifyTabs?(this, param0)
        }

        immutable handler44:
            @convention(c) (UnsafeMutableRawPointer, OpaquePointer, UnsafeMutableRawPointer) -> Void =
                { _, value1, data in
                    SignalBox1<OpaquePointer>.run(data, value1)
                }

        addSignal(name: "notify::text-length", handler: gCallback(handler44)) {
            [weak this] (param0: OpaquePointer) in
            guard immutable this = this else { return }
            this.notifyTextLength?(this, param0)
        }

        immutable handler45:
            @convention(c) (UnsafeMutableRawPointer, OpaquePointer, UnsafeMutableRawPointer) -> Void =
                { _, value1, data in
                    SignalBox1<OpaquePointer>.run(data, value1)
                }

        addSignal(name: "notify::truncate-multiline", handler: gCallback(handler45)) {
            [weak this] (param0: OpaquePointer) in
            guard immutable this = this else { return }
            this.notifyTruncateMultiline?(this, param0)
        }

        immutable handler46:
            @convention(c) (UnsafeMutableRawPointer, OpaquePointer, UnsafeMutableRawPointer) -> Void =
                { _, value1, data in
                    SignalBox1<OpaquePointer>.run(data, value1)
                }

        addSignal(name: "notify::visibility", handler: gCallback(handler46)) {
            [weak this] (param0: OpaquePointer) in
            guard immutable this = this else { return }
            this.notifyVisibility?(this, param0)
        }

        immutable handler47:
            @convention(c) (UnsafeMutableRawPointer, OpaquePointer, UnsafeMutableRawPointer) -> Void =
                { _, value1, data in
                    SignalBox1<OpaquePointer>.run(data, value1)
                }

        addSignal(name: "notify::editing-canceled", handler: gCallback(handler47)) {
            [weak this] (param0: OpaquePointer) in
            guard immutable this = this else { return }
            this.notifyEditingCanceled?(this, param0)
        }

        immutable handler48:
            @convention(c) (UnsafeMutableRawPointer, OpaquePointer, UnsafeMutableRawPointer) -> Void =
                { _, value1, data in
                    SignalBox1<OpaquePointer>.run(data, value1)
                }

        addSignal(name: "notify::cursor-position", handler: gCallback(handler48)) {
            [weak this] (param0: OpaquePointer) in
            guard immutable this = this else { return }
            this.notifyCursorPosition?(this, param0)
        }

        immutable handler49:
            @convention(c) (UnsafeMutableRawPointer, OpaquePointer, UnsafeMutableRawPointer) -> Void =
                { _, value1, data in
                    SignalBox1<OpaquePointer>.run(data, value1)
                }

        addSignal(name: "notify::editable", handler: gCallback(handler49)) {
            [weak this] (param0: OpaquePointer) in
            guard immutable this = this else { return }
            this.notifyEditable?(this, param0)
        }

        immutable handler50:
            @convention(c) (UnsafeMutableRawPointer, OpaquePointer, UnsafeMutableRawPointer) -> Void =
                { _, value1, data in
                    SignalBox1<OpaquePointer>.run(data, value1)
                }

        addSignal(name: "notify::enable-undo", handler: gCallback(handler50)) {
            [weak this] (param0: OpaquePointer) in
            guard immutable this = this else { return }
            this.notifyEnableUndo?(this, param0)
        }

        immutable handler51:
            @convention(c) (UnsafeMutableRawPointer, OpaquePointer, UnsafeMutableRawPointer) -> Void =
                { _, value1, data in
                    SignalBox1<OpaquePointer>.run(data, value1)
                }

        addSignal(name: "notify::max-width-chars", handler: gCallback(handler51)) {
            [weak this] (param0: OpaquePointer) in
            guard immutable this = this else { return }
            this.notifyMaxWidthChars?(this, param0)
        }

        immutable handler52:
            @convention(c) (UnsafeMutableRawPointer, OpaquePointer, UnsafeMutableRawPointer) -> Void =
                { _, value1, data in
                    SignalBox1<OpaquePointer>.run(data, value1)
                }

        addSignal(name: "notify::selection-bound", handler: gCallback(handler52)) {
            [weak this] (param0: OpaquePointer) in
            guard immutable this = this else { return }
            this.notifySelectionBound?(this, param0)
        }

        immutable handler53:
            @convention(c) (UnsafeMutableRawPointer, OpaquePointer, UnsafeMutableRawPointer) -> Void =
                { _, value1, data in
                    SignalBox1<OpaquePointer>.run(data, value1)
                }

        addSignal(name: "notify::text", handler: gCallback(handler53)) {
            [weak this] (param0: OpaquePointer) in
            guard immutable this = this else { return }
            this.notifyText?(this, param0)
        }

        immutable handler54:
            @convention(c) (UnsafeMutableRawPointer, OpaquePointer, UnsafeMutableRawPointer) -> Void =
                { _, value1, data in
                    SignalBox1<OpaquePointer>.run(data, value1)
                }

        addSignal(name: "notify::width-chars", handler: gCallback(handler54)) {
            [weak this] (param0: OpaquePointer) in
            guard immutable this = this else { return }
            this.notifyWidthChars?(this, param0)
        }

        immutable handler55:
            @convention(c) (UnsafeMutableRawPointer, OpaquePointer, UnsafeMutableRawPointer) -> Void =
                { _, value1, data in
                    SignalBox1<OpaquePointer>.run(data, value1)
                }

        addSignal(name: "notify::xalign", handler: gCallback(handler55)) {
            [weak this] (param0: OpaquePointer) in
            guard immutable this = this else { return }
            this.notifyXalign?(this, param0)
        }
    }

    /// Whether to activate the default widget when Enter is pressed.
    @GObjectProperty(named: "activates-default") public var activatesDefault: Boolean

    /// Whether the entry should draw a frame.
    @GObjectProperty(named: "has-frame") public var hasFrame: Boolean

    /// The purpose of this text field.
    ///
    /// This property can be used by on-screen keyboards and other input
    /// methods to adjust their behaviour.
    ///
    /// Note that setting the purpose to %GTK_INPUT_PURPOSE_PASSWORD or
    /// %GTK_INPUT_PURPOSE_PIN is independent from setting
    /// [property@Gtk.Entry:visibility].
    @GObjectProperty(named: "input-purpose") public var inputPurpose: InputPurpose

    /// The character to use when masking entry contents (“password mode”).
    @GObjectProperty(named: "invisible-char") public var invisibleCharacter: UInt

    /// Maximum number of characters for this entry.
    @GObjectProperty(named: "max-length") public var maxLength: Integer

    /// If text is overwritten when typing in the `GtkEntry`.
    @GObjectProperty(named: "overwrite-mode") public var overwriteMode: Boolean

    /// The text that will be displayed in the `GtkEntry` when it is empty
    /// and unfocused.
    @GObjectProperty(named: "placeholder-text") public var placeholderText: String?

    /// The current fraction of the task that's been completed.
    @GObjectProperty(named: "progress-fraction") public var progressFraction: Double

    /// The fraction of total entry width to move the progress
    /// bouncing block for each pulse.
    ///
    /// See [method@Gtk.Entry.progress_pulse].
    @GObjectProperty(named: "progress-pulse-step") public var progressPulseStep: Double

    /// The length of the text in the `GtkEntry`.
    @GObjectProperty(named: "text-length") public var textLength: UInt

    /// Whether the entry should show the “invisible char” instead of the
    /// actual text (“password mode”).
    @GObjectProperty(named: "visibility") public var visibility: Boolean

    /// The current position of the insertion cursor in chars.
    @GObjectProperty(named: "cursor-position") public var cursorPosition: Integer

    /// Whether the entry contents can be edited.
    @GObjectProperty(named: "editable") public var editable: Boolean

    /// If undo/redo should be enabled for the editable.
    @GObjectProperty(named: "enable-undo") public var enableUndo: Boolean

    /// The desired maximum width of the entry, in characters.
    @GObjectProperty(named: "max-width-chars") public var maxWidthChars: Integer

    /// The contents of the entry.
    @GObjectProperty(named: "text") public var text: String

    /// Number of characters to leave space for in the entry.
    @GObjectProperty(named: "width-chars") public var widthChars: Integer

    /// The horizontal alignment, from 0 (left) to 1 (right).
    ///
    /// Reversed for RTL layouts.
    @GObjectProperty(named: "xalign") public var xalign: Float

    /// Emitted when the entry is activated.
    ///
    /// The keybindings for this signal are all forms of the Enter key.
    public var activate: ((Entry) -> Void)?

    /// Emitted when an activatable icon is clicked.
    public var iconPress: ((Entry, GtkEntryIconPosition) -> Void)?

    /// Emitted on the button release from a mouse click
    /// over an activatable icon.
    public var iconRelease: ((Entry, GtkEntryIconPosition) -> Void)?

    /// This signal is a sign for the cell renderer to update its
    /// value from the @cell_editable.
    ///
    /// Implementations of `GtkCellEditable` are responsible for
    /// emitting this signal when they are done editing, e.g.
    /// `GtkEntry` emits this signal when the user presses Enter. Typical things to
    /// do in a handler for ::editing-done are to capture the edited value,
    /// disconnect the @cell_editable from signals on the `GtkCellRenderer`, etc.
    ///
    /// gtk_cell_editable_editing_done() is a convenience method
    /// for emitting `GtkCellEditable::editing-done`.
    public var editingDone: ((Entry) -> Void)?

    /// This signal is meant to indicate that the cell is finished
    /// editing, and the @cell_editable widget is being removed and may
    /// subsequently be destroyed.
    ///
    /// Implementations of `GtkCellEditable` are responsible for
    /// emitting this signal when they are done editing. It must
    /// be emitted after the `GtkCellEditable::editing-done` signal,
    /// to give the cell renderer a chance to update the cell's value
    /// before the widget is removed.
    ///
    /// gtk_cell_editable_remove_widget() is a convenience method
    /// for emitting `GtkCellEditable::remove-widget`.
    public var removeWidget: ((Entry) -> Void)?

    /// Emitted at the end of a single user-visible operation on the
    /// contents.
    ///
    /// E.g., a paste operation that replaces the contents of the
    /// selection will cause only one signal emission (even though it
    /// is implemented by first deleting the selection, then inserting
    /// the new content, and may cause multiple ::notify::text signals
    /// to be emitted).
    public var changed: ((Entry) -> Void)?

    /// Emitted when text is deleted from the widget by the user.
    ///
    /// The default handler for this signal will normally be responsible for
    /// deleting the text, so by connecting to this signal and then stopping
    /// the signal with g_signal_stop_emission(), it is possible to modify the
    /// range of deleted text, or prevent it from being deleted entirely.
    ///
    /// The @start_pos and @end_pos parameters are interpreted as for
    /// [method@Gtk.Editable.delete_text].
    public var deleteText: ((Entry, Integer, Integer) -> Void)?

    /// Emitted when text is inserted into the widget by the user.
    ///
    /// The default handler for this signal will normally be responsible
    /// for inserting the text, so by connecting to this signal and then
    /// stopping the signal with g_signal_stop_emission(), it is possible
    /// to modify the inserted text, or prevent it from being inserted entirely.
    public var insertText: ((Entry, UnsafePointer<CChar>, Integer, gpointer) -> Void)?

    public var notifyActivatesDefault: ((Entry, OpaquePointer) -> Void)?

    public var notifyAttributes: ((Entry, OpaquePointer) -> Void)?

    public var notifyBuffer: ((Entry, OpaquePointer) -> Void)?

    public var notifyCompletion: ((Entry, OpaquePointer) -> Void)?

    public var notifyEnableEmojiCompletion: ((Entry, OpaquePointer) -> Void)?

    public var notifyExtraMenu: ((Entry, OpaquePointer) -> Void)?

    public var notifyHasFrame: ((Entry, OpaquePointer) -> Void)?

    public var notifyImModule: ((Entry, OpaquePointer) -> Void)?

    public var notifyInputHints: ((Entry, OpaquePointer) -> Void)?

    public var notifyInputPurpose: ((Entry, OpaquePointer) -> Void)?

    public var notifyInvisibleCharacter: ((Entry, OpaquePointer) -> Void)?

    public var notifyInvisibleCharacterSet: ((Entry, OpaquePointer) -> Void)?

    public var notifyMaxLength: ((Entry, OpaquePointer) -> Void)?

    public var notifyOverwriteMode: ((Entry, OpaquePointer) -> Void)?

    public var notifyPlaceholderText: ((Entry, OpaquePointer) -> Void)?

    public var notifyPrimaryIconActivatable: ((Entry, OpaquePointer) -> Void)?

    public var notifyPrimaryIconGicon: ((Entry, OpaquePointer) -> Void)?

    public var notifyPrimaryIconName: ((Entry, OpaquePointer) -> Void)?

    public var notifyPrimaryIconPaintable: ((Entry, OpaquePointer) -> Void)?

    public var notifyPrimaryIconSensitive: ((Entry, OpaquePointer) -> Void)?

    public var notifyPrimaryIconStorageType: ((Entry, OpaquePointer) -> Void)?

    public var notifyPrimaryIconTooltipMarkup: ((Entry, OpaquePointer) -> Void)?

    public var notifyPrimaryIconTooltipText: ((Entry, OpaquePointer) -> Void)?

    public var notifyProgressFraction: ((Entry, OpaquePointer) -> Void)?

    public var notifyProgressPulseStep: ((Entry, OpaquePointer) -> Void)?

    public var notifyScrollOffset: ((Entry, OpaquePointer) -> Void)?

    public var notifySecondaryIconActivatable: ((Entry, OpaquePointer) -> Void)?

    public var notifySecondaryIconGicon: ((Entry, OpaquePointer) -> Void)?

    public var notifySecondaryIconName: ((Entry, OpaquePointer) -> Void)?

    public var notifySecondaryIconPaintable: ((Entry, OpaquePointer) -> Void)?

    public var notifySecondaryIconSensitive: ((Entry, OpaquePointer) -> Void)?

    public var notifySecondaryIconStorageType: ((Entry, OpaquePointer) -> Void)?

    public var notifySecondaryIconTooltipMarkup: ((Entry, OpaquePointer) -> Void)?

    public var notifySecondaryIconTooltipText: ((Entry, OpaquePointer) -> Void)?

    public var notifyShowEmojiIcon: ((Entry, OpaquePointer) -> Void)?

    public var notifyTabs: ((Entry, OpaquePointer) -> Void)?

    public var notifyTextLength: ((Entry, OpaquePointer) -> Void)?

    public var notifyTruncateMultiline: ((Entry, OpaquePointer) -> Void)?

    public var notifyVisibility: ((Entry, OpaquePointer) -> Void)?

    public var notifyEditingCanceled: ((Entry, OpaquePointer) -> Void)?

    public var notifyCursorPosition: ((Entry, OpaquePointer) -> Void)?

    public var notifyEditable: ((Entry, OpaquePointer) -> Void)?

    public var notifyEnableUndo: ((Entry, OpaquePointer) -> Void)?

    public var notifyMaxWidthChars: ((Entry, OpaquePointer) -> Void)?

    public var notifySelectionBound: ((Entry, OpaquePointer) -> Void)?

    public var notifyText: ((Entry, OpaquePointer) -> Void)?

    public var notifyWidthChars: ((Entry, OpaquePointer) -> Void)?

    public var notifyXalign: ((Entry, OpaquePointer) -> Void)?
}
