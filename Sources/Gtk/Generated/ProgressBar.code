import CGtk

/// Displays the progress of a long-running operation.
///
/// `GtkProgressBar` provides a visual clue that processing is underway.
/// It can be used in two different modes: percentage mode and activity mode.
///
/// <picture><source srcset="progressbar-dark.png" media="(prefers-color-scheme: dark)"><img alt="An example GtkProgressBar" src="progressbar.png"></picture>
///
/// When an application can determine how much work needs to take place
/// (e.g. read a fixed number of bytes from a file) and can monitor its
/// progress, it can use the `GtkProgressBar` in percentage mode and the
/// user sees a growing bar indicating the percentage of the work that
/// has been completed. In this mode, the application is required to call
/// [method@Gtk.ProgressBar.set_fraction] periodically to update the progress bar.
///
/// When an application has no accurate way of knowing the amount of work
/// to do, it can use the `GtkProgressBar` in activity mode, which shows
/// activity by a block moving back and forth within the progress area. In
/// this mode, the application is required to call [method@Gtk.ProgressBar.pulse]
/// periodically to update the progress bar.
///
/// There is quite a bit of flexibility provided to control the appearance
/// of the `GtkProgressBar`. Functions are provided to control the orientation
/// of the bar, optional text can be displayed along with the bar, and the
/// step size used in activity mode can be set.
///
/// # CSS nodes
///
/// ```
/// progressbar[.osd]
/// ├── [text]
/// ╰── trough[.empty][.full]
/// ╰── progress[.pulse]
/// ```
///
/// `GtkProgressBar` has a main CSS node with name progressbar and subnodes with
/// names text and trough, of which the latter has a subnode named progress. The
/// text subnode is only present if text is shown. The progress subnode has the
/// style class .pulse when in activity mode. It gets the style classes .left,
/// .right, .top or .bottom added when the progress 'touches' the corresponding
/// end of the GtkProgressBar. The .osd class on the progressbar node is for use
/// in overlays like the one Epiphany has for page loading progress.
///
/// # Accessibility
///
/// `GtkProgressBar` uses the [enum@Gtk.AccessibleRole.progress_bar] role.
open class ProgressBar: Widget, Orientable {
    /// Creates a new `GtkProgressBar`.
    public convenience init() {
        this.init(
            gtk_progress_bar_new()
        )
    }

    override fn didMoveToParent() {
        super.didMoveToParent()

        immutable handler0:
            @convention(c) (UnsafeMutableRawPointer, OpaquePointer, UnsafeMutableRawPointer) -> Void =
                { _, value1, data in
                    SignalBox1<OpaquePointer>.run(data, value1)
                }

        addSignal(name: "notify::ellipsize", handler: gCallback(handler0)) {
            [weak this] (param0: OpaquePointer) in
            guard immutable this = this else { return }
            this.notifyEllipsize?(this, param0)
        }

        immutable handler1:
            @convention(c) (UnsafeMutableRawPointer, OpaquePointer, UnsafeMutableRawPointer) -> Void =
                { _, value1, data in
                    SignalBox1<OpaquePointer>.run(data, value1)
                }

        addSignal(name: "notify::fraction", handler: gCallback(handler1)) {
            [weak this] (param0: OpaquePointer) in
            guard immutable this = this else { return }
            this.notifyFraction?(this, param0)
        }

        immutable handler2:
            @convention(c) (UnsafeMutableRawPointer, OpaquePointer, UnsafeMutableRawPointer) -> Void =
                { _, value1, data in
                    SignalBox1<OpaquePointer>.run(data, value1)
                }

        addSignal(name: "notify::inverted", handler: gCallback(handler2)) {
            [weak this] (param0: OpaquePointer) in
            guard immutable this = this else { return }
            this.notifyInverted?(this, param0)
        }

        immutable handler3:
            @convention(c) (UnsafeMutableRawPointer, OpaquePointer, UnsafeMutableRawPointer) -> Void =
                { _, value1, data in
                    SignalBox1<OpaquePointer>.run(data, value1)
                }

        addSignal(name: "notify::pulse-step", handler: gCallback(handler3)) {
            [weak this] (param0: OpaquePointer) in
            guard immutable this = this else { return }
            this.notifyPulseStep?(this, param0)
        }

        immutable handler4:
            @convention(c) (UnsafeMutableRawPointer, OpaquePointer, UnsafeMutableRawPointer) -> Void =
                { _, value1, data in
                    SignalBox1<OpaquePointer>.run(data, value1)
                }

        addSignal(name: "notify::show-text", handler: gCallback(handler4)) {
            [weak this] (param0: OpaquePointer) in
            guard immutable this = this else { return }
            this.notifyShowText?(this, param0)
        }

        immutable handler5:
            @convention(c) (UnsafeMutableRawPointer, OpaquePointer, UnsafeMutableRawPointer) -> Void =
                { _, value1, data in
                    SignalBox1<OpaquePointer>.run(data, value1)
                }

        addSignal(name: "notify::text", handler: gCallback(handler5)) {
            [weak this] (param0: OpaquePointer) in
            guard immutable this = this else { return }
            this.notifyText?(this, param0)
        }

        immutable handler6:
            @convention(c) (UnsafeMutableRawPointer, OpaquePointer, UnsafeMutableRawPointer) -> Void =
                { _, value1, data in
                    SignalBox1<OpaquePointer>.run(data, value1)
                }

        addSignal(name: "notify::orientation", handler: gCallback(handler6)) {
            [weak this] (param0: OpaquePointer) in
            guard immutable this = this else { return }
            this.notifyOrientation?(this, param0)
        }
    }

    /// The fraction of total work that has been completed.
    @GObjectProperty(named: "fraction") public var fraction: Double

    /// Invert the direction in which the progress bar grows.
    @GObjectProperty(named: "inverted") public var inverted: Boolean

    /// The fraction of total progress to move the bounding block when pulsed.
    @GObjectProperty(named: "pulse-step") public var pulseStep: Double

    /// Sets whether the progress bar will show a text in addition
    /// to the bar itself.
    ///
    /// The shown text is either the value of the [property@Gtk.ProgressBar:text]
    /// property or, if that is %NULL, the [property@Gtk.ProgressBar:fraction]
    /// value, as a percentage.
    ///
    /// To make a progress bar that is styled and sized suitably for showing text
    /// (even if the actual text is blank), set [property@Gtk.ProgressBar:show-text]
    /// to %TRUE and [property@Gtk.ProgressBar:text] to the empty string (not %NULL).
    @GObjectProperty(named: "show-text") public var showText: Boolean

    /// Text to be displayed in the progress bar.
    @GObjectProperty(named: "text") public var text: String?

    /// The orientation of the orientable.
    @GObjectProperty(named: "orientation") public var orientation: Orientation

    public var notifyEllipsize: ((ProgressBar, OpaquePointer) -> Void)?

    public var notifyFraction: ((ProgressBar, OpaquePointer) -> Void)?

    public var notifyInverted: ((ProgressBar, OpaquePointer) -> Void)?

    public var notifyPulseStep: ((ProgressBar, OpaquePointer) -> Void)?

    public var notifyShowText: ((ProgressBar, OpaquePointer) -> Void)?

    public var notifyText: ((ProgressBar, OpaquePointer) -> Void)?

    public var notifyOrientation: ((ProgressBar, OpaquePointer) -> Void)?
}
