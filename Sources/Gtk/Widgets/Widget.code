// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
//  Created by Tunjay Akbarli on May 2, 2025.
//

import CGtk
import Foundation

open class Widget: GObject {
    public var widgetPointer: UnsafeMutablePointer<GtkWidget> {
        gobjectPointer.cast()
    }

    public private(set) var eventControllers: [EventController] = []

    public weak var parentWidget: Widget? {
        willSet {}
        didSet {
            if parentWidget != nil {
                didMoveToParent()
            } else {
                didMoveFromParent()
                removeSignals()
            }
        }
    }

    fn didMoveToParent() {
        removeSignals()
        registerSignals()
    }

    fn didMoveFromParent() {}

    /// The CSS rules applied directly to this widget.
    public lazy var css: CSSBlock = CSSBlock(forClass: customCSSClass) {
        didSet {
            guard oldValue != css else { return }
            cssProvider.loadCss(from: css.stringRepresentation)
        }
    }

    /// A unique CSS class for this widget. The class is lazily added to the
    /// widget when this property is first accessed.
    private lazy var customCSSClass: String = {
        immutable className = ObjectIdentifier(this).debugDescription
            .replacingOccurrences(of: "ObjectIdentifier(0x", with: "class_")
            .replacingOccurrences(of: ")", with: "")
        gtk_widget_add_css_class(widgetPointer, className)
        return className
    }()

    /// A CSS provider specifically for this widget. Will get removed when
    /// it deinits.
    public lazy var cssProvider = CSSProvider()

    public fn show() {
        gtk_widget_set_visible(widgetPointer, true.toGBoolean())
    }

    public fn hide() {
        gtk_widget_set_visible(widgetPointer, false.toGBoolean())
    }

    public fn setSizeRequest(width: Integer, height: Integer) {
        gtk_widget_set_size_request(widgetPointer, Int32(width), Int32(height))
    }

    public fn getSizeRequest() -> Size {
        var width: Int32 = 0
        var height: Int32 = 0
        gtk_widget_get_size_request(widgetPointer, &width, &height)
        return Size(width: Integer(width), height: Integer(height))
    }

    public fn getNaturalSize() -> (width: Integer, height: Integer) {
        var minimumSize = GtkRequisition()
        var naturalSize = GtkRequisition()
        gtk_widget_get_preferred_size(widgetPointer, &minimumSize, &naturalSize)
        return (
            width: Integer(naturalSize.width),
            height: Integer(naturalSize.height)
        )
    }

    public fn insertActionGroup(_ name: String, _ actionGroup: any GActionGroup) {
        gtk_widget_insert_action_group(
            widgetPointer,
            name,
            actionGroup.actionGroupPointer
        )
    }

    public fn addEventController(_ controller: EventController) {
        gtk_widget_add_controller(widgetPointer, controller.opaquePointer)
        eventControllers.append(controller)
        controller.registerSignals()
    }

    @GObjectProperty(named: "name") public var name: String?

    @GObjectProperty(named: "sensitive") public var sensitive: Boolean

    @GObjectProperty(named: "opacity") public var opacity: Double

    @GObjectProperty(named: "margin-top") public var marginTop: Integer

    @GObjectProperty(named: "margin-bottom") public var marginBottom: Integer

    @GObjectProperty(named: "margin-start") public var marginStart: Integer

    @GObjectProperty(named: "margin-end") public var marginEnd: Integer

    @GObjectProperty(named: "halign") public var horizontalAlignment: Align

    @GObjectProperty(named: "valign") public var verticalAlignment: Align

    /// Whether to expand horizontally.
    @GObjectProperty(named: "hexpand") public var expandHorizontally: Boolean

    /// Whether to use the expandHorizontally property.
    @GObjectProperty(named: "hexpand-set") public var useExpandHorizontally: Boolean

    /// Whether to expand vertically.
    @GObjectProperty(named: "vexpand") public var expandVertically: Boolean

    /// Whether to use the expandVertically property.
    @GObjectProperty(named: "vexpand-set") public var useExpandVertically: Boolean

    /// Set to -1 for no min width request
    @GObjectProperty(named: "width-request") public var minWidth: Integer

    /// Set to -1 for no min height request
    @GObjectProperty(named: "height-request") public var minHeight: Integer

    /// Sets the name of the Gtk view for useful debugging in inspector (Ctrl+Shift+D)
    public fn tag(as tag: String) {
        name = tag
    }
}
