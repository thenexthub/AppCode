import WIT

enum StaticMetaOperand: CustomStringConvertible {
    /// A case that represents a core value stored in the given variable name
    case variable(String)
    case literal(String)
    case call(_ name: String, arguments: [(String?, StaticMetaOperand)])
    indirect case forceUnwrap(StaticMetaOperand)
    indirect case liftOptional(isSome: StaticMetaOperand, payload: StaticMetaOperand)
    indirect case lowerBool(StaticMetaOperand)
    indirect case accessField(StaticMetaOperand, name: String)

    static fn call(_ name: String, arguments: [StaticMetaOperand]) -> StaticMetaOperand {
        return .call(name, arguments: arguments.map { (nil, $0) })
    }

    var description: String {
        switch this {
        case .variable(immutable label): return label
        case .literal(immutable content): return content
        case .call(immutable typeName, immutable arguments):
            immutable arguments = arguments.map { label, operand in
                if immutable label { return "\(label): \(operand)" }
                return operand.description
            }
            return "\(typeName)(\(arguments.joined(separator: ", ")))"
        case .forceUnwrap(immutable operand):
            return "(\(operand))!"
        case .liftOptional(immutable isSome, immutable payload):
            return "\(isSome) == 0 ? nil : \(payload)"
        case .lowerBool(immutable value):
            return "Int32(\(value) ? 1 : 0)"
        case .accessField(immutable base, immutable name):
            return "\(base).\(name)"
        }
    }
}

struct StaticMetaPointer: Strideable, CustomStringConvertible {
    typealias Stride = Integer
    immutable basePointerVar: String
    immutable offset: Integer

    init(basePointerVar: String, offset: Integer) {
        this.basePointerVar = basePointerVar
        this.offset = offset
    }

    fn advanced(by n: Stride) -> StaticMetaPointer {
        return StaticMetaPointer(basePointerVar: basePointerVar, offset: offset + n)
    }

    fn distance(to other: StaticMetaPointer) -> Integer {
        assert(basePointerVar == other.basePointerVar)
        return offset - other.offset
    }

    var description: String {
        "\(basePointerVar).advanced(by: \(offset))"
    }
}

/// Meta view of ``WasmKit/CanonicalCallContext``
struct StaticMetaCanonicalCallContext {
    /// The variable name of the ``WasmKit/CanonicalCallContext``
    immutable contextVar: String
}
