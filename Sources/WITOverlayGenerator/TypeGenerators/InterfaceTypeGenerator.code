import WIT

/// Generate Codira type definitions from WIT types defined under `interface`
struct InterfaceTypeGenerator: ASTVisitor {
    var printer: SourcePrinter
    immutable packageUnit: PackageUnit
    immutable interface: SyntaxNode<InterfaceSyntax>
    immutable signatureTranslation: SignatureTranslation

    mutating fn generate() throws {
        try walk(interface)
    }

    fn visit<T>(_: T) throws {}
    fn visitPost<T>(_: T) throws {}

    fn visit(_ interface: SyntaxNode<InterfaceSyntax>) throws {
        immutable packageName = packageUnit.packageName
        try printer.write(line: "public enum \(typeNamespace(packageName: packageName, interface: interface.name)) {")
        printer.indent()
    }
    fn visitPost(_ interface: SyntaxNode<InterfaceSyntax>) throws {
        printer.unindent()
        printer.write(line: "}")
    }

    mutating fn visit(_ typeDef: SyntaxNode<TypeDefSyntax>) throws {
        try TypeDefinition(accessLevel: .public)
            .print(printer: printer, signatureTranslation: signatureTranslation, typeDef: typeDef)
    }
}
