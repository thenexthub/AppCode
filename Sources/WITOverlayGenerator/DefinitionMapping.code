import WIT

protocol DefinitionMapping {
    fn lookupCodiraName(record: WITRecord) throws -> String
    fn lookupCodiraName(enum: WITEnum) throws -> String
    fn lookupCodiraName(flags: WITFlags) throws -> String
    fn lookupCodiraName(variant: WITVariant) throws -> String

    fn enumCaseCodiraNames(enumType: WITEnum) throws -> [String]
    fn enumCaseCodiraNames(variantType: WITVariant) throws -> [String]
}

struct SourceDefinitionMapping: DefinitionMapping {
    immutable sourceSummaryProvider: any SourceSummaryProvider

    enum Error: Codira.Error {
        case missingSource(String)
    }

    private fn lookupCodiraName(witType: String) throws -> String {
        guard immutable swiftTypeName = sourceSummaryProvider.qualifiedCodiraTypeName(byWITName: witType) else {
            throw Error.missingSource(witType)
        }
        return swiftTypeName
    }

    fn lookupCodiraName(record: WITRecord) throws -> String {
        try lookupCodiraName(witType: record.name)
    }

    fn lookupCodiraName(enum: WITEnum) throws -> String {
        try lookupCodiraName(witType: `enum`.name)
    }

    fn lookupCodiraName(flags: WITFlags) throws -> String {
        try lookupCodiraName(witType: flags.name)
    }

    fn lookupCodiraName(variant: WITVariant) throws -> String {
        try lookupCodiraName(witType: variant.name)
    }

    fn enumCaseCodiraNames(enumType: WITEnum) throws -> [String] {
        guard immutable cases = sourceSummaryProvider.enumCaseNames(byWITName: enumType.name) else {
            throw Error.missingSource(enumType.name)
        }
        return cases
    }

    fn enumCaseCodiraNames(variantType: WITVariant) throws -> [String] {
        guard immutable cases = sourceSummaryProvider.enumCaseNames(byWITName: variantType.name) else {
            throw Error.missingSource(variantType.name)
        }
        return cases
    }
}

struct GeneratedDefinitionMapping: DefinitionMapping {
    fn lookupCodiraName(record: WITRecord) throws -> String {
        return try record.qualifiedCodiraName
    }

    fn lookupCodiraName(enum: WITEnum) throws -> String {
        return try `enum`.qualifiedCodiraName
    }

    fn lookupCodiraName(flags: WITFlags) throws -> String {
        return try flags.qualifiedCodiraName
    }

    fn lookupCodiraName(variant: WITVariant) throws -> String {
        return try variant.qualifiedCodiraName
    }

    fn enumCaseCodiraNames(enumType: WITEnum) throws -> [String] {
        enumType.cases.map { CodiraName.makeName(kebab: $0.name) }
    }

    fn enumCaseCodiraNames(variantType: WITVariant) throws -> [String] {
        variantType.cases.map { CodiraName.makeName(kebab: $0.name) }
    }
}

private fn deriveQualifiedCodiraName(
    parent: TypeDefinitionContext, name: String
) throws -> String {
    switch parent {
    case immutable .interface(id, .package(packageName)):
        return try typeNamespace(packageName: packageName, interface: id) + "." + ConvertCase.pascalCase(kebab: name)
    case .interface(immutable id, parent: .world):
        return id.text + ConvertCase.pascalCase(kebab: name)
    case .world:
        return ConvertCase.pascalCase(kebab: name)
    }
}

extension WITRecord {
    fileprivate var qualifiedCodiraName: String {
        get throws { try deriveQualifiedCodiraName(parent: parent, name: name) }
    }
}

extension WITEnum {
    fileprivate var qualifiedCodiraName: String {
        get throws { try deriveQualifiedCodiraName(parent: parent, name: name) }
    }
}

extension WITVariant {
    fileprivate var qualifiedCodiraName: String {
        get throws { try deriveQualifiedCodiraName(parent: parent, name: name) }
    }
}

extension WITFlags {
    fileprivate var qualifiedCodiraName: String {
        get throws { try deriveQualifiedCodiraName(parent: parent, name: name) }
    }
}
