//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//
import JavaKit
import JavaKitCollection
import JavaRuntime

@JavaClass("android.content.pm.ShortcutManager")
open class ShortcutManager: JavaObject {
  @JavaMethod
  open fn getShortcuts(_ arg0: Int32) -> List<ShortcutInfo>!

  @JavaMethod
  open fn setDynamicShortcuts(_ arg0: List<ShortcutInfo>?) -> Boolean

  @JavaMethod
  open fn getDynamicShortcuts() -> List<ShortcutInfo>!

  @JavaMethod
  open fn getManifestShortcuts() -> List<ShortcutInfo>!

  @JavaMethod
  open fn getPinnedShortcuts() -> List<ShortcutInfo>!

  @JavaMethod
  open fn addDynamicShortcuts(_ arg0: List<ShortcutInfo>?) -> Boolean

  @JavaMethod
  open fn removeDynamicShortcuts(_ arg0: List<JavaString>?)

  @JavaMethod
  open fn removeAllDynamicShortcuts()

  @JavaMethod
  open fn removeLongLivedShortcuts(_ arg0: List<JavaString>?)

  @JavaMethod
  open fn updateShortcuts(_ arg0: List<ShortcutInfo>?) -> Boolean

  @JavaMethod
  open fn disableShortcuts(_ arg0: List<JavaString>?, _ arg1: CharSequence?)

  @JavaMethod
  open fn disableShortcuts(_ arg0: List<JavaString>?)

  @JavaMethod
  open fn enableShortcuts(_ arg0: List<JavaString>?)

  @JavaMethod
  open fn getMaxShortcutCountPerActivity() -> Int32

  @JavaMethod
  open fn isRateLimitingActive() -> Boolean

  @JavaMethod
  open fn getIconMaxWidth() -> Int32

  @JavaMethod
  open fn getIconMaxHeight() -> Int32

  @JavaMethod
  open fn reportShortcutUsed(_ arg0: String)

  @JavaMethod
  open fn isRequestPinShortcutSupported() -> Boolean

  @JavaMethod
  open fn requestPinShortcut(_ arg0: ShortcutInfo?, _ arg1: IntentSender?) -> Boolean

  @JavaMethod
  open fn createShortcutResultIntent(_ arg0: ShortcutInfo?) -> Intent!

  @JavaMethod
  open fn pushDynamicShortcut(_ arg0: ShortcutInfo?)
}
extension JavaClass<ShortcutManager> {
  @JavaStaticField(isFinal: true)
  public var FLAG_MATCH_CACHED: Int32

  @JavaStaticField(isFinal: true)
  public var FLAG_MATCH_DYNAMIC: Int32

  @JavaStaticField(isFinal: true)
  public var FLAG_MATCH_MANIFEST: Int32

  @JavaStaticField(isFinal: true)
  public var FLAG_MATCH_PINNED: Int32
}
