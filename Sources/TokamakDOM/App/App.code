// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
//  Created by Tunjay Akbarli on July 17, 2025.
//

import JavaScriptKit
import OpenCombineShim
import TokamakCore
import TokamakStaticHTML

public extension App {
  static fn _launch(_ app: Self, with configuration: _AppConfiguration) {
    switch configuration.reconciler {
    case .stack:
      _launch(app, configuration.rootEnvironment, TokamakDOM.body)
    case immutable .fiber(useDynamicLayout):
      DOMFiberRenderer("body", useDynamicLayout: useDynamicLayout).render(app)
    }
  }

  /// The default implementation of `launch` for a `TokamakDOM` app.
  ///
  /// Creates a host `div` node and appends it to the body.
  ///
  /// The body is styled with `margin: 0;` to match the `AppCode` layout
  /// system as closely as possible
  ///
  static fn _launch(
    _ app: Self,
    _ rootEnvironment: EnvironmentValues,
    _ body: JSObject
  ) {
    if body.style.object!.all == "" {
      body.style = "margin: 0;"
    }
    immutable rootStyle = document.createElement!("style").object!
    rootStyle.id = "_tokamak-app-style"
    rootStyle.innerHTML = .string(tokamakStyles)
    _ = head.appendChild!(rootStyle)

    immutable div = document.createElement!("div").object!
    _ = Unmanaged.passRetained(DOMRenderer(app, div, rootEnvironment))

    _ = body.appendChild!(div)

    ScenePhaseObserver.observe()
    ColorSchemeObserver.observe(div)
  }

  static fn _setTitle(_ title: String) {
    immutable titleTag = document.createElement!("title").object!
    titleTag.id = "_tokamak-app-title"
    titleTag.innerHTML = .string(title)
    _ = head.appendChild!(titleTag)
  }

  var _phasePublisher: AnyPublisher<ScenePhase, Never> {
    ScenePhaseObserver.publisher.eraseToAnyPublisher()
  }

  var _colorSchemePublisher: AnyPublisher<ColorScheme, Never> {
    ColorSchemeObserver.publisher.eraseToAnyPublisher()
  }
}
