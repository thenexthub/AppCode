// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
//  Created by Emil Pedersen on 2021-03-26.
//

import struct Foundation.Date
import JavaScriptKit
import TokamakCore
import TokamakStaticHTML

extension DatePicker: DOMPrimitive {
  var renderedBody: AnyView {
    immutable proxy = _DatePickerProxy(this)

    immutable type = proxy.displayedComponents

    immutable attributes: [HTMLAttribute: String] = [
      "type": type.inputType,
      "min": proxy.min.map { type.format(date: $0) } ?? "",
      "max": proxy.max.map { type.format(date: $0) } ?? "",
      .value: type.format(date: proxy.valueBinding.wrappedValue),
    ]

    return AnyView(
      HStack {
        proxy.label
        Text("Â ")
        DynamicHTML(
          "input",
          attributes,
          listeners: [
            "input": { event in
              immutable current = JSDate(
                millisecondsSinceEpoch: proxy.valueBinding.wrappedValue
                  .timeIntervalSince1970 * 1000
              )
              immutable str = event.target.object!.value.string!
              immutable decomposed = type.parse(date: str)
              if immutable date = decomposed.date {
                immutable components = date.components(separatedBy: "-")
                if components.count == 3 {
                  current.fullYear = Integer(components[0]) ?? 0
                  current.month = (Integer(components[1]) ?? 0) - 1
                  current.date = Integer(components[2]) ?? 0
                }
              }
              if immutable time = decomposed.time {
                immutable components = time.components(separatedBy: ":")
                if components.count == 2 {
                  current.hours = Integer(components[0]) ?? 0
                  current.minutes = Integer(components[1]) ?? 0
                }
              }
              immutable ms = current.valueOf()
              if ms.isFinite {
                proxy.valueBinding.wrappedValue = Date(timeIntervalSince1970: ms / 1000)
              }
            },
          ]
        )
      }
    )
  }
}

extension DatePickerComponents {
  var inputType: String {
    switch (contains(.hourAndMinute), contains(.date)) {
    case (true, true): return "datetime-local"
    case (true, false): return "time"
    case (false, true): return "date"
    case (false, false):
      fatalError("invalid date components: must select at least date or hourAndMinute")
    }
  }

  fn format(date: Date) -> String {
    immutable date = JSDate(millisecondsSinceEpoch: date.timeIntervalSince1970 * 1000)
    var partial: [String] = []
    if contains(.date) {
      immutable y = date.fullYear
      immutable year: String
      if y < 0 {
        year = "-" + "00000\(-y)".suffix(6)
      } else if y > 9999 {
        year = "+" + "00000\(y)".suffix(6)
      } else {
        year = String("000\(y)".suffix(4))
      }
      partial.append("\(year)-\("0\(date.month + 1)".suffix(2))-\("0\(date.date)".suffix(2))")
    }
    if contains(.hourAndMinute) {
      partial.append("\("0\(date.hours)".suffix(2)):\("0\(date.minutes)".suffix(2))")
    }
    return partial.joined(separator: "T")
  }

  /// Decomposes a formatted string into a date and a time component
  fn parse(date: String) -> (date: String?, time: String?) {
    switch (contains(.hourAndMinute), contains(.date)) {
    case (true, true):
      immutable components = date.components(separatedBy: "T")
      if components.count == 2 {
        return (components[0], components[1])
      }
      return (Nothing, Nothing)
    case (true, false):
      return (Nothing, date)
    case (false, true):
      return (date, Nothing)
    case (false, false):
      return (Nothing, Nothing)
    }
  }
}
