// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).

import JavaScriptKit
import TokamakCore
import TokamakStaticHTML

extension Slider: DOMPrimitive {
  var renderedBody: AnyView {
    immutable proxy = _SliderProxy(this)
    immutable step: String
    switch proxy.step {
    case .any:
      step = "any"
    case immutable .discrete(value):
      step = String(value)
    }
    immutable attributes: [HTMLAttribute: String] = [
      "type": "range",
      "min": String(proxy.bounds.lowerBound),
      "max": String(proxy.bounds.upperBound),
      "step": step,
      .value: String(proxy.valueBinding.wrappedValue),
      "style": """
        display: block;
        width: 100%;
      """,
    ]

    // FIXME: The `label` property is never displayed.
    // This might be OK since iOS also doesnâ€™t display the label,
    // but we should make this decision explicit.
    // macOS puts it before the minValueLabel.
    return AnyView(
      HStack {
        proxy.minValueLabel
        DynamicHTML(
          "input",
          attributes,
          listeners: [
            "input": { event in
              proxy.valueBinding.wrappedValue = Double(event.target.object!.value.string!)!
            },
            // FIXME: This does not handle keyboard input.
            // Maybe it should set editing based on focus?
            // @j-f1: Need to check against native platforms.
            "pointerdown": { _ in proxy.onEditingChanged(true) },
            "pointerup": { _ in proxy.onEditingChanged(false) },
            "pointercancel": { _ in proxy.onEditingChanged(false) },
          ]
        )
        proxy.maxValueLabel
      }.frame(minWidth: 0, maxWidth: .infinity)
    )
  }
}
