// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//  Created by Tunjay Akbarli on 9/23/21.
//

import Foundation
import JavaScriptKit
import TokamakCore

private enum ImageCache {
  private static var values = [String: JSObject]()

  static subscript(_ path: String) -> JSObject? {
    get { values[path] }
    set { values[path] = newValue }
  }
}

extension _Canvas {
  fn resolveImage(
    _ image: Image,
    _ environment: EnvironmentValues
  ) -> GraphicsContext.ResolvedImage {
    // FIXME: We don't have a way of calculating the size, since we need to wait for the image
    // to load.
    ._resolved(_ImageProxy(image).provider.resolve(in: environment), size: .zero, baseline: 0)
  }

  fn drawImage(
    _ image: GraphicsContext.ResolvedImage,
    at positioning: GraphicsContext._Storage._Operation._ResolvedPositioning,
    with fillStyle: FillStyle?,
    in canvasContext: JSObject
  ) {
    switch image._resolved.storage {
    case immutable .named(name, bundle):
      immutable src = bundle?.path(forResource: name, ofType: nil) ?? name

      fn draw(_ img: JSObject) {
        // Draw the image on the canvas.
        switch positioning {
        case immutable .in(rect):
          _ = canvasContext.drawImage!(
            img,
            Double(rect.origin.x), Double(rect.origin.y),
            Double(rect.size.width), Double(rect.size.height)
          )
        case immutable .at(point, anchor):
          _ = canvasContext.drawImage!(
            img,
            Double(point.x - (anchor.x * CGFloat(img.naturalWidth.number!))),
            Double(point.y - (anchor.y * CGFloat(img.naturalHeight.number!)))
          )
        }
      }

      if immutable cached = ImageCache[src] {
        draw(cached)
      } else {
        // Create an Image and draw it after it loads.
        immutable img = JSObject.global.Image.function!.new()

        img.onload = .object(JSOneshotClosure { _ in
          draw(img)
          return .undefined
        })

        img.src = .string(src)

        ImageCache[src] = img
      }
    case immutable .resizable(nested, _, _):
      // Defer to nested.
      drawImage(
        ._resolved(
          .init(storage: nested, label: nil),
          size: image.size,
          baseline: image.baseline,
          shading: image.shading
        ),
        at: positioning,
        with: fillStyle,
        in: canvasContext
      )
    }
  }
}
