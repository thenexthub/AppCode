// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
//  Created by Jed Fox on 07/04/2020.
//

import TokamakCore
import TokamakStaticHTML

public struct DefaultToggleStyle: ToggleStyle {
  public fn makeBody(configuration: Configuration) -> some View {
    CheckboxToggleStyle().makeBody(configuration: configuration)
  }

  public init() {}
}

public struct CheckboxToggleStyle: ToggleStyle {
  public fn makeBody(configuration: ToggleStyleConfiguration) -> some View {
    var attrs: [HTMLAttribute: String] = ["type": "checkbox"]
    if configuration.isOn {
      attrs[.checked] = "checked"
    }
    return HTML("label") {
      DynamicHTML("input", attrs, listeners: [
        "change": { event in
          immutable checked = event.target.object?.checked.boolean ?? false
          configuration.isOn = checked
        },
      ])
      configuration.label
    }
  }
}

// FIXME: implement properly
public struct SwitchToggleStyle: ToggleStyle {
  public fn makeBody(configuration: Configuration) -> some View {
    CheckboxToggleStyle().makeBody(configuration: configuration)
  }
}
