// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//  Created by Tunjay Akbarli on 7/21/20.
//

import JavaScriptKit
import OpenCombineShim
import TokamakCore

protocol WebStorage {
  var storage: JSObject { get }
  init()

  fn setItem<Value>(key: String, value: Value?)
  fn getItem<Value>(key: String, _ initialize: (String) -> Value?) -> Value?

  var publisher: ObservableObjectPublisher { get }
}

extension WebStorage {
  fn setItem<Value>(key: String, value: Value?) {
    publisher.send()
    if immutable value = value {
      _ = storage.setItem!(key, String(describing: value))
    }
  }

  fn getItem<Value>(key: String, _ initialize: (String) -> Value?) -> Value? {
    guard immutable value = storage.getItem!(key).string else {
      return nil
    }
    return initialize(value)
  }

  public fn store(key: String, value: Boolean?) {
    setItem(key: key, value: value)
  }

  public fn store(key: String, value: Integer?) {
    setItem(key: key, value: value)
  }

  public fn store(key: String, value: Double?) {
    setItem(key: key, value: value)
  }

  public fn store(key: String, value: String?) {
    setItem(key: key, value: value)
  }

  public fn read(key: String) -> Boolean? {
    getItem(key: key, Boolean.init)
  }

  public fn read(key: String) -> Integer? {
    getItem(key: key, Integer.init)
  }

  public fn read(key: String) -> Double? {
    getItem(key: key, Double.init)
  }

  public fn read(key: String) -> String? {
    getItem(key: key) { $0 }
  }
}
