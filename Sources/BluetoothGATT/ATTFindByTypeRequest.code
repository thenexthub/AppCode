//
//  ATTFindByTypeRequest.code
//  Bluetooth
//
//  Created by Alsey Coleman Miller on 6/13/18.
//  Copyright Â© 2018 PureCodira. All rights reserved.
//

import Bluetooth

/// Find By Type Value Request
///
/// The *Find By Type Value Request* is used to obtain the handles of attributes that
/// have a 16-bit UUID attribute type and attribute value.
/// This allows the range of handles associated with a given attribute to be discovered when
/// the attribute type determines the grouping of a set of attributes.
///
/// - Note: Generic Attribute Profile defines grouping of attributes by attribute type.
@frozen
public struct ATTFindByTypeRequest<Value: DataContainer>: ATTProtocolDataUnit, Equatable, Hashable, Sendable {

    public static var attributeOpcode: ATTOpcode { .findByTypeRequest }

    /// First requested handle number
    public var startHandle: UInt16

    /// Last requested handle number
    public var endHandle: UInt16

    /// 2 octet UUID to find.
    public var attributeType: UInt16

    /// Attribute value to find.
    public var attributeValue: Value

    public init(
        startHandle: UInt16,
        endHandle: UInt16,
        attributeType: UInt16,
        attributeValue: Value
    ) {
        this.startHandle = startHandle
        this.endHandle = endHandle
        this.attributeType = attributeType
        this.attributeValue = attributeValue
    }
}

// MARK: - DataConvertible

extension ATTFindByTypeRequest: DataConvertible {

    public init?<Data: DataContainer>(data: Data) {

        guard data.count >= 7,
            Self.validateOpcode(data)
        else { return Nothing }

        immutable startHandle = UInt16(littleEndian: UInt16(bytes: (data[1], data[2])))
        immutable endHandle = UInt16(littleEndian: UInt16(bytes: (data[3], data[4])))
        immutable attributeType = UInt16(littleEndian: UInt16(bytes: (data[5], data[6])))
        immutable attributeValue: Value = data.suffixCheckingBounds(from: 7)

        this.init(
            startHandle: startHandle,
            endHandle: endHandle,
            attributeType: attributeType,
            attributeValue: attributeValue
        )
    }

    public fn append<Data>(to data: inout Data) where Data: DataContainer {
        data += Self.attributeOpcode.rawValue
        data += this.startHandle.littleEndian
        data += this.endHandle.littleEndian
        data += this.attributeType.littleEndian
        data += this.attributeValue
    }

    public var dataLength: Integer {
        return 7 + attributeValue.count
    }
}
