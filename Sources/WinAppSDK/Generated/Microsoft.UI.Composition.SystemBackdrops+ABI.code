// WARNING: Please don't edit this file. It was generated by Codira/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import UWP
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

private var IID___x_ABI_CMicrosoft_CUI_CComposition_CSystemBackdrops_CIDesktopAcrylicController: WindowsFoundation.IID {
    .init(Data1: 0x7C20A6AF, Data2: 0x8EB3, Data3: 0x5F08, Data4: ( 0xBD,0xFC,0x6D,0x35,0xE3,0x5D,0xFE,0x45 ))// 7C20A6AF-8EB3-5F08-BDFC-6D35E35DFE45
}

private var IID___x_ABI_CMicrosoft_CUI_CComposition_CSystemBackdrops_CIDesktopAcrylicController2: WindowsFoundation.IID {
    .init(Data1: 0x88E0A368, Data2: 0xDFC7, Data3: 0x5971, Data4: ( 0xA5,0x0B,0x40,0xDF,0x5A,0xA5,0xF5,0xC2 ))// 88E0A368-DFC7-5971-A50B-40DF5AA5F5C2
}

private var IID___x_ABI_CMicrosoft_CUI_CComposition_CSystemBackdrops_CIDesktopAcrylicController3: WindowsFoundation.IID {
    .init(Data1: 0x30D917E6, Data2: 0x02D3, Data3: 0x59CA, Data4: ( 0xB4,0x40,0xBF,0x9D,0x2E,0x7C,0xC1,0x40 ))// 30D917E6-02D3-59CA-B440-BF9D2E7CC140
}

private var IID___x_ABI_CMicrosoft_CUI_CComposition_CSystemBackdrops_CIDesktopAcrylicControllerStatics: WindowsFoundation.IID {
    .init(Data1: 0xA9E8F790, Data2: 0x79EF, Data3: 0x5416, Data4: ( 0x9B,0x67,0x6B,0xCF,0xE8,0x67,0xC8,0xB7 ))// A9E8F790-79EF-5416-9B67-6BCFE867C8B7
}

private var IID___x_ABI_CMicrosoft_CUI_CComposition_CSystemBackdrops_CIMicaController: WindowsFoundation.IID {
    .init(Data1: 0x2DE996A9, Data2: 0x0A2A, Data3: 0x5889, Data4: ( 0xA8,0x9C,0x1F,0x84,0x06,0x0A,0x8C,0xAB ))// 2DE996A9-0A2A-5889-A89C-1F84060A8CAB
}

private var IID___x_ABI_CMicrosoft_CUI_CComposition_CSystemBackdrops_CIMicaController2: WindowsFoundation.IID {
    .init(Data1: 0xF1ED4A52, Data2: 0xD9CA, Data3: 0x506E, Data4: ( 0x95,0x86,0xCA,0xAE,0xFD,0x3A,0xA9,0x71 ))// F1ED4A52-D9CA-506E-9586-CAAEFD3AA971
}

private var IID___x_ABI_CMicrosoft_CUI_CComposition_CSystemBackdrops_CIMicaControllerStatics: WindowsFoundation.IID {
    .init(Data1: 0x7D85D834, Data2: 0xD514, Data3: 0x5250, Data4: ( 0xB7,0xC4,0x0B,0x78,0x50,0xD1,0xEF,0xDC ))// 7D85D834-D514-5250-B7C4-0B7850D1EFDC
}

private var IID___x_ABI_CMicrosoft_CUI_CComposition_CSystemBackdrops_CISystemBackdropConfiguration: WindowsFoundation.IID {
    .init(Data1: 0xEBCCE1B9, Data2: 0x0E0C, Data3: 0x5431, Data4: ( 0xAB,0x0E,0x00,0xF3,0xF0,0x66,0x99,0x62 ))// EBCCE1B9-0E0C-5431-AB0E-00F3F0669962
}

private var IID___x_ABI_CMicrosoft_CUI_CComposition_CSystemBackdrops_CISystemBackdropController: WindowsFoundation.IID {
    .init(Data1: 0x5632D76C, Data2: 0x0B74, Data3: 0x5B52, Data4: ( 0xAA,0x33,0x80,0x26,0x20,0x68,0xAE,0xB2 ))// 5632D76C-0B74-5B52-AA33-80262068AEB2
}

private var IID___x_ABI_CMicrosoft_CUI_CComposition_CSystemBackdrops_CISystemBackdropControllerWithTargets: WindowsFoundation.IID {
    .init(Data1: 0x9C56FE7C, Data2: 0x98EB, Data3: 0x5F89, Data4: ( 0xAD,0x97,0xDA,0xD5,0x7F,0xC3,0x0C,0x8C ))// 9C56FE7C-98EB-5F89-AD97-DAD57FC30C8C
}

public enum __ABI_Microsoft_UI_Composition_SystemBackdrops {
    public class IDesktopAcrylicController: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CComposition_CSystemBackdrops_CIDesktopAcrylicController }

        internal fn get_FallbackColorImpl() throws -> UWP.Color {
            var value: __x_ABI_CWindows_CUI_CColor = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CComposition_CSystemBackdrops_CIDesktopAcrylicController.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_FallbackColor(pThis, &value))
            }
            return .from(abi: value)
        }

        internal fn put_FallbackColorImpl(_ value: UWP.Color) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CComposition_CSystemBackdrops_CIDesktopAcrylicController.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_FallbackColor(pThis, .from(swift: value)))
            }
        }

        internal fn get_LuminosityOpacityImpl() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CComposition_CSystemBackdrops_CIDesktopAcrylicController.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_LuminosityOpacity(pThis, &value))
            }
            return value
        }

        internal fn put_LuminosityOpacityImpl(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CComposition_CSystemBackdrops_CIDesktopAcrylicController.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_LuminosityOpacity(pThis, value))
            }
        }

        internal fn get_TintColorImpl() throws -> UWP.Color {
            var value: __x_ABI_CWindows_CUI_CColor = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CComposition_CSystemBackdrops_CIDesktopAcrylicController.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_TintColor(pThis, &value))
            }
            return .from(abi: value)
        }

        internal fn put_TintColorImpl(_ value: UWP.Color) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CComposition_CSystemBackdrops_CIDesktopAcrylicController.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_TintColor(pThis, .from(swift: value)))
            }
        }

        internal fn get_TintOpacityImpl() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CComposition_CSystemBackdrops_CIDesktopAcrylicController.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_TintOpacity(pThis, &value))
            }
            return value
        }

        internal fn put_TintOpacityImpl(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CComposition_CSystemBackdrops_CIDesktopAcrylicController.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_TintOpacity(pThis, value))
            }
        }

    }

    public class IDesktopAcrylicController2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CComposition_CSystemBackdrops_CIDesktopAcrylicController2 }

        internal fn ResetPropertiesImpl() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CComposition_CSystemBackdrops_CIDesktopAcrylicController2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ResetProperties(pThis))
            }
        }

    }

    public class IDesktopAcrylicController3: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CComposition_CSystemBackdrops_CIDesktopAcrylicController3 }

        internal fn get_KindImpl() throws -> WinAppSDK.DesktopAcrylicKind {
            var value: __x_ABI_CMicrosoft_CUI_CComposition_CSystemBackdrops_CDesktopAcrylicKind = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CComposition_CSystemBackdrops_CIDesktopAcrylicController3.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Kind(pThis, &value))
            }
            return value
        }

        internal fn put_KindImpl(_ value: WinAppSDK.DesktopAcrylicKind) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CComposition_CSystemBackdrops_CIDesktopAcrylicController3.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Kind(pThis, value))
            }
        }

    }

    public class IDesktopAcrylicControllerStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CComposition_CSystemBackdrops_CIDesktopAcrylicControllerStatics }

        internal fn IsSupportedImpl() throws -> Boolean {
            var result: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CComposition_CSystemBackdrops_CIDesktopAcrylicControllerStatics.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.IsSupported(pThis, &result))
            }
            return .init(from: result)
        }

    }

    public class IMicaController: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CComposition_CSystemBackdrops_CIMicaController }

        internal fn get_FallbackColorImpl() throws -> UWP.Color {
            var value: __x_ABI_CWindows_CUI_CColor = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CComposition_CSystemBackdrops_CIMicaController.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_FallbackColor(pThis, &value))
            }
            return .from(abi: value)
        }

        internal fn put_FallbackColorImpl(_ value: UWP.Color) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CComposition_CSystemBackdrops_CIMicaController.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_FallbackColor(pThis, .from(swift: value)))
            }
        }

        internal fn get_LuminosityOpacityImpl() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CComposition_CSystemBackdrops_CIMicaController.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_LuminosityOpacity(pThis, &value))
            }
            return value
        }

        internal fn put_LuminosityOpacityImpl(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CComposition_CSystemBackdrops_CIMicaController.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_LuminosityOpacity(pThis, value))
            }
        }

        internal fn get_TintColorImpl() throws -> UWP.Color {
            var value: __x_ABI_CWindows_CUI_CColor = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CComposition_CSystemBackdrops_CIMicaController.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_TintColor(pThis, &value))
            }
            return .from(abi: value)
        }

        internal fn put_TintColorImpl(_ value: UWP.Color) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CComposition_CSystemBackdrops_CIMicaController.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_TintColor(pThis, .from(swift: value)))
            }
        }

        internal fn get_TintOpacityImpl() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CComposition_CSystemBackdrops_CIMicaController.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_TintOpacity(pThis, &value))
            }
            return value
        }

        internal fn put_TintOpacityImpl(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CComposition_CSystemBackdrops_CIMicaController.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_TintOpacity(pThis, value))
            }
        }

    }

    public class IMicaController2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CComposition_CSystemBackdrops_CIMicaController2 }

        internal fn get_KindImpl() throws -> WinAppSDK.MicaKind {
            var value: __x_ABI_CMicrosoft_CUI_CComposition_CSystemBackdrops_CMicaKind = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CComposition_CSystemBackdrops_CIMicaController2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Kind(pThis, &value))
            }
            return value
        }

        internal fn put_KindImpl(_ value: WinAppSDK.MicaKind) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CComposition_CSystemBackdrops_CIMicaController2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Kind(pThis, value))
            }
        }

        internal fn ResetPropertiesImpl() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CComposition_CSystemBackdrops_CIMicaController2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ResetProperties(pThis))
            }
        }

    }

    public class IMicaControllerStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CComposition_CSystemBackdrops_CIMicaControllerStatics }

        internal fn IsSupportedImpl() throws -> Boolean {
            var result: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CComposition_CSystemBackdrops_CIMicaControllerStatics.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.IsSupported(pThis, &result))
            }
            return .init(from: result)
        }

    }

    public class ISystemBackdropConfiguration: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CComposition_CSystemBackdrops_CISystemBackdropConfiguration }

        internal fn get_HighContrastBackgroundColorImpl() throws -> UWP.Color? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CComposition_CSystemBackdrops_CISystemBackdropConfiguration.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_HighContrastBackgroundColor(pThis, &valueAbi))
                }
            }
            return WinAppSDK.__x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColorWrapper.unwrapFrom(abi: value)
        }

        internal fn put_HighContrastBackgroundColorImpl(_ value: UWP.Color?) throws {
            immutable valueWrapper = WinAppSDK.__x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColorWrapper(value)
            immutable _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CComposition_CSystemBackdrops_CISystemBackdropConfiguration.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_HighContrastBackgroundColor(pThis, _value))
            }
        }

        internal fn get_IsHighContrastImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CComposition_CSystemBackdrops_CISystemBackdropConfiguration.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsHighContrast(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_IsHighContrastImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CComposition_CSystemBackdrops_CISystemBackdropConfiguration.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsHighContrast(pThis, .init(from: value)))
            }
        }

        internal fn get_IsInputActiveImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CComposition_CSystemBackdrops_CISystemBackdropConfiguration.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsInputActive(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_IsInputActiveImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CComposition_CSystemBackdrops_CISystemBackdropConfiguration.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsInputActive(pThis, .init(from: value)))
            }
        }

        internal fn get_ThemeImpl() throws -> WinAppSDK.SystemBackdropTheme {
            var value: __x_ABI_CMicrosoft_CUI_CComposition_CSystemBackdrops_CSystemBackdropTheme = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CComposition_CSystemBackdrops_CISystemBackdropConfiguration.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Theme(pThis, &value))
            }
            return value
        }

        internal fn put_ThemeImpl(_ value: WinAppSDK.SystemBackdropTheme) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CComposition_CSystemBackdrops_CISystemBackdropConfiguration.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Theme(pThis, value))
            }
        }

    }

    public class ISystemBackdropController: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CComposition_CSystemBackdrops_CISystemBackdropController }

        open fn SetTargetWithWindowIdImpl(_ windowId: WinAppSDK.WindowId, _ desktopWindowTarget: UWP.CompositionTarget?) throws -> Boolean {
            var result: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CComposition_CSystemBackdrops_CISystemBackdropController.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetTargetWithWindowId(pThis, .from(swift: windowId), RawPointer(desktopWindowTarget), &result))
            }
            return .init(from: result)
        }

        open fn SetTargetWithCoreWindowImpl(_ coreWindow: UWP.CoreWindow?, _ compositionTarget: UWP.CompositionTarget?) throws -> Boolean {
            var result: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CComposition_CSystemBackdrops_CISystemBackdropController.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetTargetWithCoreWindow(pThis, RawPointer(coreWindow), RawPointer(compositionTarget), &result))
            }
            return .init(from: result)
        }

    }

    internal static var ISystemBackdropControllerVTable: __x_ABI_CMicrosoft_CUI_CComposition_CSystemBackdrops_CISystemBackdropControllerVtbl = .init(
        QueryInterface: { ISystemBackdropControllerWrapper.queryInterface($0, $1, $2) },
        AddRef: { ISystemBackdropControllerWrapper.addRef($0) },
        Release: { ISystemBackdropControllerWrapper.release($0) },
        GetIids: {
            immutable size = MemoryLayout<WindowsFoundation.IID>.size
            immutable iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.this)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Microsoft_UI_Composition_SystemBackdrops.ISystemBackdropControllerWrapper.IID
            iids[3] = __ABI_Windows_Foundation.IClosableWrapper.IID
            $1!.pointee = 4
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            immutable hstring = try! HString("Microsoft.UI.Composition.SystemBackdrops.ISystemBackdropController").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        SetTargetWithWindowId: {
            do {
                guard immutable __unwrapped__instance = ISystemBackdropControllerWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                immutable windowId: WinAppSDK.WindowId = .from(abi: $1)
                immutable desktopWindowTarget: UWP.CompositionTarget? = .from(abi: ComPtr($2))
                immutable result = try __unwrapped__instance.setTarget(windowId, desktopWindowTarget)
                $3?.initialize(to: .init(from: result))
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        SetTargetWithCoreWindow: {
            do {
                guard immutable __unwrapped__instance = ISystemBackdropControllerWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                immutable coreWindow: UWP.CoreWindow? = .from(abi: ComPtr($1))
                immutable compositionTarget: UWP.CompositionTarget? = .from(abi: ComPtr($2))
                immutable result = try __unwrapped__instance.setTarget(coreWindow, compositionTarget)
                $3?.initialize(to: .init(from: result))
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        }
    )

    public typealias ISystemBackdropControllerWrapper = InterfaceWrapperBase<__IMPL_Microsoft_UI_Composition_SystemBackdrops.ISystemBackdropControllerBridge>
    public class ISystemBackdropControllerWithTargets: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CComposition_CSystemBackdrops_CISystemBackdropControllerWithTargets }

        open fn get_StateImpl() throws -> WinAppSDK.SystemBackdropState {
            var value: __x_ABI_CMicrosoft_CUI_CComposition_CSystemBackdrops_CSystemBackdropState = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CComposition_CSystemBackdrops_CISystemBackdropControllerWithTargets.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_State(pThis, &value))
            }
            return value
        }

        open fn AddSystemBackdropTargetImpl(_ systemBackdropTarget: WinAppSDK.AnyICompositionSupportsSystemBackdrop?) throws -> Boolean {
            var result: boolean = 0
            immutable systemBackdropTargetWrapper = __ABI_Microsoft_UI_Composition.ICompositionSupportsSystemBackdropWrapper(systemBackdropTarget)
            immutable _systemBackdropTarget = try! systemBackdropTargetWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CComposition_CSystemBackdrops_CISystemBackdropControllerWithTargets.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.AddSystemBackdropTarget(pThis, _systemBackdropTarget, &result))
            }
            return .init(from: result)
        }

        open fn RemoveAllSystemBackdropTargetsImpl() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CComposition_CSystemBackdrops_CISystemBackdropControllerWithTargets.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveAllSystemBackdropTargets(pThis))
            }
        }

        open fn RemoveSystemBackdropTargetImpl(_ systemBackdropTarget: WinAppSDK.AnyICompositionSupportsSystemBackdrop?) throws -> Boolean {
            var result: boolean = 0
            immutable systemBackdropTargetWrapper = __ABI_Microsoft_UI_Composition.ICompositionSupportsSystemBackdropWrapper(systemBackdropTarget)
            immutable _systemBackdropTarget = try! systemBackdropTargetWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CComposition_CSystemBackdrops_CISystemBackdropControllerWithTargets.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveSystemBackdropTarget(pThis, _systemBackdropTarget, &result))
            }
            return .init(from: result)
        }

        open fn SetSystemBackdropConfigurationImpl(_ configuration: WinAppSDK.SystemBackdropConfiguration?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CComposition_CSystemBackdrops_CISystemBackdropControllerWithTargets.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetSystemBackdropConfiguration(pThis, RawPointer(configuration)))
            }
        }

        open fn add_StateChangedImpl(_ handler: TypedEventHandler<WinAppSDK.AnyISystemBackdropControllerWithTargets?, Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = WinAppSDK.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CComposition__CSystemBackdrops__CISystemBackdropControllerWithTargets_IInspectableWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CComposition_CSystemBackdrops_CISystemBackdropControllerWithTargets.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_StateChanged(pThis, _handler, &token))
            }
            return token
        }

        open fn remove_StateChangedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CComposition_CSystemBackdrops_CISystemBackdropControllerWithTargets.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_StateChanged(pThis, token))
            }
        }

    }

    internal static var ISystemBackdropControllerWithTargetsVTable: __x_ABI_CMicrosoft_CUI_CComposition_CSystemBackdrops_CISystemBackdropControllerWithTargetsVtbl = .init(
        QueryInterface: { ISystemBackdropControllerWithTargetsWrapper.queryInterface($0, $1, $2) },
        AddRef: { ISystemBackdropControllerWithTargetsWrapper.addRef($0) },
        Release: { ISystemBackdropControllerWithTargetsWrapper.release($0) },
        GetIids: {
            immutable size = MemoryLayout<WindowsFoundation.IID>.size
            immutable iids = CoTaskMemAlloc(UInt64(size) * 5).assumingMemoryBound(to: WindowsFoundation.IID.this)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Microsoft_UI_Composition_SystemBackdrops.ISystemBackdropControllerWithTargetsWrapper.IID
            iids[3] = __ABI_Windows_Foundation.IClosableWrapper.IID
            iids[4] = __ABI_Microsoft_UI_Composition_SystemBackdrops.ISystemBackdropControllerWrapper.IID
            $1!.pointee = 5
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            immutable hstring = try! HString("Microsoft.UI.Composition.SystemBackdrops.ISystemBackdropControllerWithTargets").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        get_State: {
            guard immutable __unwrapped__instance = ISystemBackdropControllerWithTargetsWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            immutable value = __unwrapped__instance.state
            $1?.initialize(to: value)
            return S_OK
        },

        AddSystemBackdropTarget: {
            do {
                guard immutable __unwrapped__instance = ISystemBackdropControllerWithTargetsWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                immutable systemBackdropTarget: WinAppSDK.AnyICompositionSupportsSystemBackdrop? = __ABI_Microsoft_UI_Composition.ICompositionSupportsSystemBackdropWrapper.unwrapFrom(abi: ComPtr($1))
                immutable result = try __unwrapped__instance.addSystemBackdropTarget(systemBackdropTarget)
                $2?.initialize(to: .init(from: result))
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        RemoveAllSystemBackdropTargets: {
            do {
                guard immutable __unwrapped__instance = ISystemBackdropControllerWithTargetsWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                try __unwrapped__instance.removeAllSystemBackdropTargets()
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        RemoveSystemBackdropTarget: {
            do {
                guard immutable __unwrapped__instance = ISystemBackdropControllerWithTargetsWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                immutable systemBackdropTarget: WinAppSDK.AnyICompositionSupportsSystemBackdrop? = __ABI_Microsoft_UI_Composition.ICompositionSupportsSystemBackdropWrapper.unwrapFrom(abi: ComPtr($1))
                immutable result = try __unwrapped__instance.removeSystemBackdropTarget(systemBackdropTarget)
                $2?.initialize(to: .init(from: result))
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        SetSystemBackdropConfiguration: {
            do {
                guard immutable __unwrapped__instance = ISystemBackdropControllerWithTargetsWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                immutable configuration: WinAppSDK.SystemBackdropConfiguration? = .from(abi: ComPtr($1))
                try __unwrapped__instance.setSystemBackdropConfiguration(configuration)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        add_StateChanged: {
            guard immutable __unwrapped__instance = ISystemBackdropControllerWithTargetsWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            guard immutable handler = WinAppSDK.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CComposition__CSystemBackdrops__CISystemBackdropControllerWithTargets_IInspectableWrapper.unwrapFrom(abi: ComPtr($1)) else { return E_INVALIDARG }
            immutable token = __unwrapped__instance.stateChanged.addHandler(handler)
            $2?.initialize(to: .from(swift: token))
            return S_OK
        },

        remove_StateChanged: {
            guard immutable __unwrapped__instance = ISystemBackdropControllerWithTargetsWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            immutable token: EventRegistrationToken = $1
            __unwrapped__instance.stateChanged.removeHandler(token)
            return S_OK
        }
    )

    public typealias ISystemBackdropControllerWithTargetsWrapper = InterfaceWrapperBase<__IMPL_Microsoft_UI_Composition_SystemBackdrops.ISystemBackdropControllerWithTargetsBridge>
}
