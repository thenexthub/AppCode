// WARNING: Please don't edit this file. It was generated by Codira/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import UWP
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

private var IID___x_ABI_CMicrosoft_CUI_CInput_CICharacterReceivedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x36122718, Data2: 0x9263, Data3: 0x592B, Data4: ( 0x8D,0x87,0x8F,0x86,0x54,0x3F,0xFC,0x95 ))// 36122718-9263-592B-8D87-8F86543FFC95
}

private var IID___x_ABI_CMicrosoft_CUI_CInput_CIContextMenuKeyEventArgs: WindowsFoundation.IID {
    .init(Data1: 0xF6025762, Data2: 0x9426, Data3: 0x541A, Data4: ( 0xB6,0x47,0x03,0x7A,0xBD,0xBE,0xCE,0xFC ))// F6025762-9426-541A-B647-037ABDBECEFC
}

private var IID___x_ABI_CMicrosoft_CUI_CInput_CICrossSlidingEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x7679641F, Data2: 0xBA9F, Data3: 0x543C, Data4: ( 0xA7,0xC8,0x62,0x29,0xA9,0x8F,0x89,0xEF ))// 7679641F-BA9F-543C-A7C8-6229A98F89EF
}

private var IID___x_ABI_CMicrosoft_CUI_CInput_CIDraggingEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x3EFB1B75, Data2: 0x3D3B, Data3: 0x550E, Data4: ( 0x96,0x3D,0x08,0x28,0xCA,0x76,0x12,0x8A ))// 3EFB1B75-3D3B-550E-963D-0828CA76128A
}

private var IID___x_ABI_CMicrosoft_CUI_CInput_CIFocusChangedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0xA039B115, Data2: 0xDBDF, Data3: 0x594C, Data4: ( 0x9B,0x86,0xDA,0x6A,0xA0,0x5C,0x9F,0xA2 ))// A039B115-DBDF-594C-9B86-DA6AA05C9FA2
}

private var IID___x_ABI_CMicrosoft_CUI_CInput_CIFocusNavigationRequest: WindowsFoundation.IID {
    .init(Data1: 0x6D84BB83, Data2: 0x9C84, Data3: 0x5112, Data4: ( 0x85,0xE9,0x89,0x19,0xAC,0xF9,0x72,0x62 ))// 6D84BB83-9C84-5112-85E9-8919ACF97262
}

private var IID___x_ABI_CMicrosoft_CUI_CInput_CIFocusNavigationRequestEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x35A63426, Data2: 0xE271, Data3: 0x59F9, Data4: ( 0xA2,0x31,0x0D,0x19,0x03,0x14,0xB4,0x15 ))// 35A63426-E271-59F9-A231-0D190314B415
}

private var IID___x_ABI_CMicrosoft_CUI_CInput_CIFocusNavigationRequestStatics: WindowsFoundation.IID {
    .init(Data1: 0x8C4D2ED8, Data2: 0x3A63, Data3: 0x519E, Data4: ( 0xA8,0x27,0xF5,0x7E,0x26,0x3B,0xD1,0xFF ))// 8C4D2ED8-3A63-519E-A827-F57E263BD1FF
}

private var IID___x_ABI_CMicrosoft_CUI_CInput_CIGestureRecognizer: WindowsFoundation.IID {
    .init(Data1: 0xCDA89AFC, Data2: 0x6BD0, Data3: 0x595C, Data4: ( 0xBA,0x37,0x54,0x5F,0xCE,0x5B,0xF0,0x16 ))// CDA89AFC-6BD0-595C-BA37-545FCE5BF016
}

private var IID___x_ABI_CMicrosoft_CUI_CInput_CIHoldingEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x8E449E85, Data2: 0xD223, Data3: 0x533C, Data4: ( 0xB0,0xB2,0xBF,0x7C,0x6D,0x10,0xC2,0xDB ))// 8E449E85-D223-533C-B0B2-BF7C6D10C2DB
}

private var IID___x_ABI_CMicrosoft_CUI_CInput_CIInputActivationListener: WindowsFoundation.IID {
    .init(Data1: 0x3B818627, Data2: 0x6CE7, Data3: 0x5E0D, Data4: ( 0xA0,0xF5,0x66,0x84,0xFD,0x1A,0xEC,0x78 ))// 3B818627-6CE7-5E0D-A0F5-6684FD1AEC78
}

private var IID___x_ABI_CMicrosoft_CUI_CInput_CIInputActivationListenerActivationChangedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x7978526B, Data2: 0x00B6, Data3: 0x5303, Data4: ( 0x8F,0x7D,0x55,0xBE,0xF3,0x6D,0xA7,0x86 ))// 7978526B-00B6-5303-8F7D-55BEF36DA786
}

private var IID___x_ABI_CMicrosoft_CUI_CInput_CIInputActivationListenerStatics: WindowsFoundation.IID {
    .init(Data1: 0xC4249843, Data2: 0xF053, Data3: 0x5C99, Data4: ( 0x9D,0x51,0x72,0x0A,0xDE,0x94,0x22,0x4D ))// C4249843-F053-5C99-9D51-720ADE94224D
}

private var IID___x_ABI_CMicrosoft_CUI_CInput_CIInputActivationListenerStatics2: WindowsFoundation.IID {
    .init(Data1: 0x7EA26120, Data2: 0x9636, Data3: 0x5292, Data4: ( 0xA7,0xB1,0x56,0x54,0x4A,0xC5,0x1A,0x22 ))// 7EA26120-9636-5292-A7B1-56544AC51A22
}

private var IID___x_ABI_CMicrosoft_CUI_CInput_CIInputCursor: WindowsFoundation.IID {
    .init(Data1: 0x359B15F9, Data2: 0x19C2, Data3: 0x5714, Data4: ( 0x84,0x32,0x75,0x17,0x68,0x26,0x40,0x6B ))// 359B15F9-19C2-5714-8432-75176826406B
}

private var IID___x_ABI_CMicrosoft_CUI_CInput_CIInputCursorFactory: WindowsFoundation.IID {
    .init(Data1: 0x2F47647B, Data2: 0x4BE0, Data3: 0x53E9, Data4: ( 0xBE,0x7E,0xC3,0x8D,0x54,0x59,0xDB,0x6B ))// 2F47647B-4BE0-53E9-BE7E-C38D5459DB6B
}

private var IID___x_ABI_CMicrosoft_CUI_CInput_CIInputCursorStatics: WindowsFoundation.IID {
    .init(Data1: 0x92F6A552, Data2: 0x099F, Data3: 0x55FB, Data4: ( 0x8C,0x31,0xE4,0x50,0x28,0x4C,0x96,0x43 ))// 92F6A552-099F-55FB-8C31-E450284C9643
}

private var IID___x_ABI_CMicrosoft_CUI_CInput_CIInputCustomCursor: WindowsFoundation.IID {
    .init(Data1: 0x5486F042, Data2: 0x7E1A, Data3: 0x5DC8, Data4: ( 0x80,0x41,0xE4,0x7B,0x60,0x9A,0x5B,0xA1 ))// 5486F042-7E1A-5DC8-8041-E47B609A5BA1
}

private var IID___x_ABI_CMicrosoft_CUI_CInput_CIInputCustomCursorFactory: WindowsFoundation.IID {
    .init(Data1: 0x6F402882, Data2: 0x66E0, Data3: 0x57D3, Data4: ( 0x89,0xD0,0xAA,0x5E,0x2F,0xF9,0x17,0xBC ))// 6F402882-66E0-57D3-89D0-AA5E2FF917BC
}

private var IID___x_ABI_CMicrosoft_CUI_CInput_CIInputDesktopNamedResourceCursor: WindowsFoundation.IID {
    .init(Data1: 0xF40EA93B, Data2: 0x0ED7, Data3: 0x5B3A, Data4: ( 0xBF,0xE2,0x14,0xE2,0xB5,0xAD,0x88,0xA3 ))// F40EA93B-0ED7-5B3A-BFE2-14E2B5AD88A3
}

private var IID___x_ABI_CMicrosoft_CUI_CInput_CIInputDesktopNamedResourceCursorStatics: WindowsFoundation.IID {
    .init(Data1: 0xE8B6D5AA, Data2: 0x898B, Data3: 0x5E69, Data4: ( 0xB0,0x1F,0x38,0x3A,0x09,0x43,0xE3,0xE4 ))// E8B6D5AA-898B-5E69-B01F-383A0943E3E4
}

private var IID___x_ABI_CMicrosoft_CUI_CInput_CIInputDesktopResourceCursor: WindowsFoundation.IID {
    .init(Data1: 0x1DF2777F, Data2: 0x7C90, Data3: 0x58FC, Data4: ( 0xA7,0xA3,0xD5,0x73,0x6C,0x65,0x10,0xFD ))// 1DF2777F-7C90-58FC-A7A3-D5736C6510FD
}

private var IID___x_ABI_CMicrosoft_CUI_CInput_CIInputDesktopResourceCursorStatics: WindowsFoundation.IID {
    .init(Data1: 0xF440DC37, Data2: 0xA0B6, Data3: 0x56EB, Data4: ( 0xBC,0xEC,0xB0,0x24,0xF2,0x23,0x3D,0x47 ))// F440DC37-A0B6-56EB-BCEC-B024F2233D47
}

private var IID___x_ABI_CMicrosoft_CUI_CInput_CIInputFocusController: WindowsFoundation.IID {
    .init(Data1: 0x8DFDC26C, Data2: 0x8B8D, Data3: 0x515D, Data4: ( 0x8D,0xDD,0x46,0x85,0xB3,0xA5,0x40,0xE9 ))// 8DFDC26C-8B8D-515D-8DDD-4685B3A540E9
}

private var IID___x_ABI_CMicrosoft_CUI_CInput_CIInputFocusController2: WindowsFoundation.IID {
    .init(Data1: 0x5165077C, Data2: 0xCD4B, Data3: 0x501D, Data4: ( 0xB3,0x86,0xB5,0x06,0x82,0x36,0x01,0x85 ))// 5165077C-CD4B-501D-B386-B50682360185
}

private var IID___x_ABI_CMicrosoft_CUI_CInput_CIInputFocusControllerStatics: WindowsFoundation.IID {
    .init(Data1: 0xAEB311DA, Data2: 0xDA9B, Data3: 0x5A1B, Data4: ( 0x92,0xF4,0x83,0xDD,0xDE,0x93,0x3E,0x00 ))// AEB311DA-DA9B-5A1B-92F4-83DDDE933E00
}

private var IID___x_ABI_CMicrosoft_CUI_CInput_CIInputFocusNavigationHost: WindowsFoundation.IID {
    .init(Data1: 0x53C2A147, Data2: 0x932C, Data3: 0x5486, Data4: ( 0xA9,0xC6,0xF6,0xC5,0xA9,0xC6,0x59,0x56 ))// 53C2A147-932C-5486-A9C6-F6C5A9C65956
}

private var IID___x_ABI_CMicrosoft_CUI_CInput_CIInputFocusNavigationHostStatics: WindowsFoundation.IID {
    .init(Data1: 0xC9C62CD1, Data2: 0x73DB, Data3: 0x5AA9, Data4: ( 0xB8,0x9D,0x14,0x35,0x09,0xDB,0x8F,0x37 ))// C9C62CD1-73DB-5AA9-B89D-143509DB8F37
}

private var IID___x_ABI_CMicrosoft_CUI_CInput_CIInputKeyboardSource: WindowsFoundation.IID {
    .init(Data1: 0xED61B906, Data2: 0x16AD, Data3: 0x5DF7, Data4: ( 0xA5,0x50,0x5E,0x6F,0x7D,0x22,0x29,0xF7 ))// ED61B906-16AD-5DF7-A550-5E6F7D2229F7
}

private var IID___x_ABI_CMicrosoft_CUI_CInput_CIInputKeyboardSource2: WindowsFoundation.IID {
    .init(Data1: 0x79D1C9B6, Data2: 0xB3C9, Data3: 0x5EC2, Data4: ( 0x8A,0x5B,0x70,0x70,0x88,0x78,0x7F,0x78 ))// 79D1C9B6-B3C9-5EC2-8A5B-707088787F78
}

private var IID___x_ABI_CMicrosoft_CUI_CInput_CIInputKeyboardSourceStatics: WindowsFoundation.IID {
    .init(Data1: 0xF4E1563D, Data2: 0x8C2E, Data3: 0x5BCD, Data4: ( 0xB7,0x84,0x47,0xAD,0xEA,0xA3,0xCD,0x7E ))// F4E1563D-8C2E-5BCD-B784-47ADEAA3CD7E
}

private var IID___x_ABI_CMicrosoft_CUI_CInput_CIInputKeyboardSourceStatics2: WindowsFoundation.IID {
    .init(Data1: 0x8857518C, Data2: 0x2899, Data3: 0x5F11, Data4: ( 0x9B,0x64,0x0A,0xD8,0x32,0x34,0x82,0x4B ))// 8857518C-2899-5F11-9B64-0AD83234824B
}

private var IID___x_ABI_CMicrosoft_CUI_CInput_CIInputLightDismissAction: WindowsFoundation.IID {
    .init(Data1: 0xE8A39502, Data2: 0xA860, Data3: 0x502F, Data4: ( 0x8C,0x10,0x36,0x46,0xD4,0x3A,0xEC,0xF1 ))// E8A39502-A860-502F-8C10-3646D43AECF1
}

private var IID___x_ABI_CMicrosoft_CUI_CInput_CIInputLightDismissActionStatics: WindowsFoundation.IID {
    .init(Data1: 0xED9B8DEF, Data2: 0x6496, Data3: 0x5169, Data4: ( 0x98,0x4D,0xD4,0x4B,0x4E,0x69,0x06,0x23 ))// ED9B8DEF-6496-5169-984D-D44B4E690623
}

private var IID___x_ABI_CMicrosoft_CUI_CInput_CIInputLightDismissEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x078660EE, Data2: 0x07CA, Data3: 0x5808, Data4: ( 0xB9,0x82,0xE6,0xE8,0x99,0xCF,0x09,0x8C ))// 078660EE-07CA-5808-B982-E6E899CF098C
}

private var IID___x_ABI_CMicrosoft_CUI_CInput_CIInputNonClientPointerSource: WindowsFoundation.IID {
    .init(Data1: 0x471732B4, Data2: 0x3D07, Data3: 0x5104, Data4: ( 0xB1,0x92,0xEB,0xAC,0xF7,0x1E,0x86,0xDF ))// 471732B4-3D07-5104-B192-EBACF71E86DF
}

private var IID___x_ABI_CMicrosoft_CUI_CInput_CIInputNonClientPointerSourceStatics: WindowsFoundation.IID {
    .init(Data1: 0x7D0B775C, Data2: 0x1903, Data3: 0x5DC7, Data4: ( 0xBD,0x2F,0x7A,0x4B,0x31,0xF0,0xCF,0xF2 ))// 7D0B775C-1903-5DC7-BD2F-7A4B31F0CFF2
}

private var IID___x_ABI_CMicrosoft_CUI_CInput_CIInputObject: WindowsFoundation.IID {
    .init(Data1: 0x42EDBC88, Data2: 0xD386, Data3: 0x544D, Data4: ( 0xB1,0xB8,0x68,0x61,0x7F,0xE6,0x82,0x82 ))// 42EDBC88-D386-544D-B1B8-68617FE68282
}

private var IID___x_ABI_CMicrosoft_CUI_CInput_CIInputObjectFactory: WindowsFoundation.IID {
    .init(Data1: 0xF7786BC2, Data2: 0xB0B8, Data3: 0x5961, Data4: ( 0x9A,0x57,0xAE,0x19,0x9D,0x45,0x21,0x06 ))// F7786BC2-B0B8-5961-9A57-AE199D452106
}

private var IID___x_ABI_CMicrosoft_CUI_CInput_CIInputPointerSource: WindowsFoundation.IID {
    .init(Data1: 0x6A6C2764, Data2: 0xC3F4, Data3: 0x5BE5, Data4: ( 0x84,0x47,0xC9,0xA9,0x87,0x66,0xC2,0x40 ))// 6A6C2764-C3F4-5BE5-8447-C9A98766C240
}

private var IID___x_ABI_CMicrosoft_CUI_CInput_CIInputPointerSourceStatics: WindowsFoundation.IID {
    .init(Data1: 0xE8A19FD1, Data2: 0xA914, Data3: 0x533F, Data4: ( 0x9B,0x0F,0x6B,0xF0,0x06,0x5E,0x67,0x81 ))// E8A19FD1-A914-533F-9B0F-6BF0065E6781
}

private var IID___x_ABI_CMicrosoft_CUI_CInput_CIInputPreTranslateKeyboardSource: WindowsFoundation.IID {
    .init(Data1: 0x2F327FEB, Data2: 0xB7E7, Data3: 0x5E37, Data4: ( 0xA0,0xCC,0x37,0xDC,0xAB,0xE7,0x65,0x88 ))// 2F327FEB-B7E7-5E37-A0CC-37DCABE76588
}

private var IID___x_ABI_CMicrosoft_CUI_CInput_CIInputPreTranslateKeyboardSourceStatics: WindowsFoundation.IID {
    .init(Data1: 0x23D584D2, Data2: 0xAF8C, Data3: 0x5A8A, Data4: ( 0x80,0x6F,0x2B,0xA9,0xC5,0xB1,0xA5,0xEC ))// 23D584D2-AF8C-5A8A-806F-2BA9C5B1A5EC
}

private var IID___x_ABI_CMicrosoft_CUI_CInput_CIInputSystemCursor: WindowsFoundation.IID {
    .init(Data1: 0x59F538E7, Data2: 0xC500, Data3: 0x59AB, Data4: ( 0x8B,0x54,0x0B,0xC6,0x10,0x0F,0xD4,0x9E ))// 59F538E7-C500-59AB-8B54-0BC6100FD49E
}

private var IID___x_ABI_CMicrosoft_CUI_CInput_CIInputSystemCursorStatics: WindowsFoundation.IID {
    .init(Data1: 0xD3860BB6, Data2: 0x698A, Data3: 0x5814, Data4: ( 0xAE,0xDD,0xC2,0xFA,0x8B,0xBA,0x5A,0x02 ))// D3860BB6-698A-5814-AEDD-C2FA8BBA5A02
}

private var IID___x_ABI_CMicrosoft_CUI_CInput_CIKeyEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x40D5BB74, Data2: 0x977E, Data3: 0x5194, Data4: ( 0x80,0x39,0x9F,0x6C,0x44,0x42,0x7B,0xBB ))// 40D5BB74-977E-5194-8039-9F6C44427BBB
}

private var IID___x_ABI_CMicrosoft_CUI_CInput_CIManipulationCompletedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x0E0249D4, Data2: 0x46E4, Data3: 0x5559, Data4: ( 0xAE,0xE3,0xFA,0x45,0xCE,0x2A,0x7F,0x56 ))// 0E0249D4-46E4-5559-AEE3-FA45CE2A7F56
}

private var IID___x_ABI_CMicrosoft_CUI_CInput_CIManipulationInertiaStartingEventArgs: WindowsFoundation.IID {
    .init(Data1: 0xACF9EF71, Data2: 0x6E15, Data3: 0x56AB, Data4: ( 0x92,0x60,0xF0,0xD3,0xCE,0x5F,0x66,0xE8 ))// ACF9EF71-6E15-56AB-9260-F0D3CE5F66E8
}

private var IID___x_ABI_CMicrosoft_CUI_CInput_CIManipulationStartedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x4A616613, Data2: 0xEEF1, Data3: 0x5F1B, Data4: ( 0xA7,0x68,0x07,0x75,0x47,0x8D,0x49,0xD4 ))// 4A616613-EEF1-5F1B-A768-0775478D49D4
}

private var IID___x_ABI_CMicrosoft_CUI_CInput_CIManipulationUpdatedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x406E1961, Data2: 0x0C98, Data3: 0x5FC0, Data4: ( 0xB3,0xD8,0x11,0x64,0x92,0xEF,0x00,0x53 ))// 406E1961-0C98-5FC0-B3D8-116492EF0053
}

private var IID___x_ABI_CMicrosoft_CUI_CInput_CIMouseWheelParameters: WindowsFoundation.IID {
    .init(Data1: 0x6D98BE40, Data2: 0x1D56, Data3: 0x51D1, Data4: ( 0xAA,0x0D,0xF3,0x25,0x43,0x9C,0xD0,0x09 ))// 6D98BE40-1D56-51D1-AA0D-F325439CD009
}

private var IID___x_ABI_CMicrosoft_CUI_CInput_CINonClientCaptionTappedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x3D173531, Data2: 0x991F, Data3: 0x5753, Data4: ( 0xB7,0xE0,0x14,0xA1,0x21,0xC3,0xCD,0x2D ))// 3D173531-991F-5753-B7E0-14A121C3CD2D
}

private var IID___x_ABI_CMicrosoft_CUI_CInput_CINonClientPointerEventArgs: WindowsFoundation.IID {
    .init(Data1: 0xA5B44AEC, Data2: 0xB797, Data3: 0x505A, Data4: ( 0xA1,0x29,0xAE,0x4E,0x52,0x71,0xC7,0x3C ))// A5B44AEC-B797-505A-A129-AE4E5271C73C
}

private var IID___x_ABI_CMicrosoft_CUI_CInput_CINonClientRegionsChangedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0xFE97EE95, Data2: 0x1824, Data3: 0x51B2, Data4: ( 0xB8,0xEB,0x10,0xFF,0x06,0x65,0xCE,0x23 ))// FE97EE95-1824-51B2-B8EB-10FF0665CE23
}

private var IID___x_ABI_CMicrosoft_CUI_CInput_CIPointerEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x865B188C, Data2: 0x2ED5, Data3: 0x5DF8, Data4: ( 0x82,0x9F,0xAC,0x07,0x01,0xD5,0xC5,0x1A ))// 865B188C-2ED5-5DF8-829F-AC0701D5C51A
}

private var IID___x_ABI_CMicrosoft_CUI_CInput_CIPointerPoint: WindowsFoundation.IID {
    .init(Data1: 0x0D430EE6, Data2: 0x252C, Data3: 0x59A4, Data4: ( 0xB2,0xA2,0xD4,0x42,0x64,0xDC,0x6A,0x40 ))// 0D430EE6-252C-59A4-B2A2-D44264DC6A40
}

private var IID___x_ABI_CMicrosoft_CUI_CInput_CIPointerPointProperties: WindowsFoundation.IID {
    .init(Data1: 0xD760ED77, Data2: 0x4B10, Data3: 0x57A5, Data4: ( 0xB3,0xCC,0xD9,0xBF,0x34,0x13,0xE9,0x96 ))// D760ED77-4B10-57A5-B3CC-D9BF3413E996
}

private var IID___x_ABI_CMicrosoft_CUI_CInput_CIPointerPointTransform: WindowsFoundation.IID {
    .init(Data1: 0xDB4791BC, Data2: 0x994D, Data3: 0x54C7, Data4: ( 0x92,0xEF,0x66,0xEA,0x1D,0xE9,0xB4,0x3C ))// DB4791BC-994D-54C7-92EF-66EA1DE9B43C
}

private var IID___x_ABI_CMicrosoft_CUI_CInput_CIPointerPredictor: WindowsFoundation.IID {
    .init(Data1: 0x12C100EC, Data2: 0x2100, Data3: 0x565F, Data4: ( 0xA6,0x0C,0xF1,0x18,0x7F,0x43,0x88,0x28 ))// 12C100EC-2100-565F-A60C-F1187F438828
}

private var IID___x_ABI_CMicrosoft_CUI_CInput_CIPointerPredictorStatics: WindowsFoundation.IID {
    .init(Data1: 0x78A8EF30, Data2: 0x3E5C, Data3: 0x55CD, Data4: ( 0x8F,0x85,0x65,0xAC,0x09,0xB1,0xA9,0x87 ))// 78A8EF30-3E5C-55CD-8F85-65AC09B1A987
}

private var IID___x_ABI_CMicrosoft_CUI_CInput_CIRightTappedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x8FF73B39, Data2: 0x887E, Data3: 0x50A4, Data4: ( 0x85,0x00,0x77,0x95,0x30,0x39,0xDC,0xB4 ))// 8FF73B39-887E-50A4-8500-77953039DCB4
}

private var IID___x_ABI_CMicrosoft_CUI_CInput_CITappedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0xC3A01BB5, Data2: 0x6076, Data3: 0x5E0F, Data4: ( 0x87,0x1A,0x9D,0x94,0xA6,0xA8,0xF8,0x2B ))// C3A01BB5-6076-5E0F-871A-9D94A6A8F82B
}

public enum __ABI_Microsoft_UI_Input {
    public class ICharacterReceivedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CInput_CICharacterReceivedEventArgs }

        internal fn get_HandledImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CICharacterReceivedEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Handled(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_HandledImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CICharacterReceivedEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Handled(pThis, .init(from: value)))
            }
        }

        internal fn get_KeyCodeImpl() throws -> UInt32 {
            var value: UINT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CICharacterReceivedEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_KeyCode(pThis, &value))
            }
            return value
        }

        internal fn get_KeyStatusImpl() throws -> WinAppSDK.PhysicalKeyStatus {
            var value: __x_ABI_CMicrosoft_CUI_CInput_CPhysicalKeyStatus = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CICharacterReceivedEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_KeyStatus(pThis, &value))
            }
            return .from(abi: value)
        }

    }

    public class IContextMenuKeyEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CInput_CIContextMenuKeyEventArgs }

        internal fn get_HandledImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIContextMenuKeyEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Handled(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_HandledImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIContextMenuKeyEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Handled(pThis, .init(from: value)))
            }
        }

    }

    public class ICrossSlidingEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CInput_CICrossSlidingEventArgs }

        internal fn get_CrossSlidingStateImpl() throws -> WinAppSDK.CrossSlidingState {
            var value: __x_ABI_CMicrosoft_CUI_CInput_CCrossSlidingState = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CICrossSlidingEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CrossSlidingState(pThis, &value))
            }
            return value
        }

        internal fn get_PointerDeviceTypeImpl() throws -> WinAppSDK.PointerDeviceType {
            var value: __x_ABI_CMicrosoft_CUI_CInput_CPointerDeviceType = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CICrossSlidingEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PointerDeviceType(pThis, &value))
            }
            return value
        }

        internal fn get_PositionImpl() throws -> WindowsFoundation.Point {
            var value: __x_ABI_CWindows_CFoundation_CPoint = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CICrossSlidingEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Position(pThis, &value))
            }
            return .from(abi: value)
        }

    }

    public class IDraggingEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CInput_CIDraggingEventArgs }

        internal fn get_DraggingStateImpl() throws -> WinAppSDK.DraggingState {
            var value: __x_ABI_CMicrosoft_CUI_CInput_CDraggingState = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIDraggingEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DraggingState(pThis, &value))
            }
            return value
        }

        internal fn get_PointerDeviceTypeImpl() throws -> WinAppSDK.PointerDeviceType {
            var value: __x_ABI_CMicrosoft_CUI_CInput_CPointerDeviceType = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIDraggingEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PointerDeviceType(pThis, &value))
            }
            return value
        }

        internal fn get_PositionImpl() throws -> WindowsFoundation.Point {
            var value: __x_ABI_CWindows_CFoundation_CPoint = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIDraggingEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Position(pThis, &value))
            }
            return .from(abi: value)
        }

    }

    public class IFocusChangedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CInput_CIFocusChangedEventArgs }

        internal fn get_HandledImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIFocusChangedEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Handled(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_HandledImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIFocusChangedEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Handled(pThis, .init(from: value)))
            }
        }

    }

    public class IFocusNavigationRequest: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CInput_CIFocusNavigationRequest }

        internal fn get_CorrelationIdImpl() throws -> Foundation.UUID {
            var value: WindowsFoundation.GUID = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIFocusNavigationRequest.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CorrelationId(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn get_HintRectImpl() throws -> WindowsFoundation.Rect? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIFocusNavigationRequest.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_HintRect(pThis, &valueAbi))
                }
            }
            return WinAppSDK.__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CRectWrapper.unwrapFrom(abi: value)
        }

        internal fn get_ReasonImpl() throws -> WinAppSDK.FocusNavigationReason {
            var value: __x_ABI_CMicrosoft_CUI_CInput_CFocusNavigationReason = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIFocusNavigationRequest.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Reason(pThis, &value))
            }
            return value
        }

    }

    public class IFocusNavigationRequestEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CInput_CIFocusNavigationRequestEventArgs }

        internal fn get_RequestImpl() throws -> WinAppSDK.FocusNavigationRequest? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIFocusNavigationRequestEventArgs.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Request(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_ResultImpl() throws -> WinAppSDK.FocusNavigationResult {
            var value: __x_ABI_CMicrosoft_CUI_CInput_CFocusNavigationResult = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIFocusNavigationRequestEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Result(pThis, &value))
            }
            return value
        }

        internal fn put_ResultImpl(_ value: WinAppSDK.FocusNavigationResult) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIFocusNavigationRequestEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Result(pThis, value))
            }
        }

    }

    public class IFocusNavigationRequestStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CInput_CIFocusNavigationRequestStatics }

        internal fn CreateImpl(_ reason: WinAppSDK.FocusNavigationReason) throws -> WinAppSDK.FocusNavigationRequest? {
            immutable (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIFocusNavigationRequestStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.Create(pThis, reason, &resultAbi))
                }
            }
            return .from(abi: result)
        }

        internal fn CreateWithHintRectImpl(_ reason: WinAppSDK.FocusNavigationReason, _ hintRect: WindowsFoundation.Rect) throws -> WinAppSDK.FocusNavigationRequest? {
            immutable (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIFocusNavigationRequestStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateWithHintRect(pThis, reason, .from(swift: hintRect), &resultAbi))
                }
            }
            return .from(abi: result)
        }

        internal fn CreateWithHintRectAndIdImpl(_ reason: WinAppSDK.FocusNavigationReason, _ hintRect: WindowsFoundation.Rect, _ correlationId: Foundation.UUID) throws -> WinAppSDK.FocusNavigationRequest? {
            immutable (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIFocusNavigationRequestStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateWithHintRectAndId(pThis, reason, .from(swift: hintRect), .init(from: correlationId), &resultAbi))
                }
            }
            return .from(abi: result)
        }

    }

    public class IGestureRecognizer: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CInput_CIGestureRecognizer }

        internal fn get_AutoProcessInertiaImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIGestureRecognizer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_AutoProcessInertia(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_AutoProcessInertiaImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIGestureRecognizer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_AutoProcessInertia(pThis, .init(from: value)))
            }
        }

        internal fn get_CrossSlideExactImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIGestureRecognizer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CrossSlideExact(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_CrossSlideExactImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIGestureRecognizer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_CrossSlideExact(pThis, .init(from: value)))
            }
        }

        internal fn get_CrossSlideHorizontallyImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIGestureRecognizer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CrossSlideHorizontally(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_CrossSlideHorizontallyImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIGestureRecognizer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_CrossSlideHorizontally(pThis, .init(from: value)))
            }
        }

        internal fn get_CrossSlideThresholdsImpl() throws -> WinAppSDK.CrossSlideThresholds {
            var value: __x_ABI_CMicrosoft_CUI_CInput_CCrossSlideThresholds = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIGestureRecognizer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CrossSlideThresholds(pThis, &value))
            }
            return .from(abi: value)
        }

        internal fn put_CrossSlideThresholdsImpl(_ value: WinAppSDK.CrossSlideThresholds) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIGestureRecognizer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_CrossSlideThresholds(pThis, .from(swift: value)))
            }
        }

        internal fn get_GestureSettingsImpl() throws -> WinAppSDK.GestureSettings {
            var value: __x_ABI_CMicrosoft_CUI_CInput_CGestureSettings = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIGestureRecognizer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_GestureSettings(pThis, &value))
            }
            return value
        }

        internal fn put_GestureSettingsImpl(_ value: WinAppSDK.GestureSettings) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIGestureRecognizer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_GestureSettings(pThis, value))
            }
        }

        internal fn get_IsActiveImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIGestureRecognizer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsActive(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn get_IsInertialImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIGestureRecognizer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsInertial(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn get_PivotCenterImpl() throws -> WindowsFoundation.Point {
            var value: __x_ABI_CWindows_CFoundation_CPoint = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIGestureRecognizer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PivotCenter(pThis, &value))
            }
            return .from(abi: value)
        }

        internal fn put_PivotCenterImpl(_ value: WindowsFoundation.Point) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIGestureRecognizer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_PivotCenter(pThis, .from(swift: value)))
            }
        }

        internal fn get_PivotRadiusImpl() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIGestureRecognizer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PivotRadius(pThis, &value))
            }
            return value
        }

        internal fn put_PivotRadiusImpl(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIGestureRecognizer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_PivotRadius(pThis, value))
            }
        }

        internal fn get_InertiaExpansionDecelerationImpl() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIGestureRecognizer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_InertiaExpansionDeceleration(pThis, &value))
            }
            return value
        }

        internal fn put_InertiaExpansionDecelerationImpl(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIGestureRecognizer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_InertiaExpansionDeceleration(pThis, value))
            }
        }

        internal fn get_InertiaExpansionImpl() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIGestureRecognizer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_InertiaExpansion(pThis, &value))
            }
            return value
        }

        internal fn put_InertiaExpansionImpl(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIGestureRecognizer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_InertiaExpansion(pThis, value))
            }
        }

        internal fn get_InertiaRotationAngleImpl() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIGestureRecognizer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_InertiaRotationAngle(pThis, &value))
            }
            return value
        }

        internal fn put_InertiaRotationAngleImpl(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIGestureRecognizer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_InertiaRotationAngle(pThis, value))
            }
        }

        internal fn get_InertiaRotationDecelerationImpl() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIGestureRecognizer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_InertiaRotationDeceleration(pThis, &value))
            }
            return value
        }

        internal fn put_InertiaRotationDecelerationImpl(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIGestureRecognizer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_InertiaRotationDeceleration(pThis, value))
            }
        }

        internal fn get_InertiaTranslationDecelerationImpl() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIGestureRecognizer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_InertiaTranslationDeceleration(pThis, &value))
            }
            return value
        }

        internal fn put_InertiaTranslationDecelerationImpl(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIGestureRecognizer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_InertiaTranslationDeceleration(pThis, value))
            }
        }

        internal fn get_InertiaTranslationDisplacementImpl() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIGestureRecognizer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_InertiaTranslationDisplacement(pThis, &value))
            }
            return value
        }

        internal fn put_InertiaTranslationDisplacementImpl(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIGestureRecognizer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_InertiaTranslationDisplacement(pThis, value))
            }
        }

        internal fn get_ManipulationExactImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIGestureRecognizer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ManipulationExact(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_ManipulationExactImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIGestureRecognizer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ManipulationExact(pThis, .init(from: value)))
            }
        }

        internal fn get_MouseWheelParametersImpl() throws -> WinAppSDK.MouseWheelParameters? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIGestureRecognizer.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_MouseWheelParameters(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_ShowGestureFeedbackImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIGestureRecognizer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ShowGestureFeedback(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_ShowGestureFeedbackImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIGestureRecognizer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ShowGestureFeedback(pThis, .init(from: value)))
            }
        }

        internal fn CanBeDoubleTapImpl(_ value: WinAppSDK.PointerPoint?) throws -> Boolean {
            var result: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIGestureRecognizer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.CanBeDoubleTap(pThis, RawPointer(value), &result))
            }
            return .init(from: result)
        }

        internal fn CompleteGestureImpl() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIGestureRecognizer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.CompleteGesture(pThis))
            }
        }

        internal fn ProcessDownEventImpl(_ value: WinAppSDK.PointerPoint?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIGestureRecognizer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ProcessDownEvent(pThis, RawPointer(value)))
            }
        }

        internal fn ProcessMoveEventsImpl(_ value: WindowsFoundation.AnyIVector<WinAppSDK.PointerPoint?>?) throws {
            immutable valueWrapper = WinAppSDK.__x_ABI_C__FIVector_1___x_ABI_CMicrosoft__CUI__CInput__CPointerPointWrapper(value)
            immutable _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIGestureRecognizer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ProcessMoveEvents(pThis, _value))
            }
        }

        internal fn ProcessMouseWheelEventImpl(_ value: WinAppSDK.PointerPoint?, _ isShiftKeyDown: Boolean, _ isControlKeyDown: Boolean) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIGestureRecognizer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ProcessMouseWheelEvent(pThis, RawPointer(value), .init(from: isShiftKeyDown), .init(from: isControlKeyDown)))
            }
        }

        internal fn ProcessInertiaImpl() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIGestureRecognizer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ProcessInertia(pThis))
            }
        }

        internal fn ProcessUpEventImpl(_ value: WinAppSDK.PointerPoint?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIGestureRecognizer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ProcessUpEvent(pThis, RawPointer(value)))
            }
        }

        internal fn add_TappedImpl(_ handler: TypedEventHandler<WinAppSDK.GestureRecognizer?, WinAppSDK.TappedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = WinAppSDK.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CInput__CGestureRecognizer___x_ABI_CMicrosoft__CUI__CInput__CTappedEventArgsWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIGestureRecognizer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_Tapped(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_TappedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIGestureRecognizer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Tapped(pThis, token))
            }
        }

        internal fn add_RightTappedImpl(_ handler: TypedEventHandler<WinAppSDK.GestureRecognizer?, WinAppSDK.RightTappedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = WinAppSDK.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CInput__CGestureRecognizer___x_ABI_CMicrosoft__CUI__CInput__CRightTappedEventArgsWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIGestureRecognizer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_RightTapped(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_RightTappedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIGestureRecognizer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_RightTapped(pThis, token))
            }
        }

        internal fn add_HoldingImpl(_ handler: TypedEventHandler<WinAppSDK.GestureRecognizer?, WinAppSDK.HoldingEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = WinAppSDK.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CInput__CGestureRecognizer___x_ABI_CMicrosoft__CUI__CInput__CHoldingEventArgsWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIGestureRecognizer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_Holding(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_HoldingImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIGestureRecognizer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Holding(pThis, token))
            }
        }

        internal fn add_DraggingImpl(_ handler: TypedEventHandler<WinAppSDK.GestureRecognizer?, WinAppSDK.DraggingEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = WinAppSDK.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CInput__CGestureRecognizer___x_ABI_CMicrosoft__CUI__CInput__CDraggingEventArgsWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIGestureRecognizer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_Dragging(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_DraggingImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIGestureRecognizer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Dragging(pThis, token))
            }
        }

        internal fn add_ManipulationStartedImpl(_ handler: TypedEventHandler<WinAppSDK.GestureRecognizer?, WinAppSDK.ManipulationStartedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = WinAppSDK.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CInput__CGestureRecognizer___x_ABI_CMicrosoft__CUI__CInput__CManipulationStartedEventArgsWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIGestureRecognizer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_ManipulationStarted(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_ManipulationStartedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIGestureRecognizer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_ManipulationStarted(pThis, token))
            }
        }

        internal fn add_ManipulationUpdatedImpl(_ handler: TypedEventHandler<WinAppSDK.GestureRecognizer?, WinAppSDK.ManipulationUpdatedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = WinAppSDK.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CInput__CGestureRecognizer___x_ABI_CMicrosoft__CUI__CInput__CManipulationUpdatedEventArgsWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIGestureRecognizer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_ManipulationUpdated(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_ManipulationUpdatedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIGestureRecognizer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_ManipulationUpdated(pThis, token))
            }
        }

        internal fn add_ManipulationInertiaStartingImpl(_ handler: TypedEventHandler<WinAppSDK.GestureRecognizer?, WinAppSDK.ManipulationInertiaStartingEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = WinAppSDK.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CInput__CGestureRecognizer___x_ABI_CMicrosoft__CUI__CInput__CManipulationInertiaStartingEventArgsWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIGestureRecognizer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_ManipulationInertiaStarting(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_ManipulationInertiaStartingImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIGestureRecognizer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_ManipulationInertiaStarting(pThis, token))
            }
        }

        internal fn add_ManipulationCompletedImpl(_ handler: TypedEventHandler<WinAppSDK.GestureRecognizer?, WinAppSDK.ManipulationCompletedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = WinAppSDK.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CInput__CGestureRecognizer___x_ABI_CMicrosoft__CUI__CInput__CManipulationCompletedEventArgsWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIGestureRecognizer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_ManipulationCompleted(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_ManipulationCompletedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIGestureRecognizer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_ManipulationCompleted(pThis, token))
            }
        }

        internal fn add_CrossSlidingImpl(_ handler: TypedEventHandler<WinAppSDK.GestureRecognizer?, WinAppSDK.CrossSlidingEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = WinAppSDK.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CInput__CGestureRecognizer___x_ABI_CMicrosoft__CUI__CInput__CCrossSlidingEventArgsWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIGestureRecognizer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_CrossSliding(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_CrossSlidingImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIGestureRecognizer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_CrossSliding(pThis, token))
            }
        }

    }

    public class IHoldingEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CInput_CIHoldingEventArgs }

        internal fn get_HoldingStateImpl() throws -> WinAppSDK.HoldingState {
            var value: __x_ABI_CMicrosoft_CUI_CInput_CHoldingState = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIHoldingEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_HoldingState(pThis, &value))
            }
            return value
        }

        internal fn get_PointerDeviceTypeImpl() throws -> WinAppSDK.PointerDeviceType {
            var value: __x_ABI_CMicrosoft_CUI_CInput_CPointerDeviceType = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIHoldingEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PointerDeviceType(pThis, &value))
            }
            return value
        }

        internal fn get_PositionImpl() throws -> WindowsFoundation.Point {
            var value: __x_ABI_CWindows_CFoundation_CPoint = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIHoldingEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Position(pThis, &value))
            }
            return .from(abi: value)
        }

    }

    public class IInputActivationListener: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CInput_CIInputActivationListener }

        internal fn get_StateImpl() throws -> WinAppSDK.InputActivationState {
            var value: __x_ABI_CMicrosoft_CUI_CInput_CInputActivationState = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIInputActivationListener.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_State(pThis, &value))
            }
            return value
        }

        internal fn add_InputActivationChangedImpl(_ handler: TypedEventHandler<WinAppSDK.InputActivationListener?, WinAppSDK.InputActivationListenerActivationChangedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = WinAppSDK.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CInput__CInputActivationListener___x_ABI_CMicrosoft__CUI__CInput__CInputActivationListenerActivationChangedEventArgsWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIInputActivationListener.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_InputActivationChanged(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_InputActivationChangedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIInputActivationListener.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_InputActivationChanged(pThis, token))
            }
        }

    }

    public class IInputActivationListenerActivationChangedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CInput_CIInputActivationListenerActivationChangedEventArgs }

    }

    public class IInputActivationListenerStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CInput_CIInputActivationListenerStatics }

        internal fn GetForWindowIdImpl(_ windowId: WinAppSDK.WindowId) throws -> WinAppSDK.InputActivationListener? {
            immutable (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIInputActivationListenerStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetForWindowId(pThis, .from(swift: windowId), &resultAbi))
                }
            }
            return .from(abi: result)
        }

    }

    public class IInputActivationListenerStatics2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CInput_CIInputActivationListenerStatics2 }

        internal fn GetForIslandImpl(_ island: WinAppSDK.ContentIsland?) throws -> WinAppSDK.InputActivationListener? {
            immutable (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIInputActivationListenerStatics2.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetForIsland(pThis, RawPointer(island), &resultAbi))
                }
            }
            return .from(abi: result)
        }

    }

    public class IInputCursor: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CInput_CIInputCursor }

    }

    public class IInputCursorFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CInput_CIInputCursorFactory }

    }

    public class IInputCursorStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CInput_CIInputCursorStatics }

        internal fn CreateFromCoreCursorImpl(_ cursor: UWP.CoreCursor?) throws -> WinAppSDK.InputCursor? {
            immutable (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIInputCursorStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateFromCoreCursor(pThis, RawPointer(cursor), &resultAbi))
                }
            }
            return .from(abi: result)
        }

    }

    public class IInputCustomCursor: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CInput_CIInputCustomCursor }

    }

    public class IInputCustomCursorFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CInput_CIInputCustomCursorFactory }

    }

    public class IInputDesktopNamedResourceCursor: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CInput_CIInputDesktopNamedResourceCursor }

        internal fn get_ModuleNameImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIInputDesktopNamedResourceCursor.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ModuleName(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn get_ResourceNameImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIInputDesktopNamedResourceCursor.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ResourceName(pThis, &value))
            }
            return .init(from: value)
        }

    }

    public class IInputDesktopNamedResourceCursorStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CInput_CIInputDesktopNamedResourceCursorStatics }

        internal fn CreateImpl(_ resourceName: String) throws -> WinAppSDK.InputDesktopNamedResourceCursor? {
            immutable (result) = try ComPtrs.initialize { resultAbi in
                immutable _resourceName = try! HString(resourceName)
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIInputDesktopNamedResourceCursorStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.Create(pThis, _resourceName.get(), &resultAbi))
                }
            }
            return .from(abi: result)
        }

        internal fn CreateFromModuleImpl(_ moduleName: String, _ resourceName: String) throws -> WinAppSDK.InputDesktopNamedResourceCursor? {
            immutable (result) = try ComPtrs.initialize { resultAbi in
                immutable _moduleName = try! HString(moduleName)
                immutable _resourceName = try! HString(resourceName)
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIInputDesktopNamedResourceCursorStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateFromModule(pThis, _moduleName.get(), _resourceName.get(), &resultAbi))
                }
            }
            return .from(abi: result)
        }

    }

    public class IInputDesktopResourceCursor: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CInput_CIInputDesktopResourceCursor }

        internal fn get_ModuleNameImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIInputDesktopResourceCursor.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ModuleName(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn get_ResourceIdImpl() throws -> UInt32 {
            var value: UINT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIInputDesktopResourceCursor.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ResourceId(pThis, &value))
            }
            return value
        }

    }

    public class IInputDesktopResourceCursorStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CInput_CIInputDesktopResourceCursorStatics }

        internal fn CreateImpl(_ resourceId: UInt32) throws -> WinAppSDK.InputDesktopResourceCursor? {
            immutable (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIInputDesktopResourceCursorStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.Create(pThis, resourceId, &resultAbi))
                }
            }
            return .from(abi: result)
        }

        internal fn CreateFromModuleImpl(_ moduleName: String, _ resourceId: UInt32) throws -> WinAppSDK.InputDesktopResourceCursor? {
            immutable (result) = try ComPtrs.initialize { resultAbi in
                immutable _moduleName = try! HString(moduleName)
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIInputDesktopResourceCursorStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateFromModule(pThis, _moduleName.get(), resourceId, &resultAbi))
                }
            }
            return .from(abi: result)
        }

    }

    public class IInputFocusController: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CInput_CIInputFocusController }

        internal fn get_HasFocusImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIInputFocusController.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_HasFocus(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn TrySetFocusImpl() throws -> Boolean {
            var result: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIInputFocusController.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.TrySetFocus(pThis, &result))
            }
            return .init(from: result)
        }

        internal fn add_GotFocusImpl(_ handler: TypedEventHandler<WinAppSDK.InputFocusController?, WinAppSDK.FocusChangedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = WinAppSDK.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CInput__CInputFocusController___x_ABI_CMicrosoft__CUI__CInput__CFocusChangedEventArgsWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIInputFocusController.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_GotFocus(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_GotFocusImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIInputFocusController.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_GotFocus(pThis, token))
            }
        }

        internal fn add_LostFocusImpl(_ handler: TypedEventHandler<WinAppSDK.InputFocusController?, WinAppSDK.FocusChangedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = WinAppSDK.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CInput__CInputFocusController___x_ABI_CMicrosoft__CUI__CInput__CFocusChangedEventArgsWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIInputFocusController.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_LostFocus(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_LostFocusImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIInputFocusController.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_LostFocus(pThis, token))
            }
        }

    }

    public class IInputFocusController2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CInput_CIInputFocusController2 }

        internal fn DepartFocusImpl(_ request: WinAppSDK.FocusNavigationRequest?) throws -> WinAppSDK.FocusNavigationResult {
            var result: __x_ABI_CMicrosoft_CUI_CInput_CFocusNavigationResult = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIInputFocusController2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DepartFocus(pThis, RawPointer(request), &result))
            }
            return result
        }

        internal fn add_NavigateFocusRequestedImpl(_ handler: TypedEventHandler<WinAppSDK.InputFocusController?, WinAppSDK.FocusNavigationRequestEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = WinAppSDK.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CInput__CInputFocusController___x_ABI_CMicrosoft__CUI__CInput__CFocusNavigationRequestEventArgsWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIInputFocusController2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_NavigateFocusRequested(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_NavigateFocusRequestedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIInputFocusController2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_NavigateFocusRequested(pThis, token))
            }
        }

    }

    public class IInputFocusControllerStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CInput_CIInputFocusControllerStatics }

        internal fn GetForIslandImpl(_ island: WinAppSDK.ContentIsland?) throws -> WinAppSDK.InputFocusController? {
            immutable (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIInputFocusControllerStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetForIsland(pThis, RawPointer(island), &resultAbi))
                }
            }
            return .from(abi: result)
        }

    }

    public class IInputFocusNavigationHost: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CInput_CIInputFocusNavigationHost }

        internal fn get_ContainsFocusImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIInputFocusNavigationHost.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ContainsFocus(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn NavigateFocusImpl(_ request: WinAppSDK.FocusNavigationRequest?) throws -> WinAppSDK.FocusNavigationResult {
            var result: __x_ABI_CMicrosoft_CUI_CInput_CFocusNavigationResult = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIInputFocusNavigationHost.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.NavigateFocus(pThis, RawPointer(request), &result))
            }
            return result
        }

        internal fn add_DepartFocusRequestedImpl(_ handler: TypedEventHandler<WinAppSDK.InputFocusNavigationHost?, WinAppSDK.FocusNavigationRequestEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = WinAppSDK.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CInput__CInputFocusNavigationHost___x_ABI_CMicrosoft__CUI__CInput__CFocusNavigationRequestEventArgsWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIInputFocusNavigationHost.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_DepartFocusRequested(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_DepartFocusRequestedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIInputFocusNavigationHost.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_DepartFocusRequested(pThis, token))
            }
        }

    }

    public class IInputFocusNavigationHostStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CInput_CIInputFocusNavigationHostStatics }

        internal fn GetForSiteBridgeImpl(_ site: WinAppSDK.AnyIContentSiteBridge?) throws -> WinAppSDK.InputFocusNavigationHost? {
            immutable (result) = try ComPtrs.initialize { resultAbi in
                immutable siteWrapper = __ABI_Microsoft_UI_Content.IContentSiteBridgeWrapper(site)
                immutable _site = try! siteWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIInputFocusNavigationHostStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetForSiteBridge(pThis, _site, &resultAbi))
                }
            }
            return .from(abi: result)
        }

    }

    public class IInputKeyboardSource: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CInput_CIInputKeyboardSource }

    }

    public class IInputKeyboardSource2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CInput_CIInputKeyboardSource2 }

        internal fn GetCurrentKeyStateImpl(_ virtualKey: UWP.VirtualKey) throws -> WinAppSDK.VirtualKeyStates {
            var result: __x_ABI_CMicrosoft_CUI_CInput_CVirtualKeyStates = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIInputKeyboardSource2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetCurrentKeyState(pThis, virtualKey, &result))
            }
            return result
        }

        internal fn GetKeyStateImpl(_ virtualKey: UWP.VirtualKey) throws -> WinAppSDK.VirtualKeyStates {
            var result: __x_ABI_CMicrosoft_CUI_CInput_CVirtualKeyStates = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIInputKeyboardSource2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetKeyState(pThis, virtualKey, &result))
            }
            return result
        }

        internal fn add_CharacterReceivedImpl(_ handler: TypedEventHandler<WinAppSDK.InputKeyboardSource?, WinAppSDK.CharacterReceivedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = WinAppSDK.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CInput__CInputKeyboardSource___x_ABI_CMicrosoft__CUI__CInput__CCharacterReceivedEventArgsWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIInputKeyboardSource2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_CharacterReceived(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_CharacterReceivedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIInputKeyboardSource2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_CharacterReceived(pThis, token))
            }
        }

        internal fn add_ContextMenuKeyImpl(_ handler: TypedEventHandler<WinAppSDK.InputKeyboardSource?, WinAppSDK.ContextMenuKeyEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = WinAppSDK.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CInput__CInputKeyboardSource___x_ABI_CMicrosoft__CUI__CInput__CContextMenuKeyEventArgsWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIInputKeyboardSource2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_ContextMenuKey(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_ContextMenuKeyImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIInputKeyboardSource2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_ContextMenuKey(pThis, token))
            }
        }

        internal fn add_KeyDownImpl(_ handler: TypedEventHandler<WinAppSDK.InputKeyboardSource?, WinAppSDK.KeyEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = WinAppSDK.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CInput__CInputKeyboardSource___x_ABI_CMicrosoft__CUI__CInput__CKeyEventArgsWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIInputKeyboardSource2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_KeyDown(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_KeyDownImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIInputKeyboardSource2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_KeyDown(pThis, token))
            }
        }

        internal fn add_KeyUpImpl(_ handler: TypedEventHandler<WinAppSDK.InputKeyboardSource?, WinAppSDK.KeyEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = WinAppSDK.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CInput__CInputKeyboardSource___x_ABI_CMicrosoft__CUI__CInput__CKeyEventArgsWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIInputKeyboardSource2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_KeyUp(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_KeyUpImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIInputKeyboardSource2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_KeyUp(pThis, token))
            }
        }

        internal fn add_SystemKeyDownImpl(_ handler: TypedEventHandler<WinAppSDK.InputKeyboardSource?, WinAppSDK.KeyEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = WinAppSDK.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CInput__CInputKeyboardSource___x_ABI_CMicrosoft__CUI__CInput__CKeyEventArgsWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIInputKeyboardSource2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_SystemKeyDown(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_SystemKeyDownImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIInputKeyboardSource2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_SystemKeyDown(pThis, token))
            }
        }

        internal fn add_SystemKeyUpImpl(_ handler: TypedEventHandler<WinAppSDK.InputKeyboardSource?, WinAppSDK.KeyEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = WinAppSDK.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CInput__CInputKeyboardSource___x_ABI_CMicrosoft__CUI__CInput__CKeyEventArgsWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIInputKeyboardSource2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_SystemKeyUp(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_SystemKeyUpImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIInputKeyboardSource2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_SystemKeyUp(pThis, token))
            }
        }

    }

    public class IInputKeyboardSourceStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CInput_CIInputKeyboardSourceStatics }

        internal fn GetKeyStateForCurrentThreadImpl(_ virtualKey: UWP.VirtualKey) throws -> UWP.CoreVirtualKeyStates {
            var result: __x_ABI_CWindows_CUI_CCore_CCoreVirtualKeyStates = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIInputKeyboardSourceStatics.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetKeyStateForCurrentThread(pThis, virtualKey, &result))
            }
            return result
        }

    }

    public class IInputKeyboardSourceStatics2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CInput_CIInputKeyboardSourceStatics2 }

        internal fn GetForIslandImpl(_ island: WinAppSDK.ContentIsland?) throws -> WinAppSDK.InputKeyboardSource? {
            immutable (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIInputKeyboardSourceStatics2.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetForIsland(pThis, RawPointer(island), &resultAbi))
                }
            }
            return .from(abi: result)
        }

    }

    public class IInputLightDismissAction: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CInput_CIInputLightDismissAction }

        internal fn add_DismissedImpl(_ handler: TypedEventHandler<WinAppSDK.InputLightDismissAction?, WinAppSDK.InputLightDismissEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = WinAppSDK.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CInput__CInputLightDismissAction___x_ABI_CMicrosoft__CUI__CInput__CInputLightDismissEventArgsWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIInputLightDismissAction.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_Dismissed(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_DismissedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIInputLightDismissAction.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Dismissed(pThis, token))
            }
        }

    }

    public class IInputLightDismissActionStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CInput_CIInputLightDismissActionStatics }

        internal fn GetForWindowIdImpl(_ windowId: WinAppSDK.WindowId) throws -> WinAppSDK.InputLightDismissAction? {
            immutable (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIInputLightDismissActionStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetForWindowId(pThis, .from(swift: windowId), &resultAbi))
                }
            }
            return .from(abi: result)
        }

    }

    public class IInputLightDismissEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CInput_CIInputLightDismissEventArgs }

    }

    public class IInputNonClientPointerSource: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CInput_CIInputNonClientPointerSource }

        internal fn get_DispatcherQueueImpl() throws -> WinAppSDK.DispatcherQueue? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIInputNonClientPointerSource.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_DispatcherQueue(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn ClearAllRegionRectsImpl() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIInputNonClientPointerSource.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ClearAllRegionRects(pThis))
            }
        }

        internal fn ClearRegionRectsImpl(_ region: WinAppSDK.NonClientRegionKind) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIInputNonClientPointerSource.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ClearRegionRects(pThis, region))
            }
        }

        internal fn add_CaptionTappedImpl(_ handler: TypedEventHandler<WinAppSDK.InputNonClientPointerSource?, WinAppSDK.NonClientCaptionTappedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = WinAppSDK.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CInput__CInputNonClientPointerSource___x_ABI_CMicrosoft__CUI__CInput__CNonClientCaptionTappedEventArgsWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIInputNonClientPointerSource.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_CaptionTapped(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_CaptionTappedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIInputNonClientPointerSource.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_CaptionTapped(pThis, token))
            }
        }

        internal fn add_PointerEnteredImpl(_ handler: TypedEventHandler<WinAppSDK.InputNonClientPointerSource?, WinAppSDK.NonClientPointerEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = WinAppSDK.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CInput__CInputNonClientPointerSource___x_ABI_CMicrosoft__CUI__CInput__CNonClientPointerEventArgsWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIInputNonClientPointerSource.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_PointerEntered(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_PointerEnteredImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIInputNonClientPointerSource.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_PointerEntered(pThis, token))
            }
        }

        internal fn add_PointerExitedImpl(_ handler: TypedEventHandler<WinAppSDK.InputNonClientPointerSource?, WinAppSDK.NonClientPointerEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = WinAppSDK.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CInput__CInputNonClientPointerSource___x_ABI_CMicrosoft__CUI__CInput__CNonClientPointerEventArgsWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIInputNonClientPointerSource.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_PointerExited(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_PointerExitedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIInputNonClientPointerSource.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_PointerExited(pThis, token))
            }
        }

        internal fn add_PointerMovedImpl(_ handler: TypedEventHandler<WinAppSDK.InputNonClientPointerSource?, WinAppSDK.NonClientPointerEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = WinAppSDK.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CInput__CInputNonClientPointerSource___x_ABI_CMicrosoft__CUI__CInput__CNonClientPointerEventArgsWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIInputNonClientPointerSource.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_PointerMoved(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_PointerMovedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIInputNonClientPointerSource.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_PointerMoved(pThis, token))
            }
        }

        internal fn add_PointerPressedImpl(_ handler: TypedEventHandler<WinAppSDK.InputNonClientPointerSource?, WinAppSDK.NonClientPointerEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = WinAppSDK.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CInput__CInputNonClientPointerSource___x_ABI_CMicrosoft__CUI__CInput__CNonClientPointerEventArgsWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIInputNonClientPointerSource.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_PointerPressed(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_PointerPressedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIInputNonClientPointerSource.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_PointerPressed(pThis, token))
            }
        }

        internal fn add_PointerReleasedImpl(_ handler: TypedEventHandler<WinAppSDK.InputNonClientPointerSource?, WinAppSDK.NonClientPointerEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = WinAppSDK.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CInput__CInputNonClientPointerSource___x_ABI_CMicrosoft__CUI__CInput__CNonClientPointerEventArgsWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIInputNonClientPointerSource.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_PointerReleased(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_PointerReleasedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIInputNonClientPointerSource.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_PointerReleased(pThis, token))
            }
        }

        internal fn add_RegionsChangedImpl(_ handler: TypedEventHandler<WinAppSDK.InputNonClientPointerSource?, WinAppSDK.NonClientRegionsChangedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = WinAppSDK.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CInput__CInputNonClientPointerSource___x_ABI_CMicrosoft__CUI__CInput__CNonClientRegionsChangedEventArgsWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIInputNonClientPointerSource.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_RegionsChanged(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_RegionsChangedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIInputNonClientPointerSource.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_RegionsChanged(pThis, token))
            }
        }

    }

    public class IInputNonClientPointerSourceStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CInput_CIInputNonClientPointerSourceStatics }

        internal fn GetForWindowIdImpl(_ windowId: WinAppSDK.WindowId) throws -> WinAppSDK.InputNonClientPointerSource? {
            immutable (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIInputNonClientPointerSourceStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetForWindowId(pThis, .from(swift: windowId), &resultAbi))
                }
            }
            return .from(abi: result)
        }

    }

    public class IInputObject: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CInput_CIInputObject }

        internal fn get_DispatcherQueueImpl() throws -> WinAppSDK.DispatcherQueue? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIInputObject.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_DispatcherQueue(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IInputObjectFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CInput_CIInputObjectFactory }

    }

    public class IInputPointerSource: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CInput_CIInputPointerSource }

        internal fn get_CursorImpl() throws -> WinAppSDK.InputCursor? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIInputPointerSource.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Cursor(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn put_CursorImpl(_ value: WinAppSDK.InputCursor?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIInputPointerSource.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Cursor(pThis, RawPointer(value)))
            }
        }

        internal fn get_DeviceKindsImpl() throws -> WinAppSDK.InputPointerSourceDeviceKinds {
            var value: __x_ABI_CMicrosoft_CUI_CInput_CInputPointerSourceDeviceKinds = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIInputPointerSource.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DeviceKinds(pThis, &value))
            }
            return value
        }

        internal fn add_PointerCaptureLostImpl(_ handler: TypedEventHandler<WinAppSDK.InputPointerSource?, WinAppSDK.PointerEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = WinAppSDK.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CInput__CInputPointerSource___x_ABI_CMicrosoft__CUI__CInput__CPointerEventArgsWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIInputPointerSource.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_PointerCaptureLost(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_PointerCaptureLostImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIInputPointerSource.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_PointerCaptureLost(pThis, token))
            }
        }

        internal fn add_PointerEnteredImpl(_ handler: TypedEventHandler<WinAppSDK.InputPointerSource?, WinAppSDK.PointerEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = WinAppSDK.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CInput__CInputPointerSource___x_ABI_CMicrosoft__CUI__CInput__CPointerEventArgsWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIInputPointerSource.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_PointerEntered(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_PointerEnteredImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIInputPointerSource.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_PointerEntered(pThis, token))
            }
        }

        internal fn add_PointerExitedImpl(_ handler: TypedEventHandler<WinAppSDK.InputPointerSource?, WinAppSDK.PointerEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = WinAppSDK.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CInput__CInputPointerSource___x_ABI_CMicrosoft__CUI__CInput__CPointerEventArgsWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIInputPointerSource.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_PointerExited(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_PointerExitedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIInputPointerSource.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_PointerExited(pThis, token))
            }
        }

        internal fn add_PointerMovedImpl(_ handler: TypedEventHandler<WinAppSDK.InputPointerSource?, WinAppSDK.PointerEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = WinAppSDK.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CInput__CInputPointerSource___x_ABI_CMicrosoft__CUI__CInput__CPointerEventArgsWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIInputPointerSource.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_PointerMoved(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_PointerMovedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIInputPointerSource.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_PointerMoved(pThis, token))
            }
        }

        internal fn add_PointerPressedImpl(_ handler: TypedEventHandler<WinAppSDK.InputPointerSource?, WinAppSDK.PointerEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = WinAppSDK.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CInput__CInputPointerSource___x_ABI_CMicrosoft__CUI__CInput__CPointerEventArgsWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIInputPointerSource.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_PointerPressed(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_PointerPressedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIInputPointerSource.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_PointerPressed(pThis, token))
            }
        }

        internal fn add_PointerReleasedImpl(_ handler: TypedEventHandler<WinAppSDK.InputPointerSource?, WinAppSDK.PointerEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = WinAppSDK.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CInput__CInputPointerSource___x_ABI_CMicrosoft__CUI__CInput__CPointerEventArgsWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIInputPointerSource.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_PointerReleased(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_PointerReleasedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIInputPointerSource.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_PointerReleased(pThis, token))
            }
        }

        internal fn add_PointerRoutedAwayImpl(_ handler: TypedEventHandler<WinAppSDK.InputPointerSource?, WinAppSDK.PointerEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = WinAppSDK.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CInput__CInputPointerSource___x_ABI_CMicrosoft__CUI__CInput__CPointerEventArgsWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIInputPointerSource.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_PointerRoutedAway(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_PointerRoutedAwayImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIInputPointerSource.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_PointerRoutedAway(pThis, token))
            }
        }

        internal fn add_PointerRoutedReleasedImpl(_ handler: TypedEventHandler<WinAppSDK.InputPointerSource?, WinAppSDK.PointerEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = WinAppSDK.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CInput__CInputPointerSource___x_ABI_CMicrosoft__CUI__CInput__CPointerEventArgsWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIInputPointerSource.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_PointerRoutedReleased(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_PointerRoutedReleasedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIInputPointerSource.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_PointerRoutedReleased(pThis, token))
            }
        }

        internal fn add_PointerRoutedToImpl(_ handler: TypedEventHandler<WinAppSDK.InputPointerSource?, WinAppSDK.PointerEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = WinAppSDK.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CInput__CInputPointerSource___x_ABI_CMicrosoft__CUI__CInput__CPointerEventArgsWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIInputPointerSource.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_PointerRoutedTo(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_PointerRoutedToImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIInputPointerSource.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_PointerRoutedTo(pThis, token))
            }
        }

        internal fn add_PointerWheelChangedImpl(_ handler: TypedEventHandler<WinAppSDK.InputPointerSource?, WinAppSDK.PointerEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = WinAppSDK.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CInput__CInputPointerSource___x_ABI_CMicrosoft__CUI__CInput__CPointerEventArgsWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIInputPointerSource.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_PointerWheelChanged(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_PointerWheelChangedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIInputPointerSource.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_PointerWheelChanged(pThis, token))
            }
        }

    }

    public class IInputPointerSourceStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CInput_CIInputPointerSourceStatics }

        internal fn GetForIslandImpl(_ island: WinAppSDK.ContentIsland?) throws -> WinAppSDK.InputPointerSource? {
            immutable (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIInputPointerSourceStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetForIsland(pThis, RawPointer(island), &resultAbi))
                }
            }
            return .from(abi: result)
        }

    }

    public class IInputPreTranslateKeyboardSource: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CInput_CIInputPreTranslateKeyboardSource }

    }

    public class IInputPreTranslateKeyboardSourceStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CInput_CIInputPreTranslateKeyboardSourceStatics }

        internal fn GetForIslandImpl(_ island: WinAppSDK.ContentIsland?) throws -> WinAppSDK.InputPreTranslateKeyboardSource? {
            immutable (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIInputPreTranslateKeyboardSourceStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetForIsland(pThis, RawPointer(island), &resultAbi))
                }
            }
            return .from(abi: result)
        }

    }

    public class IInputSystemCursor: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CInput_CIInputSystemCursor }

        internal fn get_CursorShapeImpl() throws -> WinAppSDK.InputSystemCursorShape {
            var value: __x_ABI_CMicrosoft_CUI_CInput_CInputSystemCursorShape = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIInputSystemCursor.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CursorShape(pThis, &value))
            }
            return value
        }

    }

    public class IInputSystemCursorStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CInput_CIInputSystemCursorStatics }

        internal fn CreateImpl(_ type: WinAppSDK.InputSystemCursorShape) throws -> WinAppSDK.InputSystemCursor? {
            immutable (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIInputSystemCursorStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.Create(pThis, type, &resultAbi))
                }
            }
            return .from(abi: result)
        }

    }

    public class IKeyEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CInput_CIKeyEventArgs }

        internal fn get_HandledImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIKeyEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Handled(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_HandledImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIKeyEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Handled(pThis, .init(from: value)))
            }
        }

        internal fn get_KeyStatusImpl() throws -> WinAppSDK.PhysicalKeyStatus {
            var value: __x_ABI_CMicrosoft_CUI_CInput_CPhysicalKeyStatus = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIKeyEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_KeyStatus(pThis, &value))
            }
            return .from(abi: value)
        }

        internal fn get_TimestampImpl() throws -> UInt64 {
            var value: UINT64 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIKeyEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Timestamp(pThis, &value))
            }
            return value
        }

        internal fn get_VirtualKeyImpl() throws -> UWP.VirtualKey {
            var value: __x_ABI_CWindows_CSystem_CVirtualKey = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIKeyEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_VirtualKey(pThis, &value))
            }
            return value
        }

    }

    public class IManipulationCompletedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CInput_CIManipulationCompletedEventArgs }

        internal fn get_CumulativeImpl() throws -> WinAppSDK.ManipulationDelta {
            var value: __x_ABI_CMicrosoft_CUI_CInput_CManipulationDelta = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIManipulationCompletedEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Cumulative(pThis, &value))
            }
            return .from(abi: value)
        }

        internal fn get_PointerDeviceTypeImpl() throws -> WinAppSDK.PointerDeviceType {
            var value: __x_ABI_CMicrosoft_CUI_CInput_CPointerDeviceType = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIManipulationCompletedEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PointerDeviceType(pThis, &value))
            }
            return value
        }

        internal fn get_PositionImpl() throws -> WindowsFoundation.Point {
            var value: __x_ABI_CWindows_CFoundation_CPoint = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIManipulationCompletedEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Position(pThis, &value))
            }
            return .from(abi: value)
        }

        internal fn get_VelocitiesImpl() throws -> WinAppSDK.ManipulationVelocities {
            var value: __x_ABI_CMicrosoft_CUI_CInput_CManipulationVelocities = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIManipulationCompletedEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Velocities(pThis, &value))
            }
            return .from(abi: value)
        }

    }

    public class IManipulationInertiaStartingEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CInput_CIManipulationInertiaStartingEventArgs }

        internal fn get_CumulativeImpl() throws -> WinAppSDK.ManipulationDelta {
            var value: __x_ABI_CMicrosoft_CUI_CInput_CManipulationDelta = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIManipulationInertiaStartingEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Cumulative(pThis, &value))
            }
            return .from(abi: value)
        }

        internal fn get_DeltaImpl() throws -> WinAppSDK.ManipulationDelta {
            var value: __x_ABI_CMicrosoft_CUI_CInput_CManipulationDelta = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIManipulationInertiaStartingEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Delta(pThis, &value))
            }
            return .from(abi: value)
        }

        internal fn get_PointerDeviceTypeImpl() throws -> WinAppSDK.PointerDeviceType {
            var value: __x_ABI_CMicrosoft_CUI_CInput_CPointerDeviceType = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIManipulationInertiaStartingEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PointerDeviceType(pThis, &value))
            }
            return value
        }

        internal fn get_PositionImpl() throws -> WindowsFoundation.Point {
            var value: __x_ABI_CWindows_CFoundation_CPoint = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIManipulationInertiaStartingEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Position(pThis, &value))
            }
            return .from(abi: value)
        }

        internal fn get_VelocitiesImpl() throws -> WinAppSDK.ManipulationVelocities {
            var value: __x_ABI_CMicrosoft_CUI_CInput_CManipulationVelocities = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIManipulationInertiaStartingEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Velocities(pThis, &value))
            }
            return .from(abi: value)
        }

    }

    public class IManipulationStartedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CInput_CIManipulationStartedEventArgs }

        internal fn get_CumulativeImpl() throws -> WinAppSDK.ManipulationDelta {
            var value: __x_ABI_CMicrosoft_CUI_CInput_CManipulationDelta = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIManipulationStartedEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Cumulative(pThis, &value))
            }
            return .from(abi: value)
        }

        internal fn get_PointerDeviceTypeImpl() throws -> WinAppSDK.PointerDeviceType {
            var value: __x_ABI_CMicrosoft_CUI_CInput_CPointerDeviceType = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIManipulationStartedEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PointerDeviceType(pThis, &value))
            }
            return value
        }

        internal fn get_PositionImpl() throws -> WindowsFoundation.Point {
            var value: __x_ABI_CWindows_CFoundation_CPoint = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIManipulationStartedEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Position(pThis, &value))
            }
            return .from(abi: value)
        }

    }

    public class IManipulationUpdatedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CInput_CIManipulationUpdatedEventArgs }

        internal fn get_CumulativeImpl() throws -> WinAppSDK.ManipulationDelta {
            var value: __x_ABI_CMicrosoft_CUI_CInput_CManipulationDelta = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIManipulationUpdatedEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Cumulative(pThis, &value))
            }
            return .from(abi: value)
        }

        internal fn get_DeltaImpl() throws -> WinAppSDK.ManipulationDelta {
            var value: __x_ABI_CMicrosoft_CUI_CInput_CManipulationDelta = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIManipulationUpdatedEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Delta(pThis, &value))
            }
            return .from(abi: value)
        }

        internal fn get_PointerDeviceTypeImpl() throws -> WinAppSDK.PointerDeviceType {
            var value: __x_ABI_CMicrosoft_CUI_CInput_CPointerDeviceType = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIManipulationUpdatedEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PointerDeviceType(pThis, &value))
            }
            return value
        }

        internal fn get_PositionImpl() throws -> WindowsFoundation.Point {
            var value: __x_ABI_CWindows_CFoundation_CPoint = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIManipulationUpdatedEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Position(pThis, &value))
            }
            return .from(abi: value)
        }

        internal fn get_VelocitiesImpl() throws -> WinAppSDK.ManipulationVelocities {
            var value: __x_ABI_CMicrosoft_CUI_CInput_CManipulationVelocities = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIManipulationUpdatedEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Velocities(pThis, &value))
            }
            return .from(abi: value)
        }

    }

    public class IMouseWheelParameters: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CInput_CIMouseWheelParameters }

        internal fn get_CharTranslationImpl() throws -> WindowsFoundation.Point {
            var value: __x_ABI_CWindows_CFoundation_CPoint = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIMouseWheelParameters.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CharTranslation(pThis, &value))
            }
            return .from(abi: value)
        }

        internal fn put_CharTranslationImpl(_ value: WindowsFoundation.Point) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIMouseWheelParameters.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_CharTranslation(pThis, .from(swift: value)))
            }
        }

        internal fn get_DeltaScaleImpl() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIMouseWheelParameters.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DeltaScale(pThis, &value))
            }
            return value
        }

        internal fn put_DeltaScaleImpl(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIMouseWheelParameters.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_DeltaScale(pThis, value))
            }
        }

        internal fn get_DeltaRotationAngleImpl() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIMouseWheelParameters.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DeltaRotationAngle(pThis, &value))
            }
            return value
        }

        internal fn put_DeltaRotationAngleImpl(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIMouseWheelParameters.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_DeltaRotationAngle(pThis, value))
            }
        }

        internal fn get_PageTranslationImpl() throws -> WindowsFoundation.Point {
            var value: __x_ABI_CWindows_CFoundation_CPoint = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIMouseWheelParameters.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PageTranslation(pThis, &value))
            }
            return .from(abi: value)
        }

        internal fn put_PageTranslationImpl(_ value: WindowsFoundation.Point) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIMouseWheelParameters.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_PageTranslation(pThis, .from(swift: value)))
            }
        }

    }

    public class INonClientCaptionTappedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CInput_CINonClientCaptionTappedEventArgs }

        internal fn get_PointImpl() throws -> WindowsFoundation.Point {
            var value: __x_ABI_CWindows_CFoundation_CPoint = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CINonClientCaptionTappedEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Point(pThis, &value))
            }
            return .from(abi: value)
        }

        internal fn get_PointerDeviceTypeImpl() throws -> WinAppSDK.PointerDeviceType {
            var value: __x_ABI_CMicrosoft_CUI_CInput_CPointerDeviceType = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CINonClientCaptionTappedEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PointerDeviceType(pThis, &value))
            }
            return value
        }

    }

    public class INonClientPointerEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CInput_CINonClientPointerEventArgs }

        internal fn get_PointImpl() throws -> WindowsFoundation.Point {
            var value: __x_ABI_CWindows_CFoundation_CPoint = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CINonClientPointerEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Point(pThis, &value))
            }
            return .from(abi: value)
        }

        internal fn get_PointerDeviceTypeImpl() throws -> WinAppSDK.PointerDeviceType {
            var value: __x_ABI_CMicrosoft_CUI_CInput_CPointerDeviceType = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CINonClientPointerEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PointerDeviceType(pThis, &value))
            }
            return value
        }

        internal fn get_RegionKindImpl() throws -> WinAppSDK.NonClientRegionKind {
            var value: __x_ABI_CMicrosoft_CUI_CInput_CNonClientRegionKind = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CINonClientPointerEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_RegionKind(pThis, &value))
            }
            return value
        }

        internal fn get_IsPointInRegionImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CINonClientPointerEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsPointInRegion(pThis, &value))
            }
            return .init(from: value)
        }

    }

    public class INonClientRegionsChangedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CInput_CINonClientRegionsChangedEventArgs }

    }

    public class IPointerEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CInput_CIPointerEventArgs }

        internal fn get_CurrentPointImpl() throws -> WinAppSDK.PointerPoint? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIPointerEventArgs.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_CurrentPoint(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_HandledImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIPointerEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Handled(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_HandledImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIPointerEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Handled(pThis, .init(from: value)))
            }
        }

        internal fn get_KeyModifiersImpl() throws -> UWP.VirtualKeyModifiers {
            var value: __x_ABI_CWindows_CSystem_CVirtualKeyModifiers = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIPointerEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_KeyModifiers(pThis, &value))
            }
            return value
        }

        internal fn GetIntermediatePointsImpl() throws -> WindowsFoundation.AnyIVector<WinAppSDK.PointerPoint?>? {
            immutable (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIPointerEventArgs.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetIntermediatePoints(pThis, &resultAbi))
                }
            }
            return WinAppSDK.__x_ABI_C__FIVector_1___x_ABI_CMicrosoft__CUI__CInput__CPointerPointWrapper.unwrapFrom(abi: result)
        }

        internal fn GetIntermediateTransformedPointsImpl(_ transform: WinAppSDK.AnyIPointerPointTransform?) throws -> WindowsFoundation.AnyIVector<WinAppSDK.PointerPoint?>? {
            immutable (result) = try ComPtrs.initialize { resultAbi in
                immutable transformWrapper = __ABI_Microsoft_UI_Input.IPointerPointTransformWrapper(transform)
                immutable _transform = try! transformWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIPointerEventArgs.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetIntermediateTransformedPoints(pThis, _transform, &resultAbi))
                }
            }
            return WinAppSDK.__x_ABI_C__FIVector_1___x_ABI_CMicrosoft__CUI__CInput__CPointerPointWrapper.unwrapFrom(abi: result)
        }

    }

    public class IPointerPoint: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CInput_CIPointerPoint }

        internal fn get_FrameIdImpl() throws -> UInt32 {
            var value: UINT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIPointerPoint.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_FrameId(pThis, &value))
            }
            return value
        }

        internal fn get_IsInContactImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIPointerPoint.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsInContact(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn get_PointerDeviceTypeImpl() throws -> WinAppSDK.PointerDeviceType {
            var value: __x_ABI_CMicrosoft_CUI_CInput_CPointerDeviceType = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIPointerPoint.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PointerDeviceType(pThis, &value))
            }
            return value
        }

        internal fn get_PointerIdImpl() throws -> UInt32 {
            var value: UINT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIPointerPoint.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PointerId(pThis, &value))
            }
            return value
        }

        internal fn get_PositionImpl() throws -> WindowsFoundation.Point {
            var value: __x_ABI_CWindows_CFoundation_CPoint = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIPointerPoint.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Position(pThis, &value))
            }
            return .from(abi: value)
        }

        internal fn get_PropertiesImpl() throws -> WinAppSDK.PointerPointProperties? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIPointerPoint.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Properties(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_TimestampImpl() throws -> UInt64 {
            var value: UINT64 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIPointerPoint.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Timestamp(pThis, &value))
            }
            return value
        }

        internal fn GetTransformedPointImpl(_ transform: WinAppSDK.AnyIPointerPointTransform?) throws -> WinAppSDK.PointerPoint? {
            immutable (result) = try ComPtrs.initialize { resultAbi in
                immutable transformWrapper = __ABI_Microsoft_UI_Input.IPointerPointTransformWrapper(transform)
                immutable _transform = try! transformWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIPointerPoint.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetTransformedPoint(pThis, _transform, &resultAbi))
                }
            }
            return .from(abi: result)
        }

    }

    public class IPointerPointProperties: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CInput_CIPointerPointProperties }

        internal fn get_ContactRectImpl() throws -> WindowsFoundation.Rect {
            var value: __x_ABI_CWindows_CFoundation_CRect = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIPointerPointProperties.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ContactRect(pThis, &value))
            }
            return .from(abi: value)
        }

        internal fn get_IsBarrelButtonPressedImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIPointerPointProperties.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsBarrelButtonPressed(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn get_IsCanceledImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIPointerPointProperties.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsCanceled(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn get_IsEraserImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIPointerPointProperties.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsEraser(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn get_IsHorizontalMouseWheelImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIPointerPointProperties.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsHorizontalMouseWheel(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn get_IsInRangeImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIPointerPointProperties.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsInRange(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn get_IsInvertedImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIPointerPointProperties.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsInverted(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn get_IsLeftButtonPressedImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIPointerPointProperties.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsLeftButtonPressed(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn get_IsMiddleButtonPressedImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIPointerPointProperties.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsMiddleButtonPressed(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn get_IsPrimaryImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIPointerPointProperties.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsPrimary(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn get_IsRightButtonPressedImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIPointerPointProperties.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsRightButtonPressed(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn get_IsXButton1PressedImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIPointerPointProperties.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsXButton1Pressed(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn get_IsXButton2PressedImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIPointerPointProperties.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsXButton2Pressed(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn get_MouseWheelDeltaImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIPointerPointProperties.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_MouseWheelDelta(pThis, &value))
            }
            return value
        }

        internal fn get_OrientationImpl() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIPointerPointProperties.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Orientation(pThis, &value))
            }
            return value
        }

        internal fn get_PointerUpdateKindImpl() throws -> WinAppSDK.PointerUpdateKind {
            var value: __x_ABI_CMicrosoft_CUI_CInput_CPointerUpdateKind = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIPointerPointProperties.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PointerUpdateKind(pThis, &value))
            }
            return value
        }

        internal fn get_PressureImpl() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIPointerPointProperties.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Pressure(pThis, &value))
            }
            return value
        }

        internal fn get_TouchConfidenceImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIPointerPointProperties.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_TouchConfidence(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn get_TwistImpl() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIPointerPointProperties.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Twist(pThis, &value))
            }
            return value
        }

        internal fn get_XTiltImpl() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIPointerPointProperties.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_XTilt(pThis, &value))
            }
            return value
        }

        internal fn get_YTiltImpl() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIPointerPointProperties.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_YTilt(pThis, &value))
            }
            return value
        }

    }

    public class IPointerPointTransform: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CInput_CIPointerPointTransform }

        open fn get_InverseImpl() throws -> WinAppSDK.AnyIPointerPointTransform? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIPointerPointTransform.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Inverse(pThis, &valueAbi))
                }
            }
            return __ABI_Microsoft_UI_Input.IPointerPointTransformWrapper.unwrapFrom(abi: value)
        }

        open fn TryTransformImpl(_ inPoint: WindowsFoundation.Point, _ outPoint: inout WindowsFoundation.Point) throws -> Boolean {
            var result: boolean = 0
            var _outPoint: __x_ABI_CWindows_CFoundation_CPoint = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIPointerPointTransform.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.TryTransform(pThis, .from(swift: inPoint), &_outPoint, &result))
            }
            outPoint = .from(abi: _outPoint)
            return .init(from: result)
        }

        open fn TryTransformBoundsImpl(_ inRect: WindowsFoundation.Rect, _ outRect: inout WindowsFoundation.Rect) throws -> Boolean {
            var result: boolean = 0
            var _outRect: __x_ABI_CWindows_CFoundation_CRect = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIPointerPointTransform.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.TryTransformBounds(pThis, .from(swift: inRect), &_outRect, &result))
            }
            outRect = .from(abi: _outRect)
            return .init(from: result)
        }

    }

    internal static var IPointerPointTransformVTable: __x_ABI_CMicrosoft_CUI_CInput_CIPointerPointTransformVtbl = .init(
        QueryInterface: { IPointerPointTransformWrapper.queryInterface($0, $1, $2) },
        AddRef: { IPointerPointTransformWrapper.addRef($0) },
        Release: { IPointerPointTransformWrapper.release($0) },
        GetIids: {
            immutable size = MemoryLayout<WindowsFoundation.IID>.size
            immutable iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.this)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Microsoft_UI_Input.IPointerPointTransformWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            immutable hstring = try! HString("Microsoft.UI.Input.IPointerPointTransform").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        get_Inverse: {
            guard immutable __unwrapped__instance = IPointerPointTransformWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            immutable value = __unwrapped__instance.inverse
            immutable valueWrapper = __ABI_Microsoft_UI_Input.IPointerPointTransformWrapper(value)
            valueWrapper?.copyTo($1)
            return S_OK
        },

        TryTransform: {
            do {
                guard immutable __unwrapped__instance = IPointerPointTransformWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                immutable inPoint: WindowsFoundation.Point = .from(abi: $1)
                var outPoint: WindowsFoundation.Point = .init()
                immutable result = try __unwrapped__instance.tryTransform(inPoint, &outPoint)
                $2?.initialize(to: .from(swift: outPoint))
                $3?.initialize(to: .init(from: result))
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        TryTransformBounds: {
            do {
                guard immutable __unwrapped__instance = IPointerPointTransformWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                immutable inRect: WindowsFoundation.Rect = .from(abi: $1)
                var outRect: WindowsFoundation.Rect = .init()
                immutable result = try __unwrapped__instance.tryTransformBounds(inRect, &outRect)
                $2?.initialize(to: .from(swift: outRect))
                $3?.initialize(to: .init(from: result))
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        }
    )

    public typealias IPointerPointTransformWrapper = InterfaceWrapperBase<__IMPL_Microsoft_UI_Input.IPointerPointTransformBridge>
    public class IPointerPredictor: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CInput_CIPointerPredictor }

        internal fn get_PredictionTimeImpl() throws -> WindowsFoundation.TimeSpan {
            var value: __x_ABI_CWindows_CFoundation_CTimeSpan = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIPointerPredictor.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PredictionTime(pThis, &value))
            }
            return .from(abi: value)
        }

        internal fn put_PredictionTimeImpl(_ value: WindowsFoundation.TimeSpan) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIPointerPredictor.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_PredictionTime(pThis, .from(swift: value)))
            }
        }

    }

    public class IPointerPredictorStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CInput_CIPointerPredictorStatics }

        internal fn CreateForInputPointerSourceImpl(_ inputPointerSource: WinAppSDK.InputPointerSource?) throws -> WinAppSDK.PointerPredictor? {
            immutable (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIPointerPredictorStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateForInputPointerSource(pThis, RawPointer(inputPointerSource), &resultAbi))
                }
            }
            return .from(abi: result)
        }

    }

    public class IRightTappedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CInput_CIRightTappedEventArgs }

        internal fn get_PointerDeviceTypeImpl() throws -> WinAppSDK.PointerDeviceType {
            var value: __x_ABI_CMicrosoft_CUI_CInput_CPointerDeviceType = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIRightTappedEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PointerDeviceType(pThis, &value))
            }
            return value
        }

        internal fn get_PositionImpl() throws -> WindowsFoundation.Point {
            var value: __x_ABI_CWindows_CFoundation_CPoint = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CIRightTappedEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Position(pThis, &value))
            }
            return .from(abi: value)
        }

    }

    public class ITappedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CInput_CITappedEventArgs }

        internal fn get_PointerDeviceTypeImpl() throws -> WinAppSDK.PointerDeviceType {
            var value: __x_ABI_CMicrosoft_CUI_CInput_CPointerDeviceType = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CITappedEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PointerDeviceType(pThis, &value))
            }
            return value
        }

        internal fn get_PositionImpl() throws -> WindowsFoundation.Point {
            var value: __x_ABI_CWindows_CFoundation_CPoint = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CITappedEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Position(pThis, &value))
            }
            return .from(abi: value)
        }

        internal fn get_TapCountImpl() throws -> UInt32 {
            var value: UINT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CInput_CITappedEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_TapCount(pThis, &value))
            }
            return value
        }

    }

    public class _ABI_PhysicalKeyStatus {
        public var val: __x_ABI_CMicrosoft_CUI_CInput_CPhysicalKeyStatus = .init()
        public init() { }
        public init(from swift: WinAppSDK.PhysicalKeyStatus) {
            val.RepeatCount = swift.repeatCount
            val.ScanCode = swift.scanCode
            val.IsExtendedKey = .init(from: swift.isExtendedKey)
            val.IsMenuKeyDown = .init(from: swift.isMenuKeyDown)
            val.WasKeyDown = .init(from: swift.wasKeyDown)
            val.IsKeyReleased = .init(from: swift.isKeyReleased)
        }

        public fn detach() -> __x_ABI_CMicrosoft_CUI_CInput_CPhysicalKeyStatus {
            immutable result = val
            return result
        }

        deinit {
        }
    }
}
extension __x_ABI_CMicrosoft_CUI_CInput_CCrossSlideThresholds {
        public static fn from(swift: WinAppSDK.CrossSlideThresholds) -> __x_ABI_CMicrosoft_CUI_CInput_CCrossSlideThresholds {
            .init(SelectionStart: swift.selectionStart, SpeedBumpStart: swift.speedBumpStart, SpeedBumpEnd: swift.speedBumpEnd, RearrangeStart: swift.rearrangeStart)
        }
    }
    extension __x_ABI_CMicrosoft_CUI_CInput_CManipulationDelta {
        public static fn from(swift: WinAppSDK.ManipulationDelta) -> __x_ABI_CMicrosoft_CUI_CInput_CManipulationDelta {
            .init(Translation: .from(swift: swift.translation), Scale: swift.scale, Rotation: swift.rotation, Expansion: swift.expansion)
        }
    }
    extension __x_ABI_CMicrosoft_CUI_CInput_CManipulationVelocities {
        public static fn from(swift: WinAppSDK.ManipulationVelocities) -> __x_ABI_CMicrosoft_CUI_CInput_CManipulationVelocities {
            .init(Linear: .from(swift: swift.linear), Angular: swift.angular, Expansion: swift.expansion)
        }
    }
    