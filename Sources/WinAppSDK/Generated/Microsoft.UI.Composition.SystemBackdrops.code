// WARNING: Please don't edit this file. It was generated by Codira/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import UWP
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.systembackdrops.desktopacrylickind)
public typealias DesktopAcrylicKind = __x_ABI_CMicrosoft_CUI_CComposition_CSystemBackdrops_CDesktopAcrylicKind
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.systembackdrops.micakind)
public typealias MicaKind = __x_ABI_CMicrosoft_CUI_CComposition_CSystemBackdrops_CMicaKind
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.systembackdrops.systembackdropstate)
public typealias SystemBackdropState = __x_ABI_CMicrosoft_CUI_CComposition_CSystemBackdrops_CSystemBackdropState
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.systembackdrops.systembackdroptheme)
public typealias SystemBackdropTheme = __x_ABI_CMicrosoft_CUI_CComposition_CSystemBackdrops_CSystemBackdropTheme
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.systembackdrops.desktopacryliccontroller)
public final class DesktopAcrylicController : WinRTClass, WindowsFoundation.IClosable, ISystemBackdropController, ISystemBackdropControllerWithTargets, WinAppSDK.IClosableNotifier {
    private typealias CodiraABI = __ABI_Microsoft_UI_Composition_SystemBackdrops.IDesktopAcrylicController
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CComposition_CSystemBackdrops_CIDesktopAcrylicController
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CComposition_CSystemBackdrops_CIDesktopAcrylicController>?) -> DesktopAcrylicController? {
        guard immutable abi = abi else { return Nothing }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public fn queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    override public init() {
        super.init(try! RoActivateInstance(HString("Microsoft.UI.Composition.SystemBackdrops.DesktopAcrylicController")))
    }

    private static immutable _IDesktopAcrylicControllerStatics: __ABI_Microsoft_UI_Composition_SystemBackdrops.IDesktopAcrylicControllerStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Composition.SystemBackdrops.DesktopAcrylicController"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.systembackdrops.desktopacryliccontroller.issupported)
    public static fn isSupported() -> Boolean {
        return try! _IDesktopAcrylicControllerStatics.IsSupportedImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.systembackdrops.desktopacryliccontroller.fallbackcolor)
    public var fallbackColor : UWP.Color {
        get { try! _default.get_FallbackColorImpl() }
        set { try! _default.put_FallbackColorImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.systembackdrops.desktopacryliccontroller.luminosityopacity)
    public var luminosityOpacity : Float {
        get { try! _default.get_LuminosityOpacityImpl() }
        set { try! _default.put_LuminosityOpacityImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.systembackdrops.desktopacryliccontroller.tintcolor)
    public var tintColor : UWP.Color {
        get { try! _default.get_TintColorImpl() }
        set { try! _default.put_TintColorImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.systembackdrops.desktopacryliccontroller.tintopacity)
    public var tintOpacity : Float {
        get { try! _default.get_TintOpacityImpl() }
        set { try! _default.put_TintOpacityImpl(newValue) }
    }

    private lazy var _IDesktopAcrylicController2: __ABI_Microsoft_UI_Composition_SystemBackdrops.IDesktopAcrylicController2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.systembackdrops.desktopacryliccontroller.resetproperties)
    public fn resetProperties() throws {
        try _IDesktopAcrylicController2.ResetPropertiesImpl()
    }

    private lazy var _IDesktopAcrylicController3: __ABI_Microsoft_UI_Composition_SystemBackdrops.IDesktopAcrylicController3! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.systembackdrops.desktopacryliccontroller.kind)
    public var kind : DesktopAcrylicKind {
        get { try! _IDesktopAcrylicController3.get_KindImpl() }
        set { try! _IDesktopAcrylicController3.put_KindImpl(newValue) }
    }

    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.systembackdrops.desktopacryliccontroller.close)
    public fn close() throws {
        try _IClosable.CloseImpl()
    }

    private lazy var _ISystemBackdropController: __ABI_Microsoft_UI_Composition_SystemBackdrops.ISystemBackdropController! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.systembackdrops.desktopacryliccontroller.settarget)
    public fn setTarget(_ windowId: WinAppSDK.WindowId, _ desktopWindowTarget: UWP.CompositionTarget!) throws -> Boolean {
        try _ISystemBackdropController.SetTargetWithWindowIdImpl(windowId, desktopWindowTarget)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.systembackdrops.desktopacryliccontroller.settarget)
    public fn setTarget(_ coreWindow: UWP.CoreWindow!, _ compositionTarget: UWP.CompositionTarget!) throws -> Boolean {
        try _ISystemBackdropController.SetTargetWithCoreWindowImpl(coreWindow, compositionTarget)
    }

    private lazy var _ISystemBackdropControllerWithTargets: __ABI_Microsoft_UI_Composition_SystemBackdrops.ISystemBackdropControllerWithTargets! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.systembackdrops.desktopacryliccontroller.addsystembackdroptarget)
    public fn addSystemBackdropTarget(_ systemBackdropTarget: WinAppSDK.AnyICompositionSupportsSystemBackdrop!) throws -> Boolean {
        try _ISystemBackdropControllerWithTargets.AddSystemBackdropTargetImpl(systemBackdropTarget)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.systembackdrops.desktopacryliccontroller.removeallsystembackdroptargets)
    public fn removeAllSystemBackdropTargets() throws {
        try _ISystemBackdropControllerWithTargets.RemoveAllSystemBackdropTargetsImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.systembackdrops.desktopacryliccontroller.removesystembackdroptarget)
    public fn removeSystemBackdropTarget(_ systemBackdropTarget: WinAppSDK.AnyICompositionSupportsSystemBackdrop!) throws -> Boolean {
        try _ISystemBackdropControllerWithTargets.RemoveSystemBackdropTargetImpl(systemBackdropTarget)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.systembackdrops.desktopacryliccontroller.setsystembackdropconfiguration)
    public fn setSystemBackdropConfiguration(_ configuration: SystemBackdropConfiguration!) throws {
        try _ISystemBackdropControllerWithTargets.SetSystemBackdropConfigurationImpl(configuration)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.systembackdrops.desktopacryliccontroller.state)
    public var state : SystemBackdropState {
        get { try! _ISystemBackdropControllerWithTargets.get_StateImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.systembackdrops.desktopacryliccontroller.statechanged)
    public lazy var stateChanged : Event<TypedEventHandler<ISystemBackdropControllerWithTargets?, Any?>> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._ISystemBackdropControllerWithTargets else { return .init() }
          return try! this.add_StateChangedImpl($0)
        },
        remove: { [weak this] in
         try? this?._ISystemBackdropControllerWithTargets.remove_StateChangedImpl($0)
       }
      )
    }()

    private lazy var _IClosableNotifier: __ABI_Microsoft_UI.IClosableNotifier! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.systembackdrops.desktopacryliccontroller.isclosed)
    public var isClosed : Boolean {
        get { try! _IClosableNotifier.get_IsClosedImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.systembackdrops.desktopacryliccontroller.closed)
    public lazy var closed : Event<WinAppSDK.ClosableNotifierHandler> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._IClosableNotifier else { return .init() }
          return try! this.add_ClosedImpl($0)
        },
        remove: { [weak this] in
         try? this?._IClosableNotifier.remove_ClosedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.systembackdrops.desktopacryliccontroller.frameworkclosed)
    public lazy var frameworkClosed : Event<WinAppSDK.ClosableNotifierHandler> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._IClosableNotifier else { return .init() }
          return try! this.add_FrameworkClosedImpl($0)
        },
        remove: { [weak this] in
         try? this?._IClosableNotifier.remove_FrameworkClosedImpl($0)
       }
      )
    }()

    deinit {
        _default = Nothing
        _IDesktopAcrylicController2 = Nothing
        _IDesktopAcrylicController3 = Nothing
        _IClosable = Nothing
        _ISystemBackdropController = Nothing
        _ISystemBackdropControllerWithTargets = Nothing
        _IClosableNotifier = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.systembackdrops.micacontroller)
public final class MicaController : WinRTClass, WindowsFoundation.IClosable, ISystemBackdropController, ISystemBackdropControllerWithTargets, WinAppSDK.IClosableNotifier {
    private typealias CodiraABI = __ABI_Microsoft_UI_Composition_SystemBackdrops.IMicaController
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CComposition_CSystemBackdrops_CIMicaController
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CComposition_CSystemBackdrops_CIMicaController>?) -> MicaController? {
        guard immutable abi = abi else { return Nothing }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public fn queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    override public init() {
        super.init(try! RoActivateInstance(HString("Microsoft.UI.Composition.SystemBackdrops.MicaController")))
    }

    private static immutable _IMicaControllerStatics: __ABI_Microsoft_UI_Composition_SystemBackdrops.IMicaControllerStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Composition.SystemBackdrops.MicaController"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.systembackdrops.micacontroller.issupported)
    public static fn isSupported() -> Boolean {
        return try! _IMicaControllerStatics.IsSupportedImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.systembackdrops.micacontroller.fallbackcolor)
    public var fallbackColor : UWP.Color {
        get { try! _default.get_FallbackColorImpl() }
        set { try! _default.put_FallbackColorImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.systembackdrops.micacontroller.luminosityopacity)
    public var luminosityOpacity : Float {
        get { try! _default.get_LuminosityOpacityImpl() }
        set { try! _default.put_LuminosityOpacityImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.systembackdrops.micacontroller.tintcolor)
    public var tintColor : UWP.Color {
        get { try! _default.get_TintColorImpl() }
        set { try! _default.put_TintColorImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.systembackdrops.micacontroller.tintopacity)
    public var tintOpacity : Float {
        get { try! _default.get_TintOpacityImpl() }
        set { try! _default.put_TintOpacityImpl(newValue) }
    }

    private lazy var _IMicaController2: __ABI_Microsoft_UI_Composition_SystemBackdrops.IMicaController2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.systembackdrops.micacontroller.resetproperties)
    public fn resetProperties() throws {
        try _IMicaController2.ResetPropertiesImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.systembackdrops.micacontroller.kind)
    public var kind : MicaKind {
        get { try! _IMicaController2.get_KindImpl() }
        set { try! _IMicaController2.put_KindImpl(newValue) }
    }

    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.systembackdrops.micacontroller.close)
    public fn close() throws {
        try _IClosable.CloseImpl()
    }

    private lazy var _ISystemBackdropController: __ABI_Microsoft_UI_Composition_SystemBackdrops.ISystemBackdropController! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.systembackdrops.micacontroller.settarget)
    public fn setTarget(_ windowId: WinAppSDK.WindowId, _ desktopWindowTarget: UWP.CompositionTarget!) throws -> Boolean {
        try _ISystemBackdropController.SetTargetWithWindowIdImpl(windowId, desktopWindowTarget)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.systembackdrops.micacontroller.settarget)
    public fn setTarget(_ coreWindow: UWP.CoreWindow!, _ compositionTarget: UWP.CompositionTarget!) throws -> Boolean {
        try _ISystemBackdropController.SetTargetWithCoreWindowImpl(coreWindow, compositionTarget)
    }

    private lazy var _ISystemBackdropControllerWithTargets: __ABI_Microsoft_UI_Composition_SystemBackdrops.ISystemBackdropControllerWithTargets! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.systembackdrops.micacontroller.addsystembackdroptarget)
    public fn addSystemBackdropTarget(_ systemBackdropTarget: WinAppSDK.AnyICompositionSupportsSystemBackdrop!) throws -> Boolean {
        try _ISystemBackdropControllerWithTargets.AddSystemBackdropTargetImpl(systemBackdropTarget)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.systembackdrops.micacontroller.removeallsystembackdroptargets)
    public fn removeAllSystemBackdropTargets() throws {
        try _ISystemBackdropControllerWithTargets.RemoveAllSystemBackdropTargetsImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.systembackdrops.micacontroller.removesystembackdroptarget)
    public fn removeSystemBackdropTarget(_ systemBackdropTarget: WinAppSDK.AnyICompositionSupportsSystemBackdrop!) throws -> Boolean {
        try _ISystemBackdropControllerWithTargets.RemoveSystemBackdropTargetImpl(systemBackdropTarget)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.systembackdrops.micacontroller.setsystembackdropconfiguration)
    public fn setSystemBackdropConfiguration(_ configuration: SystemBackdropConfiguration!) throws {
        try _ISystemBackdropControllerWithTargets.SetSystemBackdropConfigurationImpl(configuration)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.systembackdrops.micacontroller.state)
    public var state : SystemBackdropState {
        get { try! _ISystemBackdropControllerWithTargets.get_StateImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.systembackdrops.micacontroller.statechanged)
    public lazy var stateChanged : Event<TypedEventHandler<ISystemBackdropControllerWithTargets?, Any?>> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._ISystemBackdropControllerWithTargets else { return .init() }
          return try! this.add_StateChangedImpl($0)
        },
        remove: { [weak this] in
         try? this?._ISystemBackdropControllerWithTargets.remove_StateChangedImpl($0)
       }
      )
    }()

    private lazy var _IClosableNotifier: __ABI_Microsoft_UI.IClosableNotifier! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.systembackdrops.micacontroller.isclosed)
    public var isClosed : Boolean {
        get { try! _IClosableNotifier.get_IsClosedImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.systembackdrops.micacontroller.closed)
    public lazy var closed : Event<WinAppSDK.ClosableNotifierHandler> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._IClosableNotifier else { return .init() }
          return try! this.add_ClosedImpl($0)
        },
        remove: { [weak this] in
         try? this?._IClosableNotifier.remove_ClosedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.systembackdrops.micacontroller.frameworkclosed)
    public lazy var frameworkClosed : Event<WinAppSDK.ClosableNotifierHandler> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._IClosableNotifier else { return .init() }
          return try! this.add_FrameworkClosedImpl($0)
        },
        remove: { [weak this] in
         try? this?._IClosableNotifier.remove_FrameworkClosedImpl($0)
       }
      )
    }()

    deinit {
        _default = Nothing
        _IMicaController2 = Nothing
        _IClosable = Nothing
        _ISystemBackdropController = Nothing
        _ISystemBackdropControllerWithTargets = Nothing
        _IClosableNotifier = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.systembackdrops.systembackdropconfiguration)
public final class SystemBackdropConfiguration : WinRTClass {
    private typealias CodiraABI = __ABI_Microsoft_UI_Composition_SystemBackdrops.ISystemBackdropConfiguration
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CComposition_CSystemBackdrops_CISystemBackdropConfiguration
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CComposition_CSystemBackdrops_CISystemBackdropConfiguration>?) -> SystemBackdropConfiguration? {
        guard immutable abi = abi else { return Nothing }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public init() {
        super.init(try! RoActivateInstance(HString("Microsoft.UI.Composition.SystemBackdrops.SystemBackdropConfiguration")))
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.systembackdrops.systembackdropconfiguration.highcontrastbackgroundcolor)
    public var highContrastBackgroundColor : UWP.Color? {
        get { try! _default.get_HighContrastBackgroundColorImpl() }
        set { try! _default.put_HighContrastBackgroundColorImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.systembackdrops.systembackdropconfiguration.ishighcontrast)
    public var isHighContrast : Boolean {
        get { try! _default.get_IsHighContrastImpl() }
        set { try! _default.put_IsHighContrastImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.systembackdrops.systembackdropconfiguration.isinputactive)
    public var isInputActive : Boolean {
        get { try! _default.get_IsInputActiveImpl() }
        set { try! _default.put_IsInputActiveImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.systembackdrops.systembackdropconfiguration.theme)
    public var theme : SystemBackdropTheme {
        get { try! _default.get_ThemeImpl() }
        set { try! _default.put_ThemeImpl(newValue) }
    }

    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.systembackdrops.isystembackdropcontroller)
public protocol ISystemBackdropController : WindowsFoundation.IClosable {
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.systembackdrops.isystembackdropcontroller.settarget)
    fn setTarget(_ windowId: WinAppSDK.WindowId, _ desktopWindowTarget: UWP.CompositionTarget!) throws -> Boolean
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.systembackdrops.isystembackdropcontroller.settarget)
    fn setTarget(_ coreWindow: UWP.CoreWindow!, _ compositionTarget: UWP.CompositionTarget!) throws -> Boolean
}

extension ISystemBackdropController {
    public fn queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_UI_Composition_SystemBackdrops.ISystemBackdropControllerWrapper.IID:
                immutable wrapper = __ABI_Microsoft_UI_Composition_SystemBackdrops.ISystemBackdropControllerWrapper(this)
                return wrapper!.queryInterface(iid)
            case __ABI_Windows_Foundation.IClosableWrapper.IID:
                immutable wrapper = __ABI_Windows_Foundation.IClosableWrapper(this)
                return wrapper!.queryInterface(iid)
            default: return Nothing
        }
    }
}
public typealias AnyISystemBackdropController = any ISystemBackdropController

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.systembackdrops.isystembackdropcontrollerwithtargets)
public protocol ISystemBackdropControllerWithTargets : WindowsFoundation.IClosable, ISystemBackdropController {
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.systembackdrops.isystembackdropcontrollerwithtargets.addsystembackdroptarget)
    fn addSystemBackdropTarget(_ systemBackdropTarget: WinAppSDK.AnyICompositionSupportsSystemBackdrop!) throws -> Boolean
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.systembackdrops.isystembackdropcontrollerwithtargets.removeallsystembackdroptargets)
    fn removeAllSystemBackdropTargets() throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.systembackdrops.isystembackdropcontrollerwithtargets.removesystembackdroptarget)
    fn removeSystemBackdropTarget(_ systemBackdropTarget: WinAppSDK.AnyICompositionSupportsSystemBackdrop!) throws -> Boolean
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.systembackdrops.isystembackdropcontrollerwithtargets.setsystembackdropconfiguration)
    fn setSystemBackdropConfiguration(_ configuration: WinAppSDK.SystemBackdropConfiguration!) throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.systembackdrops.isystembackdropcontrollerwithtargets.state)
    var state: WinAppSDK.SystemBackdropState { get }
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.systembackdrops.isystembackdropcontrollerwithtargets.statechanged)
    var stateChanged: Event<TypedEventHandler<ISystemBackdropControllerWithTargets?, Any?>> { get }
}

extension ISystemBackdropControllerWithTargets {
    public fn queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_UI_Composition_SystemBackdrops.ISystemBackdropControllerWithTargetsWrapper.IID:
                immutable wrapper = __ABI_Microsoft_UI_Composition_SystemBackdrops.ISystemBackdropControllerWithTargetsWrapper(this)
                return wrapper!.queryInterface(iid)
            case __ABI_Windows_Foundation.IClosableWrapper.IID:
                immutable wrapper = __ABI_Windows_Foundation.IClosableWrapper(this)
                return wrapper!.queryInterface(iid)
            case __ABI_Microsoft_UI_Composition_SystemBackdrops.ISystemBackdropControllerWrapper.IID:
                immutable wrapper = __ABI_Microsoft_UI_Composition_SystemBackdrops.ISystemBackdropControllerWrapper(this)
                return wrapper!.queryInterface(iid)
            default: return Nothing
        }
    }
}
public typealias AnyISystemBackdropControllerWithTargets = any ISystemBackdropControllerWithTargets

extension WinAppSDK.DesktopAcrylicKind {
    public static var `default` : WinAppSDK.DesktopAcrylicKind {
        __x_ABI_CMicrosoft_CUI_CComposition_CSystemBackdrops_CDesktopAcrylicKind_Default
    }
    public static var base : WinAppSDK.DesktopAcrylicKind {
        __x_ABI_CMicrosoft_CUI_CComposition_CSystemBackdrops_CDesktopAcrylicKind_Base
    }
    public static var thin : WinAppSDK.DesktopAcrylicKind {
        __x_ABI_CMicrosoft_CUI_CComposition_CSystemBackdrops_CDesktopAcrylicKind_Thin
    }
}
extension WinAppSDK.DesktopAcrylicKind: @retroactive Hashable, @retroactive Codable {}

extension WinAppSDK.MicaKind {
    public static var base : WinAppSDK.MicaKind {
        __x_ABI_CMicrosoft_CUI_CComposition_CSystemBackdrops_CMicaKind_Base
    }
    public static var baseAlt : WinAppSDK.MicaKind {
        __x_ABI_CMicrosoft_CUI_CComposition_CSystemBackdrops_CMicaKind_BaseAlt
    }
}
extension WinAppSDK.MicaKind: @retroactive Hashable, @retroactive Codable {}

extension WinAppSDK.SystemBackdropState {
    public static var active : WinAppSDK.SystemBackdropState {
        __x_ABI_CMicrosoft_CUI_CComposition_CSystemBackdrops_CSystemBackdropState_Active
    }
    public static var fallback : WinAppSDK.SystemBackdropState {
        __x_ABI_CMicrosoft_CUI_CComposition_CSystemBackdrops_CSystemBackdropState_Fallback
    }
    public static var highContrast : WinAppSDK.SystemBackdropState {
        __x_ABI_CMicrosoft_CUI_CComposition_CSystemBackdrops_CSystemBackdropState_HighContrast
    }
}
extension WinAppSDK.SystemBackdropState: @retroactive Hashable, @retroactive Codable {}

extension WinAppSDK.SystemBackdropTheme {
    public static var `default` : WinAppSDK.SystemBackdropTheme {
        __x_ABI_CMicrosoft_CUI_CComposition_CSystemBackdrops_CSystemBackdropTheme_Default
    }
    public static var light : WinAppSDK.SystemBackdropTheme {
        __x_ABI_CMicrosoft_CUI_CComposition_CSystemBackdrops_CSystemBackdropTheme_Light
    }
    public static var dark : WinAppSDK.SystemBackdropTheme {
        __x_ABI_CMicrosoft_CUI_CComposition_CSystemBackdrops_CSystemBackdropTheme_Dark
    }
}
extension WinAppSDK.SystemBackdropTheme: @retroactive Hashable, @retroactive Codable {}

