// WARNING: Please don't edit this file. It was generated by Codira/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import UWP
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

private var IID___x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindow: WindowsFoundation.IID {
    .init(Data1: 0xCFA788B3, Data2: 0x643B, Data3: 0x5C5E, Data4: ( 0xAD,0x4E,0x32,0x1D,0x48,0xA8,0x2A,0xCD ))// CFA788B3-643B-5C5E-AD4E-321D48A82ACD
}

private var IID___x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindow2: WindowsFoundation.IID {
    .init(Data1: 0x6CD41292, Data2: 0x794C, Data3: 0x5CAC, Data4: ( 0x89,0x61,0x21,0x0D,0x01,0x2C,0x6E,0xBC ))// 6CD41292-794C-5CAC-8961-210D012C6EBC
}

private var IID___x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindow3: WindowsFoundation.IID {
    .init(Data1: 0x2F260CEA, Data2: 0x193D, Data3: 0x5DD6, Data4: ( 0xA9,0x04,0xD7,0x64,0x9A,0x60,0x8D,0x2F ))// 2F260CEA-193D-5DD6-A904-D7649A608D2F
}

private var IID___x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowChangedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x2182BC5D, Data2: 0xFDAC, Data3: 0x5C3E, Data4: ( 0xBF,0x37,0x7D,0x8D,0x68,0x4E,0x9D,0x1D ))// 2182BC5D-FDAC-5C3E-BF37-7D8D684E9D1D
}

private var IID___x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowChangedEventArgs2: WindowsFoundation.IID {
    .init(Data1: 0xA773AB4C, Data2: 0xA5EC, Data3: 0x50E8, Data4: ( 0x98,0xAC,0x24,0x7F,0xE6,0xCD,0x42,0x27 ))// A773AB4C-A5EC-50E8-98AC-247FE6CD4227
}

private var IID___x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowClosingEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x0E09D90B, Data2: 0x2261, Data3: 0x590B, Data4: ( 0x9A,0xD1,0x85,0x04,0x99,0x1D,0x87,0x54 ))// 0E09D90B-2261-590B-9AD1-8504991D8754
}

private var IID___x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowPresenter: WindowsFoundation.IID {
    .init(Data1: 0xBC3042C2, Data2: 0xC6C6, Data3: 0x5632, Data4: ( 0x89,0x89,0xFF,0x0E,0xC6,0xD3,0xB4,0x0D ))// BC3042C2-C6C6-5632-8989-FF0EC6D3B40D
}

private var IID___x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowPresenterFactory: WindowsFoundation.IID {
    .init(Data1: 0x62082E3C, Data2: 0x1368, Data3: 0x5238, Data4: ( 0x90,0xD1,0xE9,0x32,0xDC,0x71,0x8A,0x82 ))// 62082E3C-1368-5238-90D1-E932DC718A82
}

private var IID___x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowStatics: WindowsFoundation.IID {
    .init(Data1: 0x3C315C24, Data2: 0xD540, Data3: 0x5D72, Data4: ( 0xB5,0x18,0xB2,0x26,0xB8,0x36,0x27,0xCB ))// 3C315C24-D540-5D72-B518-B226B83627CB
}

private var IID___x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowStatics2: WindowsFoundation.IID {
    .init(Data1: 0xCABC23DB, Data2: 0x4606, Data3: 0x5D6E, Data4: ( 0x89,0xA5,0x06,0xDE,0x1D,0x8B,0xD3,0xE2 ))// CABC23DB-4606-5D6E-89A5-06DE1D8BD3E2
}

private var IID___x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowTitleBar: WindowsFoundation.IID {
    .init(Data1: 0x5574EFA2, Data2: 0xC91C, Data3: 0x5700, Data4: ( 0xA3,0x63,0x53,0x9C,0x71,0xA7,0xAA,0xF4 ))// 5574EFA2-C91C-5700-A363-539C71A7AAF4
}

private var IID___x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowTitleBar2: WindowsFoundation.IID {
    .init(Data1: 0x86FAED38, Data2: 0x748A, Data3: 0x5B4B, Data4: ( 0x9C,0xCF,0x3B,0xA0,0x49,0x6C,0x90,0x41 ))// 86FAED38-748A-5B4B-9CCF-3BA0496C9041
}

private var IID___x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowTitleBarStatics: WindowsFoundation.IID {
    .init(Data1: 0x9E1DA52E, Data2: 0x8B15, Data3: 0x54D6, Data4: ( 0xA8,0x86,0xF7,0xB9,0xF9,0xD9,0x30,0xB2 ))// 9E1DA52E-8B15-54D6-A886-F7B9F9D930B2
}

private var IID___x_ABI_CMicrosoft_CUI_CWindowing_CIDisplayArea: WindowsFoundation.IID {
    .init(Data1: 0x5C7E0537, Data2: 0xB621, Data3: 0x5579, Data4: ( 0xBC,0xAE,0xA8,0x4A,0xA8,0x74,0x61,0x67 ))// 5C7E0537-B621-5579-BCAE-A84AA8746167
}

private var IID___x_ABI_CMicrosoft_CUI_CWindowing_CIDisplayAreaStatics: WindowsFoundation.IID {
    .init(Data1: 0x02AB4926, Data2: 0x211E, Data3: 0x5D49, Data4: ( 0x8E,0x4B,0x2A,0xF1,0x93,0xDA,0xED,0x09 ))// 02AB4926-211E-5D49-8E4B-2AF193DAED09
}

private var IID___x_ABI_CMicrosoft_CUI_CWindowing_CIDisplayAreaStatics2: WindowsFoundation.IID {
    .init(Data1: 0x7207AD4B, Data2: 0x890D, Data3: 0x5DD7, Data4: ( 0xBC,0x18,0x78,0xFF,0xD9,0x54,0x4D,0x8F ))// 7207AD4B-890D-5DD7-BC18-78FFD9544D8F
}

private var IID___x_ABI_CMicrosoft_CUI_CWindowing_CIDisplayAreaWatcher: WindowsFoundation.IID {
    .init(Data1: 0x83F6562F, Data2: 0xD3A0, Data3: 0x548B, Data4: ( 0x8E,0x4F,0xA9,0x9B,0xE3,0xD9,0x5C,0x9C ))// 83F6562F-D3A0-548B-8E4F-A99BE3D95C9C
}

private var IID___x_ABI_CMicrosoft_CUI_CWindowing_CIFullScreenPresenter: WindowsFoundation.IID {
    .init(Data1: 0xFA9141FD, Data2: 0xB8DD, Data3: 0x5DA1, Data4: ( 0x8B,0x2B,0x7C,0xDA,0xDB,0x76,0xF5,0x93 ))// FA9141FD-B8DD-5DA1-8B2B-7CDADB76F593
}

private var IID___x_ABI_CMicrosoft_CUI_CWindowing_CIFullScreenPresenterStatics: WindowsFoundation.IID {
    .init(Data1: 0x2EC0D2C1, Data2: 0xE086, Data3: 0x55BB, Data4: ( 0xA3,0xB2,0x44,0x94,0x2E,0x23,0x1C,0x67 ))// 2EC0D2C1-E086-55BB-A3B2-44942E231C67
}

private var IID___x_ABI_CMicrosoft_CUI_CWindowing_CIOverlappedPresenter: WindowsFoundation.IID {
    .init(Data1: 0x21693970, Data2: 0x4F4C, Data3: 0x5172, Data4: ( 0x9E,0x9D,0x68,0x2A,0x2D,0x17,0x48,0x84 ))// 21693970-4F4C-5172-9E9D-682A2D174884
}

private var IID___x_ABI_CMicrosoft_CUI_CWindowing_CIOverlappedPresenter2: WindowsFoundation.IID {
    .init(Data1: 0x5C6CCD93, Data2: 0x4244, Data3: 0x5CD2, Data4: ( 0xB3,0x55,0xED,0x5E,0xA3,0x4D,0xF7,0x30 ))// 5C6CCD93-4244-5CD2-B355-ED5EA34DF730
}

private var IID___x_ABI_CMicrosoft_CUI_CWindowing_CIOverlappedPresenterStatics: WindowsFoundation.IID {
    .init(Data1: 0x997225E4, Data2: 0x7B00, Data3: 0x5AEE, Data4: ( 0xA4,0xBE,0xD4,0x06,0x8D,0x19,0x99,0xE2 ))// 997225E4-7B00-5AEE-A4BE-D4068D1999E2
}

private var IID___x_ABI_CMicrosoft_CUI_CWindowing_CIOverlappedPresenterStatics2: WindowsFoundation.IID {
    .init(Data1: 0xED5C4F92, Data2: 0x32F4, Data3: 0x5D15, Data4: ( 0x80,0xD0,0xB2,0xA5,0xEF,0xA0,0x4D,0x39 ))// ED5C4F92-32F4-5D15-80D0-B2A5EFA04D39
}

public enum __ABI_Microsoft_UI_Windowing {
    public class IAppWindow: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindow }

        internal fn get_IdImpl() throws -> WinAppSDK.WindowId {
            var value: __x_ABI_CMicrosoft_CUI_CWindowId = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindow.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Id(pThis, &value))
            }
            return .from(abi: value)
        }

        internal fn get_IsShownInSwitchersImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindow.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsShownInSwitchers(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_IsShownInSwitchersImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindow.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsShownInSwitchers(pThis, .init(from: value)))
            }
        }

        internal fn get_IsVisibleImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindow.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsVisible(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn get_OwnerWindowIdImpl() throws -> WinAppSDK.WindowId {
            var value: __x_ABI_CMicrosoft_CUI_CWindowId = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindow.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_OwnerWindowId(pThis, &value))
            }
            return .from(abi: value)
        }

        internal fn get_PositionImpl() throws -> UWP.PointInt32 {
            var value: __x_ABI_CWindows_CGraphics_CPointInt32 = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindow.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Position(pThis, &value))
            }
            return .from(abi: value)
        }

        internal fn get_PresenterImpl() throws -> WinAppSDK.AppWindowPresenter? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindow.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Presenter(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_SizeImpl() throws -> UWP.SizeInt32 {
            var value: __x_ABI_CWindows_CGraphics_CSizeInt32 = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindow.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, &value))
            }
            return .from(abi: value)
        }

        internal fn get_TitleImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindow.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Title(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_TitleImpl(_ value: String) throws {
            immutable _value = try! HString(value)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindow.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Title(pThis, _value.get()))
            }
        }

        internal fn get_TitleBarImpl() throws -> WinAppSDK.AppWindowTitleBar? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindow.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_TitleBar(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn DestroyImpl() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindow.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Destroy(pThis))
            }
        }

        internal fn HideImpl() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindow.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Hide(pThis))
            }
        }

        internal fn MoveImpl(_ position: UWP.PointInt32) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindow.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Move(pThis, .from(swift: position)))
            }
        }

        internal fn MoveAndResizeImpl(_ rect: UWP.RectInt32) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindow.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.MoveAndResize(pThis, .from(swift: rect)))
            }
        }

        internal fn MoveAndResizeRelativeToDisplayAreaImpl(_ rect: UWP.RectInt32, _ displayarea: WinAppSDK.DisplayArea?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindow.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.MoveAndResizeRelativeToDisplayArea(pThis, .from(swift: rect), RawPointer(displayarea)))
            }
        }

        internal fn ResizeImpl(_ size: UWP.SizeInt32) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindow.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Resize(pThis, .from(swift: size)))
            }
        }

        internal fn SetIconImpl(_ iconPath: String) throws {
            immutable _iconPath = try! HString(iconPath)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindow.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetIcon(pThis, _iconPath.get()))
            }
        }

        internal fn SetIconWithIconIdImpl(_ iconId: WinAppSDK.IconId) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindow.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetIconWithIconId(pThis, .from(swift: iconId)))
            }
        }

        internal fn SetPresenterImpl(_ appWindowPresenter: WinAppSDK.AppWindowPresenter?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindow.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetPresenter(pThis, RawPointer(appWindowPresenter)))
            }
        }

        internal fn SetPresenterByKindImpl(_ appWindowPresenterKind: WinAppSDK.AppWindowPresenterKind) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindow.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetPresenterByKind(pThis, appWindowPresenterKind))
            }
        }

        internal fn ShowImpl() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindow.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Show(pThis))
            }
        }

        internal fn ShowWithActivationImpl(_ activateWindow: Boolean) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindow.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ShowWithActivation(pThis, .init(from: activateWindow)))
            }
        }

        internal fn add_ChangedImpl(_ handler: TypedEventHandler<WinAppSDK.AppWindow?, WinAppSDK.AppWindowChangedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = WinAppSDK.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CWindowing__CAppWindow___x_ABI_CMicrosoft__CUI__CWindowing__CAppWindowChangedEventArgsWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindow.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_Changed(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_ChangedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindow.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Changed(pThis, token))
            }
        }

        internal fn add_ClosingImpl(_ handler: TypedEventHandler<WinAppSDK.AppWindow?, WinAppSDK.AppWindowClosingEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = WinAppSDK.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CWindowing__CAppWindow___x_ABI_CMicrosoft__CUI__CWindowing__CAppWindowClosingEventArgsWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindow.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_Closing(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_ClosingImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindow.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Closing(pThis, token))
            }
        }

        internal fn add_DestroyingImpl(_ handler: TypedEventHandler<WinAppSDK.AppWindow?, Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = WinAppSDK.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CWindowing__CAppWindow_IInspectableWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindow.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_Destroying(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_DestroyingImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindow.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Destroying(pThis, token))
            }
        }

    }

    public class IAppWindow2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindow2 }

        internal fn get_ClientSizeImpl() throws -> UWP.SizeInt32 {
            var value: __x_ABI_CWindows_CGraphics_CSizeInt32 = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindow2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ClientSize(pThis, &value))
            }
            return .from(abi: value)
        }

        internal fn MoveInZOrderAtBottomImpl() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindow2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.MoveInZOrderAtBottom(pThis))
            }
        }

        internal fn MoveInZOrderAtTopImpl() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindow2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.MoveInZOrderAtTop(pThis))
            }
        }

        internal fn MoveInZOrderBelowImpl(_ windowId: WinAppSDK.WindowId) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindow2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.MoveInZOrderBelow(pThis, .from(swift: windowId)))
            }
        }

        internal fn ResizeClientImpl(_ size: UWP.SizeInt32) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindow2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ResizeClient(pThis, .from(swift: size)))
            }
        }

        internal fn ShowOnceWithRequestedStartupStateImpl() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindow2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ShowOnceWithRequestedStartupState(pThis))
            }
        }

    }

    public class IAppWindow3: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindow3 }

        internal fn AssociateWithDispatcherQueueImpl(_ dispatcherQueue: WinAppSDK.DispatcherQueue?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindow3.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.AssociateWithDispatcherQueue(pThis, RawPointer(dispatcherQueue)))
            }
        }

        internal fn get_DispatcherQueueImpl() throws -> WinAppSDK.DispatcherQueue? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindow3.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_DispatcherQueue(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IAppWindowChangedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowChangedEventArgs }

        internal fn get_DidPositionChangeImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowChangedEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DidPositionChange(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn get_DidPresenterChangeImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowChangedEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DidPresenterChange(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn get_DidSizeChangeImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowChangedEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DidSizeChange(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn get_DidVisibilityChangeImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowChangedEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DidVisibilityChange(pThis, &value))
            }
            return .init(from: value)
        }

    }

    public class IAppWindowChangedEventArgs2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowChangedEventArgs2 }

        internal fn get_DidZOrderChangeImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowChangedEventArgs2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DidZOrderChange(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn get_IsZOrderAtBottomImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowChangedEventArgs2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsZOrderAtBottom(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn get_IsZOrderAtTopImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowChangedEventArgs2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsZOrderAtTop(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn get_ZOrderBelowWindowIdImpl() throws -> WinAppSDK.WindowId {
            var value: __x_ABI_CMicrosoft_CUI_CWindowId = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowChangedEventArgs2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ZOrderBelowWindowId(pThis, &value))
            }
            return .from(abi: value)
        }

    }

    public class IAppWindowClosingEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowClosingEventArgs }

        internal fn get_CancelImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowClosingEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Cancel(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_CancelImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowClosingEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Cancel(pThis, .init(from: value)))
            }
        }

    }

    public class IAppWindowPresenter: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowPresenter }

        internal fn get_KindImpl() throws -> WinAppSDK.AppWindowPresenterKind {
            var value: __x_ABI_CMicrosoft_CUI_CWindowing_CAppWindowPresenterKind = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowPresenter.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Kind(pThis, &value))
            }
            return value
        }

    }

    public class IAppWindowPresenterFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowPresenterFactory }

    }

    public class IAppWindowStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowStatics }

        internal fn CreateImpl() throws -> WinAppSDK.AppWindow? {
            immutable (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.Create(pThis, &resultAbi))
                }
            }
            return .from(abi: result)
        }

        internal fn CreateWithPresenterImpl(_ appWindowPresenter: WinAppSDK.AppWindowPresenter?) throws -> WinAppSDK.AppWindow? {
            immutable (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateWithPresenter(pThis, RawPointer(appWindowPresenter), &resultAbi))
                }
            }
            return .from(abi: result)
        }

        internal fn CreateWithPresenterAndOwnerImpl(_ appWindowPresenter: WinAppSDK.AppWindowPresenter?, _ ownerWindowId: WinAppSDK.WindowId) throws -> WinAppSDK.AppWindow? {
            immutable (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateWithPresenterAndOwner(pThis, RawPointer(appWindowPresenter), .from(swift: ownerWindowId), &resultAbi))
                }
            }
            return .from(abi: result)
        }

        internal fn GetFromWindowIdImpl(_ windowId: WinAppSDK.WindowId) throws -> WinAppSDK.AppWindow? {
            immutable (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetFromWindowId(pThis, .from(swift: windowId), &resultAbi))
                }
            }
            return .from(abi: result)
        }

    }

    public class IAppWindowStatics2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowStatics2 }

        internal fn CreateWithDispatcherQueueImpl(_ appWindowPresenter: WinAppSDK.AppWindowPresenter?, _ ownerWindowId: WinAppSDK.WindowId, _ DispatcherQueue: WinAppSDK.DispatcherQueue?) throws -> WinAppSDK.AppWindow? {
            immutable (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowStatics2.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateWithDispatcherQueue(pThis, RawPointer(appWindowPresenter), .from(swift: ownerWindowId), RawPointer(DispatcherQueue), &resultAbi))
                }
            }
            return .from(abi: result)
        }

    }

    public class IAppWindowTitleBar: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowTitleBar }

        internal fn get_BackgroundColorImpl() throws -> UWP.Color? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowTitleBar.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_BackgroundColor(pThis, &valueAbi))
                }
            }
            return WinAppSDK.__x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColorWrapper.unwrapFrom(abi: value)
        }

        internal fn put_BackgroundColorImpl(_ value: UWP.Color?) throws {
            immutable valueWrapper = WinAppSDK.__x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColorWrapper(value)
            immutable _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowTitleBar.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_BackgroundColor(pThis, _value))
            }
        }

        internal fn get_ButtonBackgroundColorImpl() throws -> UWP.Color? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowTitleBar.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ButtonBackgroundColor(pThis, &valueAbi))
                }
            }
            return WinAppSDK.__x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColorWrapper.unwrapFrom(abi: value)
        }

        internal fn put_ButtonBackgroundColorImpl(_ value: UWP.Color?) throws {
            immutable valueWrapper = WinAppSDK.__x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColorWrapper(value)
            immutable _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowTitleBar.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ButtonBackgroundColor(pThis, _value))
            }
        }

        internal fn get_ButtonForegroundColorImpl() throws -> UWP.Color? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowTitleBar.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ButtonForegroundColor(pThis, &valueAbi))
                }
            }
            return WinAppSDK.__x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColorWrapper.unwrapFrom(abi: value)
        }

        internal fn put_ButtonForegroundColorImpl(_ value: UWP.Color?) throws {
            immutable valueWrapper = WinAppSDK.__x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColorWrapper(value)
            immutable _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowTitleBar.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ButtonForegroundColor(pThis, _value))
            }
        }

        internal fn get_ButtonHoverBackgroundColorImpl() throws -> UWP.Color? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowTitleBar.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ButtonHoverBackgroundColor(pThis, &valueAbi))
                }
            }
            return WinAppSDK.__x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColorWrapper.unwrapFrom(abi: value)
        }

        internal fn put_ButtonHoverBackgroundColorImpl(_ value: UWP.Color?) throws {
            immutable valueWrapper = WinAppSDK.__x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColorWrapper(value)
            immutable _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowTitleBar.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ButtonHoverBackgroundColor(pThis, _value))
            }
        }

        internal fn get_ButtonHoverForegroundColorImpl() throws -> UWP.Color? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowTitleBar.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ButtonHoverForegroundColor(pThis, &valueAbi))
                }
            }
            return WinAppSDK.__x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColorWrapper.unwrapFrom(abi: value)
        }

        internal fn put_ButtonHoverForegroundColorImpl(_ value: UWP.Color?) throws {
            immutable valueWrapper = WinAppSDK.__x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColorWrapper(value)
            immutable _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowTitleBar.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ButtonHoverForegroundColor(pThis, _value))
            }
        }

        internal fn get_ButtonInactiveBackgroundColorImpl() throws -> UWP.Color? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowTitleBar.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ButtonInactiveBackgroundColor(pThis, &valueAbi))
                }
            }
            return WinAppSDK.__x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColorWrapper.unwrapFrom(abi: value)
        }

        internal fn put_ButtonInactiveBackgroundColorImpl(_ value: UWP.Color?) throws {
            immutable valueWrapper = WinAppSDK.__x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColorWrapper(value)
            immutable _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowTitleBar.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ButtonInactiveBackgroundColor(pThis, _value))
            }
        }

        internal fn get_ButtonInactiveForegroundColorImpl() throws -> UWP.Color? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowTitleBar.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ButtonInactiveForegroundColor(pThis, &valueAbi))
                }
            }
            return WinAppSDK.__x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColorWrapper.unwrapFrom(abi: value)
        }

        internal fn put_ButtonInactiveForegroundColorImpl(_ value: UWP.Color?) throws {
            immutable valueWrapper = WinAppSDK.__x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColorWrapper(value)
            immutable _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowTitleBar.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ButtonInactiveForegroundColor(pThis, _value))
            }
        }

        internal fn get_ButtonPressedBackgroundColorImpl() throws -> UWP.Color? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowTitleBar.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ButtonPressedBackgroundColor(pThis, &valueAbi))
                }
            }
            return WinAppSDK.__x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColorWrapper.unwrapFrom(abi: value)
        }

        internal fn put_ButtonPressedBackgroundColorImpl(_ value: UWP.Color?) throws {
            immutable valueWrapper = WinAppSDK.__x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColorWrapper(value)
            immutable _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowTitleBar.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ButtonPressedBackgroundColor(pThis, _value))
            }
        }

        internal fn get_ButtonPressedForegroundColorImpl() throws -> UWP.Color? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowTitleBar.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ButtonPressedForegroundColor(pThis, &valueAbi))
                }
            }
            return WinAppSDK.__x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColorWrapper.unwrapFrom(abi: value)
        }

        internal fn put_ButtonPressedForegroundColorImpl(_ value: UWP.Color?) throws {
            immutable valueWrapper = WinAppSDK.__x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColorWrapper(value)
            immutable _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowTitleBar.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ButtonPressedForegroundColor(pThis, _value))
            }
        }

        internal fn get_ExtendsContentIntoTitleBarImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowTitleBar.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ExtendsContentIntoTitleBar(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_ExtendsContentIntoTitleBarImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowTitleBar.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ExtendsContentIntoTitleBar(pThis, .init(from: value)))
            }
        }

        internal fn get_ForegroundColorImpl() throws -> UWP.Color? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowTitleBar.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ForegroundColor(pThis, &valueAbi))
                }
            }
            return WinAppSDK.__x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColorWrapper.unwrapFrom(abi: value)
        }

        internal fn put_ForegroundColorImpl(_ value: UWP.Color?) throws {
            immutable valueWrapper = WinAppSDK.__x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColorWrapper(value)
            immutable _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowTitleBar.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ForegroundColor(pThis, _value))
            }
        }

        internal fn get_HeightImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowTitleBar.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Height(pThis, &value))
            }
            return value
        }

        internal fn get_IconShowOptionsImpl() throws -> WinAppSDK.IconShowOptions {
            var value: __x_ABI_CMicrosoft_CUI_CWindowing_CIconShowOptions = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowTitleBar.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IconShowOptions(pThis, &value))
            }
            return value
        }

        internal fn put_IconShowOptionsImpl(_ value: WinAppSDK.IconShowOptions) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowTitleBar.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IconShowOptions(pThis, value))
            }
        }

        internal fn get_InactiveBackgroundColorImpl() throws -> UWP.Color? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowTitleBar.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_InactiveBackgroundColor(pThis, &valueAbi))
                }
            }
            return WinAppSDK.__x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColorWrapper.unwrapFrom(abi: value)
        }

        internal fn put_InactiveBackgroundColorImpl(_ value: UWP.Color?) throws {
            immutable valueWrapper = WinAppSDK.__x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColorWrapper(value)
            immutable _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowTitleBar.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_InactiveBackgroundColor(pThis, _value))
            }
        }

        internal fn get_InactiveForegroundColorImpl() throws -> UWP.Color? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowTitleBar.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_InactiveForegroundColor(pThis, &valueAbi))
                }
            }
            return WinAppSDK.__x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColorWrapper.unwrapFrom(abi: value)
        }

        internal fn put_InactiveForegroundColorImpl(_ value: UWP.Color?) throws {
            immutable valueWrapper = WinAppSDK.__x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CColorWrapper(value)
            immutable _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowTitleBar.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_InactiveForegroundColor(pThis, _value))
            }
        }

        internal fn get_LeftInsetImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowTitleBar.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_LeftInset(pThis, &value))
            }
            return value
        }

        internal fn get_RightInsetImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowTitleBar.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_RightInset(pThis, &value))
            }
            return value
        }

        internal fn ResetToDefaultImpl() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowTitleBar.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ResetToDefault(pThis))
            }
        }

    }

    public class IAppWindowTitleBar2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowTitleBar2 }

        internal fn get_PreferredHeightOptionImpl() throws -> WinAppSDK.TitleBarHeightOption {
            var value: __x_ABI_CMicrosoft_CUI_CWindowing_CTitleBarHeightOption = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowTitleBar2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PreferredHeightOption(pThis, &value))
            }
            return value
        }

        internal fn put_PreferredHeightOptionImpl(_ value: WinAppSDK.TitleBarHeightOption) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowTitleBar2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_PreferredHeightOption(pThis, value))
            }
        }

    }

    public class IAppWindowTitleBarStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowTitleBarStatics }

        internal fn IsCustomizationSupportedImpl() throws -> Boolean {
            var result: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIAppWindowTitleBarStatics.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.IsCustomizationSupported(pThis, &result))
            }
            return .init(from: result)
        }

    }

    public class IDisplayArea: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CWindowing_CIDisplayArea }

        internal fn get_DisplayIdImpl() throws -> WinAppSDK.DisplayId {
            var value: __x_ABI_CMicrosoft_CUI_CDisplayId = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIDisplayArea.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DisplayId(pThis, &value))
            }
            return .from(abi: value)
        }

        internal fn get_IsPrimaryImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIDisplayArea.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsPrimary(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn get_OuterBoundsImpl() throws -> UWP.RectInt32 {
            var value: __x_ABI_CWindows_CGraphics_CRectInt32 = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIDisplayArea.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_OuterBounds(pThis, &value))
            }
            return .from(abi: value)
        }

        internal fn get_WorkAreaImpl() throws -> UWP.RectInt32 {
            var value: __x_ABI_CWindows_CGraphics_CRectInt32 = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIDisplayArea.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_WorkArea(pThis, &value))
            }
            return .from(abi: value)
        }

    }

    public class IDisplayAreaStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CWindowing_CIDisplayAreaStatics }

        internal fn get_PrimaryImpl() throws -> WinAppSDK.DisplayArea? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIDisplayAreaStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Primary(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn CreateWatcherImpl() throws -> WinAppSDK.DisplayAreaWatcher? {
            immutable (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIDisplayAreaStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateWatcher(pThis, &resultAbi))
                }
            }
            return .from(abi: result)
        }

        internal fn FindAllImpl() throws -> WindowsFoundation.AnyIVectorView<WinAppSDK.DisplayArea?>? {
            immutable (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIDisplayAreaStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.FindAll(pThis, &resultAbi))
                }
            }
            return WinAppSDK.__x_ABI_C__FIVectorView_1___x_ABI_CMicrosoft__CUI__CWindowing__CDisplayAreaWrapper.unwrapFrom(abi: result)
        }

        internal fn GetFromWindowIdImpl(_ windowId: WinAppSDK.WindowId, _ displayAreaFallback: WinAppSDK.DisplayAreaFallback) throws -> WinAppSDK.DisplayArea? {
            immutable (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIDisplayAreaStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetFromWindowId(pThis, .from(swift: windowId), displayAreaFallback, &resultAbi))
                }
            }
            return .from(abi: result)
        }

        internal fn GetFromPointImpl(_ point: UWP.PointInt32, _ displayAreaFallback: WinAppSDK.DisplayAreaFallback) throws -> WinAppSDK.DisplayArea? {
            immutable (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIDisplayAreaStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetFromPoint(pThis, .from(swift: point), displayAreaFallback, &resultAbi))
                }
            }
            return .from(abi: result)
        }

        internal fn GetFromRectImpl(_ rect: UWP.RectInt32, _ displayAreaFallback: WinAppSDK.DisplayAreaFallback) throws -> WinAppSDK.DisplayArea? {
            immutable (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIDisplayAreaStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetFromRect(pThis, .from(swift: rect), displayAreaFallback, &resultAbi))
                }
            }
            return .from(abi: result)
        }

    }

    public class IDisplayAreaStatics2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CWindowing_CIDisplayAreaStatics2 }

        internal fn GetFromDisplayIdImpl(_ displayId: WinAppSDK.DisplayId) throws -> WinAppSDK.DisplayArea? {
            immutable (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIDisplayAreaStatics2.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetFromDisplayId(pThis, .from(swift: displayId), &resultAbi))
                }
            }
            return .from(abi: result)
        }

    }

    public class IDisplayAreaWatcher: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CWindowing_CIDisplayAreaWatcher }

        internal fn get_StatusImpl() throws -> WinAppSDK.DisplayAreaWatcherStatus {
            var value: __x_ABI_CMicrosoft_CUI_CWindowing_CDisplayAreaWatcherStatus = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIDisplayAreaWatcher.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Status(pThis, &value))
            }
            return value
        }

        internal fn StartImpl() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIDisplayAreaWatcher.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Start(pThis))
            }
        }

        internal fn StopImpl() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIDisplayAreaWatcher.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Stop(pThis))
            }
        }

        internal fn add_AddedImpl(_ handler: TypedEventHandler<WinAppSDK.DisplayAreaWatcher?, WinAppSDK.DisplayArea?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = WinAppSDK.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CWindowing__CDisplayAreaWatcher___x_ABI_CMicrosoft__CUI__CWindowing__CDisplayAreaWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIDisplayAreaWatcher.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_Added(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_AddedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIDisplayAreaWatcher.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Added(pThis, token))
            }
        }

        internal fn add_EnumerationCompletedImpl(_ handler: TypedEventHandler<WinAppSDK.DisplayAreaWatcher?, Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = WinAppSDK.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CWindowing__CDisplayAreaWatcher_IInspectableWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIDisplayAreaWatcher.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_EnumerationCompleted(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_EnumerationCompletedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIDisplayAreaWatcher.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_EnumerationCompleted(pThis, token))
            }
        }

        internal fn add_RemovedImpl(_ handler: TypedEventHandler<WinAppSDK.DisplayAreaWatcher?, WinAppSDK.DisplayArea?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = WinAppSDK.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CWindowing__CDisplayAreaWatcher___x_ABI_CMicrosoft__CUI__CWindowing__CDisplayAreaWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIDisplayAreaWatcher.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_Removed(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_RemovedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIDisplayAreaWatcher.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Removed(pThis, token))
            }
        }

        internal fn add_StoppedImpl(_ handler: TypedEventHandler<WinAppSDK.DisplayAreaWatcher?, Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = WinAppSDK.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CWindowing__CDisplayAreaWatcher_IInspectableWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIDisplayAreaWatcher.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_Stopped(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_StoppedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIDisplayAreaWatcher.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Stopped(pThis, token))
            }
        }

        internal fn add_UpdatedImpl(_ handler: TypedEventHandler<WinAppSDK.DisplayAreaWatcher?, WinAppSDK.DisplayArea?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = WinAppSDK.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CWindowing__CDisplayAreaWatcher___x_ABI_CMicrosoft__CUI__CWindowing__CDisplayAreaWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIDisplayAreaWatcher.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_Updated(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_UpdatedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIDisplayAreaWatcher.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Updated(pThis, token))
            }
        }

    }

    public class IFullScreenPresenter: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CWindowing_CIFullScreenPresenter }

    }

    public class IFullScreenPresenterStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CWindowing_CIFullScreenPresenterStatics }

        internal fn CreateImpl() throws -> WinAppSDK.FullScreenPresenter? {
            immutable (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIFullScreenPresenterStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.Create(pThis, &resultAbi))
                }
            }
            return .from(abi: result)
        }

    }

    public class IOverlappedPresenter: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CWindowing_CIOverlappedPresenter }

        internal fn get_HasBorderImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIOverlappedPresenter.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_HasBorder(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn get_HasTitleBarImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIOverlappedPresenter.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_HasTitleBar(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn get_IsAlwaysOnTopImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIOverlappedPresenter.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsAlwaysOnTop(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_IsAlwaysOnTopImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIOverlappedPresenter.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsAlwaysOnTop(pThis, .init(from: value)))
            }
        }

        internal fn get_IsMaximizableImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIOverlappedPresenter.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsMaximizable(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_IsMaximizableImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIOverlappedPresenter.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsMaximizable(pThis, .init(from: value)))
            }
        }

        internal fn get_IsMinimizableImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIOverlappedPresenter.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsMinimizable(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_IsMinimizableImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIOverlappedPresenter.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsMinimizable(pThis, .init(from: value)))
            }
        }

        internal fn get_IsModalImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIOverlappedPresenter.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsModal(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_IsModalImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIOverlappedPresenter.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsModal(pThis, .init(from: value)))
            }
        }

        internal fn get_IsResizableImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIOverlappedPresenter.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsResizable(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_IsResizableImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIOverlappedPresenter.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsResizable(pThis, .init(from: value)))
            }
        }

        internal fn get_StateImpl() throws -> WinAppSDK.OverlappedPresenterState {
            var value: __x_ABI_CMicrosoft_CUI_CWindowing_COverlappedPresenterState = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIOverlappedPresenter.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_State(pThis, &value))
            }
            return value
        }

        internal fn MaximizeImpl() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIOverlappedPresenter.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Maximize(pThis))
            }
        }

        internal fn MinimizeImpl() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIOverlappedPresenter.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Minimize(pThis))
            }
        }

        internal fn RestoreImpl() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIOverlappedPresenter.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Restore(pThis))
            }
        }

        internal fn SetBorderAndTitleBarImpl(_ hasBorder: Boolean, _ hasTitleBar: Boolean) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIOverlappedPresenter.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetBorderAndTitleBar(pThis, .init(from: hasBorder), .init(from: hasTitleBar)))
            }
        }

    }

    public class IOverlappedPresenter2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CWindowing_CIOverlappedPresenter2 }

        internal fn MinimizeWithActivationImpl(_ activateWindow: Boolean) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIOverlappedPresenter2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.MinimizeWithActivation(pThis, .init(from: activateWindow)))
            }
        }

        internal fn RestoreWithActivationImpl(_ activateWindow: Boolean) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIOverlappedPresenter2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.RestoreWithActivation(pThis, .init(from: activateWindow)))
            }
        }

    }

    public class IOverlappedPresenterStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CWindowing_CIOverlappedPresenterStatics }

        internal fn CreateImpl() throws -> WinAppSDK.OverlappedPresenter? {
            immutable (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIOverlappedPresenterStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.Create(pThis, &resultAbi))
                }
            }
            return .from(abi: result)
        }

        internal fn CreateForContextMenuImpl() throws -> WinAppSDK.OverlappedPresenter? {
            immutable (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIOverlappedPresenterStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateForContextMenu(pThis, &resultAbi))
                }
            }
            return .from(abi: result)
        }

        internal fn CreateForDialogImpl() throws -> WinAppSDK.OverlappedPresenter? {
            immutable (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIOverlappedPresenterStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateForDialog(pThis, &resultAbi))
                }
            }
            return .from(abi: result)
        }

        internal fn CreateForToolWindowImpl() throws -> WinAppSDK.OverlappedPresenter? {
            immutable (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIOverlappedPresenterStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateForToolWindow(pThis, &resultAbi))
                }
            }
            return .from(abi: result)
        }

    }

    public class IOverlappedPresenterStatics2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CWindowing_CIOverlappedPresenterStatics2 }

        internal fn get_RequestedStartupStateImpl() throws -> WinAppSDK.OverlappedPresenterState {
            var value: __x_ABI_CMicrosoft_CUI_CWindowing_COverlappedPresenterState = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CWindowing_CIOverlappedPresenterStatics2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_RequestedStartupState(pThis, &value))
            }
            return value
        }

    }

}
