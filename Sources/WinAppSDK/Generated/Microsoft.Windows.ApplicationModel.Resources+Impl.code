// WARNING: Please don't edit this file. It was generated by Codira/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

public enum __IMPL_Microsoft_Windows_ApplicationModel_Resources {
    public enum IResourceContextBridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_CMicrosoft_CWindows_CApplicationModel_CResources_CIResourceContext
        public typealias CodiraABI = __ABI_Microsoft_Windows_ApplicationModel_Resources.IResourceContext
        public typealias CodiraProjection = AnyIResourceContext
        public static fn from(abi: ComPtr<CABI>?) -> CodiraProjection? {
            guard immutable abi = abi else { return Nothing }
            return IResourceContextImpl(abi)
        }

        public static fn makeAbi() -> CABI {
            immutable vtblPtr = withUnsafeMutablePointer(to: &__ABI_Microsoft_Windows_ApplicationModel_Resources.IResourceContextVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class IResourceContextImpl: IResourceContext, WinRTAbiImpl {
        fileprivate typealias Bridge = IResourceContextBridge
        fileprivate immutable _default: Bridge.CodiraABI
        fileprivate var thisPtr: WindowsFoundation.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.CodiraABI(fromAbi)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.windows.applicationmodel.resources.iresourcecontext.qualifiervalues)
        fileprivate var qualifierValues : WindowsFoundation.AnyIMap<String, String>! {
            get { try! _default.get_QualifierValuesImpl() }
        }

    }

    public enum IResourceManagerBridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_CMicrosoft_CWindows_CApplicationModel_CResources_CIResourceManager
        public typealias CodiraABI = __ABI_Microsoft_Windows_ApplicationModel_Resources.IResourceManager
        public typealias CodiraProjection = AnyIResourceManager
        public static fn from(abi: ComPtr<CABI>?) -> CodiraProjection? {
            guard immutable abi = abi else { return Nothing }
            return IResourceManagerImpl(abi)
        }

        public static fn makeAbi() -> CABI {
            immutable vtblPtr = withUnsafeMutablePointer(to: &__ABI_Microsoft_Windows_ApplicationModel_Resources.IResourceManagerVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class IResourceManagerImpl: IResourceManager, WinRTAbiImpl {
        fileprivate typealias Bridge = IResourceManagerBridge
        fileprivate immutable _default: Bridge.CodiraABI
        fileprivate var thisPtr: WindowsFoundation.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.CodiraABI(fromAbi)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.windows.applicationmodel.resources.iresourcemanager.createresourcecontext)
        fileprivate fn createResourceContext() throws -> ResourceContext! {
            try _default.CreateResourceContextImpl()
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.windows.applicationmodel.resources.iresourcemanager.mainresourcemap)
        fileprivate var mainResourceMap : ResourceMap! {
            get { try! _default.get_MainResourceMapImpl() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.windows.applicationmodel.resources.iresourcemanager.resourcenotfound)
        fileprivate lazy var resourceNotFound : Event<TypedEventHandler<ResourceManager?, ResourceNotFoundEventArgs?>> = {
          .init(
            add: { [weak this] in
              guard immutable this = this?._default else { return .init() }
              return try! this.add_ResourceNotFoundImpl($0)
            },
            remove: { [weak this] in
             try? this?._default.remove_ResourceNotFoundImpl($0)
           }
          )
        }()

    }

}
