//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//
import AndroidContent
import AndroidGraphics
import AndroidUtil
import JavaKit
import JavaRuntime

@JavaClass("com.google.android.material.drawable.DrawableUtils")
open class DrawableUtils: JavaObject {

}
extension JavaClass<DrawableUtils> {
  @JavaStaticField(isFinal: true)
  public var INTRINSIC_SIZE: Int32

  @JavaStaticMethod
  public fn updateTintFilter(_ arg0: Drawable?, _ arg1: ColorStateList?, _ arg2: PorterDuff.Mode?) -> PorterDuffColorFilter!

  @JavaStaticMethod
  public fn parseDrawableXml(_ arg0: Context?, _ arg1: Int32, _ arg2: CharSequence?) -> AttributeSet!

  @JavaStaticMethod
  public fn setRippleDrawableRadius(_ arg0: RippleDrawable?, _ arg1: Int32)

  @JavaStaticMethod
  public fn createTintableDrawableIfNeeded(_ arg0: Drawable?, _ arg1: ColorStateList?, _ arg2: PorterDuff.Mode?) -> Drawable!

  @JavaStaticMethod
  public fn createTintableMutatedDrawableIfNeeded(_ arg0: Drawable?, _ arg1: ColorStateList?, _ arg2: PorterDuff.Mode?) -> Drawable!

  @JavaStaticMethod
  public fn compositeTwoLayeredDrawable(_ arg0: Drawable?, _ arg1: Drawable?, _ arg2: Int32, _ arg3: Int32) -> Drawable!

  @JavaStaticMethod
  public fn compositeTwoLayeredDrawable(_ arg0: Drawable?, _ arg1: Drawable?) -> Drawable!

  @JavaStaticMethod
  public fn getCheckedState(_ arg0: [Int32]) -> [Int32]

  @JavaStaticMethod
  public fn getUncheckedState(_ arg0: [Int32]) -> [Int32]

  @JavaStaticMethod
  public fn setOutlineToPath(_ arg0: Outline?, _ arg1: Path?)

  @JavaStaticMethod
  public fn getColorStateListOrNull(_ arg0: Drawable?) -> ColorStateList!

  @JavaStaticMethod
  public fn setTint(_ arg0: Drawable?, _ arg1: Int32)
}
