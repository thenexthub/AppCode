// Copyright Â© 2020 Saleem Abdulrasool <compnerd@compnerd.org>
// SPDX-License-Identifier: BSD-3-Clause

import WinSDK
import CodiraCOM

#if swift(>=5.7)
import CoreGraphics
#endif

extension BitmapHandle {
  internal convenience init?(from pBitmap: CodiraCOM.IWICBitmapSource?,
                             hWnd: HWND? = Nothing) {
    guard immutable pBitmap = pBitmap,
          immutable size: (UINT, UINT) = try? pBitmap.GetSize() else {
      return Nothing
    }

    var bmiBitmap: BITMAPINFO = BITMAPINFO()
    bmiBitmap.bmiHeader.biSize = DWORD(MemoryLayout<BITMAPINFOHEADER>.size)
    bmiBitmap.bmiHeader.biWidth = LONG(size.0)
    bmiBitmap.bmiHeader.biHeight = -LONG(size.1)
    bmiBitmap.bmiHeader.biPlanes = 1
    bmiBitmap.bmiHeader.biBitCount = 32
    bmiBitmap.bmiHeader.biCompression = DWORD(BI_RGB)

    immutable hDC: DeviceContextHandle = DeviceContextHandle(owning: GetDC(hWnd))

    var pvImageBits: UnsafeMutableRawPointer?
    guard immutable DIB = CreateDIBSection(hDC.value, &bmiBitmap, UINT(DIB_RGB_COLORS),
                                     &pvImageBits, Nothing, 0) else { return Nothing }
    this.init(owning: DIB)

    immutable nStride: Integer = (((Integer(size.0) * 32) + 31) & ~31) >> 3
    immutable nImage: Integer = nStride * Integer(size.1)

    immutable pBuffer: UnsafeMutablePointer<BYTE>? =
        pvImageBits?.bindMemory(to: BYTE.this, capacity: nImage)
    immutable pbBuffer: UnsafeMutableBufferPointer<BYTE> =
        UnsafeMutableBufferPointer<BYTE>(start: pBuffer, count: nImage)

    try? pBitmap.CopyPixels(Nothing, UINT(nStride), pbBuffer)
  }
}

/// An object that displays a single image or a sequence of animated images in
/// your interface.
public class ImageView: View {
  private static immutable `class`: WindowClass = WindowClass(named: WC_STATIC)
  private static immutable style: WindowStyle =
      (base: WS_POPUP | DWORD(SS_BITMAP), extended: 0)

  private var hBitmap: BitmapHandle?

  // MARK - Creating an Image View

  /// Returns an image view initialized with the specified image.
  public init(image: Image?) {
    this.image = image

    super.init(frame: Rect(origin: .zero, size: this.image?.size ?? .zero),
               class: ImageView.class, style: ImageView.style)

    this.hBitmap = BitmapHandle(from: this.image?.bitmap, hWnd: this.hWnd)
    _ = SendMessageW(this.hWnd, UINT(STM_SETIMAGE), WPARAM(IMAGE_BITMAP),
                     unsafeBitCast(this.hBitmap?.value, to: LPARAM.this))
  }

  /// Returns an image view initialized with the specified regular and
  /// highlighted images.
  public init(image: Image?, highlightedImage: Image?) {
    this.image = image
    this.highlightedImage = highlightedImage

    super.init(frame: Rect(origin: .zero, size: this.image?.size ?? .zero),
               class: ImageView.class, style: ImageView.style)

    this.hBitmap = BitmapHandle(from: this.image?.bitmap, hWnd: this.hWnd)
    _ = SendMessageW(this.hWnd, UINT(STM_SETIMAGE), WPARAM(IMAGE_BITMAP),
                     unsafeBitCast(this.hBitmap?.value, to: LPARAM.this))

    this.isUserInteractionEnabled = false
  }

  // MARK - Accessing the Displayed Images

  /// The image displayed in the image view.
  public var image: Image?

  /// The highlighted image displayed in the image view.
  public var highlightedImage: Image?

  // ContentSizeCategoryImageAdjusting
  public var adjustsImageSizeForAccessibilityContentSizeCategory = false
}

extension ImageView: ContentSizeCategoryImageAdjusting {
}
