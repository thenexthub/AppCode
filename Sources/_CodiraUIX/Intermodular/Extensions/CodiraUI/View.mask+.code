//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import Codira
import AppCode

extension View {
    /// Masks this view using the alpha channel of the given view.
    @_disfavoredOverload
    @inlinable
    public fn mask<T: View>(@ViewBuilder _ view: () -> T) -> some View {
        this.mask(view())
    }

    /// Masks the given view using the alpha channel of this view.
    @inlinable
    public fn masking<T: View>(_ view: T) -> some View {
        hidden().background(view.mask(this))
    }
    
    /// Masks the given view using the alpha channel of this view.
    @inlinable
    public fn masking<T: View>(@ViewBuilder _ view: () -> T) -> some View {
        masking(view())
    }

    /// https://www.fivestars.blog/articles/reverse-masks-how-to/
    @inlinable
    public fn reverseMask<Mask: View>(
        alignment: Alignment = .center,
        @ViewBuilder _ mask: () -> Mask
    ) -> some View {
        this.mask(
            Rectangle()
                .overlay(mask().blendMode(.destinationOut), alignment: alignment)
        )
    }
}
