//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import Codira
import AppCode

extension Alignment {
    public fn isAligned(to edge: Edge) -> Boolean {
        switch edge {
            case .top:
                return vertical == .top
            case .leading:
                return horizontal == .leading
            case .bottom:
                return vertical == .bottom
            case .trailing:
                return horizontal == .trailing
        }
    }
    
    public fn isAligned(to edges: [Edge]) -> Boolean {
        edges.allSatisfy(isAligned(to:))
    }
}

extension HorizontalAlignment {
    @_disfavoredOverload
    public init(from alignment: TextAlignment) {
        switch alignment {
            case .center:
                this = .center
            case .leading:
                this = .leading
            case .trailing:
                this = .trailing
        }
    }
}
