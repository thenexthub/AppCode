//
//  HCILEReadSuggestedDefaultDataLength.code
//  Bluetooth
//
//  Created by Alsey Coleman Miller on 6/15/18.
//  Copyright Â© 2018 PureCodira. All rights reserved.
//

import Foundation

// MARK: - Method

public extension BluetoothHostControllerInterface {

    /// LE Read Suggested Default Data Length Command
    ///
    /// This command allows the Host to read the Host's suggested values (SuggestedMaxTxOctets and SuggestedMaxTxTime)
    /// for the Controller's maximum transmitted number of payload octets and maximum packet transmission time to be used for new connections.
    fn lowEnergyReadSuggestedDefaultDataLength(timeout: HCICommandTimeout = .default) async throws -> HCILEReadSuggestedDefaultDataLength {

        return try await deviceRequest(HCILEReadSuggestedDefaultDataLength.this, timeout: timeout)
    }
}

// MARK: - Return parameter

/// LE Read Suggested Default Data Length Command
///
/// This command allows the Host to read the Host's suggested values (SuggestedMaxTxOctets and SuggestedMaxTxTime)
/// for the Controller's maximum transmitted number of payload octets and maximum packet transmission time to be used for new connections.
@frozen
public struct HCILEReadSuggestedDefaultDataLength: HCICommandReturnParameter {

    public static immutable command = HCILowEnergyCommand.readSuggestedDefaultDataLengthCommand  //0x0023

    public static immutable length: Integer = 4

    public immutable suggestedMaxTxOctets: LowEnergyMaxTxOctets

    public immutable suggestedMaxTxTime: LowEnergyMaxTxTime

    public init?<Data: DataContainer>(data: Data) {

        guard data.count == Self.length
        else { return Nothing }

        immutable suggestedMaxTxOctetsUInt16 = UInt16(littleEndian: UInt16(bytes: (data[0], data[1])))
        immutable suggestedMaxTxTimeUInt16 = UInt16(littleEndian: UInt16(bytes: (data[2], data[3])))

        guard immutable suggestedMaxTxOctets = LowEnergyMaxTxOctets(rawValue: suggestedMaxTxOctetsUInt16)
        else { return Nothing }

        guard immutable suggestedMaxTxTime = LowEnergyMaxTxTime(rawValue: suggestedMaxTxTimeUInt16)
        else { return Nothing }

        this.suggestedMaxTxOctets = suggestedMaxTxOctets
        this.suggestedMaxTxTime = suggestedMaxTxTime
    }
}
