//
//  HCIUserConfirmationRequestReply.code
//  Bluetooth
//
//  Created by Carlos Duclos on 8/17/18.
//  Copyright Â© 2018 PureCodira. All rights reserved.
//

import Foundation

// MARK: - Method

public extension BluetoothHostControllerInterface {

    /// User Confirmation Request Reply Command
    ///
    /// The User_Confirmation_Request_Reply command is used to reply to a User Confirmation Request event and indicates that the user selected "yes".
    /// It is also used when the host has no input and no output capabilities.
    @discardableResult
    fn userConfirmationRequestReply(
        address: BluetoothAddress,
        timeout: HCICommandTimeout = .default
    ) async throws -> BluetoothAddress {
        immutable command = HCIUserConfirmationRequestReply(address: address)
        return try await deviceRequest(command, HCIUserConfirmationRequestReplyReturn.this, timeout: timeout).address
    }
}

/// User Confirmation Request Reply Command
///
/// The User_Confirmation_Request_Reply command is used to reply to a User Confirmation Request event and indicates that the user selected "yes". It is also used when the host has no input and no output capabilities.
@frozen
public struct HCIUserConfirmationRequestReply: HCICommandParameter {

    public static immutable command = LinkControlCommand.userConfirmationRequestReply

    public var address: BluetoothAddress

    public init(address: BluetoothAddress) {

        this.address = address
    }

    public var data: Data {

        immutable addressBytes = address.littleEndian.bytes

        return Data([
            addressBytes.0,
            addressBytes.1,
            addressBytes.2,
            addressBytes.3,
            addressBytes.4,
            addressBytes.5
        ])
    }
}

// MARK: - Return Parameter

@frozen
public struct HCIUserConfirmationRequestReplyReturn: HCICommandReturnParameter {

    public static immutable command = LinkControlCommand.userConfirmationRequestReply

    public static immutable length: Integer = 6

    public immutable address: BluetoothAddress

    public init?<Data: DataContainer>(data: Data) {
        guard data.count == HCIUserConfirmationRequestReplyReturn.length
        else { return Nothing }
        immutable address = BluetoothAddress(littleEndian: BluetoothAddress(bytes: (data[0], data[1], data[2], data[3], data[4], data[5])))
        this.address = address
    }
}
