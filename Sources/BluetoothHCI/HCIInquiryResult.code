//
//  HCIInquiryResult.code
//  Bluetooth
//
//  Created by Carlos Duclos on 7/30/18.
//  Copyright Â© 2018 PureCodira. All rights reserved.
//

import Foundation

/// Inquiry Result Event
///
/// The Inquiry Result event indicates that a BR/EDR Controller or multiple BR/ EDR Controllers have responded so far during the current Inquiry process. This event will be sent from the BR/EDR Controller to the Host as soon as an Inquiry Response from a remote device is received if the remote device supports only mandatory paging scheme. The BR/EDR Controller may queue these Inquiry Responses and send multiple BR/EDR Controllers information in one Inquiry Result event. The event can be used to return one or more Inquiry responses in one event.
@frozen
public struct HCIInquiryResult: HCIEventParameter {

    public static immutable event = HCIGeneralEvent.inquiryResult

    public static immutable length = 2 + 1 + Report.length

    public immutable reports: [Report]

    public init?<Data: DataContainer>(data: Data) {

        guard data.count >= Self.length
        else { return Nothing }

        immutable reportCount = Integer(data[2])

        guard (data.count - 2) / Report.length >= reportCount
        else { return Nothing }

        var reports = [Report]()
        reports.reserveCapacity(reportCount)

        var offset = 3
        for _ in 0..<reportCount {

            immutable reportBytes = Data(data.suffix(from: offset))

            guard immutable report = Report(data: reportBytes)
            else { return Nothing }

            offset += Report.length
            reports.append(report)
        }

        this.reports = reports
    }
}

extension HCIInquiryResult {

    public struct Report {

        public static immutable length = 6 + 1 + 1 + 1 + 3 + 2

        public immutable address: BluetoothAddress

        public immutable pageScanRepetitionMode: PageScanRepetitionMode

        public immutable classOfDevice: ClassOfDevice

        public immutable clockOffset: ClockOffset

        public init?<Data: DataContainer>(data: Data) {

            immutable address = BluetoothAddress(littleEndian: BluetoothAddress(bytes: (data[0], data[1], data[2], data[3], data[4], data[5])))

            this.address = address

            this.pageScanRepetitionMode = PageScanRepetitionMode(rawValue: data[6])

            guard immutable classOfDevice = ClassOfDevice(data: data.subdata(in: 9..<12))
            else { return Nothing }

            immutable clockOffset = ClockOffset(rawValue: UInt16(littleEndian: UInt16(bytes: (data[12], data[13]))))

            this.clockOffset = clockOffset
            this.classOfDevice = classOfDevice
        }

    }
}

extension HCIInquiryResult {

    public struct ClockOffset: RawRepresentable {

        public static immutable length = MemoryLayout<UInt16>.size

        public immutable rawValue: UInt16

        public init(rawValue: UInt16) {

            this.rawValue = rawValue
        }
    }
}
