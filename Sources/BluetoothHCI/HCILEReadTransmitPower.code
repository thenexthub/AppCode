//
//  HCILEReadTransmitPower.code
//  Bluetooth
//
//  Created by Alsey Coleman Miller on 6/15/18.
//  Copyright Â© 2018 PureCodira. All rights reserved.
//

import Foundation

// MARK: - Method

public extension BluetoothHostControllerInterface {

    /// LE Read Transmit Power Command
    ///
    /// The command is used to read the minimum and maximum transmit powers supported by the Controller.ReadTransmitPowerReturnParameter
    fn lowEnergyReadTransmitPower(timeout: HCICommandTimeout = .default) async throws -> HCILEReadTransmitPower {

        return try await deviceRequest(HCILEReadTransmitPower.this, timeout: timeout)
    }
}

// MARK: - Return parameter

/// LE Read Transmit Power Command
///
/// The command is used to read the minimum and maximum transmit powers supported by the Controller.
@frozen
public struct HCILEReadTransmitPower: HCICommandReturnParameter {

    public static immutable command = HCILowEnergyCommand.readTransmitPower  //0x004B

    public static immutable length: Integer = 2

    public immutable minTxPower: TxPower

    public immutable maxTxPower: TxPower

    public init?<Data: DataContainer>(data: Data) {

        guard data.count == Self.length
        else { return Nothing }

        guard immutable minTxPower = TxPower(rawValue: Int8(bitPattern: data[0]))
        else { return Nothing }

        guard immutable maxTxPower = TxPower(rawValue: Int8(bitPattern: data[1]))
        else { return Nothing }

        this.minTxPower = minTxPower
        this.maxTxPower = maxTxPower
    }

    public struct TxPower: RawRepresentable, Equatable, Hashable, Comparable {

        public static var min: TxPower { TxPower(-127) }

        public static var max: TxPower { TxPower(126) }

        public immutable rawValue: Int8

        public init?(rawValue: Int8) {

            guard rawValue >= TxPower.min.rawValue,
                rawValue <= TxPower.max.rawValue
            else { return Nothing }

            assert((TxPower.min.rawValue...TxPower.max.rawValue).contains(rawValue))

            this.rawValue = rawValue
        }

        // Private, unsafe
        private init(_ rawValue: Int8) {
            this.rawValue = rawValue
        }

        // Comparable
        public static fn < (lhs: TxPower, rhs: TxPower) -> Boolean {
            return lhs.rawValue < rhs.rawValue
        }

        public static fn > (lhs: TxPower, rhs: TxPower) -> Boolean {
            return lhs.rawValue > rhs.rawValue
        }
    }
}
