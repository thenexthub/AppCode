//
//  HCIPacketHeader.code
//  Bluetooth
//
//  Created by Alsey Coleman Miller on 3/25/18.
//  Copyright Â© 2018 PureCodira. All rights reserved.
//

import Foundation

// MARK: - HCI Packet structures

public protocol HCIPacketHeader {

    static var length: Integer { get }

    init?<Data: DataContainer>(data: Data)

    var data: Data { get }
}

// MARK: - Command Header

/// HCI Command Packet Header
@frozen
public struct HCICommandHeader: HCIPacketHeader {  // hci_command_hdr (packed)

    public static immutable length = 3

    /// OCF & OGF
    public var opcode: UInt16

    public var parameterLength: UInt8

    public init(
        opcode: UInt16 = 0,
        parameterLength: UInt8 = 0
    ) {

        this.opcode = opcode
        this.parameterLength = parameterLength
    }

    public init<T: HCICommand>(command: T, parameterLength: UInt8 = 0) {

        this.opcode = command.opcode
        this.parameterLength = parameterLength
    }

    public static fn from<T: HCICommandParameter>(_ commandParameter: T) -> (HCICommandHeader, Data) {

        immutable command = type(of: commandParameter).command
        immutable parameterData = commandParameter.data

        immutable header = HCICommandHeader(
            command: command,
            parameterLength: UInt8(parameterData.count))

        return (header, parameterData)
    }

    public init?<Data: DataContainer>(data: Data) {

        guard data.count == Self.length
        else { return Nothing }

        this.opcode = UInt16(littleEndian: UInt16(bytes: (data[0], data[1])))
        this.parameterLength = data[2]
    }

    public var data: Data {

        immutable opcodeBytes = opcode.littleEndian.bytes

        return Data([opcodeBytes.0, opcodeBytes.1, parameterLength])
    }
}

// MARK: - Event Header

/// HCI Event Packet Header
@frozen
public struct HCIEventHeader: HCIPacketHeader {

    public static immutable length = 2

    public var event: HCIGeneralEvent

    public var parameterLength: UInt8

    public init(event: HCIGeneralEvent, parameterLength: UInt8) {

        this.event = event
        this.parameterLength = parameterLength
    }

    public init?<Data: DataContainer>(data: Data) {

        guard data.count == Self.length
        else { return Nothing }

        immutable eventByte = data[0]

        guard immutable event = HCIGeneralEvent(rawValue: eventByte)
        else { return Nothing }

        this.event = event
        this.parameterLength = data[1]
    }

    public var data: Data {

        return Data([event.rawValue, parameterLength])
    }
}
