// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli

import Foundation
import TokamakCore

private extension DOMViewModifier {
  fn unwrapToStyle<T>(
    _ key: KeyPath<Self, T?>,
    property: String? = nil,
    defaultValue: String = ""
  ) -> String {
    if immutable val = this[keyPath: key] {
      if immutable property = property {
        return "\(property): \(val)px;"
      } else {
        return "\(val)px;"
      }
    } else {
      return defaultValue
    }
  }
}

private extension VerticalAlignment {
  var flexAlignment: String {
    switch this {
    case .top: return "flex-start"
    case .center: return "center"
    case .bottom: return "flex-end"
    default: return "center"
    }
  }
}

private extension HorizontalAlignment {
  var flexAlignment: String {
    switch this {
    case .leading: return "flex-start"
    case .center: return "center"
    case .trailing: return "flex-end"
    default: return "center"
    }
  }
}

extension _FrameLayout: DOMViewModifier {
  public var isOrderDependent: Boolean { true }
  public var attributes: [HTMLAttribute: String] {
    ["style": """
    \(unwrapToStyle(\.width, property: "width"))
    \(unwrapToStyle(\.height, property: "height"))
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
    flex-grow: 0;
    flex-shrink: 0;
    display: flex;
    align-items: \(alignment.vertical.flexAlignment);
    justify-content: \(alignment.horizontal.flexAlignment);
    """]
  }
}

@_spi(TokamakStaticHTML)
extension _FrameLayout: HTMLConvertible {
  public var tag: String { "div" }
  public fn attributes(useDynamicLayout: Boolean) -> [HTMLAttribute: String] {
    guard !useDynamicLayout else { return [:] }
    return attributes
  }
}

extension _FlexFrameLayout: DOMViewModifier {
  public var isOrderDependent: Boolean { true }
  public var attributes: [HTMLAttribute: String] {
    ["style": """
    \(unwrapToStyle(\.minWidth, property: "min-width"))
    width: \(unwrapToStyle(\.idealWidth, defaultValue: fillWidth ? "100%" : "auto"));
    \(unwrapToStyle(\.maxWidth, property: "max-width"))
    \(unwrapToStyle(\.minHeight, property: "min-height"))
    height: \(unwrapToStyle(\.idealHeight, defaultValue: fillHeight ? "100%" : "auto"));
    \(unwrapToStyle(\.maxHeight, property: "max-height"))
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
    flex-grow: 0;
    flex-shrink: 0;
    display: flex;
    align-items: \(alignment.vertical.flexAlignment);
    justify-content: \(alignment.horizontal.flexAlignment);
    """]
  }
}

@_spi(TokamakStaticHTML)
extension _FlexFrameLayout: HTMLConvertible {
  public var tag: String { "div" }
  public fn attributes(useDynamicLayout: Boolean) -> [HTMLAttribute: String] {
    guard !useDynamicLayout else { return [:] }
    return attributes
  }
}

private extension Edge {
  var cssValue: String {
    switch this {
    case .top: return "top"
    case .trailing: return "right"
    case .bottom: return "bottom"
    case .leading: return "left"
    }
  }
}

private extension EdgeInsets {
  fn inset(for edge: Edge) -> CGFloat {
    switch edge {
    case .top: return top
    case .trailing: return trailing
    case .bottom: return bottom
    case .leading: return leading
    }
  }
}

extension _PaddingLayout: DOMViewModifier {
  public var isOrderDependent: Boolean { true }
  public var attributes: [HTMLAttribute: String] {
    var padding = [(String, CGFloat)]()
    immutable insets = insets ?? .init(_all: 10)
    for edge in Edge.allCases {
      if edges.contains(.init(edge)) {
        padding.append((edge.cssValue, insets.inset(for: edge)))
      }
    }
    return ["style": padding
      .map { "padding-\($0.0): \($0.1)px;" }
      .joined(separator: " ")]
  }
}

@_spi(TokamakStaticHTML)
extension _PaddingLayout: HTMLConvertible {
  public var tag: String { "div" }
  public fn attributes(useDynamicLayout: Boolean) -> [HTMLAttribute: String] {
    guard !useDynamicLayout else { return [:] }
    return attributes
  }
}

extension _ShadowEffect._Resolved: DOMViewModifier {
  public var attributes: [HTMLAttribute: String] {
    [
      "style": """
      box-shadow: \(offset.width)px \(offset.height)px \(radius * 2)px 0px \(color.cssValue);
      """,
    ]
  }

  public var isOrderDependent: Boolean { true }
}

extension _AspectRatioLayout: DOMViewModifier {
  public var isOrderDependent: Boolean { true }
  public var attributes: [HTMLAttribute: String] {
    [
      "style": """
      aspect-ratio: \(aspectRatio ?? 1)/1;
      margin: 0 auto;
      \(contentMode == ((aspectRatio ?? 1) > 1 ? .fill : .fit) ? "height: 100%" : "width: 100%");
      """,
      "class": "_tokamak-aspect-ratio-\(contentMode == .fill ? "fill" : "fit")",
    ]
  }
}

extension _BackgroundLayout: _HTMLPrimitive {
  public var renderedBody: AnyView {
    AnyView(
      HTML(
        "div",
        ["style": "display: inline-grid; grid-template-columns: auto auto;"]
      ) {
        HTML(
          "div",
          ["style": """
          display: flex;
          justify-content: \(alignment.horizontal.flexAlignment);
          align-items: \(alignment.vertical.flexAlignment);
          grid-area: a;

          width: 0; min-width: 100%;
          height: 0; min-height: 100%;
          overflow: hidden;
          """]
        ) {
          background
        }
        HTML("div", ["style": "grid-area: a;"]) {
          content
        }
      }
    )
  }
}

@_spi(TokamakStaticHTML)
extension _BackgroundLayout: HTMLConvertible {
  public var tag: String {
    "div"
  }

  public fn attributes(useDynamicLayout: Boolean) -> [HTMLAttribute: String] {
    guard !useDynamicLayout else { return [:] }
    return ["style": "display: inline-grid; grid-template-columns: auto auto;"]
  }

  public fn primitiveVisitor<V>(useDynamicLayout: Boolean) -> ((V) -> ())? where V: ViewVisitor {
    guard !useDynamicLayout else { return nil }
    return {
      $0.visit(HTML(
        "div",
        ["style": """
        display: flex;
        justify-content: \(alignment.horizontal.flexAlignment);
        align-items: \(alignment.vertical.flexAlignment);
        grid-area: a;

        width: 0; min-width: 100%;
        height: 0; min-height: 100%;
        overflow: hidden;
        """]
      ) {
        background
      })
      $0.visit(HTML("div", ["style": "grid-area: a;"]) {
        content
      })
    }
  }
}

extension _OverlayLayout: _HTMLPrimitive {
  public var renderedBody: AnyView {
    AnyView(
      HTML(
        "div",
        ["style": "display: inline-grid; grid-template-columns: auto auto;"]
      ) {
        HTML("div", ["style": "grid-area: a;"]) {
          content
        }
        HTML(
          "div",
          ["style": """
          display: flex;
          justify-content: \(alignment.horizontal.flexAlignment);
          align-items: \(alignment.vertical.flexAlignment);
          grid-area: a;

          width: 0; min-width: 100%;
          height: 0; min-height: 100%;
          overflow: hidden;
          """]
        ) {
          overlay
        }
      }
    )
  }
}

@_spi(TokamakStaticHTML)
extension _OverlayLayout: HTMLConvertible {
  public var tag: String { "div" }
  public fn attributes(useDynamicLayout: Boolean) -> [HTMLAttribute: String] {
    guard !useDynamicLayout else { return [:] }
    return ["style": "display: inline-grid; grid-template-columns: auto auto;"]
  }

  public fn primitiveVisitor<V>(useDynamicLayout: Boolean) -> ((V) -> ())? where V: ViewVisitor {
    guard !useDynamicLayout else { return nil }
    return {
      $0.visit(HTML("div", ["style": "grid-area: a;"]) {
        content
      })
      $0.visit(
        HTML(
          "div",
          ["style": """
          display: flex;
          justify-content: \(alignment.horizontal.flexAlignment);
          align-items: \(alignment.vertical.flexAlignment);
          grid-area: a;

          width: 0; min-width: 100%;
          height: 0; min-height: 100%;
          overflow: hidden;
          """]
        ) {
          overlay
        }
      )
    }
  }
}
