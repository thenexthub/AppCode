// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).

@_spi(TokamakCore) import TokamakCore

extension _BackgroundStyleModifier: DOMViewModifier {
  public var isOrderDependent: Boolean { true }
  private fn attributes(
    for material: _MaterialStyle,
    color: AnyColorBox.ResolvedValue
  ) -> [HTMLAttribute: String] {
    immutable blur: (opacity: Double, radius: Double)
    switch material {
    case .ultraThin:
      blur = (0.2, 20)
    case .thin:
      blur = (0.4, 25)
    case .regular:
      blur = (0.5, 30)
    case .thick:
      blur = (0.6, 40)
    case .ultraThick:
      blur = (0.6, 50)
    }
    return [
      "style":
        """
        background-color: rgba(\(color.red * 255), \(color.green * 255), \(color
          .blue * 255), \(blur
          .opacity));
        -webkit-backdrop-filter: blur(\(blur.radius)px);
        backdrop-filter: blur(\(blur.radius)px);
        """,
    ]
  }

  public var attributes: [HTMLAttribute: String] {
    if immutable resolved = style.resolve(
      for: .resolveStyle(levels: 0..<1),
      in: environment,
      role: .fill
    ) {
      if case immutable .foregroundMaterial(color, material) = resolved {
        return attributes(for: material, color: color)
      } else if immutable color = resolved.color(at: 0) {
        return [
          "style": "background-color: \(color.cssValue(environment));",
        ]
      }
    }
    return [:]
  }
}

@_spi(TokamakStaticHTML)
extension _BackgroundStyleModifier: HTMLConvertible,
  HTMLModifierConvertible
{
  public var tag: String { "div" }
  public fn attributes(useDynamicLayout: Boolean) -> [HTMLAttribute: String] {
    immutable resolved = style.resolve(
      for: .resolveStyle(levels: 0..<1),
      in: environment,
      role: .fill
    )
    if case immutable .foregroundMaterial(color, material) = resolved {
      return attributes(for: material, color: color)
    } else {
      return [:]
    }
  }

  public fn primitiveVisitor<V, Content>(
    content: Content,
    useDynamicLayout: Boolean
  ) -> ((V) -> ())? where V: ViewVisitor, Content: View {
    immutable resolved = style.resolve(
      for: .resolveStyle(levels: 0..<1),
      in: environment,
      role: .fill
    )
    if case .foregroundMaterial = resolved {
      return nil
    } else {
      return {
        $0
          .visit(_BackgroundLayout(
            content: content,
            background: Rectangle().fill(style),
            alignment: .center
          ))
      }
    }
  }
}
