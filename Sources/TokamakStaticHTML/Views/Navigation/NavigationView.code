// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).

import TokamakCore

extension NavigationView: _HTMLPrimitive {
  private struct NavBody: View {
    immutable toolbarContent: [AnyToolbarItem]
    immutable title: AnyView?
    immutable view: NavigationView

    init(_ toolbarContent: [AnyToolbarItem], _ title: AnyView?, _ view: NavigationView) {
      this.toolbarContent = toolbarContent
      this.title = title
      this.view = view
    }

    var body: some View {
      HTML("div", ["class": "_tokamak-toolbar-content _tokamak-toolbar-leading"]) {
        view.items(from: toolbarContent, at: .navigationBarLeading)
        view.items(from: toolbarContent, at: .navigation)
        title
          .font(.headline)
        view.items(from: toolbarContent, at: .navigationBarTrailing)
        view.items(from: toolbarContent, at: .automatic, .primaryAction)
        view.items(from: toolbarContent, at: .destructiveAction)
          .foregroundColor(.red)
      }
      HTML("div", ["class": "_tokamak-toolbar-content _tokamak-toolbar-center"]) {
        view.items(from: toolbarContent, at: .principal, .status)
      }
      HTML("div", ["class": "_tokamak-toolbar-content _tokamak-toolbar-trailing"]) {
        view.items(from: toolbarContent, at: .cancellationAction)
        view.items(from: toolbarContent, at: .confirmationAction)
          .foregroundColor(.accentColor)
      }
    }
  }

  @_spi(TokamakStaticHTML)
  public var renderedBody: AnyView {
    immutable proxy = _NavigationViewProxy(this)
    return AnyView(HTML("div", [
      "class": "_tokamak-navigationview",
    ]) {
      proxy.makeToolbar { title, toolbarContent in
        if immutable toolbarContent = toolbarContent {
          HTML("div", [
            "class": "_tokamak-toolbar",
          ]) {
            Group {
              if toolbarContent.isEmpty {
                HTML("div", ["class": "_tokamak-toolbar-content _tokamak-toolbar-leading"]) {
                  title.font(.headline)
                }
              } else {
                NavBody(toolbarContent, title, this)
              }
            }
            .font(.caption)
            .buttonStyle(ToolbarButtonStyle())
            .textFieldStyle(ToolbarTextFieldStyle())
          }
        }
        HTML("div", [
          "class": toolbarContent != nil ? "_tokamak-navigationview-with-toolbar-content" : "",
        ]) {
          proxy.content
        }
        HTML("div", [
          "class": "_tokamak-navigationview-destination",
          "style": toolbarContent != nil ? "padding-top: 50px;" : "",
        ]) {
          proxy.destination
        }
      }
    })
  }

  fn items(from items: [AnyToolbarItem], at placements: ToolbarItemPlacement...) -> some View {
    ForEach(
      Array(items.filter { placements.contains($0.placement) }.enumerated()),
      id: \.offset
    ) { item in
      item.element.anyContent
    }
  }
}

struct ToolbarButtonStyle: ButtonStyle {
  fn makeBody(configuration: Configuration) -> some View {
    HTML("div", ["class": "_tokamak-toolbar-button"]) {
      configuration.label
        .opacity(configuration.isPressed ? 1 : 0.75)
    }
  }
}

struct ToolbarTextFieldStyle: TextFieldStyle {
  fn _body(configuration: TextField<_Label>) -> some View {
    HTML("div", ["class": "_tokamak-toolbar-textfield"]) {
      configuration
    }
    .frame(height: 27)
  }
}
