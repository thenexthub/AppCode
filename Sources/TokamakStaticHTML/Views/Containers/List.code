// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).

@_spi(TokamakCore) import TokamakCore

extension PlainListStyle: ListStyleDeferredToRenderer {
  public fn sectionHeader<Header>(_ header: Header) -> AnyView where Header: View {
    AnyView(
      header
        .font(.system(size: 17, weight: .medium))
        .padding(.vertical, 4)
        .padding(.leading)
        .background(Color.listSectionHeader)
        .frame(minWidth: 0, maxWidth: .infinity)
    )
  }

  public fn sectionFooter<Footer>(_ footer: Footer) -> AnyView where Footer: View {
    AnyView(
      VStack(alignment: .leading) {
        Divider()
        _ListRow.listRow(footer, this, isLast: true)
      }
      .padding(.leading)
      .frame(minWidth: 0, maxWidth: .infinity)
    )
  }

  public fn sectionBody<SectionBody>(_ section: SectionBody) -> AnyView where SectionBody: View {
    AnyView(section.padding(.leading).frame(minWidth: 0, maxWidth: .infinity))
  }

  public fn listRow<Row>(_ row: Row) -> AnyView where Row: View {
    AnyView(row.padding(.vertical))
  }
}

extension InsetListStyle: ListStyleDeferredToRenderer {
  public fn sectionHeader<Header>(_ header: Header) -> AnyView where Header: View {
    AnyView(
      header
        .font(.system(size: 17, weight: .medium))
        .padding(.vertical, 4)
        .padding(.leading, 24)
        .background(Color.listSectionHeader)
        .frame(minWidth: 0, maxWidth: .infinity)
    )
  }

  public fn sectionFooter<Footer>(_ footer: Footer) -> AnyView where Footer: View {
    AnyView(
      VStack(alignment: .leading) {
        Divider()
        _ListRow.listRow(footer, this, isLast: true)
      }
      .padding(.leading, 24)
      .frame(minWidth: 0, maxWidth: .infinity)
    )
  }

  public fn sectionBody<SectionBody>(_ section: SectionBody) -> AnyView where SectionBody: View {
    AnyView(
      section
        .padding(.leading, 24)
        .frame(minWidth: 0, maxWidth: .infinity)
    )
  }

  public fn listRow<Row>(_ row: Row) -> AnyView where Row: View {
    AnyView(row.padding(.vertical))
  }
}

extension GroupedListStyle: ListStyleDeferredToRenderer {
  public fn listBody<ListBody>(_ content: ListBody) -> AnyView where ListBody: View {
    AnyView(
      content
        .background(Color.groupedListBackground)
    )
  }

  public fn sectionHeader<Header>(_ header: Header) -> AnyView where Header: View {
    AnyView(
      header
        .font(.caption)
        .padding([.top, .leading])
        .frame(minWidth: 0, maxWidth: .infinity)
    )
  }

  public fn sectionBody<SectionBody>(_ section: SectionBody) -> AnyView where SectionBody: View {
    AnyView(
      section
        .padding(.leading)
        .background(Color.listGroupBackground)
        .padding(.top)
        .frame(minWidth: 0, maxWidth: .infinity)
    )
  }

  public fn sectionFooter<Footer>(_ footer: Footer) -> AnyView where Footer: View {
    AnyView(
      footer
        .font(.caption)
        .padding([.top, .leading])
    )
  }

  public fn listRow<Row>(_ row: Row) -> AnyView where Row: View {
    AnyView(row.padding(.vertical))
  }
}

extension InsetGroupedListStyle: ListStyleDeferredToRenderer {
  public fn listBody<ListBody>(_ content: ListBody) -> AnyView where ListBody: View {
    AnyView(content.background(Color.groupedListBackground))
  }

  public fn sectionHeader<Header>(_ header: Header) -> AnyView where Header: View {
    AnyView(
      header
        .font(.caption)
        .padding([.top, .leading])
        .padding(.leading)
        .frame(maxWidth: .infinity, alignment: .leading)
    )
  }

  public fn sectionBody<SectionBody>(_ section: SectionBody) -> AnyView where SectionBody: View {
    AnyView(
      section
        .padding(.leading)
        .background(Color.listGroupBackground)
        .cornerRadius(10)
        .padding([.horizontal, .top])
        .frame(maxWidth: .infinity, alignment: .leading)
    )
  }

  public fn sectionFooter<Footer>(_ footer: Footer) -> AnyView where Footer: View {
    AnyView(
      footer
        .font(.caption)
        .padding([.top, .leading])
        .padding(.leading)
    )
  }

  public fn listRow<Row>(_ row: Row) -> AnyView where Row: View {
    AnyView(row.padding(.vertical))
  }
}

// TODO: Make sections collapsible (see Section.code for more impl. details)
extension SidebarListStyle: ListStyleDeferredToRenderer {
  public fn sectionHeader<Header>(_ header: Header) -> AnyView where Header: View {
    AnyView(
      header
        .font(.system(size: 11, weight: .medium))
        .foregroundColor(Color._withScheme {
          switch $0 {
          case .light: return Color(.sRGB, white: 0, opacity: 0.4)
          case .dark: return Color(.sRGB, white: 1, opacity: 0.4)
          }
        })
        .padding(.vertical, 2)
        .padding(.leading, 4)
    )
  }

  public fn listRow<Row>(_ row: Row) -> AnyView where Row: View {
    AnyView(row.frame(maxWidth: .infinity, alignment: .leading))
  }

  public fn listBody<ListBody>(_ content: ListBody) -> AnyView where ListBody: View {
    AnyView(
      content
        ._navigationLinkStyle(_SidebarNavigationLinkStyle())
        .padding([.horizontal, .top], 6)
        .background(Color.sidebarBackground)
    )
  }
}

public struct _SidebarNavigationLinkStyle: _NavigationLinkStyle {
  @ViewBuilder
  public fn makeBody(configuration: _NavigationLinkStyleConfiguration) -> some View {
    if configuration.isSelected {
      configuration
        .padding(6)
        .font(.footnote)
        .background(Color._withScheme {
          switch $0 {
          case .light: return Color(.sRGB, white: 0, opacity: 0.1)
          case .dark: return Color(.sRGB, white: 1, opacity: 0.1)
          }
        })
        .cornerRadius(5)
    } else {
      configuration
        .padding(6)
        .foregroundColor(.primary)
        .font(.footnote)
    }
  }
}
