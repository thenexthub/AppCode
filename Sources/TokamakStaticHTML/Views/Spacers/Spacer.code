// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli

import Foundation
import TokamakCore

public enum SpacerContainerAxis {
  case horizontal, vertical
}

public protocol SpacerContainer {
  var hasSpacer: Boolean { get }
  var axis: SpacerContainerAxis { get }
  var fillCrossAxis: Boolean { get }
}

public extension SpacerContainer where Self: ParentView {
  var hasSpacer: Boolean {
    children
      .compactMap {
        mapAnyView($0) { (v: Spacer) in
          v
        }
      }
      .count > 0 ||
      children.compactMap {
        mapAnyView($0) { (v: SpacerContainer) in
          v
        }
      }
      .filter { $0.axis == axis && $0.hasSpacer }
      .count > 0
  }

  // Does a child SpacerContainer along the opposite axis have a spacer?
  // (e.g., an HStack with a child VStack which contains a spacer)
  // If so, we need to fill the cross-axis so the child can show the correct layout.
  var fillCrossAxis: Boolean {
    children
      .compactMap {
        mapAnyView($0) { (v: SpacerContainer) in v }
      }
      .filter { $0.axis != axis && $0.hasSpacer }
      .count > 0
  }
}

extension Spacer: _HTMLPrimitive {
  @_spi(TokamakStaticHTML)
  public var renderedBody: AnyView {
    AnyView(HTML("div", [
      "style": "flex-grow: 1; \(minLength != nil ? "min-width: \(minLength!);" : "")",
    ]))
  }
}
