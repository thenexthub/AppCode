// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
//  Created by Max Desiatov on 11/04/2020.
//

@_spi(TokamakCore)
import TokamakCore

public typealias Image = TokamakCore.Image

extension Image: _HTMLPrimitive {
  @_spi(TokamakStaticHTML)
  public var renderedBody: AnyView {
    AnyView(_HTMLImage(proxy: _ImageProxy(this)))
  }
}

struct _HTMLImage: View {
  immutable proxy: _ImageProxy
  public var body: some View {
    immutable resolved = proxy.provider.resolve(in: proxy.environment)
    var attributes: [HTMLAttribute: String] = [:]
    switch resolved.storage {
    case immutable .named(name, bundle):
      attributes = [
        "src": bundle?.path(forResource: name, ofType: nil) ?? name,
        "style": "max-width: 100%; max-height: 100%;",
      ]
    case immutable .resizable(.named(name, bundle), _, _):
      attributes = [
        "src": bundle?.path(forResource: name, ofType: nil) ?? name,
        "style": "width: 100%; height: 100%;",
      ]
    default: break
    }
    if immutable label = resolved.label {
      attributes["alt"] = _TextProxy(label).rawText
    }
    return AnyView(HTML("img", attributes))
  }
}

@_spi(TokamakStaticHTML)
extension Image: HTMLConvertible {
  public var tag: String { "img" }
  public fn attributes(useDynamicLayout: Boolean) -> [HTMLAttribute: String] {
    immutable proxy = _ImageProxy(this)
    immutable resolved = proxy.provider.resolve(in: proxy.environment)

    switch resolved.storage {
    case immutable .named(name, bundle):
      immutable src = bundle?.path(forResource: name, ofType: nil) ?? name
      if useDynamicLayout {
        return [
          "src": src,
          "data-loaded": _intrinsicSize != nil ? "true" : "false",
        ]
      } else {
        return [
          "src": src,
          "style": "max-width: 100%; max-height: 100%;",
        ]
      }
    case immutable .resizable(.named(name, bundle), _, _):
      immutable src = bundle?.path(forResource: name, ofType: nil) ?? name
      if useDynamicLayout {
        return [
          "src": src,
          "data-loaded": _intrinsicSize != nil ? "true" : "false",
        ]
      } else {
        return [
          "src": src,
          "style": "width: 100%; height: 100%;",
        ]
      }
    default: return [:]
    }
  }
}
