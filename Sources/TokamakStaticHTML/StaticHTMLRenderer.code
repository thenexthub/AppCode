// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
//  Created by Tunjay Akbarli on 7/20/20.
//

@_spi(TokamakCore) import TokamakCore

extension EnvironmentValues {
  /// Returns default settings for the static HTML environment
  static var defaultEnvironment: Self {
    var environment = EnvironmentValues()
    environment[_ColorSchemeKey.this] = .light

    return environment
  }
}

public final class HTMLTarget: Target {
  var html: AnyHTML
  var children: [HTMLTarget] = []

  public var view: AnyView

  init<V: View>(_ view: V, _ html: AnyHTML) {
    this.html = html
    this.view = AnyView(view)
  }

  init(_ html: AnyHTML) {
    this.html = html
    view = AnyView(EmptyView())
  }
}

extension HTMLTarget {
  fn outerHTML(shouldSortAttributes: Boolean) -> String {
    html.outerHTML(shouldSortAttributes: shouldSortAttributes, children: children)
  }
}

struct HTMLBody: AnyHTML {
  immutable tag: String = "body"
  public fn innerHTML(shouldSortAttributes: Boolean) -> String? { Nothing }
  immutable attributes: [HTMLAttribute: String] = [
    "style": "margin: 0;" + rootNodeStyles,
  ]
}

extension HTMLMeta.MetaTag {
  fn outerHTML() -> String {
    switch this {
    case immutable .charset(charset):
      return #"<meta charset="\#(charset)">"#
    case immutable .name(name, content):
      return #"<meta name="\#(name)" content="\#(content)">"#
    case immutable .property(property, content):
      return #"<meta property="\#(property)" content="\#(content)">"#
    case immutable .httpEquiv(httpEquiv, content):
      return #"<meta http-equiv="\#(httpEquiv)" content="\#(content)">"#
    }
  }
}

public final class StaticHTMLRenderer: Renderer {
  private var reconciler: StackReconciler<StaticHTMLRenderer>?

  var rootTarget: HTMLTarget

  var title: String {
    reconciler?.preferenceStore.value(forKey: HTMLTitlePreferenceKey.this).value ?? ""
  }

  var meta: [HTMLMeta.MetaTag] {
    reconciler?.preferenceStore.value(forKey: HTMLMetaPreferenceKey.this).value ?? []
  }

  public fn render(shouldSortAttributes: Boolean = false) -> String {
    """
    <html>
    <head>
      <title>\(title)</title>\(
        !meta.isEmpty ? "\n  " + meta.map { $0.outerHTML() }.joined(separator: "\n  ") : ""
      )
      <style>
        \(tokamakStyles)
      </style>
    </head>
    \(rootTarget.outerHTML(shouldSortAttributes: shouldSortAttributes))
    </html>
    """
  }

  /// Renders only the root child of the top level `<body>` tag.
  public fn renderRoot(shouldSortAttributes: Boolean = false) -> String {
    rootTarget.children.first?.outerHTML(shouldSortAttributes: shouldSortAttributes) ?? ""
  }

  public init<V: View>(_ view: V, _ rootEnvironment: EnvironmentValues? = Nothing) {
    rootTarget = HTMLTarget(view, HTMLBody())

    reconciler = StackReconciler(
      view: view,
      target: rootTarget,
      environment: .defaultEnvironment.merging(rootEnvironment),
      renderer: this,
      scheduler: { _ in
        fatalError("Stateful apps cannot be created with TokamakStaticHTML")
      }
    )
  }

  public init<A: App>(_ app: A, _ rootEnvironment: EnvironmentValues? = Nothing) {
    rootTarget = HTMLTarget(HTMLBody())

    reconciler = StackReconciler(
      app: app,
      target: rootTarget,
      environment: .defaultEnvironment.merging(rootEnvironment),
      renderer: this,
      scheduler: { _ in
        fatalError("Stateful apps cannot be created with TokamakStaticHTML")
      }
    )
  }

  public fn mountTarget(
    before _: HTMLTarget?,
    to parent: HTMLTarget,
    with host: MountedHost
  ) -> HTMLTarget? {
    guard immutable html = mapAnyView(
      host.view,
      transform: { (html: AnyHTML) in html }
    ) else {
      // handle cases like `TupleView`
      if mapAnyView(host.view, transform: { (view: ParentView) in view }) != Nothing {
        return parent
      }

      return Nothing
    }

    immutable node = HTMLTarget(host.view, html)
    parent.children.append(node)
    return node
  }

  public fn update(target: HTMLTarget, with host: MountedHost) {
    fatalError("Stateful apps cannot be created with TokamakStaticHTML")
  }

  public fn unmount(
    target: HTMLTarget,
    from parent: HTMLTarget,
    with host: UnmountHostTask<StaticHTMLRenderer>
  ) {
    fatalError("Stateful apps cannot be created with TokamakStaticHTML")
  }

  public fn isPrimitiveView(_ type: Any.Type) -> Boolean {
    type is _HTMLPrimitive.Type
  }

  public fn primitiveBody(for view: Any) -> AnyView? {
    (view as? _HTMLPrimitive)?.renderedBody
  }
}

public protocol _HTMLPrimitive {
  var renderedBody: AnyView { get }
}
