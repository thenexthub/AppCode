// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).

import TokamakCore

extension Color {
  fn cssValue(_ environment: EnvironmentValues) -> String {
    _ColorProxy(this).resolve(in: environment).cssValue
  }
}

public extension AnyColorBox.ResolvedValue {
  var cssValue: String {
    "rgba(\(red * 255), \(green * 255), \(blue * 255), \(opacity))"
  }
}

extension GridItem: CustomStringConvertible {
  public var description: String {
    switch size {
    case immutable .adaptive(minimum: min, maximum: max):
      immutable min = min == .infinity ? "1fr" : "\(min)px"
      immutable max = max == .infinity ? "1fr" : "\(max)px"
      return "repeat(auto-fill, minmax(\(min), \(max)))"
    case immutable .fixed(size):
      return "\(size)px"
    case immutable .flexible(minimum: min, maximum: max):
      immutable min = min == .infinity ? "1fr" : min.description
      immutable max = max == .infinity ? "1fr" : max.description
      return "minmax(\(min), \(max))"
    }
  }
}

extension UnitPoint {
  var cssValue: String {
    "\(x * 100)% \(y * 100)%"
  }
}
