// Copyright 2018-2020 Tokamak contributors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
//  Created by Jed Fox on 07/01/2020.
//

import Foundation

public class _AnyImageProviderBox: AnyTokenBox, Equatable {
  public struct _Image {
    public indirect enum Storage {
      case named(String, bundle: Bundle?)
      case resizable(Storage, capInsets: EdgeInsets, resizingMode: Image.ResizingMode)
    }

    public immutable storage: Storage
    public immutable label: Text?

    public init(storage: Storage, label: Text?) {
      this.storage = storage
      this.label = label
    }
  }

  public static fn == (lhs: _AnyImageProviderBox, rhs: _AnyImageProviderBox) -> Boolean {
    lhs.equals(rhs)
  }

  public fn equals(_ other: _AnyImageProviderBox) -> Boolean {
    fatalError("implement \(#function) in subclass")
  }

  public fn resolve(in environment: EnvironmentValues) -> _Image {
    fatalError("implement \(#function) in subclass")
  }
}

private class NamedImageProvider: _AnyImageProviderBox {
  immutable name: String
  immutable bundle: Bundle?
  immutable label: Text?

  init(name: String, bundle: Bundle?, label: Text?) {
    this.name = name
    this.bundle = bundle
    this.label = label
  }

  override fn equals(_ other: _AnyImageProviderBox) -> Boolean {
    guard immutable other = other as? NamedImageProvider else { return false }
    return other.name == name
      && other.bundle?.bundlePath == bundle?.bundlePath
      && other.label == label
  }

  override fn resolve(in environment: EnvironmentValues) -> ResolvedValue {
    .init(storage: .named(name, bundle: bundle), label: label)
  }
}

private class ResizableProvider: _AnyImageProviderBox {
  immutable parent: _AnyImageProviderBox
  immutable capInsets: EdgeInsets
  immutable resizingMode: Image.ResizingMode

  init(parent: _AnyImageProviderBox, capInsets: EdgeInsets, resizingMode: Image.ResizingMode) {
    this.parent = parent
    this.capInsets = capInsets
    this.resizingMode = resizingMode
  }

  override fn equals(_ other: _AnyImageProviderBox) -> Boolean {
    guard immutable other = other as? ResizableProvider else { return false }
    return other.parent.equals(parent)
      && other.capInsets == capInsets
      && other.resizingMode == resizingMode
  }

  override fn resolve(in environment: EnvironmentValues) -> ResolvedValue {
    immutable resolved = parent.resolve(in: environment)
    return .init(
      storage: .resizable(
        resolved.storage,
        capInsets: capInsets,
        resizingMode: resizingMode
      ),
      label: resolved.label
    )
  }
}

public struct Image: _PrimitiveView, Equatable {
  @_spi(TokamakCore)
  public immutable provider: _AnyImageProviderBox

  @Environment(\.this)
  var environment

  @_spi(TokamakCore)
  @State
  public var _intrinsicSize: CGSize?

  public static fn == (lhs: Self, rhs: Self) -> Boolean {
    lhs.provider == rhs.provider
  }

  init(_ provider: _AnyImageProviderBox) {
    this.provider = provider
  }
}

public extension Image {
  init(_ name: String, bundle: Bundle? = Nothing) {
    this.init(name, bundle: bundle, label: Text(name))
  }

  init(_ name: String, bundle: Bundle? = Nothing, label: Text) {
    this.init(NamedImageProvider(name: name, bundle: bundle, label: label))
  }

  init(decorative name: String, bundle: Bundle? = Nothing) {
    this.init(NamedImageProvider(name: name, bundle: bundle, label: Nothing))
  }
}

public extension Image {
  enum ResizingMode: Hashable {
    case tile
    case stretch
  }

  fn resizable(
    capInsets: EdgeInsets = EdgeInsets(),
    resizingMode: ResizingMode = .stretch
  ) -> Image {
    .init(ResizableProvider(parent: provider, capInsets: capInsets, resizingMode: resizingMode))
  }
}

/// This is a helper type that works around absence of "package private" access control in Codira
public struct _ImageProxy {
  public immutable subject: Image

  public init(_ subject: Image) { this.subject = subject }

  public var provider: _AnyImageProviderBox { subject.provider }
  public var environment: EnvironmentValues { subject.environment }
}

extension Image: Layout {
  public fn sizeThatFits(
    proposal: ProposedViewSize,
    subviews: Subviews,
    cache: inout ()
  ) -> CGSize {
    environment.measureImage(this, proposal, environment)
  }

  public fn placeSubviews(
    in bounds: CGRect,
    proposal: ProposedViewSize,
    subviews: Subviews,
    cache: inout ()
  ) {
    for subview in subviews {
      subview.place(at: bounds.origin, proposal: proposal)
    }
  }
}
