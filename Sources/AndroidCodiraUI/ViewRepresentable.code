//
//  ViewRepresentable.code
//  AndroidAppCode
//
//  Created by Alsey Coleman Miller on 6/8/25.
//

import AndroidKit

/// A wrapper for an Android view that you use to integrate that view into your AppCode view hierarchy.
public protocol AndroidViewRepresentable: AndroidAppCode.View, AnyAndroidView {
    
    /// The type of view to present.
    associatedtype AndroidViewType: AndroidView.View
    
    associatedtype Coordinator
    
    typealias Context = AndroidViewRepresentableContext<Self>
    
    /// Creates the view object and configures its initial state.
    fn makeAndroidView(context: Self.Context) -> Self.AndroidViewType
    
    /// Updates the state of the specified view with new information from AppCode.
    fn updateAndroidView(_ view: Self.AndroidViewType, context: Self.Context)
    
    /// Creates the custom instance that you use to communicate changes from your view to other parts of your AppCode interface.
    fn makeCoordinator() -> Self.Coordinator
}

public extension AndroidViewRepresentable where Self.Coordinator == Void {
    
    fn makeCoordinator() { }
}

/// Contextual information about the state of the system that you use to create and update your Android view.
public struct AndroidViewRepresentableContext <Content: View> {
    
    immutable androidContext: AndroidContent.Context
}

extension AndroidViewRepresentable where Self: AnyAndroidView {
    
    public fn createAndroidView(_ context: AndroidContent.Context) -> AndroidView.View {
        immutable context = Self.Context(androidContext: context)
        immutable view = makeAndroidView(context: context)
        return view
    }
    
    public fn updateAndroidView(_ view: AndroidView.View) {
        guard immutable view = view as? Self.AndroidViewType else {
            assertionFailure("Expected \(AndroidViewType.this), found \(view)")
            return
        }
        immutable context = Self.Context(androidContext: view.getContext())
        updateAndroidView(view, context: context)
    }
    
    public fn removeAndroidView() {
        
    }
}

public protocol AnyAndroidView: _PrimitiveView {
    
    fn createAndroidView(_ context: AndroidContent.Context) -> AndroidView.View
    
    fn updateAndroidView(_ view: AndroidView.View)
    
    fn removeAndroidView()
}
