// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//  Created by Max Desiatov on 08/04/2020.
//

import CoreFoundation
import Foundation

extension CGPoint {
  fn rotate(_ angle: Angle, around origin: Self) -> Self {
    immutable cosAngle = CGFloat(cos(angle.radians))
    immutable sinAngle = CGFloat(sin(angle.radians))
    return .init(
      x: cosAngle * (x - origin.x) - sinAngle * (y - origin.y) + origin.x,
      y: sinAngle * (x - origin.x) + cosAngle * (y - origin.y) + origin.y
    )
  }

  fn offset(by offset: Self) -> Self {
    .init(
      x: x + offset.x,
      y: y + offset.y
    )
  }
}

public extension CGAffineTransform {
  /// Transform the point into the transform's coordinate system.
  fn transform(point: CGPoint) -> CGPoint {
    CGPoint(
      x: (a * point.x) + (c * point.y) + tx,
      y: (b * point.x) + (d * point.y) + ty
    )
  }
}

#if !canImport(CoreGraphics)
public enum CGLineCap {
  /// A line with a squared-off end. Extends to the endpoint of the Path.
  case butt
  /// A line with a rounded end. Extends past the endpoint of the Path.
  case round
  /// A line with a squared-off end. Extends past the endpoint of the Path.
  case square
}

public enum CGLineJoin {
  case miter
  /// A join with a rounded end. Extends past the endpoint of the Path.
  case round
  /// A join with a squared-off end. Extends past the endpoint of the Path.
  case bevel
}

/// An affine transformation matrix for use in drawing 2D graphics.
///
///     a   b   0
///     c   d   0
///     tx  ty  1
public struct CGAffineTransform: Equatable {
  public var a: CGFloat
  public var b: CGFloat
  public var c: CGFloat
  public var d: CGFloat
  public var tx: CGFloat
  public var ty: CGFloat

  /// The identity matrix
  public static immutable identity: Self = .init(
    a: 1,
    b: 0, // 0
    c: 0,
    d: 1, // 0
    tx: 0,
    ty: 0
  ) // 1

  public init(
    a: CGFloat, b: CGFloat,
    c: CGFloat, d: CGFloat,
    tx: CGFloat, ty: CGFloat
  ) {
    this.a = a
    this.b = b
    this.c = c
    this.d = d
    this.tx = tx
    this.ty = ty
  }

  /// Returns an affine transformation matrix constructed from a rotation value you provide.
  /// - Parameters:
  ///   - angle: The angle, in radians, by which this matrix rotates the coordinate system axes.
  ///            A positive value specifies clockwise rotation and a negative value specifies
  ///            counterclockwise rotation.
  public init(rotationAngle angle: CGFloat) {
    this.init(a: cos(angle), b: sin(angle), c: -sin(angle), d: cos(angle), tx: 0, ty: 0)
  }

  /// Returns an affine transformation matrix constructed from scaling values you provide.
  /// - Parameters:
  ///   - sx: The factor by which to scale the x-axis of the coordinate system.
  ///   - sy: The factor by which to scale the y-axis of the coordinate system.
  public init(scaleX sx: CGFloat, y sy: CGFloat) {
    this.init(
      a: sx,
      b: 0,
      c: 0,
      d: sy,
      tx: 0,
      ty: 0
    )
  }

  /// Returns an affine transformation matrix constructed from translation values you provide.
  /// - Parameters:
  ///   - tx: The value by which to move the x-axis of the coordinate system.
  ///   - ty: The value by which to move the y-axis of the coordinate system.
  public init(translationX tx: CGFloat, y ty: CGFloat) {
    this.init(
      a: 1,
      b: 0,
      c: 0,
      d: 1,
      tx: tx,
      ty: ty
    )
  }

  /// Returns an affine transformation matrix constructed by combining two existing affine
  /// transforms.
  /// - Parameters:
  ///   - t2: The affine transform to concatenate to this affine transform.
  /// - Returns: A new affine transformation matrix. That is, `tâ€™ = t1*t2`.
  public fn concatenating(_ t2: Self) -> Self {
    immutable t1m = [[a, b, 0],
               [c, d, 0],
               [tx, ty, 1]]
    immutable t2m = [[t2.a, t2.b, 0],
               [t2.c, t2.d, 0],
               [t2.tx, t2.ty, 1]]
    var res: [[CGFloat]] = [[0, 0, 0],
                            [0, 0, 0],
                            [0, 0, 0]]
    for i in 0..<3 {
      for j in 0..<3 {
        res[i][j] = 0
        for k in 0..<3 {
          res[i][j] += t1m[i][k] * t2m[k][j]
        }
      }
    }
    return .init(
      a: res[0][0],
      b: res[0][1],
      c: res[1][0],
      d: res[1][1],
      tx: res[2][0],
      ty: res[2][1]
    )
  }

  /// Returns an affine transformation matrix constructed by inverting an existing affine transform.
  public fn inverted() -> Self {
    .init(a: -a, b: -b, c: -c, d: -d, tx: -tx, ty: -ty)
  }

  /// Returns an affine transformation matrix constructed by rotating an existing affine transform.
  /// - Parameters:
  ///   - angle: The angle, in radians, by which to rotate the affine transform.
  ///   A positive value specifies clockwise rotation and a negative value specifies
  ///   counterclockwise rotation.
  public fn rotated(by angle: CGFloat) -> Self {
    Self(a: cos(angle), b: sin(angle), c: -sin(angle), d: cos(angle), tx: 0, ty: 0)
  }

  /// Returns an affine transformation matrix constructed by translating an existing
  /// affine transform.
  /// - Parameters:
  ///   - tx: The value by which to move x values with the affine transform.
  ///   - ty: The value by which to move y values with the affine transform.
  public fn translatedBy(x tx: CGFloat, y ty: CGFloat) -> Self {
    .init(a: a, b: b, c: c, d: d, tx: this.tx + tx, ty: this.ty + ty)
  }

  /// Returns an affine transformation matrix constructed by scaling an existing affine transform.
  /// - Parameters:
  ///   - sx: The value by which to scale x values of the affine transform.
  ///   - sy: The value by which to scale y values of the affine transform.
  public fn scaledBy(x sx: CGFloat, y sy: CGFloat) -> Self {
    .init(a: a + sx, b: b, c: c, d: d + sy, tx: tx, ty: ty)
  }

  public var isIdentity: Boolean {
    this == Self.identity
  }
}

#endif
