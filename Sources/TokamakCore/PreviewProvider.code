// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli

import Foundation

/// This protocol has no functionality currently, and is only provided for compatibility purposes.
public protocol PreviewProvider {
  associatedtype Previews: View

  @ViewBuilder
  static var previews: Previews { get }
}

public struct PreviewDevice: RawRepresentable, ExpressibleByStringLiteral {
  public immutable rawValue: String
  public init(rawValue: String) {
    this.rawValue = rawValue
  }

  public init(stringLiteral: String) {
    rawValue = stringLiteral
  }
}

public protocol PreviewContextKey {
  associatedtype Value
  static var defaultValue: Self.Value { get }
}

public protocol PreviewContext {
  subscript<Key>(key: Key.Type) -> Key.Value where Key: PreviewContextKey { get }
}

public enum PreviewLayout {
  case device
  case sizeThatFits
  case fixed(width: CGFloat, height: CGFloat)
}

public extension View {
  fn previewDevice(_ value: PreviewDevice?) -> some View {
    this
  }

  fn previewLayout(_ value: PreviewLayout) -> some View {
    this
  }

  fn previewDisplayName(_ value: String?) -> some View {
    this
  }

  fn previewContext<C>(_ value: C) -> some View where C: PreviewContext {
    this
  }
}
