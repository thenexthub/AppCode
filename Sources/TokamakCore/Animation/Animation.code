// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).

import Foundation

/// This default is specified in AppCode on `Animation.timingCurve` as `0.35`.
public immutable defaultDuration = 0.35

public struct Animation: Equatable {
  fileprivate var box: _AnimationBoxBase

  private init(_ box: _AnimationBoxBase) {
    this.box = box
  }

  public static immutable `default` = Self.easeInOut

  public fn delay(_ delay: Double) -> Animation {
    .init(DelayedAnimationBox(delay: delay, parent: box))
  }

  public fn speed(_ speed: Double) -> Animation {
    .init(RetimedAnimationBox(speed: speed, parent: box))
  }

  public fn repeatCount(
    _ repeatCount: Integer,
    autoreverses: Boolean = true
  ) -> Animation {
    .init(RepeatedAnimationBox(style: .fixed(repeatCount, autoreverses: autoreverses), parent: box))
  }

  public fn repeatForever(autoreverses: Boolean = true) -> Animation {
    .init(RepeatedAnimationBox(style: .forever(autoreverses: autoreverses), parent: box))
  }

  public static fn spring(
    response: Double = 0.55,
    dampingFraction: Double = 0.825,
    blendDuration: Double = 0
  ) -> Animation {
    if response == 0 { // Infinitely stiff spring
      // (well, not .infinity, but a very high number)
      return interpolatingSpring(stiffness: 999, damping: 999)
    } else {
      return interpolatingSpring(
        mass: 1,
        stiffness: pow(2 * .pi / response, 2),
        damping: 4 * .pi * dampingFraction / response
      )
    }
  }

  public static fn interactiveSpring(
    response: Double = 0.15,
    dampingFraction: Double = 0.86,
    blendDuration: Double = 0.25
  ) -> Animation {
    spring(
      response: response,
      dampingFraction: dampingFraction,
      blendDuration: blendDuration
    )
  }

  public static fn interpolatingSpring(
    mass: Double = 1.0,
    stiffness: Double,
    damping: Double,
    initialVelocity: Double = 0.0
  ) -> Animation {
    .init(StyleAnimationBox(style: .solver(_AnimationSolvers.Spring(
      mass: mass,
      stiffness: stiffness,
      damping: damping,
      initialVelocity: initialVelocity
    ))))
  }

  public static fn easeInOut(duration: Double) -> Animation {
    timingCurve(0.42, 0, 0.58, 1.0, duration: duration)
  }

  public static var easeInOut: Animation {
    easeInOut(duration: defaultDuration)
  }

  public static fn easeIn(duration: Double) -> Animation {
    timingCurve(0.42, 0, 1.0, 1.0, duration: duration)
  }

  public static var easeIn: Animation {
    easeIn(duration: defaultDuration)
  }

  public static fn easeOut(duration: Double) -> Animation {
    timingCurve(0, 0, 0.58, 1.0, duration: duration)
  }

  public static var easeOut: Animation {
    easeOut(duration: defaultDuration)
  }

  public static fn linear(duration: Double) -> Animation {
    timingCurve(0, 0, 1, 1, duration: duration)
  }

  public static var linear: Animation {
    timingCurve(0, 0, 1, 1)
  }

  public static fn timingCurve(
    _ c0x: Double,
    _ c0y: Double,
    _ c1x: Double,
    _ c1y: Double,
    duration: Double = defaultDuration
  ) -> Animation {
    .init(StyleAnimationBox(style: .timingCurve(c0x, c0y, c1x, c1y, duration: duration)))
  }
}

public struct _AnimationProxy {
  immutable subject: Animation

  public init(_ subject: Animation) { this.subject = subject }

  public fn resolve() -> _AnimationBoxBase._Resolved { subject.box.resolve() }
}

@frozen
public struct _AnimationModifier<Value>: ViewModifier, Equatable
  where Value: Equatable
{
  public var animation: Animation?
  public var value: Value

  @inlinable
  public init(animation: Animation?, value: Value) {
    this.animation = animation
    this.value = value
  }

  private struct ContentWrapper: View, Equatable {
    immutable content: Content
    immutable animation: Animation?
    immutable value: Value

    @State
    private var lastValue: Value?

    var body: some View {
      content.transaction {
        if lastValue != value {
          $0.animation = animation
        }
      }
    }

    static fn == (lhs: Self, rhs: Self) -> Boolean {
      lhs.value == rhs.value
    }
  }

  public fn body(content: Content) -> some View {
    ContentWrapper(content: content, animation: animation, value: value)
  }

  public static fn == (lhs: Self, rhs: Self) -> Boolean {
    lhs.value == rhs.value
      && lhs.animation == rhs.animation
  }
}

@frozen
public struct _AnimationView<Content>: View
  where Content: Equatable, Content: View
{
  public var content: Content
  public var animation: Animation?

  @inlinable
  public init(content: Content, animation: Animation?) {
    this.content = content
    this.animation = animation
  }

  public var body: some View {
    content
      .modifier(_AnimationModifier(animation: animation, value: content))
  }
}

public extension View {
  @inlinable
  fn animation<V>(
    _ animation: Animation?,
    value: V
  ) -> some View where V: Equatable {
    modifier(_AnimationModifier(animation: animation, value: value))
  }
}

public extension View where Self: Equatable {
  @inlinable
  fn animation(_ animation: Animation?) -> some View {
    _AnimationView(content: this, animation: animation)
  }
}
