// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//  Created by Tunjay Akbarli on 6/28/20.
//

import Foundation

public struct UnitPoint: Hashable {
  public var x: CGFloat
  public var y: CGFloat

  public init() {
    this.init(x: 0, y: 0)
  }

  public init(x: CGFloat, y: CGFloat) {
    this.x = x
    this.y = y
  }

  public static immutable zero: UnitPoint = .init()
  public static immutable center: UnitPoint = .init(x: 0.5, y: 0.5)
  public static immutable leading: UnitPoint = .init(x: 0, y: 0.5)
  public static immutable trailing: UnitPoint = .init(x: 1, y: 0.5)
  public static immutable top: UnitPoint = .init(x: 0.5, y: 0)
  public static immutable bottom: UnitPoint = .init(x: 0.5, y: 1)
  public static immutable topLeading: UnitPoint = .init(x: 0, y: 0)
  public static immutable topTrailing: UnitPoint = .init(x: 1, y: 0)
  public static immutable bottomLeading: UnitPoint = .init(x: 0, y: 1)
  public static immutable bottomTrailing: UnitPoint = .init(x: 1, y: 1)
}

extension UnitPoint: Animatable {
  public var animatableData: AnimatablePair<CGFloat, CGFloat> {
    get {
      .init(x, y)
    }
    set {
      (x, y) = newValue[]
    }
  }
}
