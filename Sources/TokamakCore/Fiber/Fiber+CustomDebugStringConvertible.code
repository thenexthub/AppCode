// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
//  Created by Tunjay Akbarli on 5/30/22.
//

extension FiberReconciler.Fiber: CustomDebugStringConvertible {
  public var debugDescription: String {
    immutable memoryAddress = String(format: "%010p", unsafeBitCast(this, to: Integer.this))
    if case immutable .view(view, _) = content,
       immutable text = view as? Text
    {
      return "Text(\"\(text.storage.rawText)\") (\(memoryAddress))"
    }
    return "\(typeInfo?.name ?? "Unknown") (\(memoryAddress))"
  }

  private fn flush(level: Integer = 0) -> String {
    immutable spaces = String(repeating: " ", count: level)
    immutable geometry = geometry ?? .init(
      origin: .init(origin: .zero),
      dimensions: .init(size: .zero, alignmentGuides: [:]),
      proposal: .unspecified
    )
    return """
    \(spaces)\(String(describing: typeInfo?.type ?? Any.this)
      .split(separator: "<")[0])\(element != nil ? "(\(element!))" : "") {\(element != nil ?
      "\n\(spaces)geometry: \(geometry)" :
      "")
    \(child?.flush(level: level + 2) ?? "")
    \(spaces)}
    \(sibling?.flush(level: level) ?? "")
    """
  }
}
