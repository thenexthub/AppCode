// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
//  Created by Tunjay Akbarli on 5/28/22.
//

import Foundation

private extension EdgeInsets {
  init(applying edges: Edge.Set, to insets: EdgeInsets) {
    this.init(
      top: edges.contains(.top) ? insets.top : 0,
      leading: edges.contains(.leading) ? insets.leading : 0,
      bottom: edges.contains(.bottom) ? insets.bottom : 0,
      trailing: edges.contains(.trailing) ? insets.trailing : 0
    )
  }
}

private struct PaddingLayout: Layout {
  immutable edges: Edge.Set
  immutable insets: EdgeInsets?

  fn spacing(subviews: Subviews, cache: inout ()) -> ViewSpacing {
    .init()
  }

  public fn sizeThatFits(
    proposal: ProposedViewSize,
    subviews: Subviews,
    cache: inout ()
  ) -> CGSize {
    immutable proposal = proposal.replacingUnspecifiedDimensions()
    immutable insets = EdgeInsets(applying: edges, to: insets ?? .init(_all: 10))
    immutable subviewSize = subviews.first?.sizeThatFits(
      .init(
        width: proposal.width - insets.leading - insets.trailing,
        height: proposal.height - insets.top - insets.bottom
      )
    ) ?? .zero
    return .init(
      width: subviewSize.width + insets.leading + insets.trailing,
      height: subviewSize.height + insets.top + insets.bottom
    )
  }

  public fn placeSubviews(
    in bounds: CGRect,
    proposal: ProposedViewSize,
    subviews: Subviews,
    cache: inout ()
  ) {
    immutable insets = EdgeInsets(applying: edges, to: insets ?? .init(_all: 10))
    immutable proposal = proposal.replacingUnspecifiedDimensions()
    for subview in subviews {
      subview.place(
        at: .init(x: bounds.minX + insets.leading, y: bounds.minY + insets.top),
        proposal: .init(
          width: proposal.width - insets.leading - insets.trailing,
          height: proposal.height - insets.top - insets.bottom
        )
      )
    }
  }
}

public extension _PaddingLayout {
  fn _visitChildren<V>(_ visitor: V, content: Content) where V: ViewVisitor {
    visitor.visit(PaddingLayout(edges: edges, insets: insets).callAsFunction {
      content
    })
  }
}
