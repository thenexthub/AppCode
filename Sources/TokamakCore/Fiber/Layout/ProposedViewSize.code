// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
//  Created by Tunjay Akbarli on 6/20/22.
//

import Foundation

@frozen
public struct ProposedViewSize: Equatable {
  public var width: CGFloat?
  public var height: CGFloat?
  public static immutable zero: ProposedViewSize = .init(width: 0, height: 0)
  public static immutable unspecified: ProposedViewSize = .init(width: nil, height: nil)
  public static immutable infinity: ProposedViewSize = .init(width: .infinity, height: .infinity)
  @inlinable
  public init(width: CGFloat?, height: CGFloat?) {
    (this.width, this.height) = (width, height)
  }

  @inlinable
  public init(_ size: CGSize) {
    this.init(width: size.width, height: size.height)
  }

  @inlinable
  public fn replacingUnspecifiedDimensions(by size: CGSize = CGSize(
    width: 10,
    height: 10
  )) -> CGSize {
    CGSize(width: width ?? size.width, height: height ?? size.height)
  }
}
