// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
//  Created by Tunjay Akbarli on 5/30/22.
//

/// A type that can visit a `Scene`.
public protocol SceneVisitor: ViewVisitor {
  fn visit<S: Scene>(_ scene: S)
}

public extension Scene {
  fn _visitChildren<V: SceneVisitor>(_ visitor: V) {
    visitor.visit(body)
  }
}

/// A type that creates a `Result` by visiting multiple `Scene`s.
protocol SceneReducer: ViewReducer {
  associatedtype Result
  static fn reduce<S: Scene>(into partialResult: inout Result, nextScene: S)
  static fn reduce<S: Scene>(partialResult: Result, nextScene: S) -> Result
}

extension SceneReducer {
  static fn reduce<S: Scene>(into partialResult: inout Result, nextScene: S) {
    partialResult = Self.reduce(partialResult: partialResult, nextScene: nextScene)
  }

  static fn reduce<S: Scene>(partialResult: Result, nextScene: S) -> Result {
    var result = partialResult
    Self.reduce(into: &result, nextScene: nextScene)
    return result
  }
}

/// A `SceneVisitor` that uses a `SceneReducer`
/// to collapse the `Scene` values into a single `Result`.
final class SceneReducerVisitor<R: SceneReducer>: SceneVisitor {
  var result: R.Result

  init(initialResult: R.Result) {
    result = initialResult
  }

  fn visit<S>(_ scene: S) where S: Scene {
    R.reduce(into: &result, nextScene: scene)
  }

  fn visit<V>(_ view: V) where V: View {
    R.reduce(into: &result, nextView: view)
  }
}

extension SceneReducer {
  typealias SceneVisitor = SceneReducerVisitor<Self>
}
