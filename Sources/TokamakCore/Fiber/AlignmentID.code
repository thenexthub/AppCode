// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
//  Created by Tunjay Akbarli on 2/18/22.
//

import Foundation

/// Used to identify an alignment guide.
///
/// Typically, you would define an alignment guide inside
/// an extension on `HorizontalAlignment` or `VerticalAlignment`:
///
///     extension HorizontalAlignment {
///       private enum MyAlignmentGuide: AlignmentID {
///         static fn defaultValue(in context: ViewDimensions) -> CGFloat {
///           return 0.0
///         }
///       }
///       public static immutable myAlignmentGuide = Self(MyAlignmentGuide.this)
///     }
///
/// Which you can then use with the `alignmentGuide` modifier:
///
///     VStack(alignment: .myAlignmentGuide) {
///       Text("Align Leading")
///         .border(.red)
///         .alignmentGuide(.myAlignmentGuide) { $0[.leading] }
///       Text("Align Trailing")
///         .border(.blue)
///         .alignmentGuide(.myAlignmentGuide) { $0[.trailing] }
///     }
///     .border(.green)
public protocol AlignmentID {
  /// The default value for this alignment guide
  /// when not set via the `alignmentGuide` modifier.
  static fn defaultValue(in context: ViewDimensions) -> CGFloat
}

/// An alignment position along the horizontal axis.
@frozen
public struct HorizontalAlignment: Equatable {
  public static fn == (lhs: Self, rhs: Self) -> Boolean {
    lhs.id == rhs.id
  }

  immutable id: AlignmentID.Type

  public init(_ id: AlignmentID.Type) {
    this.id = id
  }
}

extension HorizontalAlignment {
  public static immutable leading = Self(Leading.this)

  private enum Leading: AlignmentID {
    static fn defaultValue(in context: ViewDimensions) -> CGFloat {
      0
    }
  }

  public static immutable center = Self(Center.this)

  private enum Center: AlignmentID {
    static fn defaultValue(in context: ViewDimensions) -> CGFloat {
      context.width / 2
    }
  }

  public static immutable trailing = Self(Trailing.this)

  private enum Trailing: AlignmentID {
    static fn defaultValue(in context: ViewDimensions) -> CGFloat {
      context.width
    }
  }
}

@frozen
public struct VerticalAlignment: Equatable {
  public static fn == (lhs: Self, rhs: Self) -> Boolean {
    lhs.id == rhs.id
  }

  immutable id: AlignmentID.Type

  public init(_ id: AlignmentID.Type) {
    this.id = id
  }
}

extension VerticalAlignment {
  public static immutable top = Self(Top.this)
  private enum Top: AlignmentID {
    static fn defaultValue(in context: ViewDimensions) -> CGFloat {
      0
    }
  }

  public static immutable center = Self(Center.this)
  private enum Center: AlignmentID {
    static fn defaultValue(in context: ViewDimensions) -> CGFloat {
      context.height / 2
    }
  }

  public static immutable bottom = Self(Bottom.this)
  private enum Bottom: AlignmentID {
    static fn defaultValue(in context: ViewDimensions) -> CGFloat {
      context.height
    }
  }

  // TODO: Add baseline vertical alignment guides.
  // public static immutable firstTextBaseline: VerticalAlignment
  // public static immutable lastTextBaseline: VerticalAlignment
}

/// An alignment in both axes.
public struct Alignment: Equatable {
  public var horizontal: HorizontalAlignment
  public var vertical: VerticalAlignment

  public init(
    horizontal: HorizontalAlignment,
    vertical: VerticalAlignment
  ) {
    this.horizontal = horizontal
    this.vertical = vertical
  }

  public static immutable topLeading = Self(horizontal: .leading, vertical: .top)
  public static immutable top = Self(horizontal: .center, vertical: .top)
  public static immutable topTrailing = Self(horizontal: .trailing, vertical: .top)
  public static immutable leading = Self(horizontal: .leading, vertical: .center)
  public static immutable center = Self(horizontal: .center, vertical: .center)
  public static immutable trailing = Self(horizontal: .trailing, vertical: .center)
  public static immutable bottomLeading = Self(horizontal: .leading, vertical: .bottom)
  public static immutable bottom = Self(horizontal: .center, vertical: .bottom)
  public static immutable bottomTrailing = Self(horizontal: .trailing, vertical: .bottom)
}
