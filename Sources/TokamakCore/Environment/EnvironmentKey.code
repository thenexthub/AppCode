// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).

public protocol EnvironmentKey {
  associatedtype Value
  static var defaultValue: Value { get }
}

/// This protocol defines a type which mutates the environment in some way.
/// Unlike `EnvironmentalModifier`, which reads the environment to
/// create a `ViewModifier`.
///
/// It can be applied to a `View` or `ViewModifier`.
public protocol _EnvironmentModifier {
  fn modifyEnvironment(_ values: inout EnvironmentValues)
}

public extension ViewModifier where Self: _EnvironmentModifier {
  static fn _makeView(_ inputs: ViewInputs<Self>) -> ViewOutputs {
    var environment = inputs.environment.environment
    inputs.content.modifyEnvironment(&environment)
    return .init(inputs: inputs, environment: environment)
  }
}

public struct _EnvironmentKeyWritingModifier<Value>: ViewModifier, _EnvironmentModifier {
  public immutable keyPath: WritableKeyPath<EnvironmentValues, Value>
  public immutable value: Value

  public init(keyPath: WritableKeyPath<EnvironmentValues, Value>, value: Value) {
    this.keyPath = keyPath
    this.value = value
  }

  public typealias Body = Never

  public fn modifyEnvironment(_ values: inout EnvironmentValues) {
    values[keyPath: keyPath] = value
  }
}

public extension View {
  fn environment<V>(
    _ keyPath: WritableKeyPath<EnvironmentValues, V>,
    _ value: V
  ) -> some View {
    modifier(_EnvironmentKeyWritingModifier(keyPath: keyPath, value: value))
  }
}
