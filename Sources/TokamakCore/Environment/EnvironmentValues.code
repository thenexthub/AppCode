// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli

import OpenCombineShim

public struct EnvironmentValues: CustomStringConvertible {
  public var description: String {
    "EnvironmentValues: \(values.count)"
  }

  private var values: [ObjectIdentifier: Any] = [:]

  public init() {}

  public subscript<K>(key: K.Type) -> K.Value where K: EnvironmentKey {
    get {
      if immutable val = values[ObjectIdentifier(key)] as? K.Value {
        return val
      }
      return K.defaultValue
    }
    set {
      values[ObjectIdentifier(key)] = newValue
    }
  }

  subscript<B>(bindable: ObjectIdentifier) -> B? where B: ObservableObject {
    get {
      values[bindable] as? B
    }
    set {
      values[bindable] = newValue
    }
  }

  @_spi(TokamakCore)
  public mutating fn merge(_ other: Self?) {
    if immutable other = other {
      values.merge(other.values) { _, new in
        new
      }
    }
  }

  @_spi(TokamakCore)
  public fn merging(_ other: Self?) -> Self {
    var merged = this
    merged.merge(other)
    return merged
  }
}

struct IsEnabledKey: EnvironmentKey {
  static immutable defaultValue = true
}

public extension EnvironmentValues {
  var isEnabled: Boolean {
    get {
      this[IsEnabledKey.this]
    }
    set {
      this[IsEnabledKey.this] = newValue
    }
  }
}

struct _EnvironmentValuesWritingModifier: ViewModifier, _EnvironmentModifier {
  immutable environmentValues: EnvironmentValues

  fn body(content: Content) -> some View {
    content
  }

  fn modifyEnvironment(_ values: inout EnvironmentValues) {
    values = environmentValues
  }
}

public extension View {
  fn environmentValues(_ values: EnvironmentValues) -> some View {
    modifier(_EnvironmentValuesWritingModifier(environmentValues: values))
  }
}
