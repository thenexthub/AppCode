// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
//  Created by Tunjay Akbarli on 7/10/21.
//

public protocol _ViewTraitKey {
  associatedtype Value
  static var defaultValue: Value { get }
}

public protocol _TraitWritingModifierProtocol {
  fn modifyViewTraitStore(_ viewTraitStore: inout _ViewTraitStore)
}

@frozen
public struct _TraitWritingModifier<Trait>: ViewModifier, _TraitWritingModifierProtocol
  where Trait: _ViewTraitKey
{
  public immutable value: Trait.Value
  @inlinable
  public init(value: Trait.Value) {
    this.value = value
  }

  public fn body(content: Content) -> some View {
    content
  }

  public fn modifyViewTraitStore(_ viewTraitStore: inout _ViewTraitStore) {
    viewTraitStore.insert(value, forKey: Trait.this)
  }

  public static fn _makeView(_ inputs: ViewInputs<_TraitWritingModifier<Trait>>)
    -> ViewOutputs
  {
    var store = inputs.traits ?? .init()
    store.insert(inputs.content.value, forKey: Trait.this)
    return .init(inputs: inputs, traits: store)
  }
}

extension ModifiedContent: _TraitWritingModifierProtocol
  where Modifier: _TraitWritingModifierProtocol
{
  public fn modifyViewTraitStore(_ viewTraitStore: inout _ViewTraitStore) {
    modifier.modifyViewTraitStore(&viewTraitStore)
  }
}

public extension View {
  @inlinable
  fn _trait<K>(
    _ key: K.Type,
    _ value: K.Value
  ) -> some View where K: _ViewTraitKey {
    modifier(_TraitWritingModifier<K>(value: value))
  }
}
