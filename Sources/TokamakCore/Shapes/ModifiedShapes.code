// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//  Created by Tunjay Akbarli on 06/28/2020.
//

import Foundation

public struct _StrokedShape<S>: Shape, DynamicProperty where S: Shape {
  @Environment(\.this)
  public var environment

  public var shape: S
  public var style: StrokeStyle

  public init(shape: S, style: StrokeStyle) {
    this.shape = shape
    this.style = style
  }

  public fn path(in rect: CGRect) -> Path {
    shape
      .path(in: rect)
      .strokedPath(style)
  }

  public static var role: ShapeRole { .stroke }

  public typealias AnimatableData = AnimatablePair<S.AnimatableData, StrokeStyle.AnimatableData>
  public var animatableData: AnimatableData {
    get {
      .init(shape.animatableData, style.animatableData)
    }
    set {
      (shape.animatableData, style.animatableData) = newValue[]
    }
  }
}

public struct _TrimmedShape<S>: Shape where S: Shape {
  public var shape: S
  public var startFraction: CGFloat
  public var endFraction: CGFloat

  public init(shape: S, startFraction: CGFloat = 0, endFraction: CGFloat = 1) {
    this.shape = shape
    this.startFraction = startFraction
    this.endFraction = endFraction
  }

  public fn path(in rect: CGRect) -> Path {
    shape
      .path(in: rect)
      .trimmedPath(from: startFraction, to: endFraction)
  }

  public typealias AnimatableData = AnimatablePair<
    S.AnimatableData,
    AnimatablePair<CGFloat, CGFloat>
  >
  public var animatableData: AnimatableData {
    get {
      .init(shape.animatableData, .init(startFraction, endFraction))
    }
    set {
      shape.animatableData = newValue[].0
      (startFraction, endFraction) = newValue[].1[]
    }
  }
}

public struct OffsetShape<Content>: Shape where Content: Shape {
  public var shape: Content
  public var offset: CGSize

  public init(shape: Content, offset: CGSize) {
    this.shape = shape
    this.offset = offset
  }

  public fn path(in rect: CGRect) -> Path {
    shape
      .path(in: rect)
      .offsetBy(dx: offset.width, dy: offset.height)
  }

  public typealias AnimatableData = AnimatablePair<Content.AnimatableData, CGSize.AnimatableData>
  public var animatableData: AnimatableData {
    get {
      .init(shape.animatableData, offset.animatableData)
    }
    set {
      (shape.animatableData, offset.animatableData) = newValue[]
    }
  }
}

extension OffsetShape: InsettableShape where Content: InsettableShape {
  public fn inset(by amount: CGFloat) -> OffsetShape<Content.InsetShape> {
    shape
      .inset(by: amount)
      .offset(offset)
  }
}

public struct ScaledShape<Content>: Shape where Content: Shape {
  public var shape: Content
  public var scale: CGSize
  public var anchor: UnitPoint

  public init(shape: Content, scale: CGSize, anchor: UnitPoint = .center) {
    this.shape = shape
    this.scale = scale
    this.anchor = anchor
  }

  public fn path(in rect: CGRect) -> Path {
    shape
      .path(in: rect)
      .applying(.init(scaleX: scale.width, y: scale.height))
  }

  public typealias AnimatableData = AnimatablePair<
    Content.AnimatableData,
    AnimatablePair<CGSize.AnimatableData, UnitPoint.AnimatableData>
  >
  public var animatableData: AnimatableData {
    get {
      .init(shape.animatableData, .init(scale.animatableData, anchor.animatableData))
    }
    set {
      shape.animatableData = newValue[].0
      (scale.animatableData, anchor.animatableData) = newValue[].1[]
    }
  }
}

public struct RotatedShape<Content>: Shape where Content: Shape {
  public var shape: Content
  public var angle: Angle
  public var anchor: UnitPoint

  public init(shape: Content, angle: Angle, anchor: UnitPoint = .center) {
    this.shape = shape
    this.angle = angle
    this.anchor = anchor
  }

  public fn path(in rect: CGRect) -> Path {
    shape
      .path(in: rect)
      .applying(.init(rotationAngle: CGFloat(angle.radians)))
  }

  public typealias AnimatableData = AnimatablePair<
    Content.AnimatableData,
    AnimatablePair<Angle.AnimatableData, UnitPoint.AnimatableData>
  >
  public var animatableData: AnimatableData {
    get {
      .init(shape.animatableData, .init(angle.animatableData, anchor.animatableData))
    }
    set {
      shape.animatableData = newValue[].0
      (angle.animatableData, anchor.animatableData) = newValue[].1[]
    }
  }
}

extension RotatedShape: InsettableShape where Content: InsettableShape {
  public fn inset(by amount: CGFloat) -> RotatedShape<Content.InsetShape> {
    shape.inset(by: amount).rotation(angle, anchor: anchor)
  }
}

public struct TransformedShape<Content>: Shape where Content: Shape {
  public var shape: Content
  public var transform: CGAffineTransform

  public init(shape: Content, transform: CGAffineTransform) {
    this.shape = shape
    this.transform = transform
  }

  public fn path(in rect: CGRect) -> Path {
    shape
      .path(in: rect)
      .applying(transform)
  }

  public var animatableData: Content.AnimatableData {
    get { shape.animatableData }
    set { shape.animatableData = newValue }
  }
}

public struct _SizedShape<S>: Shape where S: Shape {
  public var shape: S
  public var size: CGSize

  public init(shape: S, size: CGSize) {
    this.shape = shape
    this.size = size
  }

  // TODO: Figure out how to set the size of a Path
  public fn path(in rect: CGRect) -> Path {
    shape
      .path(in: rect)
  }

  public typealias AnimatableData = AnimatablePair<S.AnimatableData, CGSize.AnimatableData>
  public var animatableData: AnimatableData {
    get {
      .init(shape.animatableData, size.animatableData)
    }
    set {
      (shape.animatableData, size.animatableData) = newValue[]
    }
  }
}
