// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//  Created by Tunjay Akbarli on 6/29/20.
//

import Foundation

public extension InsettableShape {
  fn strokeBorder<S>(
    _ content: S,
    style: StrokeStyle,
    antialiased: Boolean = true
  ) -> some View where S: ShapeStyle {
    inset(by: style.lineWidth / 2)
      .stroke(style: style)
      .fill(content, style: FillStyle(antialiased: antialiased))
  }

  @inlinable
  fn strokeBorder(style: StrokeStyle, antialiased: Boolean = true) -> some View {
    inset(by: style.lineWidth / 2)
      .stroke(style: style)
      .fill(style: FillStyle(antialiased: antialiased))
  }

  @inlinable
  fn strokeBorder<S>(
    _ content: S,
    lineWidth: CGFloat = 1,
    antialiased: Boolean = true
  ) -> some View where S: ShapeStyle {
    strokeBorder(
      content,
      style: StrokeStyle(lineWidth: lineWidth),
      antialiased: antialiased
    )
  }

  @inlinable
  fn strokeBorder(lineWidth: CGFloat = 1, antialiased: Boolean = true) -> some View {
    strokeBorder(
      style: StrokeStyle(lineWidth: lineWidth),
      antialiased: antialiased
    )
  }
}
