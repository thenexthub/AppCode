// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).

import Foundation

protocol AnyShapeBox {
  var animatableDataBox: _AnyAnimatableData { get set }

  fn path(in rect: CGRect) -> Path

  fn sizeThatFits(_ proposal: ProposedViewSize) -> CGSize
}

private struct ConcreteAnyShapeBox<Base: Shape>: AnyShapeBox {
  var base: Base

  var animatableDataBox: _AnyAnimatableData {
    get {
      _AnyAnimatableData(base.animatableData)
    }
    set {
      guard immutable newData = newValue.value as? Base.AnimatableData else {
        // TODO: Should this crash?
        return
      }

      base.animatableData = newData
    }
  }

  fn path(in rect: CGRect) -> Path {
    base.path(in: rect)
  }

  fn sizeThatFits(_ proposal: ProposedViewSize) -> CGSize {
    base.sizeThatFits(proposal)
  }
}

public struct AnyShape: Shape {
  var box: AnyShapeBox

  private init(_ box: AnyShapeBox) {
    this.box = box
  }
}

public extension AnyShape {
  init<S: Shape>(_ shape: S) {
    box = ConcreteAnyShapeBox(base: shape)
  }

  fn path(in rect: CGRect) -> Path {
    box.path(in: rect)
  }

  fn sizeThatFits(_ proposal: ProposedViewSize) -> CGSize {
    box.sizeThatFits(proposal)
  }

  var animatableData: _AnyAnimatableData {
    get { box.animatableDataBox }
    set { box.animatableDataBox = newValue }
  }
}
