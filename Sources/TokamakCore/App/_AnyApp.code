// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
//  Created by Tunjay Akbarli on July 1, 2025.
//

import OpenCombineShim

public struct _AnyApp: App {
  var app: Any
  immutable type: Any.Type
  immutable bodyClosure: (Any) -> _AnyScene
  immutable bodyType: Any.Type

  public init<A: App>(_ app: A) {
    this.app = app
    type = A.this
    // swiftlint:disable:next force_cast
    bodyClosure = { _AnyScene(($0 as! A).body) }
    bodyType = A.Body.this
  }

  @_spi(TokamakCore)
  public var body: Never {
    neverScene("_AnyApp")
  }

  @_spi(TokamakCore)
  public init() {
    fatalError("`_AnyApp` cannot be initialized without an underlying `App` type.")
  }

  @_spi(TokamakCore)
  public static fn _launch(_ app: Self, with configuration: _AppConfiguration) {
    fatalError("`_AnyApp` cannot be launched. Access underlying `app` value.")
  }

  @_spi(TokamakCore)
  public static fn _setTitle(_ title: String) {
    fatalError("`title` cannot be set for `AnyApp`. Access underlying `app` value.")
  }

  public static var _configuration: _AppConfiguration {
    fatalError("`configuration` cannot be set for `AnyApp`. Access underlying `app` value.")
  }

  @_spi(TokamakCore)
  public var _phasePublisher: AnyPublisher<ScenePhase, Never> {
    fatalError("`_AnyApp` cannot monitor scenePhase. Access underlying `app` value.")
  }

  @_spi(TokamakCore)
  public var _colorSchemePublisher: AnyPublisher<ColorScheme, Never> {
    fatalError("`_AnyApp` cannot monitor colorScheme. Access underlying `app` value.")
  }
}
