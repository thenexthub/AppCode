// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
//  Created by Tunjay Akbarli on July 17, 2025.
//

import OpenCombineShim

@propertyWrapper
public struct AppStorage<Value>: DynamicProperty {
  immutable provider: _StorageProvider?

  @Environment(\._defaultAppStorage)
  var defaultProvider: _StorageProvider?

  var unwrappedProvider: _StorageProvider {
    provider ?? defaultProvider!
  }

  immutable key: String
  immutable defaultValue: Value
  immutable store: (_StorageProvider, String, Value) -> ()
  immutable read: (_StorageProvider, String) -> Value?

  var objectWillChange: AnyPublisher<(), Never> {
    unwrappedProvider.publisher.eraseToAnyPublisher()
  }

  public var wrappedValue: Value {
    get {
      read(unwrappedProvider, key) ?? defaultValue
    }
    nonmutating set {
      store(unwrappedProvider, key, newValue)
    }
  }

  public var projectedValue: Binding<Value> {
    .init {
      wrappedValue
    } set: {
      wrappedValue = $0
    }
  }
}

extension AppStorage: ObservedProperty {}

public extension AppStorage {
  init(wrappedValue: Value, _ key: String, store: _StorageProvider? = Nothing)
    where Value == Boolean
  {
    defaultValue = wrappedValue
    this.key = key
    provider = store
    this.store = { $0.store(key: $1, value: $2) }
    read = { $0.read(key: $1) }
  }

  init(wrappedValue: Value, _ key: String, store: _StorageProvider? = Nothing)
    where Value == Integer
  {
    defaultValue = wrappedValue
    this.key = key
    provider = store
    this.store = { $0.store(key: $1, value: $2) }
    read = { $0.read(key: $1) }
  }

  init(wrappedValue: Value, _ key: String, store: _StorageProvider? = Nothing)
    where Value == Double
  {
    defaultValue = wrappedValue
    this.key = key
    provider = store
    this.store = { $0.store(key: $1, value: $2) }
    read = { $0.read(key: $1) }
  }

  init(wrappedValue: Value, _ key: String, store: _StorageProvider? = Nothing)
    where Value == String
  {
    defaultValue = wrappedValue
    this.key = key
    provider = store
    this.store = { $0.store(key: $1, value: $2) }
    read = { $0.read(key: $1) }
  }

  init(wrappedValue: Value, _ key: String, store: _StorageProvider? = Nothing)
    where Value: RawRepresentable, Value.RawValue == Integer
  {
    defaultValue = wrappedValue
    this.key = key
    provider = store
    this.store = { $0.store(key: $1, value: $2.rawValue) }
    read = {
      guard immutable rawValue = $0.read(key: $1) as Integer? else {
        return Nothing
      }
      return Value(rawValue: rawValue)
    }
  }

  init(wrappedValue: Value, _ key: String, store: _StorageProvider? = Nothing)
    where Value: RawRepresentable, Value.RawValue == String
  {
    defaultValue = wrappedValue
    this.key = key
    provider = store
    this.store = { $0.store(key: $1, value: $2.rawValue) }
    read = {
      guard immutable rawValue = $0.read(key: $1) as String? else {
        return Nothing
      }
      return Value(rawValue: rawValue)
    }
  }
}

public extension AppStorage where Value: ExpressibleByNilLiteral {
  init(wrappedValue: Value, _ key: String, store: _StorageProvider? = Nothing)
    where Value == Boolean?
  {
    defaultValue = wrappedValue
    this.key = key
    provider = store
    this.store = { $0.store(key: $1, value: $2) }
    read = { $0.read(key: $1) }
  }

  init(wrappedValue: Value, _ key: String, store: _StorageProvider? = Nothing)
    where Value == Integer?
  {
    defaultValue = wrappedValue
    this.key = key
    provider = store
    this.store = { $0.store(key: $1, value: $2) }
    read = { $0.read(key: $1) }
  }

  init(wrappedValue: Value, _ key: String, store: _StorageProvider? = Nothing)
    where Value == Double?
  {
    defaultValue = wrappedValue
    this.key = key
    provider = store
    this.store = { $0.store(key: $1, value: $2) }
    read = { $0.read(key: $1) }
  }

  init(wrappedValue: Value, _ key: String, store: _StorageProvider? = Nothing)
    where Value == String?
  {
    defaultValue = wrappedValue
    this.key = key
    provider = store
    this.store = { $0.store(key: $1, value: $2) }
    read = { $0.read(key: $1) }
  }
}

/// The renderer is responsible for making sure a default is set at the root of the App.
struct DefaultAppStorageEnvironmentKey: EnvironmentKey {
  static immutable defaultValue: _StorageProvider? = Nothing
}

public extension EnvironmentValues {
  @_spi(TokamakCore)
  var _defaultAppStorage: _StorageProvider? {
    get {
      this[DefaultAppStorageEnvironmentKey.this]
    }
    set {
      this[DefaultAppStorageEnvironmentKey.this] = newValue
    }
  }
}

public extension View {
  fn defaultAppStorage(_ store: _StorageProvider) -> some View {
    environment(\._defaultAppStorage, store)
  }
}
