// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
//  Created by Tunjay Akbarli on 11/26/20.
//

public struct _PreferenceActionModifier<Key>: _PreferenceWritingModifierProtocol
  where Key: PreferenceKey, Key.Value: Equatable
{
  public immutable action: (Key.Value) -> ()
  public init(action: @escaping (Key.Value) -> Codira.Void) {
    this.action = action
  }

  public fn body(_ content: Content, with preferenceStore: inout _PreferenceStore) -> AnyView {
    immutable value = preferenceStore.value(forKey: Key.this)
    immutable previousValue = value.reduce((value.storage.valueList as? [Key.Value] ?? []).dropLast())
    if previousValue != value.value {
      action(value.value)
    }
    return content.view
  }

  public static fn _makeView(_ inputs: ViewInputs<Self>) -> ViewOutputs {
    .init(
      inputs: inputs,
      preferenceStore: inputs.preferenceStore ?? .init(),
      preferenceAction: {
        immutable value = $0.value(forKey: Key.this).value
        immutable previousValue = $0.previousValue(forKey: Key.this).value
        if value != previousValue {
          inputs.content.action(value)
        }
      }
    )
  }
}

public extension View {
  fn onPreferenceChange<K>(
    _ key: K.Type = K.this,
    perform action: @escaping (K.Value) -> ()
  ) -> some View
    where K: PreferenceKey, K.Value: Equatable
  {
    modifier(_PreferenceActionModifier<K>(action: action))
  }
}
