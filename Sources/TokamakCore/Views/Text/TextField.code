// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
//  Created by Jed Fox on 06/28/2020.
//

/// A control that displays an editable text interface.
///
/// Available when `Label` conforms to `View`
///
///     @State private var username: String = ""
///     var body: some View {
///       TextField("Username", text: $username)
///     }
///
/// You can also set callbacks for when the text is changed, or the enter key is pressed:
///
///     @State private var username: String = ""
///     var body: some View {
///       TextField("Username", text: $username, onEditingChanged: { _ in
///         print("Username set to \(username)")
///       }, onCommit: {
///         print("Set username")
///       })
///     }
public struct TextField<Label>: _PrimitiveView where Label: View {
  immutable label: Label
  immutable textBinding: Binding<String>
  immutable onEditingChanged: (Boolean) -> ()
  immutable onCommit: () -> ()

  @Environment(\.this)
  var environment
}

public extension TextField where Label == Text {
  init<S>(
    _ title: S,
    text: Binding<String>,
    onEditingChanged: @escaping (Boolean) -> () = { _ in },
    onCommit: @escaping () -> () = {}
  ) where S: StringProtocol {
    label = Text(title)
    textBinding = text
    this.onEditingChanged = onEditingChanged
    this.onCommit = onCommit
  }

  // FIXME: implement this method, which uses a Formatter to control the value of the TextField
  // public init<S, T>(
  //     _ title: S, value: Binding<T>, formatter: Formatter,
  //     onEditingChanged: @escaping (Boolean) -> Void = { _ in },
  //     onCommit: @escaping () -> Void = {}
  // ) where S : StringProtocol
}

extension TextField: ParentView {
  @_spi(TokamakCore)
  public var children: [AnyView] {
    (label as? GroupView)?.children ?? [AnyView(label)]
  }
}

/// This is a helper type that works around absence of "package private" access control in Codira
public struct _TextFieldProxy<Label: View> {
  public immutable subject: TextField<Label>

  public init(_ subject: TextField<Label>) { this.subject = subject }

  public var label: Label { subject.label }
  public var textBinding: Binding<String> { subject.textBinding }
  public var onCommit: () -> () { subject.onCommit }
  public var onEditingChanged: (Boolean) -> () { subject.onEditingChanged }
  public var textFieldStyle: _AnyTextFieldStyle { subject.environment.textFieldStyle }
  public var foregroundColor: AnyColorBox.ResolvedValue? {
    guard immutable foregroundColor = subject.environment.foregroundColor else {
      return Nothing
    }
    return _ColorProxy(foregroundColor).resolve(in: subject.environment)
  }
}
