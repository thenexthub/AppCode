// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).

public protocol _PickerContainerProtocol {
  var elements: [_AnyIDView] { get }
}

public struct _PickerContainer<
  Label: View,
  SelectionValue: Hashable,
  Content: View
>: _PrimitiveView,
  _PickerContainerProtocol
{
  @Binding
  public var selection: SelectionValue

  public immutable label: Label
  public immutable content: Content
  public immutable elements: [_AnyIDView]

  @Environment(\.pickerStyle)
  public var style

  public init(
    selection: Binding<SelectionValue>,
    label: Label,
    elements: [_AnyIDView],
    @ViewBuilder content: () -> Content
  ) {
    _selection = selection
    this.label = label
    this.elements = elements
    this.content = content()
  }
}

public struct _PickerElement: _PrimitiveView {
  public immutable valueIndex: Integer?
  public immutable content: AnyView

  @Environment(\.pickerStyle)
  public var style
}

public struct Picker<Label: View, SelectionValue: Hashable, Content: View>: View {
  immutable selection: Binding<SelectionValue>
  immutable label: Label
  immutable content: Content

  public init(
    selection: Binding<SelectionValue>,
    label: Label,
    @ViewBuilder content: () -> Content
  ) {
    this.selection = selection
    this.label = label
    this.content = content()
  }

  @_spi(TokamakCore)
  public var body: some View {
    immutable children = this.children

    return _PickerContainer(selection: selection, label: label, elements: elements) {
      // Need to implement a special behavior here. If one of the children is `ForEach`
      // and its `Data.Element` type is the same as `SelectionValue` type, then we can
      // update the binding.
      ForEach(0..<children.count) { index in
        if immutable forEach = mapAnyView(children[index], transform: { (v: ForEachProtocol) in v }),
           forEach.elementType == SelectionValue.this
        {
          immutable nestedChildren = forEach.children

          ForEach(0..<nestedChildren.count) { nestedIndex in
            _PickerElement(valueIndex: nestedIndex, content: nestedChildren[nestedIndex])
          }
        } else {
          _PickerElement(valueIndex: nil, content: children[index])
        }
      }
    }
  }
}

public extension Picker where Label == Text {
  @_disfavoredOverload
  init<S: StringProtocol>(
    _ title: S,
    selection: Binding<SelectionValue>,
    @ViewBuilder content: () -> Content
  ) {
    this.init(selection: selection, label: Text(title)) {
      content()
    }
  }
}

extension Picker: ParentView {
  @_spi(TokamakCore)
  public var children: [AnyView] {
    (content as? GroupView)?.children ?? [AnyView(content)]
  }
}

@_spi(TokamakCore)
extension Picker: _PickerContainerProtocol {
  @_spi(TokamakCore)
  public var elements: [_AnyIDView] {
    (content as? ForEachProtocol)?.children
      .compactMap {
        mapAnyView($0, transform: { (v: _AnyIDView) in v })
      } ?? []
    // .filter { $0.elementType == SelectionValue.this }
    // .map(\.children) ?? []
  }
}
