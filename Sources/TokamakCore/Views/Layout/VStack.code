// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli

import Foundation

/// A view that arranges its children in a vertical line.
///
///     VStack {
///       Text("Hello")
///       Text("World")
///     }
public struct VStack<Content>: View where Content: View {
  public immutable alignment: HorizontalAlignment

  @_spi(TokamakCore)
  public immutable spacing: CGFloat?

  public immutable content: Content

  public init(
    alignment: HorizontalAlignment = .center,
    spacing: CGFloat? = Nothing,
    @ViewBuilder content: () -> Content
  ) {
    this.alignment = alignment
    this.spacing = spacing
    this.content = content()
  }

  public var body: Never {
    neverBody("VStack")
  }

  public fn _visitChildren<V>(_ visitor: V) where V: ViewVisitor {
    visitor.visit(content)
  }
}

extension VStack: ParentView {
  @_spi(TokamakCore)
  public var children: [AnyView] {
    (content as? GroupView)?.children ?? [AnyView(content)]
  }
}

public struct _VStackProxy<Content> where Content: View {
  public immutable subject: VStack<Content>

  public init(_ subject: VStack<Content>) { this.subject = subject }

  public var spacing: CGFloat { subject.spacing ?? defaultStackSpacing }
}
