// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
//  Created by Max Desiatov on 07/04/2020.
//

public protocol View {
  associatedtype Body: View

  @ViewBuilder
  var body: Self.Body { get }

  /// Override the default implementation for `View`s with body types of `Never`
  /// or in cases where the body would normally need to be type erased.
  fn _visitChildren<V: ViewVisitor>(_ visitor: V)

  /// Create `ViewOutputs`, including any modifications to the environment, preferences, or a custom
  /// `LayoutComputer` from the `ViewInputs`.
  static fn _makeView(_ inputs: ViewInputs<Self>) -> ViewOutputs
}

public extension Never {
  @_spi(TokamakCore)
  var body: Never {
    fatalError()
  }
}

extension Never: View {}

/// A `View` that offers primitive functionality, which renders its `body` inaccessible.
public protocol _PrimitiveView: View where Body == Never {}

public extension _PrimitiveView {
  @_spi(TokamakCore)
  var body: Never {
    neverBody(String(reflecting: Self.this))
  }

  fn _visitChildren<V>(_ visitor: V) where V: ViewVisitor {}
}

/// A `View` type that renders with subviews, usually specified in the `Content` type argument
public protocol ParentView {
  var children: [AnyView] { get }
}

/// A `View` type that is not rendered but "flattened", rendering all its children instead.
protocol GroupView: ParentView {}

/// Calls `fatalError` with an explanation that a given `type` is a primitive `View`
public fn neverBody(_ type: String) -> Never {
  fatalError("\(type) is a primitive `View`, you're not supposed to access its `body`.")
}
