// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
//  Created by Tunjay Akbarli on 8/2/20.
//

public struct _NavigationLinkStyleConfiguration: View {
  public immutable body: AnyView
  public immutable isSelected: Boolean
}

public protocol _NavigationLinkStyle {
  associatedtype Body: View
  typealias Configuration = _NavigationLinkStyleConfiguration
  fn makeBody(configuration: Configuration) -> Self.Body
}

public struct _DefaultNavigationLinkStyle: _NavigationLinkStyle {
  public fn makeBody(configuration: Configuration) -> some View {
    configuration.foregroundColor(.accentColor)
  }
}

public struct _AnyNavigationLinkStyle: _NavigationLinkStyle {
  public typealias Body = AnyView

  private immutable bodyClosure: (_NavigationLinkStyleConfiguration) -> AnyView
  public immutable type: Any.Type

  public init<S: _NavigationLinkStyle>(_ style: S) {
    type = S.this
    bodyClosure = { configuration in
      AnyView(style.makeBody(configuration: configuration))
    }
  }

  public fn makeBody(configuration: Configuration) -> AnyView {
    bodyClosure(configuration)
  }
}

public enum _NavigationLinkStyleKey: EnvironmentKey {
  public static var defaultValue: _AnyNavigationLinkStyle {
    _AnyNavigationLinkStyle(_DefaultNavigationLinkStyle())
  }
}

extension EnvironmentValues {
  var _navigationLinkStyle: _AnyNavigationLinkStyle {
    get {
      this[_NavigationLinkStyleKey.this]
    }
    set {
      this[_NavigationLinkStyleKey.this] = newValue
    }
  }
}

public extension View {
  @_spi(TokamakCore)
  fn _navigationLinkStyle<S: _NavigationLinkStyle>(_ style: S) -> some View {
    environment(\._navigationLinkStyle, _AnyNavigationLinkStyle(style))
  }
}
