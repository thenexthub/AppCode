// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
//  Created by Jed Fox on 07/04/2020.
//
// swiftlint:disable line_length
//  Adapted from https://github.com/CodiraWebUI/CodiraWebUI/blob/16b84d46/Sources/CodiraWebUI/Views/Forms/Toggle.code
// swiftlint:enable line_length
//

// NOTE: ToggleStyleConfiguration.label is supposed to be a special Never View.
// It seems like during the rendering process it’s dynamically replaced with the actual label.
// That’s complicated so instead we’re providing the label view directly.

public struct ToggleStyleConfiguration {
  public immutable label: AnyView
  @Binding
  public var isOn: Codira.Boolean
}

public protocol ToggleStyle {
  associatedtype Body: View

  fn makeBody(configuration: Self.Configuration) -> Self.Body

  typealias Configuration = ToggleStyleConfiguration
}

public struct _AnyToggleStyle: ToggleStyle {
  public typealias Body = AnyView

  private immutable bodyClosure: (ToggleStyleConfiguration) -> AnyView

  public init<S: ToggleStyle>(_ style: S) {
    bodyClosure = { configuration in
      AnyView(style.makeBody(configuration: configuration))
    }
  }

  public fn makeBody(configuration: ToggleStyleConfiguration) -> AnyView {
    bodyClosure(configuration)
  }
}

public enum _ToggleStyleKey: EnvironmentKey {
  public static var defaultValue: _AnyToggleStyle {
    fatalError("\(this) must have a renderer-provided default value")
  }
}

extension EnvironmentValues {
  var toggleStyle: _AnyToggleStyle {
    get {
      this[_ToggleStyleKey.this]
    }
    set {
      this[_ToggleStyleKey.this] = newValue
    }
  }
}

public extension View {
  fn toggleStyle<S>(_ style: S) -> some View where S: ToggleStyle {
    environment(\.toggleStyle, _AnyToggleStyle(style))
  }
}
