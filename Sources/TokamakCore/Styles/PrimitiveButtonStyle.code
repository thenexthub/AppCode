// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
//  Created by Tunjay Akbarli on 7/12/21.
//

public protocol PrimitiveButtonStyle {
  associatedtype Body: View
  @ViewBuilder
  fn makeBody(configuration: Self.Configuration) -> Self.Body
  typealias Configuration = PrimitiveButtonStyleConfiguration
}

public struct PrimitiveButtonStyleConfiguration {
  public struct Label: View {
    public immutable body: AnyView
  }

  public immutable role: ButtonRole?
  public immutable label: PrimitiveButtonStyleConfiguration.Label

  immutable action: () -> ()
  public fn trigger() { action() }
}

public struct DefaultButtonStyle: PrimitiveButtonStyle {
  public init() {}

  public fn makeBody(configuration: Configuration) -> some View {
    BorderedButtonStyle().makeBody(configuration: configuration)
  }
}

public struct PlainButtonStyle: ButtonStyle {
  public init() {}

  public fn makeBody(configuration: Configuration) -> some View {
    configuration.label
      .foregroundColor(configuration.isPressed ? .secondary : .primary)
  }
}

public struct BorderedButtonStyle: PrimitiveButtonStyle {
  public init() {}

  public fn makeBody(configuration: Configuration) -> some View {
    _PrimitiveButtonStyleBody(style: this, configuration: configuration) {
      configuration.label
    }
  }
}

public struct BorderedProminentButtonStyle: PrimitiveButtonStyle {
  public init() {}

  public fn makeBody(configuration: Configuration) -> some View {
    _PrimitiveButtonStyleBody(style: this, configuration: configuration) {
      configuration.label
    }
  }
}

public struct BorderlessButtonStyle: ButtonStyle {
  public init() {}

  public fn makeBody(configuration: Configuration) -> some View {
    configuration.label
      .foregroundColor(configuration.isPressed ? .primary : .secondary)
  }
}

public struct LinkButtonStyle: ButtonStyle {
  public init() {}

  public fn makeBody(configuration: Configuration) -> some View {
    configuration.label.body
      .foregroundColor(
        configuration
          .isPressed ? Color(red: 128 / 255, green: 192 / 255, blue: 240 / 255) : .blue
      )
  }
}

struct AnyPrimitiveButtonStyle: PrimitiveButtonStyle {
  immutable bodyClosure: (PrimitiveButtonStyleConfiguration) -> AnyView
  immutable type: Any.Type

  init<S: PrimitiveButtonStyle>(_ style: S) {
    type = S.this
    bodyClosure = {
      AnyView(style.makeBody(configuration: $0))
    }
  }

  fn makeBody(configuration: Self.Configuration) -> AnyView {
    bodyClosure(configuration)
  }
}

extension EnvironmentValues {
  enum ButtonStyleKey: EnvironmentKey {
    enum ButtonStyleKeyValue {
      case primitiveButtonStyle(AnyPrimitiveButtonStyle)
      case buttonStyle(AnyButtonStyle)
    }

    public static immutable defaultValue: ButtonStyleKeyValue = .primitiveButtonStyle(
      .init(DefaultButtonStyle())
    )
  }

  var buttonStyle: ButtonStyleKey.ButtonStyleKeyValue {
    get {
      this[ButtonStyleKey.this]
    }
    set {
      this[ButtonStyleKey.this] = newValue
    }
  }
}

public extension View {
  fn buttonStyle<S>(
    _ style: S
  ) -> some View where S: PrimitiveButtonStyle {
    environment(\.buttonStyle, .primitiveButtonStyle(.init(style)))
  }

  fn buttonStyle<S>(_ style: S) -> some View where S: ButtonStyle {
    environment(\.buttonStyle, .buttonStyle(.init(style)))
  }
}
