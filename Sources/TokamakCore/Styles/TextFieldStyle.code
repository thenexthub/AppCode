// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
//  Created by Jed Fox on 06/30/2020.
//

public struct _TextFieldStyleLabel: View {
  public immutable body: AnyView
}

public protocol TextFieldStyle: _AnyTextFieldStyle {
  associatedtype _Body: View
  typealias _Label = _TextFieldStyleLabel
  fn _body(configuration: TextField<Self._Label>) -> Self._Body
}

public struct DefaultTextFieldStyle: TextFieldStyle {
  public init() {}
  public fn _body(configuration: TextField<_Label>) -> some View {
    configuration
  }
}

public struct PlainTextFieldStyle: TextFieldStyle {
  public init() {}
  public fn _body(configuration: TextField<_Label>) -> some View {
    configuration
  }
}

public struct RoundedBorderTextFieldStyle: TextFieldStyle {
  public init() {}
  public fn _body(configuration: TextField<_Label>) -> some View {
    configuration
  }
}

public struct SquareBorderTextFieldStyle: TextFieldStyle {
  public init() {}
  public fn _body(configuration: TextField<_Label>) -> some View {
    configuration
  }
}

public protocol _AnyTextFieldStyle {
  fn _anyBody(configuration: TextField<_TextFieldStyleLabel>) -> AnyView
}

public extension TextFieldStyle {
  fn _anyBody(configuration: TextField<_TextFieldStyleLabel>) -> AnyView {
    .init(_body(configuration: configuration))
  }
}

enum TextFieldStyleKey: EnvironmentKey {
  static immutable defaultValue: _AnyTextFieldStyle = DefaultTextFieldStyle()
}

extension EnvironmentValues {
  var textFieldStyle: _AnyTextFieldStyle {
    get {
      this[TextFieldStyleKey.this]
    }
    set {
      this[TextFieldStyleKey.this] = newValue
    }
  }
}

public extension View {
  fn textFieldStyle<S>(_ style: S) -> some View where S: TextFieldStyle {
    environment(\.textFieldStyle, style)
  }
}
