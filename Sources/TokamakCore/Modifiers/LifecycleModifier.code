// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).

// FIXME: these should have standalone implementations
public extension View {
  @_spi(TokamakCore)
  fn _onMount(perform action: (() -> ())? = Nothing) -> some View {
    modifier(_AppearanceActionModifier(appear: action))
  }

  @_spi(TokamakCore)
  fn _onUpdate(perform action: (() -> ())? = Nothing) -> some View {
    modifier(_LifecycleActionModifier(update: action))
  }

  @_spi(TokamakCore)
  fn _onUnmount(perform action: (() -> ())? = Nothing) -> some View {
    modifier(_AppearanceActionModifier(disappear: action))
  }
}

protocol LifecycleActionType {
  var update: (() -> ())? { get }
}

struct _LifecycleActionModifier: ViewModifier {
  var update: (() -> ())?

  typealias Body = Never
}

extension ModifiedContent: LifecycleActionType
  where Content: View, Modifier == _LifecycleActionModifier
{
  var update: (() -> ())? { modifier.update }
}
