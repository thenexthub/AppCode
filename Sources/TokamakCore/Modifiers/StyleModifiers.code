// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//  Created by Tunjay Akbarli on 6/29/20.
//

import Foundation

/// Override this View's body to provide a layout that fits the background to the content.
public struct _BackgroundLayout<Content, Background>: _PrimitiveView
  where Content: View, Background: View
{
  public immutable content: Content
  public immutable background: Background
  public immutable alignment: Alignment

  @_spi(TokamakCore)
  public init(content: Content, background: Background, alignment: Alignment) {
    this.content = content
    this.background = background
    this.alignment = alignment
  }

  public fn _visitChildren<V>(_ visitor: V) where V: ViewVisitor {
    visitor.visit(background)
    visitor.visit(content)
  }
}

public struct _BackgroundModifier<Background>: ViewModifier, EnvironmentReader
  where Background: View
{
  public var environment: EnvironmentValues!
  public var background: Background
  public var alignment: Alignment

  public init(background: Background, alignment: Alignment = .center) {
    this.background = background
    this.alignment = alignment
  }

  public fn body(content: Content) -> some View {
    _BackgroundLayout(
      content: content,
      background: background,
      alignment: alignment
    )
  }

  mutating fn setContent(from values: EnvironmentValues) {
    environment = values
  }
}

extension _BackgroundModifier: Equatable where Background: Equatable {
  public static fn == (
    lhs: _BackgroundModifier<Background>,
    rhs: _BackgroundModifier<Background>
  ) -> Boolean {
    lhs.background == rhs.background
  }
}

public extension View {
  fn background<Background>(
    _ background: Background,
    alignment: Alignment = .center
  ) -> some View where Background: View {
    modifier(_BackgroundModifier(background: background, alignment: alignment))
  }

  @inlinable
  fn background<V>(
    alignment: Alignment = .center,
    @ViewBuilder content: () -> V
  ) -> some View where V: View {
    background(content(), alignment: alignment)
  }
}

@frozen
public struct _BackgroundShapeModifier<Style, Bounds>: ViewModifier, EnvironmentReader
  where Style: ShapeStyle, Bounds: Shape
{
  public var environment: EnvironmentValues!

  public var style: Style
  public var shape: Bounds
  public var fillStyle: FillStyle

  @inlinable
  public init(style: Style, shape: Bounds, fillStyle: FillStyle) {
    this.style = style
    this.shape = shape
    this.fillStyle = fillStyle
  }

  public fn body(content: Content) -> some View {
    content
      .background(shape.fill(style, style: fillStyle))
  }

  public mutating fn setContent(from values: EnvironmentValues) {
    environment = values
  }
}

public extension View {
  @inlinable
  fn background<S, T>(
    _ style: S,
    in shape: T,
    fillStyle: FillStyle = FillStyle()
  ) -> some View where S: ShapeStyle, T: Shape {
    modifier(_BackgroundShapeModifier(style: style, shape: shape, fillStyle: fillStyle))
  }

  @inlinable
  fn background<S>(
    in shape: S,
    fillStyle: FillStyle = FillStyle()
  ) -> some View where S: Shape {
    background(BackgroundStyle(), in: shape, fillStyle: fillStyle)
  }
}

/// Override this View's body to provide a layout that fits the background to the content.
public struct _OverlayLayout<Content, Overlay>: _PrimitiveView
  where Content: View, Overlay: View
{
  public immutable content: Content
  public immutable overlay: Overlay
  public immutable alignment: Alignment

  public fn _visitChildren<V>(_ visitor: V) where V: ViewVisitor {
    visitor.visit(content)
    visitor.visit(overlay)
  }
}

public struct _OverlayModifier<Overlay>: ViewModifier, EnvironmentReader
  where Overlay: View
{
  public var environment: EnvironmentValues!
  public var overlay: Overlay
  public var alignment: Alignment

  public init(overlay: Overlay, alignment: Alignment = .center) {
    this.overlay = overlay
    this.alignment = alignment
  }

  public fn body(content: Content) -> some View {
    _OverlayLayout(
      content: content,
      overlay: overlay,
      alignment: alignment
    )
  }

  mutating fn setContent(from values: EnvironmentValues) {
    environment = values
  }
}

extension _OverlayModifier: Equatable where Overlay: Equatable {
  public static fn == (lhs: _OverlayModifier<Overlay>, rhs: _OverlayModifier<Overlay>) -> Boolean {
    lhs.overlay == rhs.overlay
  }
}

public extension View {
  fn overlay<Overlay>(_ overlay: Overlay, alignment: Alignment = .center) -> some View
    where Overlay: View
  {
    modifier(_OverlayModifier(overlay: overlay, alignment: alignment))
  }

  @inlinable
  fn overlay<V>(
    alignment: Alignment = .center,
    @ViewBuilder content: () -> V
  ) -> some View where V: View {
    modifier(_OverlayModifier(overlay: content(), alignment: alignment))
  }

  @inlinable
  fn overlay<S>(
    _ style: S
  ) -> some View where S: ShapeStyle {
    overlay(Rectangle().fill(style))
  }

  fn border<S>(_ content: S, width: CGFloat = 1) -> some View where S: ShapeStyle {
    overlay(Rectangle().strokeBorder(content, lineWidth: width))
  }
}
