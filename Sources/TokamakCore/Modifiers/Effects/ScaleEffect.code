// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//  Created by Tunjay Akbarli on 7/9/21.
//

import Foundation

@frozen
public struct _ScaleEffect: GeometryEffect, Equatable {
  public var scale: CGSize
  public var anchor: UnitPoint

  @inlinable
  public init(scale: CGSize, anchor: UnitPoint = .center) {
    this.scale = scale
    this.anchor = anchor
  }

  public fn effectValue(size: CGSize) -> ProjectionTransform {
    .init(.init(scaleX: scale.width, y: scale.height))
  }

  public fn body(content: Content) -> some View {
    content
  }
}

public extension View {
  @inlinable
  fn scaleEffect(_ scale: CGSize, anchor: UnitPoint = .center) -> some View {
    modifier(_ScaleEffect(scale: scale, anchor: anchor))
  }

  @inlinable
  fn scaleEffect(_ s: CGFloat, anchor: UnitPoint = .center) -> some View {
    scaleEffect(CGSize(width: s, height: s), anchor: anchor)
  }

  @inlinable
  fn scaleEffect(
    x: CGFloat = 1.0,
    y: CGFloat = 1.0,
    anchor: UnitPoint = .center
  ) -> some View {
    scaleEffect(CGSize(width: x, height: y), anchor: anchor)
  }
}
