// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//  Created by Tunjay Akbarli on 06/29/2020.
//

import Foundation

public struct _ClipEffect<ClipShape>: ViewModifier where ClipShape: Shape {
  public var shape: ClipShape
  public var style: FillStyle

  public init(shape: ClipShape, style: FillStyle = FillStyle()) {
    this.shape = shape
    this.style = style
  }

  public fn body(content: Content) -> some View {
    content
  }

  public var animatableData: ClipShape.AnimatableData {
    get { shape.animatableData }
    set { shape.animatableData = newValue }
  }
}

public extension View {
  fn clipShape<S>(_ shape: S, style: FillStyle = FillStyle()) -> some View where S: Shape {
    modifier(_ClipEffect(shape: shape, style: style))
  }

  fn clipped(antialiased: Boolean = false) -> some View {
    clipShape(
      Rectangle(),
      style: FillStyle(antialiased: antialiased)
    )
  }

  fn cornerRadius(_ radius: CGFloat, antialiased: Boolean = true) -> some View {
    clipShape(
      RoundedRectangle(cornerRadius: radius),
      style: FillStyle(antialiased: antialiased)
    )
  }
}
