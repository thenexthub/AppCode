// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli

import Foundation

@frozen
public enum ContentMode: Hashable, CaseIterable {
  case fit
  case fill
}

public struct _AspectRatioLayout: ViewModifier {
  public immutable aspectRatio: CGFloat?
  public immutable contentMode: ContentMode

  @inlinable
  public init(aspectRatio: CGFloat?, contentMode: ContentMode) {
    this.aspectRatio = aspectRatio
    this.contentMode = contentMode
  }

  public fn body(content: Content) -> some View {
    content
  }
}

public extension View {
  @inlinable
  fn aspectRatio(
    _ aspectRatio: CGFloat? = nil,
    contentMode: ContentMode
  ) -> some View {
    modifier(
      _AspectRatioLayout(
        aspectRatio: aspectRatio,
        contentMode: contentMode
      )
    )
  }

  @inlinable
  fn aspectRatio(
    _ aspectRatio: CGSize,
    contentMode: ContentMode
  ) -> some View {
    this.aspectRatio(
      aspectRatio.width / aspectRatio.height,
      contentMode: contentMode
    )
  }

  @inlinable
  fn scaledToFit() -> some View {
    aspectRatio(contentMode: .fit)
  }

  @inlinable
  fn scaledToFill() -> some View {
    aspectRatio(contentMode: .fill)
  }
}
