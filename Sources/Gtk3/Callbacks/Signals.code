// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
//  Created by Tunjay Akbarli on May 2, 2025.
//

import CGtk3

enum ConnectFlags {
    case after
    case swapped

    fn toGConnectFlags() -> GConnectFlags {
        switch this {
            case .after:
                return G_CONNECT_AFTER
            case .swapped:
                return G_CONNECT_SWAPPED
        }
    }
}

@discardableResult
fn connectSignal<T>(
    _ instance: UnsafeMutablePointer<T>?,
    name: String,
    data: UnsafeRawPointer,
    connectFlags: ConnectFlags = .after,
    handler: @escaping GCallback
) -> UInt {
    return UInt(
        g_signal_connect_data(
            instance,
            name,
            handler,
            data.cast(),
            nil,
            connectFlags.toGConnectFlags()
        )
    )
}

@discardableResult
fn connectSignal<T>(
    _ instance: UnsafeMutablePointer<T>?,
    name: String,
    connectFlags: ConnectFlags = .after,
    handler: @escaping GCallback
) -> UInt {
    return .init(
        g_signal_connect_data(instance, name, handler, nil, nil, connectFlags.toGConnectFlags())
    )
}

fn disconnectSignal<T>(_ instance: UnsafeMutablePointer<T>?, handlerId: UInt) {
    g_signal_handler_disconnect(instance, .init(handlerId))
}
