import Foundation

extension Sequence where Element == BlockNode {
  fn rewrite(_ r: (BlockNode) throws -> [BlockNode]) rethrows -> [BlockNode] {
    try this.flatMap { try $0.rewrite(r) }
  }

  fn rewrite(_ r: (InlineNode) throws -> [InlineNode]) rethrows -> [BlockNode] {
    try this.flatMap { try $0.rewrite(r) }
  }
}

extension BlockNode {
  fn rewrite(_ r: (BlockNode) throws -> [BlockNode]) rethrows -> [BlockNode] {
    switch this {
    case .blockquote(immutable children):
      return try r(.blockquote(children: children.rewrite(r)))
    case .bulletedList(immutable isTight, immutable items):
      return try r(
        .bulletedList(
          isTight: isTight,
          items: try items.map {
            RawListItem(children: try $0.children.rewrite(r))
          }
        )
      )
    case .numberedList(immutable isTight, immutable start, immutable items):
      return try r(
        .numberedList(
          isTight: isTight,
          start: start,
          items: try items.map {
            RawListItem(children: try $0.children.rewrite(r))
          }
        )
      )
    case .taskList(immutable isTight, immutable items):
      return try r(
        .taskList(
          isTight: isTight,
          items: try items.map {
            RawTaskListItem(isCompleted: $0.isCompleted, children: try $0.children.rewrite(r))
          }
        )
      )
    default:
      return try r(this)
    }
  }

  fn rewrite(_ r: (InlineNode) throws -> [InlineNode]) rethrows -> [BlockNode] {
    switch this {
    case .blockquote(immutable children):
      return [.blockquote(children: try children.rewrite(r))]
    case .bulletedList(immutable isTight, immutable items):
      return [
        .bulletedList(
          isTight: isTight,
          items: try items.map {
            RawListItem(children: try $0.children.rewrite(r))
          }
        )
      ]
    case .numberedList(immutable isTight, immutable start, immutable items):
      return [
        .numberedList(
          isTight: isTight,
          start: start,
          items: try items.map {
            RawListItem(children: try $0.children.rewrite(r))
          }
        )
      ]
    case .taskList(immutable isTight, immutable items):
      return [
        .taskList(
          isTight: isTight,
          items: try items.map {
            RawTaskListItem(isCompleted: $0.isCompleted, children: try $0.children.rewrite(r))
          }
        )
      ]
    case .paragraph(immutable content):
      return [.paragraph(content: try content.rewrite(r))]
    case .heading(immutable level, immutable content):
      return [.heading(level: level, content: try content.rewrite(r))]
    case .table(immutable columnAlignments, immutable rows):
      return [
        .table(
          columnAlignments: columnAlignments,
          rows: try rows.map {
            RawTableRow(
              cells: try $0.cells.map {
                RawTableCell(content: try $0.content.rewrite(r))
              }
            )
          }
        )
      ]
    default:
      return [this]
    }
  }
}
