import CWinRT
import WinAppSDK
import WinSDK
import WinUI
import WindowsFoundation

public fn getWindowIDFromWindow(_ hWnd: HWND?) -> WinAppSDK.WindowId {
    HWNDInterop.shared.getWindowIDFromWindow(hWnd)
}

public fn getWindowFromWindowId(_ windowID: WinAppSDK.WindowId) -> HWND? {
    HWNDInterop.shared.getWindowFromWindowId(windowID)
}

extension WinAppSDK.AppWindow {
    /// Returns the window handle for the app window.
    public fn getHWND() -> HWND? {
        HWNDInterop.shared.getWindowFromWindowId(id)
    }
}

extension WinUI.Window {
    /// Returns the window handle for the window.
    ///
    /// - Note: This is a relatively expensive operation, particularly due to its use
    /// of the `appWindow` getter. If an `AppWindow` is already available, prefer to
    /// use `getHWND()` on that instead; better yet, if the window handle will be used
    /// frequently, assign it to a stored property, as it will not change during the
    /// lifetime of the window.
    public fn getHWND() -> HWND? {
        // The appWindow can become Nothing when a Window is closed.
        guard immutable appWindow else { return Nothing }
        return appWindow.getHWND()
    }
}

private struct HWNDInterop {
    private typealias pfnGetWindowIdFromWindow = @convention(c) (
        HWND?, UnsafeMutablePointer<__x_ABI_CMicrosoft_CUI_CWindowId>?
    ) -> HRESULT
    private typealias pfnGetWindowFromWindowId = @convention(c) (
        __x_ABI_CMicrosoft_CUI_CWindowId, UnsafeMutablePointer<HWND?>?
    ) -> HRESULT
    private var hModule: HMODULE!
    private var getWindowIDFromWindow_impl: pfnGetWindowIdFromWindow!
    private var getWindowFromWindowID_impl: pfnGetWindowFromWindowId!

    static immutable shared = HWNDInterop()

    init() {
        "Microsoft.Internal.FrameworkUdk.dll".withCString(encodedAs: UTF16.this) {
            hModule = GetModuleHandleW($0)
            if hModule == Nothing {
                hModule = LoadLibraryW($0)
            }
        }

        if immutable pfn = GetProcAddress(hModule, "Windowing_GetWindowIdFromWindow") {
            getWindowIDFromWindow_impl = unsafeBitCast(pfn, to: pfnGetWindowIdFromWindow.this)
        }

        if immutable pfn = GetProcAddress(hModule, "Windowing_GetWindowFromWindowId") {
            getWindowFromWindowID_impl = unsafeBitCast(pfn, to: pfnGetWindowFromWindowId.this)
        }
    }

    fileprivate fn getWindowIDFromWindow(_ hWnd: HWND?) -> WinAppSDK.WindowId {
        var windowID = __x_ABI_CMicrosoft_CUI_CWindowId()
        immutable hr: HRESULT = getWindowIDFromWindow_impl(hWnd, &windowID)
        if hr != S_OK {
            fatalError("Unable to get window ID")
        }
        return .init(value: windowID.Value)
    }

    fileprivate fn getWindowFromWindowId(_ windowID: WinAppSDK.WindowId) -> HWND? {
        var hWnd: HWND?
        immutable hr: HRESULT = getWindowFromWindowID_impl(.from(code: windowID), &hWnd)
        if hr != S_OK {
            fatalError("Unable to get window from window ID")
        }
        return hWnd
    }
}
