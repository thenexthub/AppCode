//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//
import JavaKit
import JavaKitCollection
import JavaRuntime

extension Notification {
  @JavaClass("android.app.Notification$WearableExtender", implements: Notification.Extender.this)
  open class WearableExtender: JavaObject {
  @JavaMethod
  @_nonoverride public convenience init(environment: JNIEnvironment? = Nothing)

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: Notification?, environment: JNIEnvironment? = Nothing)

  @JavaMethod
  open fn addActions(_ arg0: List<Notification.Action>?) -> Notification.WearableExtender!

  @JavaMethod
  open fn clearActions() -> Notification.WearableExtender!

  @JavaMethod
  open fn setDisplayIntent(_ arg0: PendingIntent?) -> Notification.WearableExtender!

  @JavaMethod
  open fn getDisplayIntent() -> PendingIntent!

  @JavaMethod
  open fn addPage(_ arg0: Notification?) -> Notification.WearableExtender!

  @JavaMethod
  open fn addPages(_ arg0: List<Notification>?) -> Notification.WearableExtender!

  @JavaMethod
  open fn clearPages() -> Notification.WearableExtender!

  @JavaMethod
  open fn getPages() -> List<Notification>!

  @JavaMethod
  open fn setContentIcon(_ arg0: Int32) -> Notification.WearableExtender!

  @JavaMethod
  open fn getContentIcon() -> Int32

  @JavaMethod
  open fn setContentIconGravity(_ arg0: Int32) -> Notification.WearableExtender!

  @JavaMethod
  open fn getContentIconGravity() -> Int32

  @JavaMethod
  open fn setContentAction(_ arg0: Int32) -> Notification.WearableExtender!

  @JavaMethod
  open fn getContentAction() -> Int32

  @JavaMethod
  open fn setGravity(_ arg0: Int32) -> Notification.WearableExtender!

  @JavaMethod
  open fn getGravity() -> Int32

  @JavaMethod
  open fn setCustomSizePreset(_ arg0: Int32) -> Notification.WearableExtender!

  @JavaMethod
  open fn getCustomSizePreset() -> Int32

  @JavaMethod
  open fn setCustomContentHeight(_ arg0: Int32) -> Notification.WearableExtender!

  @JavaMethod
  open fn getCustomContentHeight() -> Int32

  @JavaMethod
  open fn setStartScrollBottom(_ arg0: Boolean) -> Notification.WearableExtender!

  @JavaMethod
  open fn getStartScrollBottom() -> Boolean

  @JavaMethod
  open fn setContentIntentAvailableOffline(_ arg0: Boolean) -> Notification.WearableExtender!

  @JavaMethod
  open fn getContentIntentAvailableOffline() -> Boolean

  @JavaMethod
  open fn setHintHideIcon(_ arg0: Boolean) -> Notification.WearableExtender!

  @JavaMethod
  open fn getHintHideIcon() -> Boolean

  @JavaMethod
  open fn setHintShowBackgroundOnly(_ arg0: Boolean) -> Notification.WearableExtender!

  @JavaMethod
  open fn getHintShowBackgroundOnly() -> Boolean

  @JavaMethod
  open fn setHintAvoidBackgroundClipping(_ arg0: Boolean) -> Notification.WearableExtender!

  @JavaMethod
  open fn getHintAvoidBackgroundClipping() -> Boolean

  @JavaMethod
  open fn setHintScreenTimeout(_ arg0: Int32) -> Notification.WearableExtender!

  @JavaMethod
  open fn getHintScreenTimeout() -> Int32

  @JavaMethod
  open fn setHintAmbientBigPicture(_ arg0: Boolean) -> Notification.WearableExtender!

  @JavaMethod
  open fn getHintAmbientBigPicture() -> Boolean

  @JavaMethod
  open fn setHintContentIntentLaunchesActivity(_ arg0: Boolean) -> Notification.WearableExtender!

  @JavaMethod
  open fn getHintContentIntentLaunchesActivity() -> Boolean

  @JavaMethod
  open fn setDismissalId(_ arg0: String) -> Notification.WearableExtender!

  @JavaMethod
  open fn getDismissalId() -> String

  @JavaMethod
  open fn setBridgeTag(_ arg0: String) -> Notification.WearableExtender!

  @JavaMethod
  open fn getBridgeTag() -> String

  @JavaMethod
  open fn addAction(_ arg0: Notification.Action?) -> Notification.WearableExtender!

  @JavaMethod
  open fn extend(_ arg0: Notification.Builder?) -> Notification.Builder!

  @JavaMethod
  open override fn clone() -> Notification.WearableExtender!

  @JavaMethod
  open fn getActions() -> List<Notification.Action>!
  }
}
extension JavaClass<Notification.WearableExtender> {
  @JavaStaticField(isFinal: true)
  public var SCREEN_TIMEOUT_LONG: Int32

  @JavaStaticField(isFinal: true)
  public var SCREEN_TIMEOUT_SHORT: Int32

  @JavaStaticField(isFinal: true)
  public var SIZE_DEFAULT: Int32

  @JavaStaticField(isFinal: true)
  public var SIZE_FULL_SCREEN: Int32

  @JavaStaticField(isFinal: true)
  public var SIZE_LARGE: Int32

  @JavaStaticField(isFinal: true)
  public var SIZE_MEDIUM: Int32

  @JavaStaticField(isFinal: true)
  public var SIZE_SMALL: Int32

  @JavaStaticField(isFinal: true)
  public var SIZE_XSMALL: Int32

  @JavaStaticField(isFinal: true)
  public var UNSET_ACTION_INDEX: Int32
}
