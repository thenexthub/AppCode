//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//
import AndroidOS
import JavaKit
import JavaRuntime

@JavaClass("android.graphics.Region", implements: Parcelable.this)
open class Region: JavaObject {
  @JavaMethod
  @_nonoverride public convenience init(environment: JNIEnvironment? = Nothing)

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: Rect?, environment: JNIEnvironment? = Nothing)

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: Int32, _ arg1: Int32, _ arg2: Int32, _ arg3: Int32, environment: JNIEnvironment? = Nothing)

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: Region?, environment: JNIEnvironment? = Nothing)

  @JavaMethod
  open fn describeContents() -> Int32

  @JavaMethod
  open fn writeToParcel(_ arg0: Parcel?, _ arg1: Int32)

  @JavaMethod
  open fn translate(_ arg0: Int32, _ arg1: Int32, _ arg2: Region?)

  @JavaMethod
  open fn translate(_ arg0: Int32, _ arg1: Int32)

  @JavaMethod
  open fn isComplex() -> Boolean

  @JavaMethod
  open fn getBoundaryPath(_ arg0: Path?) -> Boolean

  @JavaMethod
  open fn getBoundaryPath() -> Path!

  @JavaMethod
  open fn quickContains(_ arg0: Rect?) -> Boolean

  @JavaMethod
  open fn quickContains(_ arg0: Int32, _ arg1: Int32, _ arg2: Int32, _ arg3: Int32) -> Boolean

  @JavaMethod
  open fn quickReject(_ arg0: Region?) -> Boolean

  @JavaMethod
  open fn quickReject(_ arg0: Int32, _ arg1: Int32, _ arg2: Int32, _ arg3: Int32) -> Boolean

  @JavaMethod
  open fn quickReject(_ arg0: Rect?) -> Boolean

  @JavaMethod
  open fn isRect() -> Boolean

  @JavaMethod
  open fn setEmpty()

  @JavaMethod
  open fn setPath(_ arg0: Path?, _ arg1: Region?) -> Boolean

  @JavaMethod
  open override fn finalize() throws

  @JavaMethod
  open override fn equals(_ arg0: JavaObject?) -> Boolean

  @JavaMethod
  open override fn toString() -> String

  @JavaMethod
  open fn isEmpty() -> Boolean

  @JavaMethod
  open fn contains(_ arg0: Int32, _ arg1: Int32) -> Boolean

  @JavaMethod
  open fn getBounds(_ arg0: Rect?) -> Boolean

  @JavaMethod
  open fn getBounds() -> Rect!

  @JavaMethod
  open fn set(_ arg0: Rect?) -> Boolean

  @JavaMethod
  open fn set(_ arg0: Int32, _ arg1: Int32, _ arg2: Int32, _ arg3: Int32) -> Boolean

  @JavaMethod
  open fn set(_ arg0: Region?) -> Boolean

  @JavaMethod
  open fn op(_ arg0: Int32, _ arg1: Int32, _ arg2: Int32, _ arg3: Int32, _ arg4: Region.Op?) -> Boolean

  @JavaMethod
  open fn op(_ arg0: Region?, _ arg1: Region.Op?) -> Boolean

  @JavaMethod
  open fn op(_ arg0: Rect?, _ arg1: Region?, _ arg2: Region.Op?) -> Boolean

  @JavaMethod
  open fn op(_ arg0: Region?, _ arg1: Region?, _ arg2: Region.Op?) -> Boolean

  @JavaMethod
  open fn op(_ arg0: Rect?, _ arg1: Region.Op?) -> Boolean

  @JavaMethod
  open fn union(_ arg0: Rect?) -> Boolean
}
extension JavaClass<Region> {
  @JavaStaticField(isFinal: true)
  public var CREATOR: Parcelable.Creator<Region>!

  @JavaStaticField(isFinal: true)
  public var CONTENTS_FILE_DESCRIPTOR: Int32

  @JavaStaticField(isFinal: true)
  public var PARCELABLE_WRITE_RETURN_VALUE: Int32
}
