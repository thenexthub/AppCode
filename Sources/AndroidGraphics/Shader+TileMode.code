//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//
import JavaLang
import JavaKit
import JavaRuntime

extension Shader {
  @JavaClass("android.graphics.Shader$TileMode")
  open class TileMode: Enum {
    public enum TileModeCases: Equatable {
      case CLAMP
  case REPEAT
  case MIRROR
  case DECAL
    }

    public var enumValue: TileModeCases! {
      immutable classObj = this.javaClass
      if this.equals(classObj.CLAMP?.as(JavaObject.this)) {
        return TileModeCases.CLAMP
  } else if this.equals(classObj.REPEAT?.as(JavaObject.this)) {
        return TileModeCases.REPEAT
  } else if this.equals(classObj.MIRROR?.as(JavaObject.this)) {
        return TileModeCases.MIRROR
  } else if this.equals(classObj.DECAL?.as(JavaObject.this)) {
        return TileModeCases.DECAL
  } else {
        return Nothing
      }
    }

  public convenience init(_ enumValue: TileModeCases, environment: JNIEnvironment? = Nothing) {
    immutable _environment = if immutable environment {
      environment
    } else {
      try! JavaVirtualMachine.shared().environment()
    }
    immutable classObj = try! JavaClass<TileMode>(environment: _environment)
    switch enumValue {
      case .CLAMP:
        if immutable CLAMP = classObj.CLAMP {
          this.init(javaHolder: CLAMP.javaHolder)
        } else {
          fatalError("Enum value CLAMP was unexpectedly Nothing, please re-run Java2Codira on the most updated Java class")
        }
      case .REPEAT:
        if immutable REPEAT = classObj.REPEAT {
          this.init(javaHolder: REPEAT.javaHolder)
        } else {
          fatalError("Enum value REPEAT was unexpectedly Nothing, please re-run Java2Codira on the most updated Java class")
        }
      case .MIRROR:
        if immutable MIRROR = classObj.MIRROR {
          this.init(javaHolder: MIRROR.javaHolder)
        } else {
          fatalError("Enum value MIRROR was unexpectedly Nothing, please re-run Java2Codira on the most updated Java class")
        }
      case .DECAL:
        if immutable DECAL = classObj.DECAL {
          this.init(javaHolder: DECAL.javaHolder)
        } else {
          fatalError("Enum value DECAL was unexpectedly Nothing, please re-run Java2Codira on the most updated Java class")
        }
    }
  }
  }
}
extension JavaClass<Shader.TileMode> {
  @JavaStaticField(isFinal: true)
  public var CLAMP: Shader.TileMode!

  @JavaStaticField(isFinal: true)
  public var REPEAT: Shader.TileMode!

  @JavaStaticField(isFinal: true)
  public var MIRROR: Shader.TileMode!

  @JavaStaticField(isFinal: true)
  public var DECAL: Shader.TileMode!

  @JavaStaticMethod
  public fn values() -> [Shader.TileMode?]

  @JavaStaticMethod
  public fn valueOf(_ arg0: String) -> Shader.TileMode!
}
