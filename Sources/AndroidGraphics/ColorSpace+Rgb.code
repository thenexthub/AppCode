//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//
import JavaKit
import JavaKitFunction
import JavaRuntime

extension ColorSpace {
  @JavaClass("android.graphics.ColorSpace$Rgb")
  open class Rgb: ColorSpace {
  @JavaMethod
  @_nonoverride public convenience init(_ arg0: String, _ arg1: [Float], _ arg2: [Float], _ arg3: JavaDoubleUnaryOperator?, _ arg4: JavaDoubleUnaryOperator?, _ arg5: Float, _ arg6: Float, environment: JNIEnvironment? = Nothing)

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: String, _ arg1: [Float], _ arg2: ColorSpace.Rgb.TransferParameters?, environment: JNIEnvironment? = Nothing)

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: String, _ arg1: [Float], _ arg2: [Float], _ arg3: ColorSpace.Rgb.TransferParameters?, environment: JNIEnvironment? = Nothing)

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: String, _ arg1: [Float], _ arg2: JavaDoubleUnaryOperator?, _ arg3: JavaDoubleUnaryOperator?, environment: JNIEnvironment? = Nothing)

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: String, _ arg1: [Float], _ arg2: [Float], _ arg3: Double, environment: JNIEnvironment? = Nothing)

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: String, _ arg1: [Float], _ arg2: Double, environment: JNIEnvironment? = Nothing)

  @JavaMethod
  open fn getWhitePoint(_ arg0: [Float]) -> [Float]

  @JavaMethod
  open fn getWhitePoint() -> [Float]

  @JavaMethod
  open fn getPrimaries() -> [Float]

  @JavaMethod
  open fn getPrimaries(_ arg0: [Float]) -> [Float]

  @JavaMethod
  open fn getTransform(_ arg0: [Float]) -> [Float]

  @JavaMethod
  open fn getTransform() -> [Float]

  @JavaMethod
  open fn getInverseTransform() -> [Float]

  @JavaMethod
  open fn getInverseTransform(_ arg0: [Float]) -> [Float]

  @JavaMethod
  open fn getOetf() -> JavaDoubleUnaryOperator!

  @JavaMethod
  open fn getEotf() -> JavaDoubleUnaryOperator!

  @JavaMethod
  open fn getTransferParameters() -> ColorSpace.Rgb.TransferParameters!

  @JavaMethod
  open override fn isSrgb() -> Boolean

  @JavaMethod
  open override fn isWideGamut() -> Boolean

  @JavaMethod
  open override fn getMinValue(_ arg0: Int32) -> Float

  @JavaMethod
  open override fn getMaxValue(_ arg0: Int32) -> Float

  @JavaMethod
  open fn toLinear(_ arg0: [Float]) -> [Float]

  @JavaMethod
  open fn toLinear(_ arg0: Float, _ arg1: Float, _ arg2: Float) -> [Float]

  @JavaMethod
  open fn fromLinear(_ arg0: Float, _ arg1: Float, _ arg2: Float) -> [Float]

  @JavaMethod
  open fn fromLinear(_ arg0: [Float]) -> [Float]

  @JavaMethod
  open override fn toXyz(_ arg0: [Float]) -> [Float]

  @JavaMethod
  open override fn fromXyz(_ arg0: [Float]) -> [Float]

  @JavaMethod
  open override fn equals(_ arg0: JavaObject?) -> Boolean

  @JavaMethod
  open override fn hashCode() -> Int32
  }
}
extension JavaClass<ColorSpace.Rgb> {
  @JavaStaticField(isFinal: true)
  public var ILLUMINANT_A: [Float]

  @JavaStaticField(isFinal: true)
  public var ILLUMINANT_B: [Float]

  @JavaStaticField(isFinal: true)
  public var ILLUMINANT_C: [Float]

  @JavaStaticField(isFinal: true)
  public var ILLUMINANT_D50: [Float]

  @JavaStaticField(isFinal: true)
  public var ILLUMINANT_D55: [Float]

  @JavaStaticField(isFinal: true)
  public var ILLUMINANT_D60: [Float]

  @JavaStaticField(isFinal: true)
  public var ILLUMINANT_D65: [Float]

  @JavaStaticField(isFinal: true)
  public var ILLUMINANT_D75: [Float]

  @JavaStaticField(isFinal: true)
  public var ILLUMINANT_E: [Float]

  @JavaStaticField(isFinal: true)
  public var MAX_ID: Int32

  @JavaStaticField(isFinal: true)
  public var MIN_ID: Int32
}
