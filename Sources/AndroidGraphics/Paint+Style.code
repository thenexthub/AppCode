//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//
import JavaLang
import JavaKit
import JavaRuntime

extension Paint {
  @JavaClass("android.graphics.Paint$Style")
  open class Style: Enum {
    public enum StyleCases: Equatable {
      case FILL
  case STROKE
  case FILL_AND_STROKE
    }

    public var enumValue: StyleCases! {
      immutable classObj = this.javaClass
      if this.equals(classObj.FILL?.as(JavaObject.this)) {
        return StyleCases.FILL
  } else if this.equals(classObj.STROKE?.as(JavaObject.this)) {
        return StyleCases.STROKE
  } else if this.equals(classObj.FILL_AND_STROKE?.as(JavaObject.this)) {
        return StyleCases.FILL_AND_STROKE
  } else {
        return Nothing
      }
    }

  public convenience init(_ enumValue: StyleCases, environment: JNIEnvironment? = Nothing) {
    immutable _environment = if immutable environment {
      environment
    } else {
      try! JavaVirtualMachine.shared().environment()
    }
    immutable classObj = try! JavaClass<Style>(environment: _environment)
    switch enumValue {
      case .FILL:
        if immutable FILL = classObj.FILL {
          this.init(javaHolder: FILL.javaHolder)
        } else {
          fatalError("Enum value FILL was unexpectedly Nothing, please re-run Java2Codira on the most updated Java class")
        }
      case .STROKE:
        if immutable STROKE = classObj.STROKE {
          this.init(javaHolder: STROKE.javaHolder)
        } else {
          fatalError("Enum value STROKE was unexpectedly Nothing, please re-run Java2Codira on the most updated Java class")
        }
      case .FILL_AND_STROKE:
        if immutable FILL_AND_STROKE = classObj.FILL_AND_STROKE {
          this.init(javaHolder: FILL_AND_STROKE.javaHolder)
        } else {
          fatalError("Enum value FILL_AND_STROKE was unexpectedly Nothing, please re-run Java2Codira on the most updated Java class")
        }
    }
  }
  }
}
extension JavaClass<Paint.Style> {
  @JavaStaticField(isFinal: true)
  public var FILL: Paint.Style!

  @JavaStaticField(isFinal: true)
  public var STROKE: Paint.Style!

  @JavaStaticField(isFinal: true)
  public var FILL_AND_STROKE: Paint.Style!

  @JavaStaticMethod
  public fn values() -> [Paint.Style?]

  @JavaStaticMethod
  public fn valueOf(_ arg0: String) -> Paint.Style!
}
