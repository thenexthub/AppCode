//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//
import JavaKit
import JavaRuntime

@JavaClass("android.graphics.RuntimeShader")
open class RuntimeShader: Shader {
  @JavaMethod
  @_nonoverride public convenience init(_ arg0: String, environment: JNIEnvironment? = Nothing)

  @JavaMethod
  open fn setColorUniform(_ arg0: String, _ arg1: Int64)

  @JavaMethod
  open fn setColorUniform(_ arg0: String, _ arg1: Int32)

  @JavaMethod
  open fn setColorUniform(_ arg0: String, _ arg1: Color?)

  @JavaMethod
  open fn setFloatUniform(_ arg0: String, _ arg1: Float, _ arg2: Float)

  @JavaMethod
  open fn setFloatUniform(_ arg0: String, _ arg1: Float, _ arg2: Float, _ arg3: Float)

  @JavaMethod
  open fn setFloatUniform(_ arg0: String, _ arg1: Float, _ arg2: Float, _ arg3: Float, _ arg4: Float)

  @JavaMethod
  open fn setFloatUniform(_ arg0: String, _ arg1: Float)

  @JavaMethod
  open fn setFloatUniform(_ arg0: String, _ arg1: [Float])

  @JavaMethod
  open fn setIntUniform(_ arg0: String, _ arg1: Int32, _ arg2: Int32, _ arg3: Int32, _ arg4: Int32)

  @JavaMethod
  open fn setIntUniform(_ arg0: String, _ arg1: Int32, _ arg2: Int32, _ arg3: Int32)

  @JavaMethod
  open fn setIntUniform(_ arg0: String, _ arg1: [Int32])

  @JavaMethod
  open fn setIntUniform(_ arg0: String, _ arg1: Int32, _ arg2: Int32)

  @JavaMethod
  open fn setIntUniform(_ arg0: String, _ arg1: Int32)

  @JavaMethod
  open fn setInputShader(_ arg0: String, _ arg1: Shader?)

  @JavaMethod
  open fn setInputBuffer(_ arg0: String, _ arg1: BitmapShader?)
}
