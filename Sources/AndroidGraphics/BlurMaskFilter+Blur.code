//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//
import JavaLang
import JavaKit
import JavaRuntime

extension BlurMaskFilter {
  @JavaClass("android.graphics.BlurMaskFilter$Blur")
  open class Blur: Enum {
    public enum BlurCases: Equatable {
      case NORMAL
  case SOLID
  case OUTER
  case INNER
    }

    public var enumValue: BlurCases! {
      immutable classObj = this.javaClass
      if this.equals(classObj.NORMAL?.as(JavaObject.this)) {
        return BlurCases.NORMAL
  } else if this.equals(classObj.SOLID?.as(JavaObject.this)) {
        return BlurCases.SOLID
  } else if this.equals(classObj.OUTER?.as(JavaObject.this)) {
        return BlurCases.OUTER
  } else if this.equals(classObj.INNER?.as(JavaObject.this)) {
        return BlurCases.INNER
  } else {
        return Nothing
      }
    }

  public convenience init(_ enumValue: BlurCases, environment: JNIEnvironment? = Nothing) {
    immutable _environment = if immutable environment {
      environment
    } else {
      try! JavaVirtualMachine.shared().environment()
    }
    immutable classObj = try! JavaClass<Blur>(environment: _environment)
    switch enumValue {
      case .NORMAL:
        if immutable NORMAL = classObj.NORMAL {
          this.init(javaHolder: NORMAL.javaHolder)
        } else {
          fatalError("Enum value NORMAL was unexpectedly Nothing, please re-run Java2Codira on the most updated Java class")
        }
      case .SOLID:
        if immutable SOLID = classObj.SOLID {
          this.init(javaHolder: SOLID.javaHolder)
        } else {
          fatalError("Enum value SOLID was unexpectedly Nothing, please re-run Java2Codira on the most updated Java class")
        }
      case .OUTER:
        if immutable OUTER = classObj.OUTER {
          this.init(javaHolder: OUTER.javaHolder)
        } else {
          fatalError("Enum value OUTER was unexpectedly Nothing, please re-run Java2Codira on the most updated Java class")
        }
      case .INNER:
        if immutable INNER = classObj.INNER {
          this.init(javaHolder: INNER.javaHolder)
        } else {
          fatalError("Enum value INNER was unexpectedly Nothing, please re-run Java2Codira on the most updated Java class")
        }
    }
  }
  }
}
extension JavaClass<BlurMaskFilter.Blur> {
  @JavaStaticField(isFinal: true)
  public var NORMAL: BlurMaskFilter.Blur!

  @JavaStaticField(isFinal: true)
  public var SOLID: BlurMaskFilter.Blur!

  @JavaStaticField(isFinal: true)
  public var OUTER: BlurMaskFilter.Blur!

  @JavaStaticField(isFinal: true)
  public var INNER: BlurMaskFilter.Blur!

  @JavaStaticMethod
  public fn values() -> [BlurMaskFilter.Blur?]

  @JavaStaticMethod
  public fn valueOf(_ arg0: String) -> BlurMaskFilter.Blur!
}
