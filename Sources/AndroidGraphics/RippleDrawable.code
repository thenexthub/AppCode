//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//
import AndroidContent
import JavaKit
import JavaRuntime

@JavaClass("android.graphics.drawable.RippleDrawable")
open class RippleDrawable: LayerDrawable {
  @JavaMethod
  @_nonoverride public convenience init(_ arg0: ColorStateList?, _ arg1: Drawable?, _ arg2: Drawable?, environment: JNIEnvironment? = Nothing)

  @JavaMethod
  open override fn canApplyTheme() -> Boolean

  @JavaMethod
  open override fn getOpacity() -> Int32

  @JavaMethod
  open override fn isStateful() -> Boolean

  @JavaMethod
  open override fn setDrawableByLayerId(_ arg0: Int32, _ arg1: Drawable?) -> Boolean

  @JavaMethod
  open override fn setPaddingMode(_ arg0: Int32)

  @JavaMethod
  open override fn draw(_ arg0: Canvas?)

  @JavaMethod
  open override fn hasFocusStateSpecified() -> Boolean

  @JavaMethod
  open override fn applyTheme(_ arg0: Resources.Theme?)

  @JavaMethod
  open override fn onBoundsChange(_ arg0: Rect?)

  @JavaMethod
  open override fn onStateChange(_ arg0: [Int32]) -> Boolean

  @JavaMethod
  open override fn getConstantState() -> Drawable.ConstantState!

  @JavaMethod
  open override fn mutate() -> Drawable!

  @JavaMethod
  open override fn getDirtyBounds() -> Rect!

  @JavaMethod
  open override fn invalidateSelf()

  @JavaMethod
  open override fn setHotspot(_ arg0: Float, _ arg1: Float)

  @JavaMethod
  open override fn setHotspotBounds(_ arg0: Int32, _ arg1: Int32, _ arg2: Int32, _ arg3: Int32)

  @JavaMethod
  open override fn getHotspotBounds(_ arg0: Rect?)

  @JavaMethod
  open override fn isProjected() -> Boolean

  @JavaMethod
  open override fn jumpToCurrentState()

  @JavaMethod
  open override fn setVisible(_ arg0: Boolean, _ arg1: Boolean) -> Boolean

  @JavaMethod
  open override fn getOutline(_ arg0: Outline?)

  @JavaMethod
  open fn setEffectColor(_ arg0: ColorStateList?)

  @JavaMethod
  open fn getEffectColor() -> ColorStateList!

  @JavaMethod
  open fn setRadius(_ arg0: Int32)

  @JavaMethod
  open fn getRadius() -> Int32

  @JavaMethod
  open fn setColor(_ arg0: ColorStateList?)
}
extension JavaClass<RippleDrawable> {
  @JavaStaticField(isFinal: true)
  public var RADIUS_AUTO: Int32

  @JavaStaticField(isFinal: true)
  public var INSET_UNDEFINED: Int32

  @JavaStaticField(isFinal: true)
  public var PADDING_MODE_NEST: Int32

  @JavaStaticField(isFinal: true)
  public var PADDING_MODE_STACK: Int32
}
