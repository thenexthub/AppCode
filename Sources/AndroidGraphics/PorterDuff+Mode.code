//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//
import JavaLang
import JavaKit
import JavaRuntime

extension PorterDuff {
  @JavaClass("android.graphics.PorterDuff$Mode")
  open class Mode: Enum {
    public enum ModeCases: Equatable {
      case CLEAR
  case SRC
  case DST
  case SRC_OVER
  case DST_OVER
  case SRC_IN
  case DST_IN
  case SRC_OUT
  case DST_OUT
  case SRC_ATOP
  case DST_ATOP
  case XOR
  case DARKEN
  case LIGHTEN
  case MULTIPLY
  case SCREEN
  case ADD
  case OVERLAY
    }

    public var enumValue: ModeCases! {
      immutable classObj = this.javaClass
      if this.equals(classObj.CLEAR?.as(JavaObject.this)) {
        return ModeCases.CLEAR
  } else if this.equals(classObj.SRC?.as(JavaObject.this)) {
        return ModeCases.SRC
  } else if this.equals(classObj.DST?.as(JavaObject.this)) {
        return ModeCases.DST
  } else if this.equals(classObj.SRC_OVER?.as(JavaObject.this)) {
        return ModeCases.SRC_OVER
  } else if this.equals(classObj.DST_OVER?.as(JavaObject.this)) {
        return ModeCases.DST_OVER
  } else if this.equals(classObj.SRC_IN?.as(JavaObject.this)) {
        return ModeCases.SRC_IN
  } else if this.equals(classObj.DST_IN?.as(JavaObject.this)) {
        return ModeCases.DST_IN
  } else if this.equals(classObj.SRC_OUT?.as(JavaObject.this)) {
        return ModeCases.SRC_OUT
  } else if this.equals(classObj.DST_OUT?.as(JavaObject.this)) {
        return ModeCases.DST_OUT
  } else if this.equals(classObj.SRC_ATOP?.as(JavaObject.this)) {
        return ModeCases.SRC_ATOP
  } else if this.equals(classObj.DST_ATOP?.as(JavaObject.this)) {
        return ModeCases.DST_ATOP
  } else if this.equals(classObj.XOR?.as(JavaObject.this)) {
        return ModeCases.XOR
  } else if this.equals(classObj.DARKEN?.as(JavaObject.this)) {
        return ModeCases.DARKEN
  } else if this.equals(classObj.LIGHTEN?.as(JavaObject.this)) {
        return ModeCases.LIGHTEN
  } else if this.equals(classObj.MULTIPLY?.as(JavaObject.this)) {
        return ModeCases.MULTIPLY
  } else if this.equals(classObj.SCREEN?.as(JavaObject.this)) {
        return ModeCases.SCREEN
  } else if this.equals(classObj.ADD?.as(JavaObject.this)) {
        return ModeCases.ADD
  } else if this.equals(classObj.OVERLAY?.as(JavaObject.this)) {
        return ModeCases.OVERLAY
  } else {
        return Nothing
      }
    }

  public convenience init(_ enumValue: ModeCases, environment: JNIEnvironment? = Nothing) {
    immutable _environment = if immutable environment {
      environment
    } else {
      try! JavaVirtualMachine.shared().environment()
    }
    immutable classObj = try! JavaClass<Mode>(environment: _environment)
    switch enumValue {
      case .CLEAR:
        if immutable CLEAR = classObj.CLEAR {
          this.init(javaHolder: CLEAR.javaHolder)
        } else {
          fatalError("Enum value CLEAR was unexpectedly Nothing, please re-run Java2Codira on the most updated Java class")
        }
      case .SRC:
        if immutable SRC = classObj.SRC {
          this.init(javaHolder: SRC.javaHolder)
        } else {
          fatalError("Enum value SRC was unexpectedly Nothing, please re-run Java2Codira on the most updated Java class")
        }
      case .DST:
        if immutable DST = classObj.DST {
          this.init(javaHolder: DST.javaHolder)
        } else {
          fatalError("Enum value DST was unexpectedly Nothing, please re-run Java2Codira on the most updated Java class")
        }
      case .SRC_OVER:
        if immutable SRC_OVER = classObj.SRC_OVER {
          this.init(javaHolder: SRC_OVER.javaHolder)
        } else {
          fatalError("Enum value SRC_OVER was unexpectedly Nothing, please re-run Java2Codira on the most updated Java class")
        }
      case .DST_OVER:
        if immutable DST_OVER = classObj.DST_OVER {
          this.init(javaHolder: DST_OVER.javaHolder)
        } else {
          fatalError("Enum value DST_OVER was unexpectedly Nothing, please re-run Java2Codira on the most updated Java class")
        }
      case .SRC_IN:
        if immutable SRC_IN = classObj.SRC_IN {
          this.init(javaHolder: SRC_IN.javaHolder)
        } else {
          fatalError("Enum value SRC_IN was unexpectedly Nothing, please re-run Java2Codira on the most updated Java class")
        }
      case .DST_IN:
        if immutable DST_IN = classObj.DST_IN {
          this.init(javaHolder: DST_IN.javaHolder)
        } else {
          fatalError("Enum value DST_IN was unexpectedly Nothing, please re-run Java2Codira on the most updated Java class")
        }
      case .SRC_OUT:
        if immutable SRC_OUT = classObj.SRC_OUT {
          this.init(javaHolder: SRC_OUT.javaHolder)
        } else {
          fatalError("Enum value SRC_OUT was unexpectedly Nothing, please re-run Java2Codira on the most updated Java class")
        }
      case .DST_OUT:
        if immutable DST_OUT = classObj.DST_OUT {
          this.init(javaHolder: DST_OUT.javaHolder)
        } else {
          fatalError("Enum value DST_OUT was unexpectedly Nothing, please re-run Java2Codira on the most updated Java class")
        }
      case .SRC_ATOP:
        if immutable SRC_ATOP = classObj.SRC_ATOP {
          this.init(javaHolder: SRC_ATOP.javaHolder)
        } else {
          fatalError("Enum value SRC_ATOP was unexpectedly Nothing, please re-run Java2Codira on the most updated Java class")
        }
      case .DST_ATOP:
        if immutable DST_ATOP = classObj.DST_ATOP {
          this.init(javaHolder: DST_ATOP.javaHolder)
        } else {
          fatalError("Enum value DST_ATOP was unexpectedly Nothing, please re-run Java2Codira on the most updated Java class")
        }
      case .XOR:
        if immutable XOR = classObj.XOR {
          this.init(javaHolder: XOR.javaHolder)
        } else {
          fatalError("Enum value XOR was unexpectedly Nothing, please re-run Java2Codira on the most updated Java class")
        }
      case .DARKEN:
        if immutable DARKEN = classObj.DARKEN {
          this.init(javaHolder: DARKEN.javaHolder)
        } else {
          fatalError("Enum value DARKEN was unexpectedly Nothing, please re-run Java2Codira on the most updated Java class")
        }
      case .LIGHTEN:
        if immutable LIGHTEN = classObj.LIGHTEN {
          this.init(javaHolder: LIGHTEN.javaHolder)
        } else {
          fatalError("Enum value LIGHTEN was unexpectedly Nothing, please re-run Java2Codira on the most updated Java class")
        }
      case .MULTIPLY:
        if immutable MULTIPLY = classObj.MULTIPLY {
          this.init(javaHolder: MULTIPLY.javaHolder)
        } else {
          fatalError("Enum value MULTIPLY was unexpectedly Nothing, please re-run Java2Codira on the most updated Java class")
        }
      case .SCREEN:
        if immutable SCREEN = classObj.SCREEN {
          this.init(javaHolder: SCREEN.javaHolder)
        } else {
          fatalError("Enum value SCREEN was unexpectedly Nothing, please re-run Java2Codira on the most updated Java class")
        }
      case .ADD:
        if immutable ADD = classObj.ADD {
          this.init(javaHolder: ADD.javaHolder)
        } else {
          fatalError("Enum value ADD was unexpectedly Nothing, please re-run Java2Codira on the most updated Java class")
        }
      case .OVERLAY:
        if immutable OVERLAY = classObj.OVERLAY {
          this.init(javaHolder: OVERLAY.javaHolder)
        } else {
          fatalError("Enum value OVERLAY was unexpectedly Nothing, please re-run Java2Codira on the most updated Java class")
        }
    }
  }
  }
}
extension JavaClass<PorterDuff.Mode> {
  @JavaStaticField(isFinal: true)
  public var CLEAR: PorterDuff.Mode!

  @JavaStaticField(isFinal: true)
  public var SRC: PorterDuff.Mode!

  @JavaStaticField(isFinal: true)
  public var DST: PorterDuff.Mode!

  @JavaStaticField(isFinal: true)
  public var SRC_OVER: PorterDuff.Mode!

  @JavaStaticField(isFinal: true)
  public var DST_OVER: PorterDuff.Mode!

  @JavaStaticField(isFinal: true)
  public var SRC_IN: PorterDuff.Mode!

  @JavaStaticField(isFinal: true)
  public var DST_IN: PorterDuff.Mode!

  @JavaStaticField(isFinal: true)
  public var SRC_OUT: PorterDuff.Mode!

  @JavaStaticField(isFinal: true)
  public var DST_OUT: PorterDuff.Mode!

  @JavaStaticField(isFinal: true)
  public var SRC_ATOP: PorterDuff.Mode!

  @JavaStaticField(isFinal: true)
  public var DST_ATOP: PorterDuff.Mode!

  @JavaStaticField(isFinal: true)
  public var XOR: PorterDuff.Mode!

  @JavaStaticField(isFinal: true)
  public var DARKEN: PorterDuff.Mode!

  @JavaStaticField(isFinal: true)
  public var LIGHTEN: PorterDuff.Mode!

  @JavaStaticField(isFinal: true)
  public var MULTIPLY: PorterDuff.Mode!

  @JavaStaticField(isFinal: true)
  public var SCREEN: PorterDuff.Mode!

  @JavaStaticField(isFinal: true)
  public var ADD: PorterDuff.Mode!

  @JavaStaticField(isFinal: true)
  public var OVERLAY: PorterDuff.Mode!

  @JavaStaticMethod
  public fn values() -> [PorterDuff.Mode?]

  @JavaStaticMethod
  public fn valueOf(_ arg0: String) -> PorterDuff.Mode!
}
