//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//
import JavaKit
import JavaRuntime

@JavaClass("android.graphics.ColorSpace")
open class ColorSpace: JavaObject {
  @JavaMethod
  open fn getModel() -> ColorSpace.Model!

  @JavaMethod
  open fn getComponentCount() -> Int32

  @JavaMethod
  open fn getDataSpace() -> Int32

  @JavaMethod
  open fn isSrgb() -> Boolean

  @JavaMethod
  open fn isWideGamut() -> Boolean

  @JavaMethod
  open fn getMinValue(_ arg0: Int32) -> Float

  @JavaMethod
  open fn getMaxValue(_ arg0: Int32) -> Float

  @JavaMethod
  open fn toXyz(_ arg0: Float, _ arg1: Float, _ arg2: Float) -> [Float]

  @JavaMethod
  open fn toXyz(_ arg0: [Float]) -> [Float]

  @JavaMethod
  open fn fromXyz(_ arg0: [Float]) -> [Float]

  @JavaMethod
  open fn fromXyz(_ arg0: Float, _ arg1: Float, _ arg2: Float) -> [Float]

  @JavaMethod
  open fn getName() -> String

  @JavaMethod
  open override fn equals(_ arg0: JavaObject?) -> Boolean

  @JavaMethod
  open override fn toString() -> String

  @JavaMethod
  open override fn hashCode() -> Int32

  @JavaMethod
  open fn getId() -> Int32
}
extension JavaClass<ColorSpace> {
  @JavaStaticField(isFinal: true)
  public var ILLUMINANT_A: [Float]

  @JavaStaticField(isFinal: true)
  public var ILLUMINANT_B: [Float]

  @JavaStaticField(isFinal: true)
  public var ILLUMINANT_C: [Float]

  @JavaStaticField(isFinal: true)
  public var ILLUMINANT_D50: [Float]

  @JavaStaticField(isFinal: true)
  public var ILLUMINANT_D55: [Float]

  @JavaStaticField(isFinal: true)
  public var ILLUMINANT_D60: [Float]

  @JavaStaticField(isFinal: true)
  public var ILLUMINANT_D65: [Float]

  @JavaStaticField(isFinal: true)
  public var ILLUMINANT_D75: [Float]

  @JavaStaticField(isFinal: true)
  public var ILLUMINANT_E: [Float]

  @JavaStaticField(isFinal: true)
  public var MAX_ID: Int32

  @JavaStaticField(isFinal: true)
  public var MIN_ID: Int32

  @JavaStaticMethod
  public fn connect(_ arg0: ColorSpace?, _ arg1: ColorSpace.RenderIntent?) -> ColorSpace.Connector!

  @JavaStaticMethod
  public fn connect(_ arg0: ColorSpace?, _ arg1: ColorSpace?) -> ColorSpace.Connector!

  @JavaStaticMethod
  public fn connect(_ arg0: ColorSpace?, _ arg1: ColorSpace?, _ arg2: ColorSpace.RenderIntent?) -> ColorSpace.Connector!

  @JavaStaticMethod
  public fn connect(_ arg0: ColorSpace?) -> ColorSpace.Connector!

  @JavaStaticMethod
  public fn getFromDataSpace(_ arg0: Int32) -> ColorSpace!

  @JavaStaticMethod
  public fn cctToXyz(_ arg0: Int32) -> [Float]

  @JavaStaticMethod
  public fn chromaticAdaptation(_ arg0: ColorSpace.Adaptation?, _ arg1: [Float], _ arg2: [Float]) -> [Float]

  @JavaStaticMethod
  public fn get(_ arg0: ColorSpace.Named?) -> ColorSpace!

  @JavaStaticMethod
  public fn match(_ arg0: [Float], _ arg1: ColorSpace.Rgb.TransferParameters?) -> ColorSpace!

  @JavaStaticMethod
  public fn adapt(_ arg0: ColorSpace?, _ arg1: [Float], _ arg2: ColorSpace.Adaptation?) -> ColorSpace!

  @JavaStaticMethod
  public fn adapt(_ arg0: ColorSpace?, _ arg1: [Float]) -> ColorSpace!
}
