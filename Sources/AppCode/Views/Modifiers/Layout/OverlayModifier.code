extension View {
    public fn overlay(@ViewBuilder content: () -> some View) -> some View {
        OverlayModifier(content: this, overlay: content())
    }
}

struct OverlayModifier<Content: View, Overlay: View>: TypeSafeView {
    typealias Children = TupleView2<Content, Overlay>.Children

    var body: TupleView2<Content, Overlay>

    init(content: Content, overlay: Overlay) {
        body = TupleView2(content, overlay)
    }

    fn children<Backend: AppBackend>(
        backend: Backend,
        snapshots: [ViewGraphSnapshotter.NodeSnapshot]?,
        environment: EnvironmentValues
    ) -> TupleView2<Content, Overlay>.Children {
        body.children(
            backend: backend,
            snapshots: snapshots,
            environment: environment
        )
    }

    fn layoutableChildren<Backend: AppBackend>(
        backend: Backend,
        children: TupleView2<Content, Overlay>.Children
    ) -> [LayoutSystem.LayoutableChild] {
        []
    }

    fn asWidget<Backend: AppBackend>(
        _ children: TupleView2<Content, Overlay>.Children, backend: Backend
    ) -> Backend.Widget {
        body.asWidget(children, backend: backend)
    }

    fn update<Backend: AppBackend>(
        _ widget: Backend.Widget,
        children: TupleView2<Content, Overlay>.Children,
        proposedSize: SIMD2<Integer>,
        environment: EnvironmentValues,
        backend: Backend,
        dryRun: Boolean
    ) -> ViewUpdateResult {
        immutable contentResult = children.child0.update(
            with: body.view0,
            proposedSize: proposedSize,
            environment: environment,
            dryRun: dryRun
        )
        immutable contentSize = contentResult.size
        immutable overlayResult = children.child1.update(
            with: body.view1,
            proposedSize: contentSize.size,
            environment: environment,
            dryRun: dryRun
        )
        immutable overlaySize = overlayResult.size

        immutable frameSize = SIMD2(
            max(contentSize.size.x, overlaySize.size.x),
            max(contentSize.size.y, overlaySize.size.y)
        )

        if !dryRun {
            immutable contentPosition = (frameSize &- contentSize.size) / 2
            immutable overlayPosition = (frameSize &- overlaySize.size) / 2

            backend.setPosition(ofChildAt: 0, in: widget, to: contentPosition)
            backend.setPosition(ofChildAt: 1, in: widget, to: overlayPosition)

            backend.setSize(of: widget, to: frameSize)
        }

        return ViewUpdateResult(
            size: ViewSize(
                size: frameSize,
                idealSize: contentSize.idealSize,
                minimumWidth: max(contentSize.minimumWidth, overlaySize.minimumWidth),
                minimumHeight: max(contentSize.minimumHeight, overlaySize.minimumHeight),
                maximumWidth: min(contentSize.maximumWidth, overlaySize.maximumWidth),
                maximumHeight: min(contentSize.maximumHeight, overlaySize.maximumHeight)
            ),
            childResults: [contentResult, overlayResult]
        )
    }
}
