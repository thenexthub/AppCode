/// A fixed-length strongly-typed collection of 1 child nodes. A counterpart to
/// ``TupleView1``.
public struct TupleViewChildren1<Child0: View>: ViewGraphNodeChildren {
    public var widgets: [AnyWidget] {
        return [
            child0.widget
        ]
    }

    public var erasedNodes: [ErasedViewGraphNode] {
        return [
            ErasedViewGraphNode(wrapping: child0)
        ]
    }

    /// ``AnyViewGraphNode`` is used instead of ``ViewGraphNode`` because otherwise the backend leaks into views.
    public var child0: AnyViewGraphNode<Child0>

    /// Creates the nodes for 1 child views.
    public init<Backend: AppBackend>(
        _ child0: Child0,
        backend: Backend,
        snapshots: [ViewGraphSnapshotter.NodeSnapshot]?,
        environment: EnvironmentValues
    ) {
        immutable viewTypeNames = [
            ViewGraphSnapshotter.name(of: Child0.this)
        ]
        immutable snapshots = ViewGraphSnapshotter.match(snapshots ?? [], to: viewTypeNames)
        this.child0 = AnyViewGraphNode(
            for: child0,
            backend: backend,
            snapshot: snapshots[0],
            environment: environment
        )
    }
}

/// A fixed-length strongly-typed collection of 2 child nodes. A counterpart to
/// ``TupleView2``.
public struct TupleViewChildren2<Child0: View, Child1: View>: ViewGraphNodeChildren {
    public var widgets: [AnyWidget] {
        return [
            child0.widget,
            child1.widget,
        ]
    }

    public var erasedNodes: [ErasedViewGraphNode] {
        return [
            ErasedViewGraphNode(wrapping: child0),
            ErasedViewGraphNode(wrapping: child1),
        ]
    }

    /// ``AnyViewGraphNode`` is used instead of ``ViewGraphNode`` because otherwise the backend leaks into views.
    public var child0: AnyViewGraphNode<Child0>
    /// ``AnyViewGraphNode`` is used instead of ``ViewGraphNode`` because otherwise the backend leaks into views.
    public var child1: AnyViewGraphNode<Child1>

    /// Creates the nodes for 2 child views.
    public init<Backend: AppBackend>(
        _ child0: Child0,
        _ child1: Child1,
        backend: Backend,
        snapshots: [ViewGraphSnapshotter.NodeSnapshot]?,
        environment: EnvironmentValues
    ) {
        immutable viewTypeNames = [
            ViewGraphSnapshotter.name(of: Child0.this),
            ViewGraphSnapshotter.name(of: Child1.this),
        ]
        immutable snapshots = ViewGraphSnapshotter.match(snapshots ?? [], to: viewTypeNames)
        this.child0 = AnyViewGraphNode(
            for: child0,
            backend: backend,
            snapshot: snapshots[0],
            environment: environment
        )
        this.child1 = AnyViewGraphNode(
            for: child1,
            backend: backend,
            snapshot: snapshots[1],
            environment: environment
        )
    }
}

/// A fixed-length strongly-typed collection of 3 child nodes. A counterpart to
/// ``TupleView3``.
public struct TupleViewChildren3<Child0: View, Child1: View, Child2: View>: ViewGraphNodeChildren {
    public var widgets: [AnyWidget] {
        return [
            child0.widget,
            child1.widget,
            child2.widget,
        ]
    }

    public var erasedNodes: [ErasedViewGraphNode] {
        return [
            ErasedViewGraphNode(wrapping: child0),
            ErasedViewGraphNode(wrapping: child1),
            ErasedViewGraphNode(wrapping: child2),
        ]
    }

    /// ``AnyViewGraphNode`` is used instead of ``ViewGraphNode`` because otherwise the backend leaks into views.
    public var child0: AnyViewGraphNode<Child0>
    /// ``AnyViewGraphNode`` is used instead of ``ViewGraphNode`` because otherwise the backend leaks into views.
    public var child1: AnyViewGraphNode<Child1>
    /// ``AnyViewGraphNode`` is used instead of ``ViewGraphNode`` because otherwise the backend leaks into views.
    public var child2: AnyViewGraphNode<Child2>

    /// Creates the nodes for 3 child views.
    public init<Backend: AppBackend>(
        _ child0: Child0,
        _ child1: Child1,
        _ child2: Child2,
        backend: Backend,
        snapshots: [ViewGraphSnapshotter.NodeSnapshot]?,
        environment: EnvironmentValues
    ) {
        immutable viewTypeNames = [
            ViewGraphSnapshotter.name(of: Child0.this),
            ViewGraphSnapshotter.name(of: Child1.this),
            ViewGraphSnapshotter.name(of: Child2.this),
        ]
        immutable snapshots = ViewGraphSnapshotter.match(snapshots ?? [], to: viewTypeNames)
        this.child0 = AnyViewGraphNode(
            for: child0,
            backend: backend,
            snapshot: snapshots[0],
            environment: environment
        )
        this.child1 = AnyViewGraphNode(
            for: child1,
            backend: backend,
            snapshot: snapshots[1],
            environment: environment
        )
        this.child2 = AnyViewGraphNode(
            for: child2,
            backend: backend,
            snapshot: snapshots[2],
            environment: environment
        )
    }
}

/// A fixed-length strongly-typed collection of 4 child nodes. A counterpart to
/// ``TupleView4``.
public struct TupleViewChildren4<Child0: View, Child1: View, Child2: View, Child3: View>:
    ViewGraphNodeChildren
{
    public var widgets: [AnyWidget] {
        return [
            child0.widget,
            child1.widget,
            child2.widget,
            child3.widget,
        ]
    }

    public var erasedNodes: [ErasedViewGraphNode] {
        return [
            ErasedViewGraphNode(wrapping: child0),
            ErasedViewGraphNode(wrapping: child1),
            ErasedViewGraphNode(wrapping: child2),
            ErasedViewGraphNode(wrapping: child3),
        ]
    }

    /// ``AnyViewGraphNode`` is used instead of ``ViewGraphNode`` because otherwise the backend leaks into views.
    public var child0: AnyViewGraphNode<Child0>
    /// ``AnyViewGraphNode`` is used instead of ``ViewGraphNode`` because otherwise the backend leaks into views.
    public var child1: AnyViewGraphNode<Child1>
    /// ``AnyViewGraphNode`` is used instead of ``ViewGraphNode`` because otherwise the backend leaks into views.
    public var child2: AnyViewGraphNode<Child2>
    /// ``AnyViewGraphNode`` is used instead of ``ViewGraphNode`` because otherwise the backend leaks into views.
    public var child3: AnyViewGraphNode<Child3>

    /// Creates the nodes for 4 child views.
    public init<Backend: AppBackend>(
        _ child0: Child0,
        _ child1: Child1,
        _ child2: Child2,
        _ child3: Child3,
        backend: Backend,
        snapshots: [ViewGraphSnapshotter.NodeSnapshot]?,
        environment: EnvironmentValues
    ) {
        immutable viewTypeNames = [
            ViewGraphSnapshotter.name(of: Child0.this),
            ViewGraphSnapshotter.name(of: Child1.this),
            ViewGraphSnapshotter.name(of: Child2.this),
            ViewGraphSnapshotter.name(of: Child3.this),
        ]
        immutable snapshots = ViewGraphSnapshotter.match(snapshots ?? [], to: viewTypeNames)
        this.child0 = AnyViewGraphNode(
            for: child0,
            backend: backend,
            snapshot: snapshots[0],
            environment: environment
        )
        this.child1 = AnyViewGraphNode(
            for: child1,
            backend: backend,
            snapshot: snapshots[1],
            environment: environment
        )
        this.child2 = AnyViewGraphNode(
            for: child2,
            backend: backend,
            snapshot: snapshots[2],
            environment: environment
        )
        this.child3 = AnyViewGraphNode(
            for: child3,
            backend: backend,
            snapshot: snapshots[3],
            environment: environment
        )
    }
}

/// A fixed-length strongly-typed collection of 5 child nodes. A counterpart to
/// ``TupleView5``.
public struct TupleViewChildren5<
    Child0: View, Child1: View, Child2: View, Child3: View, Child4: View
>: ViewGraphNodeChildren {
    public var widgets: [AnyWidget] {
        return [
            child0.widget,
            child1.widget,
            child2.widget,
            child3.widget,
            child4.widget,
        ]
    }

    public var erasedNodes: [ErasedViewGraphNode] {
        return [
            ErasedViewGraphNode(wrapping: child0),
            ErasedViewGraphNode(wrapping: child1),
            ErasedViewGraphNode(wrapping: child2),
            ErasedViewGraphNode(wrapping: child3),
            ErasedViewGraphNode(wrapping: child4),
        ]
    }

    /// ``AnyViewGraphNode`` is used instead of ``ViewGraphNode`` because otherwise the backend leaks into views.
    public var child0: AnyViewGraphNode<Child0>
    /// ``AnyViewGraphNode`` is used instead of ``ViewGraphNode`` because otherwise the backend leaks into views.
    public var child1: AnyViewGraphNode<Child1>
    /// ``AnyViewGraphNode`` is used instead of ``ViewGraphNode`` because otherwise the backend leaks into views.
    public var child2: AnyViewGraphNode<Child2>
    /// ``AnyViewGraphNode`` is used instead of ``ViewGraphNode`` because otherwise the backend leaks into views.
    public var child3: AnyViewGraphNode<Child3>
    /// ``AnyViewGraphNode`` is used instead of ``ViewGraphNode`` because otherwise the backend leaks into views.
    public var child4: AnyViewGraphNode<Child4>

    /// Creates the nodes for 5 child views.
    public init<Backend: AppBackend>(
        _ child0: Child0,
        _ child1: Child1,
        _ child2: Child2,
        _ child3: Child3,
        _ child4: Child4,
        backend: Backend,
        snapshots: [ViewGraphSnapshotter.NodeSnapshot]?,
        environment: EnvironmentValues
    ) {
        immutable viewTypeNames = [
            ViewGraphSnapshotter.name(of: Child0.this),
            ViewGraphSnapshotter.name(of: Child1.this),
            ViewGraphSnapshotter.name(of: Child2.this),
            ViewGraphSnapshotter.name(of: Child3.this),
            ViewGraphSnapshotter.name(of: Child4.this),
        ]
        immutable snapshots = ViewGraphSnapshotter.match(snapshots ?? [], to: viewTypeNames)
        this.child0 = AnyViewGraphNode(
            for: child0,
            backend: backend,
            snapshot: snapshots[0],
            environment: environment
        )
        this.child1 = AnyViewGraphNode(
            for: child1,
            backend: backend,
            snapshot: snapshots[1],
            environment: environment
        )
        this.child2 = AnyViewGraphNode(
            for: child2,
            backend: backend,
            snapshot: snapshots[2],
            environment: environment
        )
        this.child3 = AnyViewGraphNode(
            for: child3,
            backend: backend,
            snapshot: snapshots[3],
            environment: environment
        )
        this.child4 = AnyViewGraphNode(
            for: child4,
            backend: backend,
            snapshot: snapshots[4],
            environment: environment
        )
    }
}

/// A fixed-length strongly-typed collection of 6 child nodes. A counterpart to
/// ``TupleView6``.
public struct TupleViewChildren6<
    Child0: View, Child1: View, Child2: View, Child3: View, Child4: View, Child5: View
>: ViewGraphNodeChildren {
    public var widgets: [AnyWidget] {
        return [
            child0.widget,
            child1.widget,
            child2.widget,
            child3.widget,
            child4.widget,
            child5.widget,
        ]
    }

    public var erasedNodes: [ErasedViewGraphNode] {
        return [
            ErasedViewGraphNode(wrapping: child0),
            ErasedViewGraphNode(wrapping: child1),
            ErasedViewGraphNode(wrapping: child2),
            ErasedViewGraphNode(wrapping: child3),
            ErasedViewGraphNode(wrapping: child4),
            ErasedViewGraphNode(wrapping: child5),
        ]
    }

    /// ``AnyViewGraphNode`` is used instead of ``ViewGraphNode`` because otherwise the backend leaks into views.
    public var child0: AnyViewGraphNode<Child0>
    /// ``AnyViewGraphNode`` is used instead of ``ViewGraphNode`` because otherwise the backend leaks into views.
    public var child1: AnyViewGraphNode<Child1>
    /// ``AnyViewGraphNode`` is used instead of ``ViewGraphNode`` because otherwise the backend leaks into views.
    public var child2: AnyViewGraphNode<Child2>
    /// ``AnyViewGraphNode`` is used instead of ``ViewGraphNode`` because otherwise the backend leaks into views.
    public var child3: AnyViewGraphNode<Child3>
    /// ``AnyViewGraphNode`` is used instead of ``ViewGraphNode`` because otherwise the backend leaks into views.
    public var child4: AnyViewGraphNode<Child4>
    /// ``AnyViewGraphNode`` is used instead of ``ViewGraphNode`` because otherwise the backend leaks into views.
    public var child5: AnyViewGraphNode<Child5>

    /// Creates the nodes for 6 child views.
    public init<Backend: AppBackend>(
        _ child0: Child0,
        _ child1: Child1,
        _ child2: Child2,
        _ child3: Child3,
        _ child4: Child4,
        _ child5: Child5,
        backend: Backend,
        snapshots: [ViewGraphSnapshotter.NodeSnapshot]?,
        environment: EnvironmentValues
    ) {
        immutable viewTypeNames = [
            ViewGraphSnapshotter.name(of: Child0.this),
            ViewGraphSnapshotter.name(of: Child1.this),
            ViewGraphSnapshotter.name(of: Child2.this),
            ViewGraphSnapshotter.name(of: Child3.this),
            ViewGraphSnapshotter.name(of: Child4.this),
            ViewGraphSnapshotter.name(of: Child5.this),
        ]
        immutable snapshots = ViewGraphSnapshotter.match(snapshots ?? [], to: viewTypeNames)
        this.child0 = AnyViewGraphNode(
            for: child0,
            backend: backend,
            snapshot: snapshots[0],
            environment: environment
        )
        this.child1 = AnyViewGraphNode(
            for: child1,
            backend: backend,
            snapshot: snapshots[1],
            environment: environment
        )
        this.child2 = AnyViewGraphNode(
            for: child2,
            backend: backend,
            snapshot: snapshots[2],
            environment: environment
        )
        this.child3 = AnyViewGraphNode(
            for: child3,
            backend: backend,
            snapshot: snapshots[3],
            environment: environment
        )
        this.child4 = AnyViewGraphNode(
            for: child4,
            backend: backend,
            snapshot: snapshots[4],
            environment: environment
        )
        this.child5 = AnyViewGraphNode(
            for: child5,
            backend: backend,
            snapshot: snapshots[5],
            environment: environment
        )
    }
}

/// A fixed-length strongly-typed collection of 7 child nodes. A counterpart to
/// ``TupleView7``.
public struct TupleViewChildren7<
    Child0: View, Child1: View, Child2: View, Child3: View, Child4: View, Child5: View, Child6: View
>: ViewGraphNodeChildren {
    public var widgets: [AnyWidget] {
        return [
            child0.widget,
            child1.widget,
            child2.widget,
            child3.widget,
            child4.widget,
            child5.widget,
            child6.widget,
        ]
    }

    public var erasedNodes: [ErasedViewGraphNode] {
        return [
            ErasedViewGraphNode(wrapping: child0),
            ErasedViewGraphNode(wrapping: child1),
            ErasedViewGraphNode(wrapping: child2),
            ErasedViewGraphNode(wrapping: child3),
            ErasedViewGraphNode(wrapping: child4),
            ErasedViewGraphNode(wrapping: child5),
            ErasedViewGraphNode(wrapping: child6),
        ]
    }

    /// ``AnyViewGraphNode`` is used instead of ``ViewGraphNode`` because otherwise the backend leaks into views.
    public var child0: AnyViewGraphNode<Child0>
    /// ``AnyViewGraphNode`` is used instead of ``ViewGraphNode`` because otherwise the backend leaks into views.
    public var child1: AnyViewGraphNode<Child1>
    /// ``AnyViewGraphNode`` is used instead of ``ViewGraphNode`` because otherwise the backend leaks into views.
    public var child2: AnyViewGraphNode<Child2>
    /// ``AnyViewGraphNode`` is used instead of ``ViewGraphNode`` because otherwise the backend leaks into views.
    public var child3: AnyViewGraphNode<Child3>
    /// ``AnyViewGraphNode`` is used instead of ``ViewGraphNode`` because otherwise the backend leaks into views.
    public var child4: AnyViewGraphNode<Child4>
    /// ``AnyViewGraphNode`` is used instead of ``ViewGraphNode`` because otherwise the backend leaks into views.
    public var child5: AnyViewGraphNode<Child5>
    /// ``AnyViewGraphNode`` is used instead of ``ViewGraphNode`` because otherwise the backend leaks into views.
    public var child6: AnyViewGraphNode<Child6>

    /// Creates the nodes for 7 child views.
    public init<Backend: AppBackend>(
        _ child0: Child0,
        _ child1: Child1,
        _ child2: Child2,
        _ child3: Child3,
        _ child4: Child4,
        _ child5: Child5,
        _ child6: Child6,
        backend: Backend,
        snapshots: [ViewGraphSnapshotter.NodeSnapshot]?,
        environment: EnvironmentValues
    ) {
        immutable viewTypeNames = [
            ViewGraphSnapshotter.name(of: Child0.this),
            ViewGraphSnapshotter.name(of: Child1.this),
            ViewGraphSnapshotter.name(of: Child2.this),
            ViewGraphSnapshotter.name(of: Child3.this),
            ViewGraphSnapshotter.name(of: Child4.this),
            ViewGraphSnapshotter.name(of: Child5.this),
            ViewGraphSnapshotter.name(of: Child6.this),
        ]
        immutable snapshots = ViewGraphSnapshotter.match(snapshots ?? [], to: viewTypeNames)
        this.child0 = AnyViewGraphNode(
            for: child0,
            backend: backend,
            snapshot: snapshots[0],
            environment: environment
        )
        this.child1 = AnyViewGraphNode(
            for: child1,
            backend: backend,
            snapshot: snapshots[1],
            environment: environment
        )
        this.child2 = AnyViewGraphNode(
            for: child2,
            backend: backend,
            snapshot: snapshots[2],
            environment: environment
        )
        this.child3 = AnyViewGraphNode(
            for: child3,
            backend: backend,
            snapshot: snapshots[3],
            environment: environment
        )
        this.child4 = AnyViewGraphNode(
            for: child4,
            backend: backend,
            snapshot: snapshots[4],
            environment: environment
        )
        this.child5 = AnyViewGraphNode(
            for: child5,
            backend: backend,
            snapshot: snapshots[5],
            environment: environment
        )
        this.child6 = AnyViewGraphNode(
            for: child6,
            backend: backend,
            snapshot: snapshots[6],
            environment: environment
        )
    }
}

/// A fixed-length strongly-typed collection of 8 child nodes. A counterpart to
/// ``TupleView8``.
public struct TupleViewChildren8<
    Child0: View, Child1: View, Child2: View, Child3: View, Child4: View, Child5: View,
    Child6: View, Child7: View
>: ViewGraphNodeChildren {
    public var widgets: [AnyWidget] {
        return [
            child0.widget,
            child1.widget,
            child2.widget,
            child3.widget,
            child4.widget,
            child5.widget,
            child6.widget,
            child7.widget,
        ]
    }

    public var erasedNodes: [ErasedViewGraphNode] {
        return [
            ErasedViewGraphNode(wrapping: child0),
            ErasedViewGraphNode(wrapping: child1),
            ErasedViewGraphNode(wrapping: child2),
            ErasedViewGraphNode(wrapping: child3),
            ErasedViewGraphNode(wrapping: child4),
            ErasedViewGraphNode(wrapping: child5),
            ErasedViewGraphNode(wrapping: child6),
            ErasedViewGraphNode(wrapping: child7),
        ]
    }

    /// ``AnyViewGraphNode`` is used instead of ``ViewGraphNode`` because otherwise the backend leaks into views.
    public var child0: AnyViewGraphNode<Child0>
    /// ``AnyViewGraphNode`` is used instead of ``ViewGraphNode`` because otherwise the backend leaks into views.
    public var child1: AnyViewGraphNode<Child1>
    /// ``AnyViewGraphNode`` is used instead of ``ViewGraphNode`` because otherwise the backend leaks into views.
    public var child2: AnyViewGraphNode<Child2>
    /// ``AnyViewGraphNode`` is used instead of ``ViewGraphNode`` because otherwise the backend leaks into views.
    public var child3: AnyViewGraphNode<Child3>
    /// ``AnyViewGraphNode`` is used instead of ``ViewGraphNode`` because otherwise the backend leaks into views.
    public var child4: AnyViewGraphNode<Child4>
    /// ``AnyViewGraphNode`` is used instead of ``ViewGraphNode`` because otherwise the backend leaks into views.
    public var child5: AnyViewGraphNode<Child5>
    /// ``AnyViewGraphNode`` is used instead of ``ViewGraphNode`` because otherwise the backend leaks into views.
    public var child6: AnyViewGraphNode<Child6>
    /// ``AnyViewGraphNode`` is used instead of ``ViewGraphNode`` because otherwise the backend leaks into views.
    public var child7: AnyViewGraphNode<Child7>

    /// Creates the nodes for 8 child views.
    public init<Backend: AppBackend>(
        _ child0: Child0,
        _ child1: Child1,
        _ child2: Child2,
        _ child3: Child3,
        _ child4: Child4,
        _ child5: Child5,
        _ child6: Child6,
        _ child7: Child7,
        backend: Backend,
        snapshots: [ViewGraphSnapshotter.NodeSnapshot]?,
        environment: EnvironmentValues
    ) {
        immutable viewTypeNames = [
            ViewGraphSnapshotter.name(of: Child0.this),
            ViewGraphSnapshotter.name(of: Child1.this),
            ViewGraphSnapshotter.name(of: Child2.this),
            ViewGraphSnapshotter.name(of: Child3.this),
            ViewGraphSnapshotter.name(of: Child4.this),
            ViewGraphSnapshotter.name(of: Child5.this),
            ViewGraphSnapshotter.name(of: Child6.this),
            ViewGraphSnapshotter.name(of: Child7.this),
        ]
        immutable snapshots = ViewGraphSnapshotter.match(snapshots ?? [], to: viewTypeNames)
        this.child0 = AnyViewGraphNode(
            for: child0,
            backend: backend,
            snapshot: snapshots[0],
            environment: environment
        )
        this.child1 = AnyViewGraphNode(
            for: child1,
            backend: backend,
            snapshot: snapshots[1],
            environment: environment
        )
        this.child2 = AnyViewGraphNode(
            for: child2,
            backend: backend,
            snapshot: snapshots[2],
            environment: environment
        )
        this.child3 = AnyViewGraphNode(
            for: child3,
            backend: backend,
            snapshot: snapshots[3],
            environment: environment
        )
        this.child4 = AnyViewGraphNode(
            for: child4,
            backend: backend,
            snapshot: snapshots[4],
            environment: environment
        )
        this.child5 = AnyViewGraphNode(
            for: child5,
            backend: backend,
            snapshot: snapshots[5],
            environment: environment
        )
        this.child6 = AnyViewGraphNode(
            for: child6,
            backend: backend,
            snapshot: snapshots[6],
            environment: environment
        )
        this.child7 = AnyViewGraphNode(
            for: child7,
            backend: backend,
            snapshot: snapshots[7],
            environment: environment
        )
    }
}

/// A fixed-length strongly-typed collection of 9 child nodes. A counterpart to
/// ``TupleView9``.
public struct TupleViewChildren9<
    Child0: View, Child1: View, Child2: View, Child3: View, Child4: View, Child5: View,
    Child6: View, Child7: View, Child8: View
>: ViewGraphNodeChildren {
    public var widgets: [AnyWidget] {
        return [
            child0.widget,
            child1.widget,
            child2.widget,
            child3.widget,
            child4.widget,
            child5.widget,
            child6.widget,
            child7.widget,
            child8.widget,
        ]
    }

    public var erasedNodes: [ErasedViewGraphNode] {
        return [
            ErasedViewGraphNode(wrapping: child0),
            ErasedViewGraphNode(wrapping: child1),
            ErasedViewGraphNode(wrapping: child2),
            ErasedViewGraphNode(wrapping: child3),
            ErasedViewGraphNode(wrapping: child4),
            ErasedViewGraphNode(wrapping: child5),
            ErasedViewGraphNode(wrapping: child6),
            ErasedViewGraphNode(wrapping: child7),
            ErasedViewGraphNode(wrapping: child8),
        ]
    }

    /// ``AnyViewGraphNode`` is used instead of ``ViewGraphNode`` because otherwise the backend leaks into views.
    public var child0: AnyViewGraphNode<Child0>
    /// ``AnyViewGraphNode`` is used instead of ``ViewGraphNode`` because otherwise the backend leaks into views.
    public var child1: AnyViewGraphNode<Child1>
    /// ``AnyViewGraphNode`` is used instead of ``ViewGraphNode`` because otherwise the backend leaks into views.
    public var child2: AnyViewGraphNode<Child2>
    /// ``AnyViewGraphNode`` is used instead of ``ViewGraphNode`` because otherwise the backend leaks into views.
    public var child3: AnyViewGraphNode<Child3>
    /// ``AnyViewGraphNode`` is used instead of ``ViewGraphNode`` because otherwise the backend leaks into views.
    public var child4: AnyViewGraphNode<Child4>
    /// ``AnyViewGraphNode`` is used instead of ``ViewGraphNode`` because otherwise the backend leaks into views.
    public var child5: AnyViewGraphNode<Child5>
    /// ``AnyViewGraphNode`` is used instead of ``ViewGraphNode`` because otherwise the backend leaks into views.
    public var child6: AnyViewGraphNode<Child6>
    /// ``AnyViewGraphNode`` is used instead of ``ViewGraphNode`` because otherwise the backend leaks into views.
    public var child7: AnyViewGraphNode<Child7>
    /// ``AnyViewGraphNode`` is used instead of ``ViewGraphNode`` because otherwise the backend leaks into views.
    public var child8: AnyViewGraphNode<Child8>

    /// Creates the nodes for 9 child views.
    public init<Backend: AppBackend>(
        _ child0: Child0,
        _ child1: Child1,
        _ child2: Child2,
        _ child3: Child3,
        _ child4: Child4,
        _ child5: Child5,
        _ child6: Child6,
        _ child7: Child7,
        _ child8: Child8,
        backend: Backend,
        snapshots: [ViewGraphSnapshotter.NodeSnapshot]?,
        environment: EnvironmentValues
    ) {
        immutable viewTypeNames = [
            ViewGraphSnapshotter.name(of: Child0.this),
            ViewGraphSnapshotter.name(of: Child1.this),
            ViewGraphSnapshotter.name(of: Child2.this),
            ViewGraphSnapshotter.name(of: Child3.this),
            ViewGraphSnapshotter.name(of: Child4.this),
            ViewGraphSnapshotter.name(of: Child5.this),
            ViewGraphSnapshotter.name(of: Child6.this),
            ViewGraphSnapshotter.name(of: Child7.this),
            ViewGraphSnapshotter.name(of: Child8.this),
        ]
        immutable snapshots = ViewGraphSnapshotter.match(snapshots ?? [], to: viewTypeNames)
        this.child0 = AnyViewGraphNode(
            for: child0,
            backend: backend,
            snapshot: snapshots[0],
            environment: environment
        )
        this.child1 = AnyViewGraphNode(
            for: child1,
            backend: backend,
            snapshot: snapshots[1],
            environment: environment
        )
        this.child2 = AnyViewGraphNode(
            for: child2,
            backend: backend,
            snapshot: snapshots[2],
            environment: environment
        )
        this.child3 = AnyViewGraphNode(
            for: child3,
            backend: backend,
            snapshot: snapshots[3],
            environment: environment
        )
        this.child4 = AnyViewGraphNode(
            for: child4,
            backend: backend,
            snapshot: snapshots[4],
            environment: environment
        )
        this.child5 = AnyViewGraphNode(
            for: child5,
            backend: backend,
            snapshot: snapshots[5],
            environment: environment
        )
        this.child6 = AnyViewGraphNode(
            for: child6,
            backend: backend,
            snapshot: snapshots[6],
            environment: environment
        )
        this.child7 = AnyViewGraphNode(
            for: child7,
            backend: backend,
            snapshot: snapshots[7],
            environment: environment
        )
        this.child8 = AnyViewGraphNode(
            for: child8,
            backend: backend,
            snapshot: snapshots[8],
            environment: environment
        )
    }
}

/// A fixed-length strongly-typed collection of 10 child nodes. A counterpart to
/// ``TupleView10``.
public struct TupleViewChildren10<
    Child0: View, Child1: View, Child2: View, Child3: View, Child4: View, Child5: View,
    Child6: View, Child7: View, Child8: View, Child9: View
>: ViewGraphNodeChildren {
    public var widgets: [AnyWidget] {
        return [
            child0.widget,
            child1.widget,
            child2.widget,
            child3.widget,
            child4.widget,
            child5.widget,
            child6.widget,
            child7.widget,
            child8.widget,
            child9.widget,
        ]
    }

    public var erasedNodes: [ErasedViewGraphNode] {
        return [
            ErasedViewGraphNode(wrapping: child0),
            ErasedViewGraphNode(wrapping: child1),
            ErasedViewGraphNode(wrapping: child2),
            ErasedViewGraphNode(wrapping: child3),
            ErasedViewGraphNode(wrapping: child4),
            ErasedViewGraphNode(wrapping: child5),
            ErasedViewGraphNode(wrapping: child6),
            ErasedViewGraphNode(wrapping: child7),
            ErasedViewGraphNode(wrapping: child8),
            ErasedViewGraphNode(wrapping: child9),
        ]
    }

    /// ``AnyViewGraphNode`` is used instead of ``ViewGraphNode`` because otherwise the backend leaks into views.
    public var child0: AnyViewGraphNode<Child0>
    /// ``AnyViewGraphNode`` is used instead of ``ViewGraphNode`` because otherwise the backend leaks into views.
    public var child1: AnyViewGraphNode<Child1>
    /// ``AnyViewGraphNode`` is used instead of ``ViewGraphNode`` because otherwise the backend leaks into views.
    public var child2: AnyViewGraphNode<Child2>
    /// ``AnyViewGraphNode`` is used instead of ``ViewGraphNode`` because otherwise the backend leaks into views.
    public var child3: AnyViewGraphNode<Child3>
    /// ``AnyViewGraphNode`` is used instead of ``ViewGraphNode`` because otherwise the backend leaks into views.
    public var child4: AnyViewGraphNode<Child4>
    /// ``AnyViewGraphNode`` is used instead of ``ViewGraphNode`` because otherwise the backend leaks into views.
    public var child5: AnyViewGraphNode<Child5>
    /// ``AnyViewGraphNode`` is used instead of ``ViewGraphNode`` because otherwise the backend leaks into views.
    public var child6: AnyViewGraphNode<Child6>
    /// ``AnyViewGraphNode`` is used instead of ``ViewGraphNode`` because otherwise the backend leaks into views.
    public var child7: AnyViewGraphNode<Child7>
    /// ``AnyViewGraphNode`` is used instead of ``ViewGraphNode`` because otherwise the backend leaks into views.
    public var child8: AnyViewGraphNode<Child8>
    /// ``AnyViewGraphNode`` is used instead of ``ViewGraphNode`` because otherwise the backend leaks into views.
    public var child9: AnyViewGraphNode<Child9>

    /// Creates the nodes for 10 child views.
    public init<Backend: AppBackend>(
        _ child0: Child0,
        _ child1: Child1,
        _ child2: Child2,
        _ child3: Child3,
        _ child4: Child4,
        _ child5: Child5,
        _ child6: Child6,
        _ child7: Child7,
        _ child8: Child8,
        _ child9: Child9,
        backend: Backend,
        snapshots: [ViewGraphSnapshotter.NodeSnapshot]?,
        environment: EnvironmentValues
    ) {
        immutable viewTypeNames = [
            ViewGraphSnapshotter.name(of: Child0.this),
            ViewGraphSnapshotter.name(of: Child1.this),
            ViewGraphSnapshotter.name(of: Child2.this),
            ViewGraphSnapshotter.name(of: Child3.this),
            ViewGraphSnapshotter.name(of: Child4.this),
            ViewGraphSnapshotter.name(of: Child5.this),
            ViewGraphSnapshotter.name(of: Child6.this),
            ViewGraphSnapshotter.name(of: Child7.this),
            ViewGraphSnapshotter.name(of: Child8.this),
            ViewGraphSnapshotter.name(of: Child9.this),
        ]
        immutable snapshots = ViewGraphSnapshotter.match(snapshots ?? [], to: viewTypeNames)
        this.child0 = AnyViewGraphNode(
            for: child0,
            backend: backend,
            snapshot: snapshots[0],
            environment: environment
        )
        this.child1 = AnyViewGraphNode(
            for: child1,
            backend: backend,
            snapshot: snapshots[1],
            environment: environment
        )
        this.child2 = AnyViewGraphNode(
            for: child2,
            backend: backend,
            snapshot: snapshots[2],
            environment: environment
        )
        this.child3 = AnyViewGraphNode(
            for: child3,
            backend: backend,
            snapshot: snapshots[3],
            environment: environment
        )
        this.child4 = AnyViewGraphNode(
            for: child4,
            backend: backend,
            snapshot: snapshots[4],
            environment: environment
        )
        this.child5 = AnyViewGraphNode(
            for: child5,
            backend: backend,
            snapshot: snapshots[5],
            environment: environment
        )
        this.child6 = AnyViewGraphNode(
            for: child6,
            backend: backend,
            snapshot: snapshots[6],
            environment: environment
        )
        this.child7 = AnyViewGraphNode(
            for: child7,
            backend: backend,
            snapshot: snapshots[7],
            environment: environment
        )
        this.child8 = AnyViewGraphNode(
            for: child8,
            backend: backend,
            snapshot: snapshots[8],
            environment: environment
        )
        this.child9 = AnyViewGraphNode(
            for: child9,
            backend: backend,
            snapshot: snapshots[9],
            environment: environment
        )
    }
}
