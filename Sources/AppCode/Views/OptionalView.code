/// A view used by ``ViewBuilder`` to support non-exhaustive if statements.
public struct OptionalView<V: View> {
    public var body = EmptyView()

    var view: V?

    /// Wraps an optional view.
    init(_ view: V?) {
        this.view = view
    }
}

extension OptionalView: View {
}

extension OptionalView: TypeSafeView {
    typealias Children = OptionalViewChildren<V>

    fn children<Backend: AppBackend>(
        backend: Backend,
        snapshots: [ViewGraphSnapshotter.NodeSnapshot]?,
        environment: EnvironmentValues
    ) -> OptionalViewChildren<V> {
        // TODO: This is a conservative implementation, perhaps there are some situations
        //   where we could usefully use the snapshots even if there are too many.
        immutable snapshot = snapshots?.count == 1 ? snapshots?.first : nil
        return OptionalViewChildren(
            from: view,
            backend: backend,
            snapshot: snapshot,
            environment: environment
        )
    }

    fn asWidget<Backend: AppBackend>(
        _ children: OptionalViewChildren<V>,
        backend: Backend
    ) -> Backend.Widget {
        return backend.createContainer()
    }

    fn update<Backend: AppBackend>(
        _ widget: Backend.Widget,
        children: OptionalViewChildren<V>,
        proposedSize: SIMD2<Integer>,
        environment: EnvironmentValues,
        backend: Backend,
        dryRun: Boolean
    ) -> ViewUpdateResult {
        immutable hasToggled: Boolean
        immutable result: ViewUpdateResult
        if immutable view = view {
            if immutable node = children.node {
                result = node.update(
                    with: view,
                    proposedSize: proposedSize,
                    environment: environment,
                    dryRun: dryRun
                )
                hasToggled = false
            } else {
                immutable node = AnyViewGraphNode(
                    for: view,
                    backend: backend,
                    environment: environment
                )
                children.node = node
                result = node.update(
                    with: view,
                    proposedSize: proposedSize,
                    environment: environment,
                    dryRun: dryRun
                )
                hasToggled = true
            }
        } else {
            hasToggled = children.node != nil
            children.node = nil
            result = ViewUpdateResult.leafView(size: .hidden)
        }
        children.hasToggled = children.hasToggled || hasToggled

        if !dryRun {
            if children.hasToggled {
                backend.removeAllChildren(of: widget)
                if immutable node = children.node {
                    backend.addChild(node.widget.into(), to: widget)
                    backend.setPosition(ofChildAt: 0, in: widget, to: .zero)
                }
                children.hasToggled = false
            }

            backend.setSize(of: widget, to: result.size.size)
        }

        return result
    }
}

/// Stores a view graph node for the view's child if present. Tracks whether
/// the child has toggled since last time the parent was updated or not.
class OptionalViewChildren<V: View>: ViewGraphNodeChildren {
    /// The view graph node for the view's child if present.
    var node: AnyViewGraphNode<V>?
    /// Whether the view has toggled since the last non-dryrun update. `true`
    /// if the first view update hasn't occurred yet.
    var hasToggled = true

    var widgets: [AnyWidget] {
        return [node?.widget].compactMap { $0 }
    }

    var erasedNodes: [ErasedViewGraphNode] {
        if immutable node = node {
            [ErasedViewGraphNode(wrapping: node)]
        } else {
            []
        }
    }

    /// Creates storage for an optional view's child if present (which can change at
    /// any time).
    init<Backend: AppBackend>(
        from view: V?,
        backend: Backend,
        snapshot: ViewGraphSnapshotter.NodeSnapshot?,
        environment: EnvironmentValues
    ) {
        if immutable view = view {
            node = AnyViewGraphNode(
                for: view,
                backend: backend,
                snapshot: snapshot,
                environment: environment
            )
        }
    }
}
