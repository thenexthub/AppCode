// WARNING: Please don't edit this file. It was generated by Codira/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import UWP
@_spi(WinRTInternal) @_spi(WinRTImplements) import WebView2Core
@_spi(WinRTInternal) @_spi(WinRTImplements) import WinAppSDK
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAnchorRequestedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0xD5645E80, Data2: 0xD4D3, Data3: 0x5DF8, Data4: ( 0xA3,0xAC,0x1F,0x9B,0xEE,0xB2,0xBC,0xEF ))// D5645E80-D4D3-5DF8-A3AC-1F9BEEB2BCEF
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAutoSuggestBox: WindowsFoundation.IID {
    .init(Data1: 0x3EEA809E, Data2: 0xB2DB, Data3: 0x521D, Data4: ( 0x97,0xDB,0xE0,0x64,0x8F,0xB5,0xD7,0x98 ))// 3EEA809E-B2DB-521D-97DB-E0648FB5D798
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAutoSuggestBoxQuerySubmittedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x26DA5DE4, Data2: 0x57A6, Data3: 0x57BF, Data4: ( 0xAC,0xC9,0xAA,0xC5,0x99,0xC0,0xB2,0x2B ))// 26DA5DE4-57A6-57BF-ACC9-AAC599C0B22B
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAutoSuggestBoxStatics: WindowsFoundation.IID {
    .init(Data1: 0x9DFA2FF9, Data2: 0x1094, Data3: 0x54A8, Data4: ( 0xBE,0xEE,0xB3,0x45,0xFA,0x3E,0xE0,0x89 ))// 9DFA2FF9-1094-54A8-BEEE-B345FA3EE089
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAutoSuggestBoxSuggestionChosenEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x7547C7E9, Data2: 0x7429, Data3: 0x5045, Data4: ( 0xAD,0x98,0x33,0x8A,0x96,0xB2,0x70,0xB1 ))// 7547C7E9-7429-5045-AD98-338A96B270B1
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAutoSuggestBoxTextChangedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0xD7191D84, Data2: 0xE886, Data3: 0x547F, Data4: ( 0xA3,0xE2,0x12,0xF0,0xE0,0x5B,0x20,0xFA ))// D7191D84-E886-547F-A3E2-12F0E05B20FA
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAutoSuggestBoxTextChangedEventArgsStatics: WindowsFoundation.IID {
    .init(Data1: 0x40155FB9, Data2: 0x253B, Data3: 0x5624, Data4: ( 0xA1,0x7A,0x29,0x4B,0xE7,0xA0,0x7F,0x87 ))// 40155FB9-253B-5624-A17A-294BE7A07F87
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIBorder: WindowsFoundation.IID {
    .init(Data1: 0x1CA13B47, Data2: 0xFF5C, Data3: 0x5ABC, Data4: ( 0xA4,0x11,0xA1,0x77,0xDF,0x94,0x82,0xA9 ))// 1CA13B47-FF5C-5ABC-A411-A177DF9482A9
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIBorderStatics: WindowsFoundation.IID {
    .init(Data1: 0x9385CD66, Data2: 0xC178, Data3: 0x5176, Data4: ( 0xB4,0xA5,0x16,0x0E,0x00,0xE9,0x39,0x35 ))// 9385CD66-C178-5176-B4A5-160E00E93935
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIButton: WindowsFoundation.IID {
    .init(Data1: 0x216C183D, Data2: 0xD07A, Data3: 0x5AA5, Data4: ( 0xB8,0xA4,0x03,0x00,0xA2,0x68,0x3E,0x87 ))// 216C183D-D07A-5AA5-B8A4-0300A2683E87
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIButtonFactory: WindowsFoundation.IID {
    .init(Data1: 0xFE393422, Data2: 0xD91C, Data3: 0x57B1, Data4: ( 0x9A,0x9C,0x2C,0x7E,0x3F,0x41,0xF7,0x7C ))// FE393422-D91C-57B1-9A9C-2C7E3F41F77C
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIButtonStatics: WindowsFoundation.IID {
    .init(Data1: 0x57823D25, Data2: 0xB26A, Data3: 0x5E0F, Data4: ( 0x94,0xF6,0xBB,0xAE,0x70,0x68,0x3D,0xC5 ))// 57823D25-B26A-5E0F-94F6-BBAE70683DC5
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CICandidateWindowBoundsChangedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0xB76FAF94, Data2: 0x3172, Data3: 0x5C50, Data4: ( 0x95,0x07,0x26,0xCD,0x87,0x38,0x15,0xA1 ))// B76FAF94-3172-5C50-9507-26CD873815A1
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CICanvas: WindowsFoundation.IID {
    .init(Data1: 0x457BA139, Data2: 0x1146, Data3: 0x51D2, Data4: ( 0x80,0x7E,0xD9,0xD6,0x5C,0x92,0x70,0x60 ))// 457BA139-1146-51D2-807E-D9D65C927060
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CICanvasFactory: WindowsFoundation.IID {
    .init(Data1: 0x374C5050, Data2: 0x3481, Data3: 0x5557, Data4: ( 0x99,0x48,0x80,0x4C,0x0B,0x8E,0xEA,0x89 ))// 374C5050-3481-5557-9948-804C0B8EEA89
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CICanvasStatics: WindowsFoundation.IID {
    .init(Data1: 0xC00D5E0F, Data2: 0x77E3, Data3: 0x5C59, Data4: ( 0x8F,0xCD,0x86,0x76,0x1F,0x0C,0x66,0x07 ))// C00D5E0F-77E3-5C59-8FCD-86761F0C6607
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CICheckBox: WindowsFoundation.IID {
    .init(Data1: 0xC5830000, Data2: 0x4C9D, Data3: 0x5FDD, Data4: ( 0x93,0x46,0x67,0x4C,0x71,0xCD,0x80,0xC5 ))// C5830000-4C9D-5FDD-9346-674C71CD80C5
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CICheckBoxFactory: WindowsFoundation.IID {
    .init(Data1: 0xF43FF58D, Data2: 0x31D5, Data3: 0x5835, Data4: ( 0xAF,0x7B,0x37,0x5B,0xC6,0xA9,0xBC,0xF3 ))// F43FF58D-31D5-5835-AF7B-375BC6A9BCF3
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIChoosingGroupHeaderContainerEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x2DB1B0B0, Data2: 0xAEE9, Data3: 0x55FA, Data4: ( 0x8C,0x30,0xC9,0x8F,0x00,0x64,0x3D,0x00 ))// 2DB1B0B0-AEE9-55FA-8C30-C98F00643D00
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIChoosingItemContainerEventArgs: WindowsFoundation.IID {
    .init(Data1: 0xB479B9D2, Data2: 0xA63F, Data3: 0x5638, Data4: ( 0x94,0x86,0x8C,0xCC,0x1F,0x40,0x25,0x1E ))// B479B9D2-A63F-5638-9486-8CCC1F40251E
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIColumnDefinition: WindowsFoundation.IID {
    .init(Data1: 0x454CEA14, Data2: 0x87EC, Data3: 0x5890, Data4: ( 0xBB,0x62,0xF1,0xD8,0x2A,0x94,0x75,0x8E ))// 454CEA14-87EC-5890-BB62-F1D82A94758E
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIColumnDefinitionStatics: WindowsFoundation.IID {
    .init(Data1: 0xABA4B755, Data2: 0xCA63, Data3: 0x5ED7, Data4: ( 0xAE,0x31,0x45,0xF9,0xF9,0x19,0x20,0xB0 ))// ABA4B755-CA63-5ED7-AE31-45F9F91920B0
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBox: WindowsFoundation.IID {
    .init(Data1: 0xC77DA58B, Data2: 0x4FD7, Data3: 0x51E0, Data4: ( 0xA4,0x31,0xF8,0x46,0x58,0xA8,0x3E,0x9E ))// C77DA58B-4FD7-51E0-A431-F84658A83E9E
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBoxFactory: WindowsFoundation.IID {
    .init(Data1: 0x71C1014B, Data2: 0xACDF, Data3: 0x5C03, Data4: ( 0xB5,0xED,0x02,0x87,0x1C,0xAA,0xEB,0x6B ))// 71C1014B-ACDF-5C03-B5ED-02871CAAEB6B
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBoxOverrides: WindowsFoundation.IID {
    .init(Data1: 0xA6AFBC7A, Data2: 0x284F, Data3: 0x5B9A, Data4: ( 0x89,0xFE,0xA3,0x34,0xB6,0x13,0xF8,0x95 ))// A6AFBC7A-284F-5B9A-89FE-A334B613F895
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBoxStatics: WindowsFoundation.IID {
    .init(Data1: 0x7DA7CD09, Data2: 0xE256, Data3: 0x5238, Data4: ( 0x9F,0xED,0x02,0xB2,0xF3,0xAF,0xBA,0x25 ))// 7DA7CD09-E256-5238-9FED-02B2F3AFBA25
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBoxTextSubmittedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x0D7A9794, Data2: 0x73B5, Data3: 0x585E, Data4: ( 0xBF,0xBB,0xDE,0x6D,0xF7,0xEB,0x9F,0xCF ))// 0D7A9794-73B5-585E-BFBB-DE6DF7EB9FCF
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContainerContentChangingEventArgs: WindowsFoundation.IID {
    .init(Data1: 0xF4C8C937, Data2: 0xB070, Data3: 0x53CE, Data4: ( 0xA7,0x6C,0x07,0x4E,0xE5,0x75,0x0A,0x71 ))// F4C8C937-B070-53CE-A76C-074EE5750A71
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControl: WindowsFoundation.IID {
    .init(Data1: 0x07E81761, Data2: 0x11B2, Data3: 0x52AE, Data4: ( 0x8F,0x8B,0x4D,0x53,0xD2,0xB5,0x90,0x0A ))// 07E81761-11B2-52AE-8F8B-4D53D2B5900A
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControlFactory: WindowsFoundation.IID {
    .init(Data1: 0x3DEA958E, Data2: 0x5ACD, Data3: 0x5F80, Data4: ( 0x89,0x38,0x38,0x63,0x4F,0x51,0x49,0x3A ))// 3DEA958E-5ACD-5F80-8938-38634F51493A
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControlOverrides: WindowsFoundation.IID {
    .init(Data1: 0x2504174A, Data2: 0x017E, Data3: 0x5A2D, Data4: ( 0x9C,0x28,0xD9,0x7C,0x66,0xAE,0x99,0x37 ))// 2504174A-017E-5A2D-9C28-D97C66AE9937
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControlStatics: WindowsFoundation.IID {
    .init(Data1: 0xF25484F4, Data2: 0x2FED, Data3: 0x5A0A, Data4: ( 0x88,0x64,0x7D,0x6D,0x4A,0xC4,0x3E,0xF8 ))// F25484F4-2FED-5A0A-8864-7D6D4AC43EF8
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialog: WindowsFoundation.IID {
    .init(Data1: 0xAC2145A3, Data2: 0x4A32, Data3: 0x5305, Data4: ( 0xA8,0x1D,0x47,0x50,0x95,0x15,0xBF,0xCE ))// AC2145A3-4A32-5305-A81D-47509515BFCE
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogButtonClickDeferral: WindowsFoundation.IID {
    .init(Data1: 0xDDCA6D2E, Data2: 0xA81A, Data3: 0x5F61, Data4: ( 0x8B,0x87,0xE4,0xB6,0xEC,0x5F,0xA3,0x98 ))// DDCA6D2E-A81A-5F61-8B87-E4B6EC5FA398
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogButtonClickEventArgs: WindowsFoundation.IID {
    .init(Data1: 0xBAE6261C, Data2: 0x362F, Data3: 0x5342, Data4: ( 0xBA,0x26,0x5F,0x69,0x90,0xEF,0x72,0x6C ))// BAE6261C-362F-5342-BA26-5F6990EF726C
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogClosedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x9B84E681, Data2: 0x1AB6, Data3: 0x5485, Data4: ( 0x88,0xB2,0xD0,0xD3,0xC0,0x5B,0x29,0xF3 ))// 9B84E681-1AB6-5485-88B2-D0D3C05B29F3
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogClosingDeferral: WindowsFoundation.IID {
    .init(Data1: 0x9D74ECC1, Data2: 0x67D3, Data3: 0x5F02, Data4: ( 0x9B,0x30,0x56,0xF3,0xB2,0xE8,0xB0,0xA6 ))// 9D74ECC1-67D3-5F02-9B30-56F3B2E8B0A6
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogClosingEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x12782103, Data2: 0x3B80, Data3: 0x511C, Data4: ( 0x91,0x28,0x12,0xCB,0x8C,0xDA,0xC4,0x44 ))// 12782103-3B80-511C-9128-12CB8CDAC444
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogFactory: WindowsFoundation.IID {
    .init(Data1: 0xA05B3AD7, Data2: 0xC60E, Data3: 0x545A, Data4: ( 0x9E,0xE4,0xF0,0x98,0x22,0x0E,0xD8,0x16 ))// A05B3AD7-C60E-545A-9EE4-F098220ED816
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogOpenedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0xD1355ED8, Data2: 0x64ED, Data3: 0x5BBC, Data4: ( 0x94,0x11,0x5F,0x4D,0xBC,0xA7,0xD9,0x3F ))// D1355ED8-64ED-5BBC-9411-5F4DBCA7D93F
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogStatics: WindowsFoundation.IID {
    .init(Data1: 0x397B18DD, Data2: 0x6964, Data3: 0x5056, Data4: ( 0x97,0xC3,0xD6,0x9C,0xD7,0x71,0x6A,0x4B ))// 397B18DD-6964-5056-97C3-D69CD7716A4B
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenter: WindowsFoundation.IID {
    .init(Data1: 0x075E6CA8, Data2: 0xDA46, Data3: 0x5EC6, Data4: ( 0x8C,0x64,0x03,0xB3,0xDD,0xEA,0xF7,0x4F ))// 075E6CA8-DA46-5EC6-8C64-03B3DDEAF74F
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenterFactory: WindowsFoundation.IID {
    .init(Data1: 0x730B1D5E, Data2: 0x2540, Data3: 0x5A3D, Data4: ( 0xA6,0xC7,0x88,0x8A,0xA8,0x61,0x46,0x10 ))// 730B1D5E-2540-5A3D-A6C7-888AA8614610
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenterOverrides: WindowsFoundation.IID {
    .init(Data1: 0x00E96954, Data2: 0xD6E0, Data3: 0x510F, Data4: ( 0xA2,0xD2,0x38,0xA0,0x32,0xB9,0x62,0x36 ))// 00E96954-D6E0-510F-A2D2-38A032B96236
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenterStatics: WindowsFoundation.IID {
    .init(Data1: 0xC3E55F6C, Data2: 0x7ABE, Data3: 0x568F, Data4: ( 0xB6,0x7B,0x8E,0xBD,0x32,0x74,0xF3,0x3E ))// C3E55F6C-7ABE-568F-B67B-8EBD3274F33E
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContextMenuEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x65637BB3, Data2: 0xE279, Data3: 0x5507, Data4: ( 0xBD,0x16,0x6F,0x7B,0xA6,0x70,0x5F,0x31 ))// 65637BB3-E279-5507-BD16-6F7BA6705F31
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControl: WindowsFoundation.IID {
    .init(Data1: 0x857D6E8A, Data2: 0xD45A, Data3: 0x5C69, Data4: ( 0xA9,0x9C,0xBF,0x6A,0x5C,0x54,0xFB,0x38 ))// 857D6E8A-D45A-5C69-A99C-BF6A5C54FB38
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlFactory: WindowsFoundation.IID {
    .init(Data1: 0x25159233, Data2: 0x9438, Data3: 0x5534, Data4: ( 0xAE,0xB9,0x00,0xEB,0x05,0x9C,0xF7,0x3F ))// 25159233-9438-5534-AEB9-00EB059CF73F
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides: WindowsFoundation.IID {
    .init(Data1: 0x5F644395, Data2: 0x2177, Data3: 0x5161, Data4: ( 0x9F,0x87,0xC6,0xC7,0x49,0xC7,0x3A,0x03 ))// 5F644395-2177-5161-9F87-C6C749C73A03
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlProtected: WindowsFoundation.IID {
    .init(Data1: 0x5C750339, Data2: 0x1789, Data3: 0x5095, Data4: ( 0xA2,0x14,0xDD,0x9D,0x05,0x64,0xE5,0x79 ))// 5C750339-1789-5095-A214-DD9D0564E579
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlStatics: WindowsFoundation.IID {
    .init(Data1: 0xC3AE388D, Data2: 0xAA36, Data3: 0x5E10, Data4: ( 0xAC,0xAC,0x98,0x41,0x5F,0x47,0xBC,0xC7 ))// C3AE388D-AA36-5E10-ACAC-98415F47BCC7
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlTemplate: WindowsFoundation.IID {
    .init(Data1: 0x3A192751, Data2: 0x2106, Data3: 0x547A, Data4: ( 0xAC,0xA0,0xF1,0x5A,0xE8,0x92,0x6E,0xA0 ))// 3A192751-2106-547A-ACA0-F15AE8926EA0
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CICoreWebView2InitializedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0xEE59D277, Data2: 0x8B2E, Data3: 0x57AB, Data4: ( 0x86,0x31,0x91,0xD2,0x7B,0x12,0xEB,0xD9 ))// EE59D277-8B2E-57AB-8631-91D27B12EBD9
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIDataTemplateSelector: WindowsFoundation.IID {
    .init(Data1: 0x86CA4FA4, Data2: 0x7DE0, Data3: 0x5049, Data4: ( 0x82,0xF5,0x39,0xEC,0x78,0x56,0x90,0x28 ))// 86CA4FA4-7DE0-5049-82F5-39EC78569028
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIDataTemplateSelectorFactory: WindowsFoundation.IID {
    .init(Data1: 0x43217EDA, Data2: 0x6F7F, Data3: 0x5B80, Data4: ( 0xA7,0x0B,0x94,0x45,0x11,0xB3,0x54,0xAB ))// 43217EDA-6F7F-5B80-A70B-944511B354AB
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIDataTemplateSelectorOverrides: WindowsFoundation.IID {
    .init(Data1: 0x980448CC, Data2: 0xC114, Data3: 0x5B89, Data4: ( 0x8E,0x09,0x61,0xB0,0xF2,0x64,0xE5,0x92 ))// 980448CC-C114-5B89-8E09-61B0F264E592
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIDragItemsCompletedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0xC0138552, Data2: 0xF467, Data3: 0x5C3E, Data4: ( 0x8A,0xF4,0x59,0x36,0x07,0x76,0x28,0x44 ))// C0138552-F467-5C3E-8AF4-593607762844
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIDragItemsStartingEventArgs: WindowsFoundation.IID {
    .init(Data1: 0xA6938886, Data2: 0x20DF, Data3: 0x558E, Data4: ( 0xAC,0x74,0xBB,0x5B,0x7F,0x2F,0x7E,0x90 ))// A6938886-20DF-558E-AC74-BB5B7F2F7E90
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFlyout: WindowsFoundation.IID {
    .init(Data1: 0xD4A1EB7D, Data2: 0x59B8, Data3: 0x5DF9, Data4: ( 0x87,0xC3,0xBD,0x5E,0x38,0x56,0x92,0x3F ))// D4A1EB7D-59B8-5DF9-87C3-BD5E3856923F
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFlyoutFactory: WindowsFoundation.IID {
    .init(Data1: 0xFD19002E, Data2: 0x66B3, Data3: 0x5656, Data4: ( 0xB4,0x9C,0xB2,0xAC,0xA1,0x1E,0x96,0x02 ))// FD19002E-66B3-5656-B49C-B2ACA11E9602
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFlyoutPresenter: WindowsFoundation.IID {
    .init(Data1: 0x70259825, Data2: 0x7F56, Data3: 0x5107, Data4: ( 0x91,0x7E,0x71,0x94,0xB1,0xEF,0x1B,0x81 ))// 70259825-7F56-5107-917E-7194B1EF1B81
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFlyoutPresenterFactory: WindowsFoundation.IID {
    .init(Data1: 0xE9539A80, Data2: 0x74ED, Data3: 0x5158, Data4: ( 0x9F,0x93,0x89,0x36,0x69,0xCB,0x04,0x6F ))// E9539A80-74ED-5158-9F93-893669CB046F
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFlyoutPresenterStatics: WindowsFoundation.IID {
    .init(Data1: 0xB415A2EC, Data2: 0x1BDD, Data3: 0x5F94, Data4: ( 0x95,0x00,0x25,0x72,0x23,0x64,0x64,0x69 ))// B415A2EC-1BDD-5F94-9500-257223646469
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFlyoutStatics: WindowsFoundation.IID {
    .init(Data1: 0x23AE001A, Data2: 0xAAA6, Data3: 0x5D19, Data4: ( 0x99,0x47,0x91,0x7E,0xCB,0xD8,0x83,0xCA ))// 23AE001A-AAA6-5D19-9947-917ECBD883CA
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFocusDisengagedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0xC0B4B88C, Data2: 0xC195, Data3: 0x5064, Data4: ( 0x84,0xC7,0x33,0xCB,0x26,0x2C,0xB2,0x40 ))// C0B4B88C-C195-5064-84C7-33CB262CB240
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFocusEngagedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x1E71E8E4, Data2: 0x74B2, Data3: 0x50A1, Data4: ( 0x8F,0x2B,0x42,0xC0,0x11,0x8A,0xB0,0xEA ))// 1E71E8E4-74B2-50A1-8F2B-42C0118AB0EA
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGrid: WindowsFoundation.IID {
    .init(Data1: 0xC4496219, Data2: 0x9014, Data3: 0x58A1, Data4: ( 0xB4,0xAD,0xC5,0x04,0x49,0x13,0xA5,0xBB ))// C4496219-9014-58A1-B4AD-C5044913A5BB
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGridFactory: WindowsFoundation.IID {
    .init(Data1: 0xB16BF561, Data2: 0xFC6C, Data3: 0x57C6, Data4: ( 0x8E,0xBC,0x0B,0x06,0xCE,0x45,0x13,0xAA ))// B16BF561-FC6C-57C6-8EBC-0B06CE4513AA
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGridStatics: WindowsFoundation.IID {
    .init(Data1: 0xEF9CF81D, Data2: 0xA431, Data3: 0x50F4, Data4: ( 0xAB,0xF5,0x30,0x23,0xFE,0x44,0x77,0x04 ))// EF9CF81D-A431-50F4-ABF5-3023FE447704
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGroupStyle: WindowsFoundation.IID {
    .init(Data1: 0xA77D937E, Data2: 0x0188, Data3: 0x584C, Data4: ( 0xAB,0x1D,0x9D,0xF1,0x91,0x6E,0xDC,0x75 ))// A77D937E-0188-584C-AB1D-9DF1916EDC75
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGroupStyleFactory: WindowsFoundation.IID {
    .init(Data1: 0xDC884AA2, Data2: 0xE2A8, Data3: 0x57AB, Data4: ( 0x8C,0xBC,0xB1,0xD8,0xEC,0x54,0x0B,0x0C ))// DC884AA2-E2A8-57AB-8CBC-B1D8EC540B0C
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGroupStyleSelector: WindowsFoundation.IID {
    .init(Data1: 0x524F5086, Data2: 0x3E02, Data3: 0x5B71, Data4: ( 0xBE,0x7C,0x8A,0x8F,0xA0,0xFE,0xAA,0x2C ))// 524F5086-3E02-5B71-BE7C-8A8FA0FEAA2C
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGroupStyleSelectorFactory: WindowsFoundation.IID {
    .init(Data1: 0x0E0699BE, Data2: 0x50C2, Data3: 0x5C15, Data4: ( 0xAE,0xD3,0xE7,0xBD,0x66,0x3E,0x5F,0xAD ))// 0E0699BE-50C2-5C15-AED3-E7BD663E5FAD
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGroupStyleSelectorOverrides: WindowsFoundation.IID {
    .init(Data1: 0x80594304, Data2: 0xEBEB, Data3: 0x5A5D, Data4: ( 0xA7,0x94,0xAC,0xDC,0x21,0x4C,0xBC,0x94 ))// 80594304-EBEB-5A5D-A794-ACDC214CBC94
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIHyperlinkButton: WindowsFoundation.IID {
    .init(Data1: 0x6DBEE605, Data2: 0x8DF0, Data3: 0x50CC, Data4: ( 0x9A,0x42,0x25,0x0E,0xB1,0x38,0xF0,0xC6 ))// 6DBEE605-8DF0-50CC-9A42-250EB138F0C6
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIHyperlinkButtonFactory: WindowsFoundation.IID {
    .init(Data1: 0x01F775EA, Data2: 0xC5ED, Data3: 0x514A, Data4: ( 0xA2,0x3D,0x89,0xC4,0x94,0xA8,0xF0,0x9D ))// 01F775EA-C5ED-514A-A23D-89C494A8F09D
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIHyperlinkButtonStatics: WindowsFoundation.IID {
    .init(Data1: 0xAB5C7B77, Data2: 0x7C4C, Data3: 0x5B26, Data4: ( 0x9C,0x7C,0x76,0x3F,0x8D,0x95,0x25,0x8E ))// AB5C7B77-7C4C-5B26-9C7C-763F8D95258E
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIIconElement: WindowsFoundation.IID {
    .init(Data1: 0x18F69350, Data2: 0x279E, Data3: 0x50EA, Data4: ( 0x8D,0x23,0x13,0x8E,0x71,0x7E,0xD9,0x39 ))// 18F69350-279E-50EA-8D23-138E717ED939
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIIconElementFactory: WindowsFoundation.IID {
    .init(Data1: 0x7161EEFF, Data2: 0x2CC3, Data3: 0x59C9, Data4: ( 0xB3,0x55,0xF7,0x52,0xEF,0x20,0x30,0xFB ))// 7161EEFF-2CC3-59C9-B355-F752EF2030FB
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIIconElementStatics: WindowsFoundation.IID {
    .init(Data1: 0x4CCFDC81, Data2: 0x9D9D, Data3: 0x5A02, Data4: ( 0xB9,0x5B,0xAD,0x1A,0xDD,0x92,0x17,0x50 ))// 4CCFDC81-9D9D-5A02-B95B-AD1ADD921750
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIIconSource: WindowsFoundation.IID {
    .init(Data1: 0x39E6B320, Data2: 0xA2AF, Data3: 0x5EE3, Data4: ( 0xB7,0xE9,0x4B,0xA4,0xAA,0x80,0x54,0x1A ))// 39E6B320-A2AF-5EE3-B7E9-4BA4AA80541A
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIIconSourceFactory: WindowsFoundation.IID {
    .init(Data1: 0xE8BC19C6, Data2: 0x9A64, Data3: 0x5C54, Data4: ( 0x93,0x38,0xE1,0x8E,0x07,0x68,0x75,0xBF ))// E8BC19C6-9A64-5C54-9338-E18E076875BF
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIIconSourceOverrides: WindowsFoundation.IID {
    .init(Data1: 0x9A02D369, Data2: 0x1C79, Data3: 0x5A81, Data4: ( 0x87,0x1B,0x0B,0x90,0x94,0x6B,0xA7,0xF0 ))// 9A02D369-1C79-5A81-871B-0B90946BA7F0
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIIconSourceStatics: WindowsFoundation.IID {
    .init(Data1: 0xEED55973, Data2: 0x7E15, Data3: 0x575F, Data4: ( 0xAF,0x8E,0xAE,0x2B,0x9B,0x97,0x5D,0xD7 ))// EED55973-7E15-575F-AF8E-AE2B9B975DD7
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIImage: WindowsFoundation.IID {
    .init(Data1: 0x220D3D8D, Data2: 0x66DE, Data3: 0x53A1, Data4: ( 0xA2,0x15,0xBA,0x9C,0x16,0x55,0x65,0xAB ))// 220D3D8D-66DE-53A1-A215-BA9C165565AB
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIImageStatics: WindowsFoundation.IID {
    .init(Data1: 0xCB5378A8, Data2: 0x996B, Data3: 0x547E, Data4: ( 0x9C,0x4C,0x7B,0xBF,0xD9,0xDB,0xE7,0xDC ))// CB5378A8-996B-547E-9C4C-7BBFD9DBE7DC
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBadge: WindowsFoundation.IID {
    .init(Data1: 0x82104D7F, Data2: 0x03D4, Data3: 0x5EA4, Data4: ( 0x87,0x2E,0xF9,0xEC,0xAB,0x75,0x86,0x01 ))// 82104D7F-03D4-5EA4-872E-F9ECAB758601
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBadgeFactory: WindowsFoundation.IID {
    .init(Data1: 0xFB498205, Data2: 0x2DE0, Data3: 0x5986, Data4: ( 0x8A,0xEC,0x2C,0x46,0xAC,0x23,0x50,0x87 ))// FB498205-2DE0-5986-8AEC-2C46AC235087
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBadgeStatics: WindowsFoundation.IID {
    .init(Data1: 0xB0160061, Data2: 0xB463, Data3: 0x54DE, Data4: ( 0x81,0xAC,0x64,0xF3,0x90,0xD4,0xF2,0x5D ))// B0160061-B463-54DE-81AC-64F390D4F25D
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBadgeTemplateSettings: WindowsFoundation.IID {
    .init(Data1: 0xCE810F86, Data2: 0xD4BB, Data3: 0x51BD, Data4: ( 0xBF,0x7D,0xDF,0xD1,0xE6,0xC8,0x5F,0x4A ))// CE810F86-D4BB-51BD-BF7D-DFD1E6C85F4A
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBadgeTemplateSettingsFactory: WindowsFoundation.IID {
    .init(Data1: 0x5D366775, Data2: 0x1F6E, Data3: 0x558C, Data4: ( 0xAA,0xB4,0x66,0x77,0x04,0xB3,0x07,0x0C ))// 5D366775-1F6E-558C-AAB4-667704B3070C
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBadgeTemplateSettingsStatics: WindowsFoundation.IID {
    .init(Data1: 0x10959133, Data2: 0x64CE, Data3: 0x586F, Data4: ( 0xA2,0x52,0x9E,0x26,0xFC,0x1A,0xD9,0xBA ))// 10959133-64CE-586F-A252-9E26FC1AD9BA
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIIsTextTrimmedChangedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x3C709B2F, Data2: 0x16BA, Data3: 0x55D2, Data4: ( 0xB6,0xF6,0xDF,0xC5,0x4A,0x1E,0xD0,0x21 ))// 3C709B2F-16BA-55D2-B6F6-DFC54A1ED021
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemClickEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x1CF87A70, Data2: 0x6348, Data3: 0x57EC, Data4: ( 0x9E,0xAC,0xFA,0x05,0x65,0xAD,0xC6,0x0F ))// 1CF87A70-6348-57EC-9EAC-FA0565ADC60F
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemContainerGenerator: WindowsFoundation.IID {
    .init(Data1: 0xC4C5D5AE, Data2: 0xED98, Data3: 0x510F, Data4: ( 0xAF,0xAE,0x8A,0x0A,0xC6,0x06,0x7A,0x3B ))// C4C5D5AE-ED98-510F-AFAE-8A0AC6067A3B
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemContainerMapping: WindowsFoundation.IID {
    .init(Data1: 0xB3E03A32, Data2: 0xEA83, Data3: 0x5626, Data4: ( 0xBF,0xDA,0xD3,0x27,0xA1,0xC7,0x55,0x0C ))// B3E03A32-EA83-5626-BFDA-D327A1C7550C
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControl: WindowsFoundation.IID {
    .init(Data1: 0xBF1CCB54, Data2: 0x83E2, Data3: 0x5B98, Data4: ( 0xAC,0xBC,0x73,0x6F,0x87,0x6C,0x3D,0x35 ))// BF1CCB54-83E2-5B98-ACBC-736F876C3D35
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControlFactory: WindowsFoundation.IID {
    .init(Data1: 0xB2686273, Data2: 0x2DD3, Data3: 0x5454, Data4: ( 0x9F,0x25,0x24,0x7E,0x66,0x27,0x03,0x36 ))// B2686273-2DD3-5454-9F25-247E66270336
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControlOverrides: WindowsFoundation.IID {
    .init(Data1: 0x285C215F, Data2: 0x64B2, Data3: 0x5F7D, Data4: ( 0x88,0xD2,0x56,0xC6,0x65,0x8F,0x73,0xEE ))// 285C215F-64B2-5F7D-88D2-56C6658F73EE
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControlStatics: WindowsFoundation.IID {
    .init(Data1: 0x4FB961E1, Data2: 0x5F91, Data3: 0x5585, Data4: ( 0xA6,0x92,0x68,0x25,0xCD,0xE3,0xED,0x1E ))// 4FB961E1-5F91-5585-A692-6825CDE3ED1E
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsPanelTemplate: WindowsFoundation.IID {
    .init(Data1: 0x6153AF2F, Data2: 0xF095, Data3: 0x5E8C, Data4: ( 0x89,0xD4,0x9E,0x03,0x20,0x3B,0x9C,0xC2 ))// 6153AF2F-F095-5E8C-89D4-9E03203B9CC2
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIKeyIndexMapping: WindowsFoundation.IID {
    .init(Data1: 0xB1F3BBA0, Data2: 0x108E, Data3: 0x560D, Data4: ( 0x96,0x81,0x26,0x39,0x1B,0x4B,0xC3,0x0D ))// B1F3BBA0-108E-560D-9681-26391B4BC30D
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListView: WindowsFoundation.IID {
    .init(Data1: 0xF6015DB1, Data2: 0xDF63, Data3: 0x52FD, Data4: ( 0xA1,0x64,0x0D,0xF4,0x47,0x15,0xEE,0x0A ))// F6015DB1-DF63-52FD-A164-0DF44715EE0A
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase: WindowsFoundation.IID {
    .init(Data1: 0x775C57AC, Data2: 0xABCE, Data3: 0x5BEB, Data4: ( 0x8E,0x34,0x3B,0x81,0x58,0xAE,0xDD,0x80 ))// 775C57AC-ABCE-5BEB-8E34-3B8158AEDD80
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBaseFactory: WindowsFoundation.IID {
    .init(Data1: 0x44092863, Data2: 0xC09E, Data3: 0x551E, Data4: ( 0x85,0xBF,0x95,0x1B,0x55,0x29,0x50,0xC8 ))// 44092863-C09E-551E-85BF-951B552950C8
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBaseHeaderItem: WindowsFoundation.IID {
    .init(Data1: 0x9220C4FF, Data2: 0x1974, Data3: 0x53FD, Data4: ( 0xAD,0x74,0xC2,0x9E,0x7B,0x36,0x0A,0x06 ))// 9220C4FF-1974-53FD-AD74-C29E7B360A06
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBaseHeaderItemFactory: WindowsFoundation.IID {
    .init(Data1: 0x228FC10A, Data2: 0xB86F, Data3: 0x5B57, Data4: ( 0x96,0xF4,0x34,0xD9,0xF9,0xFB,0x87,0x11 ))// 228FC10A-B86F-5B57-96F4-34D9F9FB8711
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBaseStatics: WindowsFoundation.IID {
    .init(Data1: 0xB8487E94, Data2: 0x010F, Data3: 0x56D4, Data4: ( 0x9F,0x76,0x94,0xBF,0x8C,0x46,0x27,0x45 ))// B8487E94-010F-56D4-9F76-94BF8C462745
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewFactory: WindowsFoundation.IID {
    .init(Data1: 0x03EBEFB8, Data2: 0xF64A, Data3: 0x5BF9, Data4: ( 0x95,0x70,0xCB,0x09,0xEE,0xEA,0x23,0x35 ))// 03EBEFB8-F64A-5BF9-9570-CB09EEEA2335
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewItem: WindowsFoundation.IID {
    .init(Data1: 0x05FE41C2, Data2: 0x0451, Data3: 0x5D38, Data4: ( 0x9C,0x55,0x5D,0x10,0xCF,0xD0,0x88,0x89 ))// 05FE41C2-0451-5D38-9C55-5D10CFD08889
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewItemFactory: WindowsFoundation.IID {
    .init(Data1: 0xD9F4D0B8, Data2: 0xEE59, Data3: 0x5036, Data4: ( 0xBD,0x7A,0x7C,0x89,0xCF,0x0B,0xC2,0xAC ))// D9F4D0B8-EE59-5036-BD7A-7C89CF0BC2AC
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuBar: WindowsFoundation.IID {
    .init(Data1: 0xBA97F337, Data2: 0x8F1E, Data3: 0x5141, Data4: ( 0xB5,0x3F,0xE7,0x7A,0x8B,0xA3,0xEB,0xBD ))// BA97F337-8F1E-5141-B53F-E77A8BA3EBBD
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuBarFactory: WindowsFoundation.IID {
    .init(Data1: 0x76AA8759, Data2: 0x04EE, Data3: 0x5A4C, Data4: ( 0xB9,0x8C,0xD0,0x37,0x42,0xD4,0x7C,0xDB ))// 76AA8759-04EE-5A4C-B98C-D03742D47CDB
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuBarItem: WindowsFoundation.IID {
    .init(Data1: 0xA7900980, Data2: 0x51CC, Data3: 0x531D, Data4: ( 0x97,0xC5,0x35,0x6B,0x13,0x57,0x33,0x98 ))// A7900980-51CC-531D-97C5-356B13573398
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuBarItemFactory: WindowsFoundation.IID {
    .init(Data1: 0x87D02172, Data2: 0x83CB, Data3: 0x5459, Data4: ( 0x94,0x0F,0x17,0x3F,0x75,0x01,0xB3,0x00 ))// 87D02172-83CB-5459-940F-173F7501B300
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuBarItemStatics: WindowsFoundation.IID {
    .init(Data1: 0xC8A33F46, Data2: 0x2E1C, Data3: 0x5CE0, Data4: ( 0xBC,0x09,0x45,0x24,0xE6,0x89,0x41,0xC8 ))// C8A33F46-2E1C-5CE0-BC09-4524E68941C8
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuBarStatics: WindowsFoundation.IID {
    .init(Data1: 0x79AA0B84, Data2: 0x5554, Data3: 0x5F7C, Data4: ( 0x80,0xD9,0x79,0x70,0xAA,0x03,0x01,0x25 ))// 79AA0B84-5554-5F7C-80D9-7970AA030125
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyout: WindowsFoundation.IID {
    .init(Data1: 0xF4C77C6C, Data2: 0x1FA5, Data3: 0x5D85, Data4: ( 0x85,0x59,0x5D,0x02,0xB7,0xD4,0xE5,0xE7 ))// F4C77C6C-1FA5-5D85-8559-5D02B7D4E5E7
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutFactory: WindowsFoundation.IID {
    .init(Data1: 0xA3D225DE, Data2: 0x6B35, Data3: 0x5442, Data4: ( 0xB6,0xC9,0x06,0xFD,0x24,0x13,0x9A,0x63 ))// A3D225DE-6B35-5442-B6C9-06FD24139A63
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutItem: WindowsFoundation.IID {
    .init(Data1: 0x4252DF5A, Data2: 0x44F9, Data3: 0x5EE8, Data4: ( 0xB1,0xCC,0x53,0xDE,0x9A,0xAA,0x40,0x95 ))// 4252DF5A-44F9-5EE8-B1CC-53DE9AAA4095
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutItemBase: WindowsFoundation.IID {
    .init(Data1: 0x4BEE2715, Data2: 0x44A1, Data3: 0x5F94, Data4: ( 0x86,0xE8,0x02,0xDD,0xBE,0x3D,0xC6,0xB9 ))// 4BEE2715-44A1-5F94-86E8-02DDBE3DC6B9
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutItemBaseFactory: WindowsFoundation.IID {
    .init(Data1: 0x33F4EAD3, Data2: 0xAB54, Data3: 0x505D, Data4: ( 0xBC,0x5F,0x45,0xE7,0xC3,0x5F,0x20,0xF8 ))// 33F4EAD3-AB54-505D-BC5F-45E7C35F20F8
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutItemFactory: WindowsFoundation.IID {
    .init(Data1: 0x9C3C9A1F, Data2: 0x89AF, Data3: 0x521A, Data4: ( 0x81,0xA5,0x8A,0x01,0xDB,0x7A,0x79,0xAF ))// 9C3C9A1F-89AF-521A-81A5-8A01DB7A79AF
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutItemStatics: WindowsFoundation.IID {
    .init(Data1: 0x9D7953D6, Data2: 0xE6A6, Data3: 0x5154, Data4: ( 0x91,0xF4,0x67,0xF4,0xD6,0x04,0x2A,0x4F ))// 9D7953D6-E6A6-5154-91F4-67F4D6042A4F
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutSeparator: WindowsFoundation.IID {
    .init(Data1: 0x3EAF5FD5, Data2: 0x935E, Data3: 0x5ED7, Data4: ( 0x8D,0x05,0xF6,0xBA,0xFA,0x93,0x6D,0x25 ))// 3EAF5FD5-935E-5ED7-8D05-F6BAFA936D25
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutSeparatorFactory: WindowsFoundation.IID {
    .init(Data1: 0x26156C9C, Data2: 0x95EF, Data3: 0x5E55, Data4: ( 0x83,0x42,0x77,0x3F,0xC4,0x3B,0xAA,0xC3 ))// 26156C9C-95EF-5E55-8342-773FC43BAAC3
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutStatics: WindowsFoundation.IID {
    .init(Data1: 0x6959E683, Data2: 0x16F6, Data3: 0x5208, Data4: ( 0x84,0xE0,0xB0,0xBE,0x92,0xD9,0xF6,0xDD ))// 6959E683-16F6-5208-84E0-B0BE92D9F6DD
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutSubItem: WindowsFoundation.IID {
    .init(Data1: 0x6B0688C1, Data2: 0x47B0, Data3: 0x53B5, Data4: ( 0xB6,0xF9,0x5E,0xC5,0xD6,0x62,0x3B,0x84 ))// 6B0688C1-47B0-53B5-B6F9-5EC5D6623B84
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutSubItemStatics: WindowsFoundation.IID {
    .init(Data1: 0xF59A8DDF, Data2: 0x804B, Data3: 0x5F56, Data4: ( 0xBC,0x42,0xF2,0x7F,0x98,0x7D,0xB2,0x91 ))// F59A8DDF-804B-5F56-BC42-F27F987DB291
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationView: WindowsFoundation.IID {
    .init(Data1: 0xE77A4B36, Data2: 0x3DD1, Data3: 0x53D9, Data4: ( 0x9F,0x97,0x65,0xDC,0xCA,0xA7,0x4A,0x5C ))// E77A4B36-3DD1-53D9-9F97-65DCCAA74A5C
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationView2: WindowsFoundation.IID {
    .init(Data1: 0x05B428CF, Data2: 0x014C, Data3: 0x56DD, Data4: ( 0x89,0x6A,0xA3,0xE7,0x08,0x9D,0x73,0xB5 ))// 05B428CF-014C-56DD-896A-A3E7089D73B5
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewBackRequestedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0xAE752207, Data2: 0xBD1B, Data3: 0x5AFA, Data4: ( 0xA8,0x72,0xE9,0xBB,0xAE,0xEA,0x0E,0xDE ))// AE752207-BD1B-5AFA-A872-E9BBAEEA0EDE
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewDisplayModeChangedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x58DCF1EA, Data2: 0x9E56, Data3: 0x522C, Data4: ( 0xB3,0xF8,0x34,0xBD,0x55,0xEC,0xAC,0xA4 ))// 58DCF1EA-9E56-522C-B3F8-34BD55ECACA4
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewFactory: WindowsFoundation.IID {
    .init(Data1: 0xFFEA1ADA, Data2: 0x9232, Data3: 0x5507, Data4: ( 0xA3,0x20,0xED,0x2F,0xAD,0xBE,0x61,0x27 ))// FFEA1ADA-9232-5507-A320-ED2FADBE6127
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewItem: WindowsFoundation.IID {
    .init(Data1: 0x3AB3D503, Data2: 0xA37C, Data3: 0x5836, Data4: ( 0x8A,0xDB,0x28,0x82,0x06,0x2E,0x73,0xA1 ))// 3AB3D503-A37C-5836-8ADB-2882062E73A1
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewItem2: WindowsFoundation.IID {
    .init(Data1: 0x2D5BD889, Data2: 0x9DAC, Data3: 0x5675, Data4: ( 0xB2,0x54,0x68,0x22,0x6F,0x07,0x7A,0x61 ))// 2D5BD889-9DAC-5675-B254-68226F077A61
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewItem3: WindowsFoundation.IID {
    .init(Data1: 0xC6AA3120, Data2: 0xD888, Data3: 0x5C32, Data4: ( 0x8B,0xB7,0x49,0x0E,0xC9,0x1B,0x1A,0xEC ))// C6AA3120-D888-5C32-8BB7-490EC91B1AEC
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewItemBase: WindowsFoundation.IID {
    .init(Data1: 0x33586494, Data2: 0xAF48, Data3: 0x513F, Data4: ( 0xBE,0x4D,0xF6,0x45,0xE8,0xC8,0x90,0x05 ))// 33586494-AF48-513F-BE4D-F645E8C89005
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewItemBase2: WindowsFoundation.IID {
    .init(Data1: 0xD94EE683, Data2: 0xD437, Data3: 0x5523, Data4: ( 0x9C,0x5C,0x11,0xD4,0x80,0x4E,0x47,0x1E ))// D94EE683-D437-5523-9C5C-11D4804E471E
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewItemBaseFactory: WindowsFoundation.IID {
    .init(Data1: 0x31B9D7B1, Data2: 0x7C38, Data3: 0x5916, Data4: ( 0x99,0xC6,0xC7,0x1F,0x6B,0x01,0x2B,0x1B ))// 31B9D7B1-7C38-5916-99C6-C71F6B012B1B
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewItemBaseStatics: WindowsFoundation.IID {
    .init(Data1: 0x71A0C438, Data2: 0xF0C2, Data3: 0x5093, Data4: ( 0x89,0x06,0xC1,0xC3,0xC0,0x2D,0xE7,0x91 ))// 71A0C438-F0C2-5093-8906-C1C3C02DE791
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewItemCollapsedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0xB546F6A1, Data2: 0xC66F, Data3: 0x5DED, Data4: ( 0xB5,0xD7,0xBE,0xD0,0xA2,0x61,0x97,0xE3 ))// B546F6A1-C66F-5DED-B5D7-BED0A26197E3
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewItemExpandingEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x6F0941BE, Data2: 0xE991, Data3: 0x52F8, Data4: ( 0x83,0x15,0xF0,0x83,0x89,0x49,0x79,0x76 ))// 6F0941BE-E991-52F8-8315-F08389497976
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewItemFactory: WindowsFoundation.IID {
    .init(Data1: 0xDE60A001, Data2: 0x9385, Data3: 0x5535, Data4: ( 0x80,0xE1,0x2B,0x68,0xF4,0xBF,0xDE,0x26 ))// DE60A001-9385-5535-80E1-2B68F4BFDE26
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewItemInvokedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x074CEBAA, Data2: 0x5D05, Data3: 0x547B, Data4: ( 0x8C,0xD6,0xD1,0x9A,0xC2,0xD9,0xBB,0x3B ))// 074CEBAA-5D05-547B-8CD6-D19AC2D9BB3B
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewItemInvokedEventArgs2: WindowsFoundation.IID {
    .init(Data1: 0xE1CBB99F, Data2: 0x19EB, Data3: 0x5C7B, Data4: ( 0xB9,0x82,0x85,0x4B,0xB0,0x8D,0x5E,0xB7 ))// E1CBB99F-19EB-5C7B-B982-854BB08D5EB7
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewItemStatics: WindowsFoundation.IID {
    .init(Data1: 0x7B6198E5, Data2: 0x0714, Data3: 0x531C, Data4: ( 0xA0,0x56,0x21,0xB3,0xCA,0x40,0xEC,0x1A ))// 7B6198E5-0714-531C-A056-21B3CA40EC1A
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewItemStatics2: WindowsFoundation.IID {
    .init(Data1: 0xD49D016F, Data2: 0xABD0, Data3: 0x51F3, Data4: ( 0xAC,0xF0,0x11,0x8E,0xCC,0xEE,0xA7,0x60 ))// D49D016F-ABD0-51F3-ACF0-118ECCEEA760
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewItemStatics3: WindowsFoundation.IID {
    .init(Data1: 0x957BEB66, Data2: 0xD33A, Data3: 0x53AA, Data4: ( 0xA5,0x18,0x7D,0x42,0x6B,0xB9,0xB1,0x77 ))// 957BEB66-D33A-53AA-A518-7D426BB9B177
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewPaneClosingEventArgs: WindowsFoundation.IID {
    .init(Data1: 0xE8643304, Data2: 0x6DB4, Data3: 0x5AF5, Data4: ( 0xBA,0xC2,0x62,0x73,0x3C,0xA0,0x37,0xDA ))// E8643304-6DB4-5AF5-BAC2-62733CA037DA
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewSelectionChangedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x14A064A5, Data2: 0xC79D, Data3: 0x5F63, Data4: ( 0xAC,0x6E,0x1C,0x31,0x3F,0xE6,0x35,0x66 ))// 14A064A5-C79D-5F63-AC6E-1C313FE63566
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewSelectionChangedEventArgs2: WindowsFoundation.IID {
    .init(Data1: 0xE9B5191F, Data2: 0x1AD1, Data3: 0x5366, Data4: ( 0xBC,0x1A,0x90,0xB9,0x60,0x76,0xD4,0x9E ))// E9B5191F-1AD1-5366-BC1A-90B96076D49E
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewStatics: WindowsFoundation.IID {
    .init(Data1: 0xDCD04CAF, Data2: 0x1904, Data3: 0x564B, Data4: ( 0xB0,0xDE,0xBA,0xBA,0xFF,0x99,0x62,0xF5 ))// DCD04CAF-1904-564B-B0DE-BABAFF9962F5
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewStatics2: WindowsFoundation.IID {
    .init(Data1: 0x79588150, Data2: 0x4A1B, Data3: 0x5E7C, Data4: ( 0x9F,0x8A,0xEB,0xC8,0x14,0xCE,0x77,0x3D ))// 79588150-4A1B-5E7C-9F8A-EBC814CE773D
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewTemplateSettings: WindowsFoundation.IID {
    .init(Data1: 0xBBD25FA5, Data2: 0x9C08, Data3: 0x5F10, Data4: ( 0xBE,0x20,0xCB,0x4C,0x18,0x99,0xBD,0x9D ))// BBD25FA5-9C08-5F10-BE20-CB4C1899BD9D
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewTemplateSettings2: WindowsFoundation.IID {
    .init(Data1: 0x56BEC72F, Data2: 0x1DE1, Data3: 0x5060, Data4: ( 0xA4,0x4C,0x18,0x78,0x85,0xDF,0x29,0x73 ))// 56BEC72F-1DE1-5060-A44C-187885DF2973
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewTemplateSettingsFactory: WindowsFoundation.IID {
    .init(Data1: 0x34FF6C94, Data2: 0x6465, Data3: 0x5F3E, Data4: ( 0xB0,0xA5,0x4F,0x1E,0xEA,0x48,0xE7,0x43 ))// 34FF6C94-6465-5F3E-B0A5-4F1EEA48E743
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewTemplateSettingsStatics: WindowsFoundation.IID {
    .init(Data1: 0xBE3A88D6, Data2: 0xD19B, Data3: 0x5543, Data4: ( 0x8B,0x72,0xD4,0x2B,0x45,0x9E,0x72,0xED ))// BE3A88D6-D19B-5543-8B72-D42B459E72ED
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewTemplateSettingsStatics2: WindowsFoundation.IID {
    .init(Data1: 0xC0C06BE3, Data2: 0x9203, Data3: 0x5EEA, Data4: ( 0x91,0xDC,0x5D,0x81,0x2A,0x97,0x02,0xA6 ))// C0C06BE3-9203-5EEA-91DC-5D812A9702A6
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPanel: WindowsFoundation.IID {
    .init(Data1: 0x27A1B418, Data2: 0x56F3, Data3: 0x525E, Data4: ( 0xB8,0x83,0xCE,0xFE,0xD9,0x05,0xEE,0xD3 ))// 27A1B418-56F3-525E-B883-CEFED905EED3
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPanelFactory: WindowsFoundation.IID {
    .init(Data1: 0xF5E7E21C, Data2: 0x4C97, Data3: 0x5D20, Data4: ( 0xBE,0xE6,0x3E,0x4F,0xC6,0xAB,0x14,0xE9 ))// F5E7E21C-4C97-5D20-BEE6-3E4FC6AB14E9
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPanelStatics: WindowsFoundation.IID {
    .init(Data1: 0x76A9CAA7, Data2: 0xA5D4, Data3: 0x5061, Data4: ( 0xA3,0x25,0x17,0xC7,0x6F,0x66,0xDE,0x51 ))// 76A9CAA7-A5D4-5061-A325-17C76F66DE51
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBox: WindowsFoundation.IID {
    .init(Data1: 0x6D3CCFF7, Data2: 0xAAEE, Data3: 0x5ADC, Data4: ( 0x82,0x98,0x33,0x30,0x0F,0xA1,0x19,0xDA ))// 6D3CCFF7-AAEE-5ADC-8298-33300FA119DA
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBoxPasswordChangingEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x9A2F3B79, Data2: 0xC00C, Data3: 0x5D27, Data4: ( 0xBB,0x67,0x92,0xCA,0xB3,0xDB,0x04,0x77 ))// 9A2F3B79-C00C-5D27-BB67-92CAB3DB0477
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBoxStatics: WindowsFoundation.IID {
    .init(Data1: 0x90E6559C, Data2: 0x5F74, Data3: 0x5CD1, Data4: ( 0x87,0xB6,0xC0,0x51,0x40,0x85,0xAB,0x42 ))// 90E6559C-5F74-5CD1-87B6-C0514085AB42
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressBar: WindowsFoundation.IID {
    .init(Data1: 0x87555C8C, Data2: 0x0AAF, Data3: 0x52C1, Data4: ( 0x83,0x90,0x0D,0xB1,0x7F,0x40,0x43,0x8E ))// 87555C8C-0AAF-52C1-8390-0DB17F40438E
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressBarFactory: WindowsFoundation.IID {
    .init(Data1: 0x189826AD, Data2: 0xF6F2, Data3: 0x533E, Data4: ( 0x9D,0xDB,0xB6,0x60,0x0E,0x88,0x67,0x5B ))// 189826AD-F6F2-533E-9DDB-B6600E88675B
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressBarStatics: WindowsFoundation.IID {
    .init(Data1: 0x61BBB127, Data2: 0xE4C4, Data3: 0x5E22, Data4: ( 0xA8,0xDC,0xCF,0xCF,0x95,0x72,0x36,0xD0 ))// 61BBB127-E4C4-5E22-A8DC-CFCF957236D0
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressBarTemplateSettings: WindowsFoundation.IID {
    .init(Data1: 0xFBEA95C9, Data2: 0x9EF9, Data3: 0x5E79, Data4: ( 0xAF,0x54,0x44,0xDE,0xD2,0x80,0x35,0xD5 ))// FBEA95C9-9EF9-5E79-AF54-44DED28035D5
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressRing: WindowsFoundation.IID {
    .init(Data1: 0x2670D03F, Data2: 0xE28C, Data3: 0x5652, Data4: ( 0xBE,0xE2,0xB5,0x21,0x2E,0xBD,0xF7,0xFF ))// 2670D03F-E28C-5652-BEE2-B5212EBDF7FF
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressRingFactory: WindowsFoundation.IID {
    .init(Data1: 0x092FA98C, Data2: 0x62A7, Data3: 0x5DBC, Data4: ( 0x9A,0x85,0x3E,0x55,0x6B,0xA8,0x1F,0x79 ))// 092FA98C-62A7-5DBC-9A85-3E556BA81F79
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressRingStatics: WindowsFoundation.IID {
    .init(Data1: 0x4BA1166A, Data2: 0xCEC2, Data3: 0x50E2, Data4: ( 0xB2,0x6B,0x66,0xB6,0x9D,0xC2,0xE3,0x71 ))// 4BA1166A-CEC2-50E2-B26B-66B69DC2E371
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressRingTemplateSettings: WindowsFoundation.IID {
    .init(Data1: 0x34020D86, Data2: 0xE1C1, Data3: 0x5D7C, Data4: ( 0xB2,0x23,0xAC,0xD7,0xF8,0x62,0xFF,0xD5 ))// 34020D86-E1C1-5D7C-B223-ACD7F862FFD5
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRadioButton: WindowsFoundation.IID {
    .init(Data1: 0x38F30CEE, Data2: 0xE75A, Data3: 0x5BA1, Data4: ( 0xAE,0x64,0x44,0x74,0xA3,0xAB,0xEA,0xC7 ))// 38F30CEE-E75A-5BA1-AE64-4474A3ABEAC7
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRadioButtonFactory: WindowsFoundation.IID {
    .init(Data1: 0x5772C79A, Data2: 0xB3EB, Data3: 0x5719, Data4: ( 0x80,0x05,0x2A,0x51,0x34,0x29,0x49,0x5A ))// 5772C79A-B3EB-5719-8005-2A513429495A
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRadioButtonStatics: WindowsFoundation.IID {
    .init(Data1: 0xA8BCE4D4, Data2: 0x68FE, Data3: 0x53D9, Data4: ( 0xA3,0x17,0x74,0xAB,0x40,0x9C,0xD4,0xEE ))// A8BCE4D4-68FE-53D9-A317-74AB409CD4EE
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRadioButtons: WindowsFoundation.IID {
    .init(Data1: 0x966DAF80, Data2: 0xEE85, Data3: 0x5D90, Data4: ( 0xB6,0xB3,0x80,0xBE,0xC9,0x13,0x46,0x73 ))// 966DAF80-EE85-5D90-B6B3-80BEC9134673
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRadioButtonsFactory: WindowsFoundation.IID {
    .init(Data1: 0x2CF95EFB, Data2: 0xA7A2, Data3: 0x5D85, Data4: ( 0x8E,0xAD,0xEA,0x22,0x2B,0xAA,0x3C,0x55 ))// 2CF95EFB-A7A2-5D85-8EAD-EA222BAA3C55
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRadioButtonsStatics: WindowsFoundation.IID {
    .init(Data1: 0xDE0BF0CA, Data2: 0x9AE8, Data3: 0x5B8A, Data4: ( 0x97,0x38,0x7D,0x98,0xB3,0x44,0xC0,0x39 ))// DE0BF0CA-9AE8-5B8A-9738-7D98B344C039
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRowDefinition: WindowsFoundation.IID {
    .init(Data1: 0xFE870F2F, Data2: 0x89EF, Data3: 0x5DAC, Data4: ( 0x9F,0x33,0x96,0x8D,0x0D,0xC5,0x77,0xC3 ))// FE870F2F-89EF-5DAC-9F33-968D0DC577C3
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRowDefinitionStatics: WindowsFoundation.IID {
    .init(Data1: 0x7317C7C5, Data2: 0xFD6F, Data3: 0x58D9, Data4: ( 0x9B,0x53,0x49,0x78,0xDB,0xAC,0xDE,0x23 ))// 7317C7C5-FD6F-58D9-9B53-4978DBACDE23
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollAnchorProvider: WindowsFoundation.IID {
    .init(Data1: 0x885DF41F, Data2: 0xF240, Data3: 0x5B7B, Data4: ( 0xA7,0x03,0xBF,0xAF,0x39,0xC6,0xA2,0xCD ))// 885DF41F-F240-5B7B-A703-BFAF39C6A2CD
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView: WindowsFoundation.IID {
    .init(Data1: 0x8C98C86D, Data2: 0x378A, Data3: 0x5102, Data4: ( 0xA1,0xE3,0x33,0x52,0x28,0x0F,0xA0,0x10 ))// 8C98C86D-378A-5102-A1E3-3352280FA010
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewFactory: WindowsFoundation.IID {
    .init(Data1: 0xF3547344, Data2: 0x22E4, Data3: 0x5E6C, Data4: ( 0x9E,0xCE,0x66,0x50,0x4E,0xF7,0x33,0xED ))// F3547344-22E4-5E6C-9ECE-66504EF733ED
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewStatics: WindowsFoundation.IID {
    .init(Data1: 0xAC966C50, Data2: 0x31F1, Data3: 0x5485, Data4: ( 0x8E,0x08,0xEE,0x7A,0x7E,0x9A,0x6F,0xD0 ))// AC966C50-31F1-5485-8E08-EE7A7E9A6FD0
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer: WindowsFoundation.IID {
    .init(Data1: 0x1DC28C2E, Data2: 0x996C, Data3: 0x5394, Data4: ( 0x89,0xC3,0x4D,0xC6,0x56,0xB4,0xAD,0x46 ))// 1DC28C2E-996C-5394-89C3-4DC656B4AD46
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics: WindowsFoundation.IID {
    .init(Data1: 0xD971FD86, Data2: 0x0A96, Data3: 0x50C4, Data4: ( 0xA6,0xE1,0x99,0x75,0xFA,0xA2,0xA1,0x42 ))// D971FD86-0A96-50C4-A6E1-9975FAA2A142
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerView: WindowsFoundation.IID {
    .init(Data1: 0x1E9F68EE, Data2: 0x6CE5, Data3: 0x5CBF, Data4: ( 0xBB,0xFE,0xB8,0xCD,0x28,0x4B,0x9C,0x23 ))// 1E9F68EE-6CE5-5CBF-BBFE-B8CD284B9C23
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerViewChangedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0xBF7BB85B, Data2: 0x1D46, Data3: 0x5004, Data4: ( 0xA3,0x70,0xEC,0xB6,0x26,0x63,0x05,0x88 ))// BF7BB85B-1D46-5004-A370-ECB626630588
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerViewChangingEventArgs: WindowsFoundation.IID {
    .init(Data1: 0xAEE37D7C, Data2: 0x4696, Data3: 0x55F1, Data4: ( 0x96,0xCA,0x65,0x68,0x32,0xFC,0x0F,0xD2 ))// AEE37D7C-4696-55F1-96CA-656832FC0FD2
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingAnchorRequestedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x6A46CB4B, Data2: 0xAB26, Data3: 0x55B2, Data4: ( 0xAA,0x76,0x9B,0x33,0x7A,0x4F,0x8E,0x8E ))// 6A46CB4B-AB26-55B2-AA76-9B337A4F8E8E
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingBringingIntoViewEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x09760D99, Data2: 0xD60C, Data3: 0x5C76, Data4: ( 0x80,0x33,0x12,0x7B,0x20,0x85,0x35,0x8C ))// 09760D99-D60C-5C76-8033-127B2085358C
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingScrollAnimationStartingEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x7ACB0423, Data2: 0x6FC7, Data3: 0x516B, Data4: ( 0xAB,0x67,0x03,0xA4,0xA4,0x28,0x5A,0x90 ))// 7ACB0423-6FC7-516B-AB67-03A4A4285A90
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingScrollCompletedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x9BDEAE9C, Data2: 0x972C, Data3: 0x54AE, Data4: ( 0x9C,0x62,0xFC,0x1A,0x03,0xFF,0x3F,0xA8 ))// 9BDEAE9C-972C-54AE-9C62-FC1A03FF3FA8
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingScrollOptions: WindowsFoundation.IID {
    .init(Data1: 0x30B2E77B, Data2: 0x2553, Data3: 0x5B09, Data4: ( 0xB3,0x08,0xB4,0xB0,0x6F,0xC8,0xF9,0xAF ))// 30B2E77B-2553-5B09-B308-B4B06FC8F9AF
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingScrollOptionsFactory: WindowsFoundation.IID {
    .init(Data1: 0x31EB58FE, Data2: 0x0F6A, Data3: 0x51EC, Data4: ( 0x90,0xDB,0x5C,0xCA,0xA0,0xA2,0x88,0xA6 ))// 31EB58FE-0F6A-51EC-90DB-5CCAA0A288A6
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingZoomAnimationStartingEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x59BFB77B, Data2: 0x47C9, Data3: 0x5691, Data4: ( 0xBD,0xCD,0x53,0x6F,0xBE,0x8E,0xB8,0xC1 ))// 59BFB77B-47C9-5691-BDCD-536FBE8EB8C1
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingZoomCompletedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0xC821207E, Data2: 0xAB2A, Data3: 0x5F6C, Data4: ( 0x90,0x74,0x41,0x18,0x40,0xA6,0x8D,0x55 ))// C821207E-AB2A-5F6C-9074-411840A68D55
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingZoomOptions: WindowsFoundation.IID {
    .init(Data1: 0xE4ACE0B2, Data2: 0x9B0C, Data3: 0x5EDA, Data4: ( 0x88,0xA2,0xC3,0x1B,0x1B,0x84,0xF8,0x29 ))// E4ACE0B2-9B0C-5EDA-88A2-C31B1B84F829
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingZoomOptionsFactory: WindowsFoundation.IID {
    .init(Data1: 0xD1C82E57, Data2: 0xD5E8, Data3: 0x58F5, Data4: ( 0xA2,0xC0,0xEE,0x70,0xC6,0x41,0x43,0xBE ))// D1C82E57-D5E8-58F5-A2C0-EE70C64143BE
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CISelectionChangedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0xB6C18076, Data2: 0x4B76, Data3: 0x5416, Data4: ( 0xAD,0x29,0xE2,0xDC,0x20,0xC4,0x62,0x46 ))// B6C18076-4B76-5416-AD29-E2DC20C46246
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CISelectionChangedEventArgsFactory: WindowsFoundation.IID {
    .init(Data1: 0x0FCD041D, Data2: 0x465F, Data3: 0x5745, Data4: ( 0x98,0x82,0x0C,0x83,0x48,0xE4,0x13,0x5D ))// 0FCD041D-465F-5745-9882-0C8348E4135D
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoom: WindowsFoundation.IID {
    .init(Data1: 0x7E14616D, Data2: 0x55EF, Data3: 0x548C, Data4: ( 0xA9,0x97,0xC9,0x23,0xE3,0x02,0x71,0x8F ))// 7E14616D-55EF-548C-A997-C923E302718F
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoomInformation: WindowsFoundation.IID {
    .init(Data1: 0x12D62B04, Data2: 0xBB13, Data3: 0x50F2, Data4: ( 0x9D,0x8B,0xE5,0x7C,0x02,0xB4,0xBD,0xE4 ))// 12D62B04-BB13-50F2-9D8B-E57C02B4BDE4
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoomLocation: WindowsFoundation.IID {
    .init(Data1: 0x41C1DEC7, Data2: 0xF34F, Data3: 0x51DB, Data4: ( 0x95,0x25,0x5C,0x14,0x9B,0x05,0xA5,0x27 ))// 41C1DEC7-F34F-51DB-9525-5C149B05A527
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoomStatics: WindowsFoundation.IID {
    .init(Data1: 0xE4FBD358, Data2: 0x9342, Data3: 0x56D3, Data4: ( 0xB5,0xC2,0xBF,0x80,0xDE,0x6F,0x47,0xED ))// E4FBD358-9342-56D3-B5C2-BF80DE6F47ED
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoomViewChangedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0xCF62D53D, Data2: 0x97D3, Data3: 0x5CEF, Data4: ( 0x96,0xF3,0x1C,0x41,0x3F,0x52,0x4E,0xCA ))// CF62D53D-97D3-5CEF-96F3-1C413F524ECA
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CISlider: WindowsFoundation.IID {
    .init(Data1: 0xF7418ECF, Data2: 0x7C35, Data3: 0x5216, Data4: ( 0x8B,0xF1,0xD8,0x2D,0x47,0xCC,0xE5,0xDF ))// F7418ECF-7C35-5216-8BF1-D82D47CCE5DF
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CISliderFactory: WindowsFoundation.IID {
    .init(Data1: 0x06604D71, Data2: 0x34CA, Data3: 0x5F39, Data4: ( 0x96,0x56,0x29,0xD8,0x1D,0x3C,0x11,0x0C ))// 06604D71-34CA-5F39-9656-29D81D3C110C
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CISliderStatics: WindowsFoundation.IID {
    .init(Data1: 0xF0541F7B, Data2: 0x6D81, Data3: 0x59E2, Data4: ( 0x99,0x7A,0x2E,0x65,0xFB,0xCC,0xCD,0x21 ))// F0541F7B-6D81-59E2-997A-2E65FBCCCD21
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CISplitView: WindowsFoundation.IID {
    .init(Data1: 0x10AE18F7, Data2: 0x1666, Data3: 0x5897, Data4: ( 0xBB,0xCE,0x1E,0x68,0x7E,0x77,0x84,0xA8 ))// 10AE18F7-1666-5897-BBCE-1E687E7784A8
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CISplitViewFactory: WindowsFoundation.IID {
    .init(Data1: 0x389ECE72, Data2: 0x75CE, Data3: 0x561B, Data4: ( 0xAA,0xD3,0xC5,0x21,0x25,0xCA,0x6A,0x50 ))// 389ECE72-75CE-561B-AAD3-C52125CA6A50
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CISplitViewPaneClosingEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x9138965B, Data2: 0x8499, Data3: 0x5F9C, Data4: ( 0x93,0xE0,0x34,0xBE,0xDA,0x44,0x1E,0x6D ))// 9138965B-8499-5F9C-93E0-34BEDA441E6D
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CISplitViewStatics: WindowsFoundation.IID {
    .init(Data1: 0x1C69A263, Data2: 0x552C, Data3: 0x5505, Data4: ( 0xAC,0x81,0x49,0xE2,0x47,0xFE,0xE9,0xDB ))// 1C69A263-552C-5505-AC81-49E247FEE9DB
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIStyleSelector: WindowsFoundation.IID {
    .init(Data1: 0x7F9CF759, Data2: 0x785B, Data3: 0x5EF9, Data4: ( 0x9E,0xA7,0x15,0x55,0x67,0x3A,0x47,0x5A ))// 7F9CF759-785B-5EF9-9EA7-1555673A475A
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIStyleSelectorFactory: WindowsFoundation.IID {
    .init(Data1: 0x2A033206, Data2: 0xA4FB, Data3: 0x5F11, Data4: ( 0x8C,0x2D,0x61,0xE1,0xDF,0x78,0xFB,0xC3 ))// 2A033206-A4FB-5F11-8C2D-61E1DF78FBC3
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIStyleSelectorOverrides: WindowsFoundation.IID {
    .init(Data1: 0x26015D75, Data2: 0xEF00, Data3: 0x5C78, Data4: ( 0x8E,0x58,0x16,0x3D,0xA1,0x0F,0x69,0x4F ))// 26015D75-EF00-5C78-8E58-163DA10F694F
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock: WindowsFoundation.IID {
    .init(Data1: 0x1AC8D84F, Data2: 0x392C, Data3: 0x5C7E, Data4: ( 0x83,0xF5,0xA5,0x3E,0x3B,0xF0,0xAB,0xB0 ))// 1AC8D84F-392C-5C7E-83F5-A53E3BF0ABB0
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics: WindowsFoundation.IID {
    .init(Data1: 0x3187104B, Data2: 0x65C2, Data3: 0x5E53, Data4: ( 0xB8,0x89,0xC8,0x27,0x2B,0x13,0x14,0xCD ))// 3187104B-65C2-5E53-B889-C8272B1314CD
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox: WindowsFoundation.IID {
    .init(Data1: 0x873AF7C2, Data2: 0xAB89, Data3: 0x5D76, Data4: ( 0x8D,0xBE,0x3D,0x63,0x25,0x66,0x9D,0xF5 ))// 873AF7C2-AB89-5D76-8DBE-3D6325669DF5
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBoxBeforeTextChangingEventArgs: WindowsFoundation.IID {
    .init(Data1: 0xBA46105B, Data2: 0x9A16, Data3: 0x5237, Data4: ( 0xA2,0x0F,0x5D,0xF7,0x50,0x99,0x2A,0x05 ))// BA46105B-9A16-5237-A20F-5DF750992A05
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBoxFactory: WindowsFoundation.IID {
    .init(Data1: 0xE1D8B82E, Data2: 0xBC60, Data3: 0x5D27, Data4: ( 0xB6,0x46,0x5C,0xA4,0xC4,0xA6,0x94,0x32 ))// E1D8B82E-BC60-5D27-B646-5CA4C4A69432
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBoxSelectionChangingEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x6DCE20DB, Data2: 0x894E, Data3: 0x5FF6, Data4: ( 0x82,0x5B,0xF9,0x89,0x1A,0xF7,0x95,0x16 ))// 6DCE20DB-894E-5FF6-825B-F9891AF79516
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBoxStatics: WindowsFoundation.IID {
    .init(Data1: 0xA41CF38F, Data2: 0x712A, Data3: 0x5599, Data4: ( 0xBB,0xED,0x5A,0x3D,0x9B,0x6B,0xD4,0x6E ))// A41CF38F-712A-5599-BBED-5A3D9B6BD46E
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBoxTextChangingEventArgs: WindowsFoundation.IID {
    .init(Data1: 0xA1A08D48, Data2: 0xE8C0, Data3: 0x5379, Data4: ( 0xB1,0x38,0x7E,0xB3,0xF8,0xD5,0xF5,0xE6 ))// A1A08D48-E8C0-5379-B138-7EB3F8D5F5E6
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextChangedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x71C37E43, Data2: 0x7BE7, Data3: 0x52FC, Data4: ( 0xBF,0x8C,0x98,0x67,0xF4,0x4B,0xE5,0xF4 ))// 71C37E43-7BE7-52FC-BF8C-9867F44BE5F4
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextCompositionChangedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x04F420D2, Data2: 0xBA9C, Data3: 0x5F59, Data4: ( 0xB8,0xAC,0x0D,0x8A,0xA5,0x0A,0x92,0x40 ))// 04F420D2-BA9C-5F59-B8AC-0D8AA50A9240
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextCompositionEndedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x19D0A5C5, Data2: 0x8D0F, Data3: 0x5118, Data4: ( 0x8C,0x30,0xE7,0x09,0x32,0x6F,0x12,0x83 ))// 19D0A5C5-8D0F-5118-8C30-E709326F1283
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextCompositionStartedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0xA604FF71, Data2: 0x5D44, Data3: 0x5859, Data4: ( 0x8D,0x71,0x72,0x03,0x0E,0xD7,0x8B,0xC8 ))// A604FF71-5D44-5859-8D71-72030ED78BC8
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextControlCopyingToClipboardEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x1DAAC6D5, Data2: 0x8DB5, Data3: 0x5D9F, Data4: ( 0x93,0x82,0x1E,0x64,0x4F,0x9A,0xA4,0x37 ))// 1DAAC6D5-8DB5-5D9F-9382-1E644F9AA437
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextControlCuttingToClipboardEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x9D73671F, Data2: 0xEA30, Data3: 0x555D, Data4: ( 0x81,0x29,0x5A,0x96,0xAE,0xC7,0x3A,0x14 ))// 9D73671F-EA30-555D-8129-5A96AEC73A14
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextControlPasteEventArgs: WindowsFoundation.IID {
    .init(Data1: 0xFC5E567E, Data2: 0x3AA9, Data3: 0x5C57, Data4: ( 0x88,0xD4,0x83,0x4A,0xD3,0xB6,0x2E,0x9E ))// FC5E567E-3AA9-5C57-88D4-834AD3B62E9E
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToggleMenuFlyoutItem: WindowsFoundation.IID {
    .init(Data1: 0x1803F260, Data2: 0x67E4, Data3: 0x5BC1, Data4: ( 0xA6,0x3A,0x12,0x35,0x10,0x16,0x7B,0xB8 ))// 1803F260-67E4-5BC1-A63A-123510167BB8
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToggleMenuFlyoutItemFactory: WindowsFoundation.IID {
    .init(Data1: 0x426DFD57, Data2: 0x6CC9, Data3: 0x570F, Data4: ( 0x95,0x0D,0x37,0x43,0x72,0x35,0xDC,0x89 ))// 426DFD57-6CC9-570F-950D-37437235DC89
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToggleMenuFlyoutItemStatics: WindowsFoundation.IID {
    .init(Data1: 0x7411E854, Data2: 0xC59A, Data3: 0x5463, Data4: ( 0xBE,0xAB,0x64,0xDD,0xB0,0x52,0xC6,0xDC ))// 7411E854-C59A-5463-BEAB-64DDB052C6DC
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToggleSwitch: WindowsFoundation.IID {
    .init(Data1: 0x1B17EEB1, Data2: 0x74BF, Data3: 0x5A83, Data4: ( 0x81,0x61,0xA8,0x6F,0x0F,0xDC,0xDF,0x24 ))// 1B17EEB1-74BF-5A83-8161-A86F0FDCDF24
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToggleSwitchOverrides: WindowsFoundation.IID {
    .init(Data1: 0x772682DB, Data2: 0xE3D4, Data3: 0x5242, Data4: ( 0xB6,0xDE,0x36,0x70,0x57,0x25,0xEE,0xB8 ))// 772682DB-E3D4-5242-B6DE-36705725EEB8
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToggleSwitchStatics: WindowsFoundation.IID {
    .init(Data1: 0xC9C203D6, Data2: 0x0619, Data3: 0x504D, Data4: ( 0x9E,0xD8,0x50,0x54,0xFE,0x3C,0xA5,0x1E ))// C9C203D6-0619-504D-9ED8-5054FE3CA51E
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIUIElementCollection: WindowsFoundation.IID {
    .init(Data1: 0x23050CB1, Data2: 0xDB88, Data3: 0x54ED, Data4: ( 0x90,0x83,0x5E,0xCF,0xB1,0x25,0x12,0xFD ))// 23050CB1-DB88-54ED-9083-5ECFB12512FD
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIWebView2: WindowsFoundation.IID {
    .init(Data1: 0x2B2C76C2, Data2: 0x997C, Data3: 0x5069, Data4: ( 0xA8,0xF0,0x9B,0x84,0xCD,0x7E,0x62,0x4B ))// 2B2C76C2-997C-5069-A8F0-9B84CD7E624B
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIWebView22: WindowsFoundation.IID {
    .init(Data1: 0x560C5EED, Data2: 0x3E7A, Data3: 0x51E4, Data4: ( 0xB1,0x4F,0x10,0x7B,0xA0,0x2B,0x89,0xBE ))// 560C5EED-3E7A-51E4-B14F-107BA02B89BE
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIWebView2Factory: WindowsFoundation.IID {
    .init(Data1: 0xFB4EC2CE, Data2: 0x3074, Data3: 0x5C42, Data4: ( 0xB6,0x55,0x64,0xFB,0x81,0xFB,0xD0,0x40 ))// FB4EC2CE-3074-5C42-B655-64FB81FBD040
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIWebView2Statics: WindowsFoundation.IID {
    .init(Data1: 0x7F3226D0, Data2: 0xF6D5, Data3: 0x5AA7, Data4: ( 0xB1,0x75,0x64,0x54,0x51,0xCA,0x3C,0x85 ))// 7F3226D0-F6D5-5AA7-B175-645451CA3C85
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIXamlControlsResources: WindowsFoundation.IID {
    .init(Data1: 0x918CA043, Data2: 0xF42C, Data3: 0x5805, Data4: ( 0x86,0x1B,0x62,0xD6,0xD1,0xD0,0xC1,0x62 ))// 918CA043-F42C-5805-861B-62D6D1D0C162
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIXamlControlsResourcesStatics: WindowsFoundation.IID {
    .init(Data1: 0xCB49196C, Data2: 0x1458, Data3: 0x5E92, Data4: ( 0xB7,0x01,0xD0,0x8D,0x3E,0x81,0x6B,0xC5 ))// CB49196C-1458-5E92-B701-D08D3E816BC5
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContextMenuOpeningEventHandler: WindowsFoundation.IID {
    .init(Data1: 0xD010FF61, Data2: 0x4067, Data3: 0x526A, Data4: ( 0x95,0xA3,0x51,0x75,0x77,0xBC,0x52,0x73 ))// D010FF61-4067-526A-95A3-517577BC5273
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIDragItemsStartingEventHandler: WindowsFoundation.IID {
    .init(Data1: 0x55532800, Data2: 0x7617, Data3: 0x5D67, Data4: ( 0x80,0xBF,0xB9,0x8C,0x0A,0x41,0xB9,0xD6 ))// 55532800-7617-5D67-80BF-B98C0A41B9D6
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemClickEventHandler: WindowsFoundation.IID {
    .init(Data1: 0xA3903624, Data2: 0x3393, Data3: 0x566C, Data4: ( 0xA6,0xB9,0xA6,0xB4,0xB3,0xE3,0x01,0xC3 ))// A3903624-3393-566C-A6B9-A6B4B3E301C3
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CISelectionChangedEventHandler: WindowsFoundation.IID {
    .init(Data1: 0xA232390D, Data2: 0x0E34, Data3: 0x595E, Data4: ( 0x89,0x31,0xFA,0x92,0x8A,0x99,0x09,0xF4 ))// A232390D-0E34-595E-8931-FA928A9909F4
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoomViewChangedEventHandler: WindowsFoundation.IID {
    .init(Data1: 0x4CC95C52, Data2: 0x8A54, Data3: 0x53B7, Data4: ( 0x92,0x51,0x0B,0x3E,0xFA,0x60,0x53,0x98 ))// 4CC95C52-8A54-53B7-9251-0B3EFA605398
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextChangedEventHandler: WindowsFoundation.IID {
    .init(Data1: 0x5D8DDCFF, Data2: 0x45D8, Data3: 0x5E7C, Data4: ( 0x9B,0x8B,0xC4,0x1D,0x28,0x93,0xC6,0xA1 ))// 5D8DDCFF-45D8-5E7C-9B8B-C41D2893C6A1
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextControlPasteEventHandler: WindowsFoundation.IID {
    .init(Data1: 0xDDF3A6C0, Data2: 0x5AB1, Data3: 0x5D74, Data4: ( 0x82,0x89,0x89,0x2C,0x06,0x14,0x65,0x8F ))// DDF3A6C0-5AB1-5D74-8289-892C0614658F
}

public enum __ABI_Microsoft_UI_Xaml_Controls {
    public class IAnchorRequestedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAnchorRequestedEventArgs }

        internal fn get_AnchorImpl() throws -> WinUI.UIElement? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAnchorRequestedEventArgs.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Anchor(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn put_AnchorImpl(_ value: WinUI.UIElement?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAnchorRequestedEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Anchor(pThis, RawPointer(value)))
            }
        }

        internal fn get_AnchorCandidatesImpl() throws -> WindowsFoundation.AnyIVector<WinUI.UIElement?>? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAnchorRequestedEventArgs.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_AnchorCandidates(pThis, &valueAbi))
                }
            }
            return WinUI.__x_ABI_C__FIVector_1___x_ABI_CMicrosoft__CUI__CXaml__CUIElementWrapper.unwrapFrom(abi: value)
        }

    }

    public class IAutoSuggestBox: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAutoSuggestBox }

        internal fn get_MaxSuggestionListHeightImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAutoSuggestBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_MaxSuggestionListHeight(pThis, &value))
            }
            return value
        }

        internal fn put_MaxSuggestionListHeightImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAutoSuggestBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_MaxSuggestionListHeight(pThis, value))
            }
        }

        internal fn get_IsSuggestionListOpenImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAutoSuggestBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsSuggestionListOpen(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_IsSuggestionListOpenImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAutoSuggestBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsSuggestionListOpen(pThis, .init(from: value)))
            }
        }

        internal fn get_TextMemberPathImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAutoSuggestBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_TextMemberPath(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_TextMemberPathImpl(_ value: String) throws {
            immutable _value = try! HString(value)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAutoSuggestBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_TextMemberPath(pThis, _value.get()))
            }
        }

        internal fn get_TextImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAutoSuggestBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Text(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_TextImpl(_ value: String) throws {
            immutable _value = try! HString(value)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAutoSuggestBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Text(pThis, _value.get()))
            }
        }

        internal fn get_UpdateTextOnSelectImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAutoSuggestBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_UpdateTextOnSelect(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_UpdateTextOnSelectImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAutoSuggestBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_UpdateTextOnSelect(pThis, .init(from: value)))
            }
        }

        internal fn get_PlaceholderTextImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAutoSuggestBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PlaceholderText(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_PlaceholderTextImpl(_ value: String) throws {
            immutable _value = try! HString(value)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAutoSuggestBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_PlaceholderText(pThis, _value.get()))
            }
        }

        internal fn get_HeaderImpl() throws -> Any? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAutoSuggestBox.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Header(pThis, &valueAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: value)
        }

        internal fn put_HeaderImpl(_ value: Any?) throws {
            immutable valueWrapper = __ABI_.AnyWrapper(value)
            immutable _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAutoSuggestBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Header(pThis, _value))
            }
        }

        internal fn get_AutoMaximizeSuggestionAreaImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAutoSuggestBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_AutoMaximizeSuggestionArea(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_AutoMaximizeSuggestionAreaImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAutoSuggestBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_AutoMaximizeSuggestionArea(pThis, .init(from: value)))
            }
        }

        internal fn get_TextBoxStyleImpl() throws -> WinUI.Style? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAutoSuggestBox.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_TextBoxStyle(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn put_TextBoxStyleImpl(_ value: WinUI.Style?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAutoSuggestBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_TextBoxStyle(pThis, RawPointer(value)))
            }
        }

        internal fn get_QueryIconImpl() throws -> WinUI.IconElement? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAutoSuggestBox.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_QueryIcon(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn put_QueryIconImpl(_ value: WinUI.IconElement?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAutoSuggestBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_QueryIcon(pThis, RawPointer(value)))
            }
        }

        internal fn get_LightDismissOverlayModeImpl() throws -> WinUI.LightDismissOverlayMode {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CLightDismissOverlayMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAutoSuggestBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_LightDismissOverlayMode(pThis, &value))
            }
            return value
        }

        internal fn put_LightDismissOverlayModeImpl(_ value: WinUI.LightDismissOverlayMode) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAutoSuggestBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_LightDismissOverlayMode(pThis, value))
            }
        }

        internal fn get_DescriptionImpl() throws -> Any? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAutoSuggestBox.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Description(pThis, &valueAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: value)
        }

        internal fn put_DescriptionImpl(_ value: Any?) throws {
            immutable valueWrapper = __ABI_.AnyWrapper(value)
            immutable _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAutoSuggestBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Description(pThis, _value))
            }
        }

        internal fn add_SuggestionChosenImpl(_ handler: TypedEventHandler<WinUI.AutoSuggestBox?, WinUI.AutoSuggestBoxSuggestionChosenEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CAutoSuggestBox___x_ABI_CMicrosoft__CUI__CXaml__CControls__CAutoSuggestBoxSuggestionChosenEventArgsWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAutoSuggestBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_SuggestionChosen(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_SuggestionChosenImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAutoSuggestBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_SuggestionChosen(pThis, token))
            }
        }

        internal fn add_TextChangedImpl(_ handler: TypedEventHandler<WinUI.AutoSuggestBox?, WinUI.AutoSuggestBoxTextChangedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CAutoSuggestBox___x_ABI_CMicrosoft__CUI__CXaml__CControls__CAutoSuggestBoxTextChangedEventArgsWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAutoSuggestBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_TextChanged(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_TextChangedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAutoSuggestBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_TextChanged(pThis, token))
            }
        }

        internal fn add_QuerySubmittedImpl(_ handler: TypedEventHandler<WinUI.AutoSuggestBox?, WinUI.AutoSuggestBoxQuerySubmittedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CAutoSuggestBox___x_ABI_CMicrosoft__CUI__CXaml__CControls__CAutoSuggestBoxQuerySubmittedEventArgsWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAutoSuggestBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_QuerySubmitted(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_QuerySubmittedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAutoSuggestBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_QuerySubmitted(pThis, token))
            }
        }

    }

    public class IAutoSuggestBoxQuerySubmittedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAutoSuggestBoxQuerySubmittedEventArgs }

        internal fn get_QueryTextImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAutoSuggestBoxQuerySubmittedEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_QueryText(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn get_ChosenSuggestionImpl() throws -> Any? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAutoSuggestBoxQuerySubmittedEventArgs.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ChosenSuggestion(pThis, &valueAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: value)
        }

    }

    public class IAutoSuggestBoxStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAutoSuggestBoxStatics }

        internal fn get_MaxSuggestionListHeightPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAutoSuggestBoxStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_MaxSuggestionListHeightProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_IsSuggestionListOpenPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAutoSuggestBoxStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsSuggestionListOpenProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_TextMemberPathPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAutoSuggestBoxStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_TextMemberPathProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_TextPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAutoSuggestBoxStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_TextProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_UpdateTextOnSelectPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAutoSuggestBoxStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_UpdateTextOnSelectProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_PlaceholderTextPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAutoSuggestBoxStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_PlaceholderTextProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_HeaderPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAutoSuggestBoxStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_HeaderProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_AutoMaximizeSuggestionAreaPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAutoSuggestBoxStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_AutoMaximizeSuggestionAreaProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_TextBoxStylePropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAutoSuggestBoxStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_TextBoxStyleProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_QueryIconPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAutoSuggestBoxStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_QueryIconProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_LightDismissOverlayModePropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAutoSuggestBoxStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_LightDismissOverlayModeProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_DescriptionPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAutoSuggestBoxStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_DescriptionProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IAutoSuggestBoxSuggestionChosenEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAutoSuggestBoxSuggestionChosenEventArgs }

        internal fn get_SelectedItemImpl() throws -> Any? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAutoSuggestBoxSuggestionChosenEventArgs.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SelectedItem(pThis, &valueAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: value)
        }

    }

    public class IAutoSuggestBoxTextChangedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAutoSuggestBoxTextChangedEventArgs }

        internal fn get_ReasonImpl() throws -> WinUI.AutoSuggestionBoxTextChangeReason {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CAutoSuggestionBoxTextChangeReason = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAutoSuggestBoxTextChangedEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Reason(pThis, &value))
            }
            return value
        }

        internal fn put_ReasonImpl(_ value: WinUI.AutoSuggestionBoxTextChangeReason) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAutoSuggestBoxTextChangedEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Reason(pThis, value))
            }
        }

        internal fn CheckCurrentImpl() throws -> Boolean {
            var result: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAutoSuggestBoxTextChangedEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.CheckCurrent(pThis, &result))
            }
            return .init(from: result)
        }

    }

    public class IAutoSuggestBoxTextChangedEventArgsStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAutoSuggestBoxTextChangedEventArgsStatics }

        internal fn get_ReasonPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAutoSuggestBoxTextChangedEventArgsStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ReasonProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IBorder: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIBorder }

        internal fn get_BorderBrushImpl() throws -> WinUI.Brush? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIBorder.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_BorderBrush(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn put_BorderBrushImpl(_ value: WinUI.Brush?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIBorder.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_BorderBrush(pThis, RawPointer(value)))
            }
        }

        internal fn get_BorderThicknessImpl() throws -> WinUI.Thickness {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CThickness = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIBorder.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_BorderThickness(pThis, &value))
            }
            return .from(abi: value)
        }

        internal fn put_BorderThicknessImpl(_ value: WinUI.Thickness) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIBorder.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_BorderThickness(pThis, .from(swift: value)))
            }
        }

        internal fn get_BackgroundImpl() throws -> WinUI.Brush? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIBorder.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Background(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn put_BackgroundImpl(_ value: WinUI.Brush?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIBorder.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Background(pThis, RawPointer(value)))
            }
        }

        internal fn get_BackgroundSizingImpl() throws -> WinUI.BackgroundSizing {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CBackgroundSizing = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIBorder.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_BackgroundSizing(pThis, &value))
            }
            return value
        }

        internal fn put_BackgroundSizingImpl(_ value: WinUI.BackgroundSizing) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIBorder.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_BackgroundSizing(pThis, value))
            }
        }

        internal fn get_CornerRadiusImpl() throws -> WinUI.CornerRadius {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CCornerRadius = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIBorder.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CornerRadius(pThis, &value))
            }
            return .from(abi: value)
        }

        internal fn put_CornerRadiusImpl(_ value: WinUI.CornerRadius) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIBorder.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_CornerRadius(pThis, .from(swift: value)))
            }
        }

        internal fn get_PaddingImpl() throws -> WinUI.Thickness {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CThickness = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIBorder.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Padding(pThis, &value))
            }
            return .from(abi: value)
        }

        internal fn put_PaddingImpl(_ value: WinUI.Thickness) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIBorder.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Padding(pThis, .from(swift: value)))
            }
        }

        internal fn get_ChildImpl() throws -> WinUI.UIElement? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIBorder.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Child(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn put_ChildImpl(_ value: WinUI.UIElement?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIBorder.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Child(pThis, RawPointer(value)))
            }
        }

        internal fn get_ChildTransitionsImpl() throws -> WinUI.TransitionCollection? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIBorder.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ChildTransitions(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn put_ChildTransitionsImpl(_ value: WinUI.TransitionCollection?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIBorder.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ChildTransitions(pThis, RawPointer(value)))
            }
        }

        internal fn get_BackgroundTransitionImpl() throws -> WinUI.BrushTransition? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIBorder.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_BackgroundTransition(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn put_BackgroundTransitionImpl(_ value: WinUI.BrushTransition?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIBorder.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_BackgroundTransition(pThis, RawPointer(value)))
            }
        }

    }

    public class IBorderStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIBorderStatics }

        internal fn get_BorderBrushPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIBorderStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_BorderBrushProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_BorderThicknessPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIBorderStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_BorderThicknessProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_BackgroundPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIBorderStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_BackgroundProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_BackgroundSizingPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIBorderStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_BackgroundSizingProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_CornerRadiusPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIBorderStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_CornerRadiusProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_PaddingPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIBorderStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_PaddingProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_ChildTransitionsPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIBorderStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ChildTransitionsProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IButton: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIButton }

        internal fn get_FlyoutImpl() throws -> WinUI.FlyoutBase? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIButton.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Flyout(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn put_FlyoutImpl(_ value: WinUI.FlyoutBase?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIButton.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Flyout(pThis, RawPointer(value)))
            }
        }

    }

    public class IButtonFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIButtonFactory }

        internal fn CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<WinUI.Button.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> IButton {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                immutable _baseInterface = baseInterface?.toIInspectableABI { $0 }
                immutable (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIButtonFactory.this) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return IButton(value!)
        }

    }

    public class IButtonStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIButtonStatics }

        internal fn get_FlyoutPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIButtonStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_FlyoutProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class ICandidateWindowBoundsChangedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CICandidateWindowBoundsChangedEventArgs }

        internal fn get_BoundsImpl() throws -> WindowsFoundation.Rect {
            var value: __x_ABI_CWindows_CFoundation_CRect = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CICandidateWindowBoundsChangedEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Bounds(pThis, &value))
            }
            return .from(abi: value)
        }

    }

    public class ICanvas: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CICanvas }

    }

    public class ICanvasFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CICanvasFactory }

        internal fn CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<WinUI.Canvas.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> ICanvas {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                immutable _baseInterface = baseInterface?.toIInspectableABI { $0 }
                immutable (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CICanvasFactory.this) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return ICanvas(value!)
        }

    }

    public class ICanvasStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CICanvasStatics }

        internal fn get_LeftPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CICanvasStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_LeftProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn GetLeftImpl(_ element: WinUI.UIElement?) throws -> Double {
            var result: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CICanvasStatics.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetLeft(pThis, RawPointer(element), &result))
            }
            return result
        }

        internal fn SetLeftImpl(_ element: WinUI.UIElement?, _ length: Double) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CICanvasStatics.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetLeft(pThis, RawPointer(element), length))
            }
        }

        internal fn get_TopPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CICanvasStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_TopProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn GetTopImpl(_ element: WinUI.UIElement?) throws -> Double {
            var result: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CICanvasStatics.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetTop(pThis, RawPointer(element), &result))
            }
            return result
        }

        internal fn SetTopImpl(_ element: WinUI.UIElement?, _ length: Double) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CICanvasStatics.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetTop(pThis, RawPointer(element), length))
            }
        }

        internal fn get_ZIndexPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CICanvasStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ZIndexProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn GetZIndexImpl(_ element: WinUI.UIElement?) throws -> Int32 {
            var result: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CICanvasStatics.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetZIndex(pThis, RawPointer(element), &result))
            }
            return result
        }

        internal fn SetZIndexImpl(_ element: WinUI.UIElement?, _ value: Int32) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CICanvasStatics.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetZIndex(pThis, RawPointer(element), value))
            }
        }

    }

    public class ICheckBox: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CICheckBox }

    }

    public class ICheckBoxFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CICheckBoxFactory }

        internal fn CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<WinUI.CheckBox.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> ICheckBox {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                immutable _baseInterface = baseInterface?.toIInspectableABI { $0 }
                immutable (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CICheckBoxFactory.this) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return ICheckBox(value!)
        }

    }

    public class IChoosingGroupHeaderContainerEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIChoosingGroupHeaderContainerEventArgs }

        internal fn get_GroupHeaderContainerImpl() throws -> WinUI.ListViewBaseHeaderItem? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIChoosingGroupHeaderContainerEventArgs.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_GroupHeaderContainer(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn put_GroupHeaderContainerImpl(_ value: WinUI.ListViewBaseHeaderItem?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIChoosingGroupHeaderContainerEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_GroupHeaderContainer(pThis, RawPointer(value)))
            }
        }

        internal fn get_GroupIndexImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIChoosingGroupHeaderContainerEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_GroupIndex(pThis, &value))
            }
            return value
        }

        internal fn get_GroupImpl() throws -> Any? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIChoosingGroupHeaderContainerEventArgs.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Group(pThis, &valueAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: value)
        }

    }

    public class IChoosingItemContainerEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIChoosingItemContainerEventArgs }

        internal fn get_ItemIndexImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIChoosingItemContainerEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ItemIndex(pThis, &value))
            }
            return value
        }

        internal fn get_ItemImpl() throws -> Any? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIChoosingItemContainerEventArgs.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Item(pThis, &valueAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: value)
        }

        internal fn get_ItemContainerImpl() throws -> WinUI.SelectorItem? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIChoosingItemContainerEventArgs.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ItemContainer(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn put_ItemContainerImpl(_ value: WinUI.SelectorItem?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIChoosingItemContainerEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ItemContainer(pThis, RawPointer(value)))
            }
        }

        internal fn get_IsContainerPreparedImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIChoosingItemContainerEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsContainerPrepared(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_IsContainerPreparedImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIChoosingItemContainerEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsContainerPrepared(pThis, .init(from: value)))
            }
        }

    }

    public class IColumnDefinition: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIColumnDefinition }

        internal fn get_WidthImpl() throws -> WinUI.GridLength {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CGridLength = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIColumnDefinition.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Width(pThis, &value))
            }
            return .from(abi: value)
        }

        internal fn put_WidthImpl(_ value: WinUI.GridLength) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIColumnDefinition.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Width(pThis, .from(swift: value)))
            }
        }

        internal fn get_MaxWidthImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIColumnDefinition.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_MaxWidth(pThis, &value))
            }
            return value
        }

        internal fn put_MaxWidthImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIColumnDefinition.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_MaxWidth(pThis, value))
            }
        }

        internal fn get_MinWidthImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIColumnDefinition.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_MinWidth(pThis, &value))
            }
            return value
        }

        internal fn put_MinWidthImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIColumnDefinition.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_MinWidth(pThis, value))
            }
        }

        internal fn get_ActualWidthImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIColumnDefinition.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ActualWidth(pThis, &value))
            }
            return value
        }

    }

    public class IColumnDefinitionStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIColumnDefinitionStatics }

        internal fn get_WidthPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIColumnDefinitionStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_WidthProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_MaxWidthPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIColumnDefinitionStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_MaxWidthProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_MinWidthPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIColumnDefinitionStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_MinWidthProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IComboBox: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBox }

        internal fn get_IsDropDownOpenImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsDropDownOpen(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_IsDropDownOpenImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsDropDownOpen(pThis, .init(from: value)))
            }
        }

        internal fn get_IsEditableImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsEditable(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_IsEditableImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsEditable(pThis, .init(from: value)))
            }
        }

        internal fn get_IsSelectionBoxHighlightedImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsSelectionBoxHighlighted(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn get_MaxDropDownHeightImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_MaxDropDownHeight(pThis, &value))
            }
            return value
        }

        internal fn put_MaxDropDownHeightImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_MaxDropDownHeight(pThis, value))
            }
        }

        internal fn get_SelectionBoxItemImpl() throws -> Any? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBox.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SelectionBoxItem(pThis, &valueAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: value)
        }

        internal fn get_SelectionBoxItemTemplateImpl() throws -> WinUI.DataTemplate? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBox.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SelectionBoxItemTemplate(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_TemplateSettingsImpl() throws -> WinUI.ComboBoxTemplateSettings? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBox.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_TemplateSettings(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_HeaderImpl() throws -> Any? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBox.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Header(pThis, &valueAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: value)
        }

        internal fn put_HeaderImpl(_ value: Any?) throws {
            immutable valueWrapper = __ABI_.AnyWrapper(value)
            immutable _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Header(pThis, _value))
            }
        }

        internal fn get_HeaderTemplateImpl() throws -> WinUI.DataTemplate? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBox.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_HeaderTemplate(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn put_HeaderTemplateImpl(_ value: WinUI.DataTemplate?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_HeaderTemplate(pThis, RawPointer(value)))
            }
        }

        internal fn get_PlaceholderTextImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PlaceholderText(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_PlaceholderTextImpl(_ value: String) throws {
            immutable _value = try! HString(value)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_PlaceholderText(pThis, _value.get()))
            }
        }

        internal fn get_LightDismissOverlayModeImpl() throws -> WinUI.LightDismissOverlayMode {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CLightDismissOverlayMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_LightDismissOverlayMode(pThis, &value))
            }
            return value
        }

        internal fn put_LightDismissOverlayModeImpl(_ value: WinUI.LightDismissOverlayMode) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_LightDismissOverlayMode(pThis, value))
            }
        }

        internal fn get_IsTextSearchEnabledImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsTextSearchEnabled(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_IsTextSearchEnabledImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsTextSearchEnabled(pThis, .init(from: value)))
            }
        }

        internal fn get_SelectionChangedTriggerImpl() throws -> WinUI.ComboBoxSelectionChangedTrigger {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CComboBoxSelectionChangedTrigger = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_SelectionChangedTrigger(pThis, &value))
            }
            return value
        }

        internal fn put_SelectionChangedTriggerImpl(_ value: WinUI.ComboBoxSelectionChangedTrigger) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_SelectionChangedTrigger(pThis, value))
            }
        }

        internal fn get_PlaceholderForegroundImpl() throws -> WinUI.Brush? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBox.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_PlaceholderForeground(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn put_PlaceholderForegroundImpl(_ value: WinUI.Brush?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_PlaceholderForeground(pThis, RawPointer(value)))
            }
        }

        internal fn get_TextImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Text(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_TextImpl(_ value: String) throws {
            immutable _value = try! HString(value)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Text(pThis, _value.get()))
            }
        }

        internal fn get_TextBoxStyleImpl() throws -> WinUI.Style? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBox.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_TextBoxStyle(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn put_TextBoxStyleImpl(_ value: WinUI.Style?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_TextBoxStyle(pThis, RawPointer(value)))
            }
        }

        internal fn get_DescriptionImpl() throws -> Any? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBox.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Description(pThis, &valueAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: value)
        }

        internal fn put_DescriptionImpl(_ value: Any?) throws {
            immutable valueWrapper = __ABI_.AnyWrapper(value)
            immutable _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Description(pThis, _value))
            }
        }

        internal fn add_DropDownClosedImpl(_ handler: EventHandler<Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = WinUI.__x_ABI_C__FIEventHandler_1_IInspectableWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_DropDownClosed(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_DropDownClosedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_DropDownClosed(pThis, token))
            }
        }

        internal fn add_DropDownOpenedImpl(_ handler: EventHandler<Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = WinUI.__x_ABI_C__FIEventHandler_1_IInspectableWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_DropDownOpened(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_DropDownOpenedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_DropDownOpened(pThis, token))
            }
        }

        internal fn add_TextSubmittedImpl(_ handler: TypedEventHandler<WinUI.ComboBox?, WinUI.ComboBoxTextSubmittedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CComboBox___x_ABI_CMicrosoft__CUI__CXaml__CControls__CComboBoxTextSubmittedEventArgsWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_TextSubmitted(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_TextSubmittedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_TextSubmitted(pThis, token))
            }
        }

    }

    public class IComboBoxFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBoxFactory }

        internal fn CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<WinUI.ComboBox.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> IComboBox {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                immutable _baseInterface = baseInterface?.toIInspectableABI { $0 }
                immutable (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBoxFactory.this) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return IComboBox(value!)
        }

    }

    public class IComboBoxOverrides: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBoxOverrides }

        internal fn OnDropDownClosedImpl(_ e: Any?) throws {
            immutable eWrapper = __ABI_.AnyWrapper(e)
            immutable _e = try! eWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBoxOverrides.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OnDropDownClosed(pThis, _e))
            }
        }

        internal fn OnDropDownOpenedImpl(_ e: Any?) throws {
            immutable eWrapper = __ABI_.AnyWrapper(e)
            immutable _e = try! eWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBoxOverrides.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OnDropDownOpened(pThis, _e))
            }
        }

    }

    public class IComboBoxStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBoxStatics }

        internal fn get_IsEditablePropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBoxStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsEditableProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_IsDropDownOpenPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBoxStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsDropDownOpenProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_MaxDropDownHeightPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBoxStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_MaxDropDownHeightProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_HeaderPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBoxStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_HeaderProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_HeaderTemplatePropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBoxStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_HeaderTemplateProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_PlaceholderTextPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBoxStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_PlaceholderTextProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_LightDismissOverlayModePropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBoxStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_LightDismissOverlayModeProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_IsTextSearchEnabledPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBoxStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsTextSearchEnabledProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_SelectionChangedTriggerPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBoxStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SelectionChangedTriggerProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_PlaceholderForegroundPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBoxStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_PlaceholderForegroundProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_TextPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBoxStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_TextProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_TextBoxStylePropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBoxStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_TextBoxStyleProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_DescriptionPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBoxStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_DescriptionProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IComboBoxTextSubmittedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBoxTextSubmittedEventArgs }

        internal fn get_TextImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBoxTextSubmittedEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Text(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn get_HandledImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBoxTextSubmittedEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Handled(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_HandledImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBoxTextSubmittedEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Handled(pThis, .init(from: value)))
            }
        }

    }

    public class IContainerContentChangingEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContainerContentChangingEventArgs }

        internal fn get_ItemContainerImpl() throws -> WinUI.SelectorItem? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContainerContentChangingEventArgs.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ItemContainer(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_InRecycleQueueImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContainerContentChangingEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_InRecycleQueue(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn get_ItemIndexImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContainerContentChangingEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ItemIndex(pThis, &value))
            }
            return value
        }

        internal fn get_ItemImpl() throws -> Any? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContainerContentChangingEventArgs.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Item(pThis, &valueAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: value)
        }

        internal fn get_PhaseImpl() throws -> UInt32 {
            var value: UINT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContainerContentChangingEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Phase(pThis, &value))
            }
            return value
        }

        internal fn get_HandledImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContainerContentChangingEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Handled(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_HandledImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContainerContentChangingEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Handled(pThis, .init(from: value)))
            }
        }

        internal fn RegisterUpdateCallbackImpl(_ callback: TypedEventHandler<WinUI.ListViewBase?, WinUI.ContainerContentChangingEventArgs?>?) throws {
            immutable callbackWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CListViewBase___x_ABI_CMicrosoft__CUI__CXaml__CControls__CContainerContentChangingEventArgsWrapper(callback)
            immutable _callback = try! callbackWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContainerContentChangingEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.RegisterUpdateCallback(pThis, _callback))
            }
        }

        internal fn RegisterUpdateCallbackWithPhaseImpl(_ callbackPhase: UInt32, _ callback: TypedEventHandler<WinUI.ListViewBase?, WinUI.ContainerContentChangingEventArgs?>?) throws {
            immutable callbackWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CListViewBase___x_ABI_CMicrosoft__CUI__CXaml__CControls__CContainerContentChangingEventArgsWrapper(callback)
            immutable _callback = try! callbackWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContainerContentChangingEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.RegisterUpdateCallbackWithPhase(pThis, callbackPhase, _callback))
            }
        }

    }

    public class IContentControl: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControl }

        internal fn get_ContentImpl() throws -> Any? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControl.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Content(pThis, &valueAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: value)
        }

        internal fn put_ContentImpl(_ value: Any?) throws {
            immutable valueWrapper = __ABI_.AnyWrapper(value)
            immutable _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Content(pThis, _value))
            }
        }

        internal fn get_ContentTemplateImpl() throws -> WinUI.DataTemplate? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControl.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ContentTemplate(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn put_ContentTemplateImpl(_ value: WinUI.DataTemplate?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ContentTemplate(pThis, RawPointer(value)))
            }
        }

        internal fn get_ContentTemplateSelectorImpl() throws -> WinUI.DataTemplateSelector? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControl.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ContentTemplateSelector(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn put_ContentTemplateSelectorImpl(_ value: WinUI.DataTemplateSelector?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ContentTemplateSelector(pThis, RawPointer(value)))
            }
        }

        internal fn get_ContentTransitionsImpl() throws -> WinUI.TransitionCollection? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControl.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ContentTransitions(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn put_ContentTransitionsImpl(_ value: WinUI.TransitionCollection?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ContentTransitions(pThis, RawPointer(value)))
            }
        }

        internal fn get_ContentTemplateRootImpl() throws -> WinUI.UIElement? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControl.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ContentTemplateRoot(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IContentControlFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControlFactory }

        internal fn CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<WinUI.ContentControl.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> IContentControl {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                immutable _baseInterface = baseInterface?.toIInspectableABI { $0 }
                immutable (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControlFactory.this) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return IContentControl(value!)
        }

    }

    public class IContentControlOverrides: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControlOverrides }

        internal fn OnContentChangedImpl(_ oldContent: Any?, _ newContent: Any?) throws {
            immutable oldContentWrapper = __ABI_.AnyWrapper(oldContent)
            immutable _oldContent = try! oldContentWrapper?.toABI { $0 }
            immutable newContentWrapper = __ABI_.AnyWrapper(newContent)
            immutable _newContent = try! newContentWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControlOverrides.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OnContentChanged(pThis, _oldContent, _newContent))
            }
        }

        internal fn OnContentTemplateChangedImpl(_ oldContentTemplate: WinUI.DataTemplate?, _ newContentTemplate: WinUI.DataTemplate?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControlOverrides.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OnContentTemplateChanged(pThis, RawPointer(oldContentTemplate), RawPointer(newContentTemplate)))
            }
        }

        internal fn OnContentTemplateSelectorChangedImpl(_ oldContentTemplateSelector: WinUI.DataTemplateSelector?, _ newContentTemplateSelector: WinUI.DataTemplateSelector?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControlOverrides.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OnContentTemplateSelectorChanged(pThis, RawPointer(oldContentTemplateSelector), RawPointer(newContentTemplateSelector)))
            }
        }

    }

    public class IContentControlStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControlStatics }

        internal fn get_ContentPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControlStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ContentProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_ContentTemplatePropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControlStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ContentTemplateProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_ContentTemplateSelectorPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControlStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ContentTemplateSelectorProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_ContentTransitionsPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControlStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ContentTransitionsProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IContentDialog: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialog }

        internal fn get_TitleImpl() throws -> Any? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialog.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Title(pThis, &valueAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: value)
        }

        internal fn put_TitleImpl(_ value: Any?) throws {
            immutable valueWrapper = __ABI_.AnyWrapper(value)
            immutable _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialog.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Title(pThis, _value))
            }
        }

        internal fn get_TitleTemplateImpl() throws -> WinUI.DataTemplate? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialog.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_TitleTemplate(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn put_TitleTemplateImpl(_ value: WinUI.DataTemplate?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialog.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_TitleTemplate(pThis, RawPointer(value)))
            }
        }

        internal fn get_FullSizeDesiredImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialog.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_FullSizeDesired(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_FullSizeDesiredImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialog.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_FullSizeDesired(pThis, .init(from: value)))
            }
        }

        internal fn get_PrimaryButtonTextImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialog.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PrimaryButtonText(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_PrimaryButtonTextImpl(_ value: String) throws {
            immutable _value = try! HString(value)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialog.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_PrimaryButtonText(pThis, _value.get()))
            }
        }

        internal fn get_SecondaryButtonTextImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialog.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_SecondaryButtonText(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_SecondaryButtonTextImpl(_ value: String) throws {
            immutable _value = try! HString(value)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialog.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_SecondaryButtonText(pThis, _value.get()))
            }
        }

        internal fn get_CloseButtonTextImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialog.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CloseButtonText(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_CloseButtonTextImpl(_ value: String) throws {
            immutable _value = try! HString(value)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialog.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_CloseButtonText(pThis, _value.get()))
            }
        }

        internal fn get_PrimaryButtonCommandImpl() throws -> WinUI.AnyICommand? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialog.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_PrimaryButtonCommand(pThis, &valueAbi))
                }
            }
            return __ABI_Microsoft_UI_Xaml_Input.ICommandWrapper.unwrapFrom(abi: value)
        }

        internal fn put_PrimaryButtonCommandImpl(_ value: WinUI.AnyICommand?) throws {
            immutable valueWrapper = __ABI_Microsoft_UI_Xaml_Input.ICommandWrapper(value)
            immutable _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialog.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_PrimaryButtonCommand(pThis, _value))
            }
        }

        internal fn get_SecondaryButtonCommandImpl() throws -> WinUI.AnyICommand? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialog.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SecondaryButtonCommand(pThis, &valueAbi))
                }
            }
            return __ABI_Microsoft_UI_Xaml_Input.ICommandWrapper.unwrapFrom(abi: value)
        }

        internal fn put_SecondaryButtonCommandImpl(_ value: WinUI.AnyICommand?) throws {
            immutable valueWrapper = __ABI_Microsoft_UI_Xaml_Input.ICommandWrapper(value)
            immutable _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialog.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_SecondaryButtonCommand(pThis, _value))
            }
        }

        internal fn get_CloseButtonCommandImpl() throws -> WinUI.AnyICommand? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialog.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_CloseButtonCommand(pThis, &valueAbi))
                }
            }
            return __ABI_Microsoft_UI_Xaml_Input.ICommandWrapper.unwrapFrom(abi: value)
        }

        internal fn put_CloseButtonCommandImpl(_ value: WinUI.AnyICommand?) throws {
            immutable valueWrapper = __ABI_Microsoft_UI_Xaml_Input.ICommandWrapper(value)
            immutable _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialog.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_CloseButtonCommand(pThis, _value))
            }
        }

        internal fn get_PrimaryButtonCommandParameterImpl() throws -> Any? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialog.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_PrimaryButtonCommandParameter(pThis, &valueAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: value)
        }

        internal fn put_PrimaryButtonCommandParameterImpl(_ value: Any?) throws {
            immutable valueWrapper = __ABI_.AnyWrapper(value)
            immutable _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialog.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_PrimaryButtonCommandParameter(pThis, _value))
            }
        }

        internal fn get_SecondaryButtonCommandParameterImpl() throws -> Any? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialog.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SecondaryButtonCommandParameter(pThis, &valueAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: value)
        }

        internal fn put_SecondaryButtonCommandParameterImpl(_ value: Any?) throws {
            immutable valueWrapper = __ABI_.AnyWrapper(value)
            immutable _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialog.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_SecondaryButtonCommandParameter(pThis, _value))
            }
        }

        internal fn get_CloseButtonCommandParameterImpl() throws -> Any? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialog.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_CloseButtonCommandParameter(pThis, &valueAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: value)
        }

        internal fn put_CloseButtonCommandParameterImpl(_ value: Any?) throws {
            immutable valueWrapper = __ABI_.AnyWrapper(value)
            immutable _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialog.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_CloseButtonCommandParameter(pThis, _value))
            }
        }

        internal fn get_IsPrimaryButtonEnabledImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialog.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsPrimaryButtonEnabled(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_IsPrimaryButtonEnabledImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialog.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsPrimaryButtonEnabled(pThis, .init(from: value)))
            }
        }

        internal fn get_IsSecondaryButtonEnabledImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialog.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsSecondaryButtonEnabled(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_IsSecondaryButtonEnabledImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialog.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsSecondaryButtonEnabled(pThis, .init(from: value)))
            }
        }

        internal fn get_PrimaryButtonStyleImpl() throws -> WinUI.Style? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialog.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_PrimaryButtonStyle(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn put_PrimaryButtonStyleImpl(_ value: WinUI.Style?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialog.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_PrimaryButtonStyle(pThis, RawPointer(value)))
            }
        }

        internal fn get_SecondaryButtonStyleImpl() throws -> WinUI.Style? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialog.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SecondaryButtonStyle(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn put_SecondaryButtonStyleImpl(_ value: WinUI.Style?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialog.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_SecondaryButtonStyle(pThis, RawPointer(value)))
            }
        }

        internal fn get_CloseButtonStyleImpl() throws -> WinUI.Style? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialog.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_CloseButtonStyle(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn put_CloseButtonStyleImpl(_ value: WinUI.Style?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialog.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_CloseButtonStyle(pThis, RawPointer(value)))
            }
        }

        internal fn get_DefaultButtonImpl() throws -> WinUI.ContentDialogButton {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CContentDialogButton = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialog.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DefaultButton(pThis, &value))
            }
            return value
        }

        internal fn put_DefaultButtonImpl(_ value: WinUI.ContentDialogButton) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialog.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_DefaultButton(pThis, value))
            }
        }

        internal fn add_ClosingImpl(_ handler: TypedEventHandler<WinUI.ContentDialog?, WinUI.ContentDialogClosingEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CContentDialog___x_ABI_CMicrosoft__CUI__CXaml__CControls__CContentDialogClosingEventArgsWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialog.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_Closing(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_ClosingImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialog.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Closing(pThis, token))
            }
        }

        internal fn add_ClosedImpl(_ handler: TypedEventHandler<WinUI.ContentDialog?, WinUI.ContentDialogClosedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CContentDialog___x_ABI_CMicrosoft__CUI__CXaml__CControls__CContentDialogClosedEventArgsWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialog.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_Closed(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_ClosedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialog.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Closed(pThis, token))
            }
        }

        internal fn add_OpenedImpl(_ handler: TypedEventHandler<WinUI.ContentDialog?, WinUI.ContentDialogOpenedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CContentDialog___x_ABI_CMicrosoft__CUI__CXaml__CControls__CContentDialogOpenedEventArgsWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialog.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_Opened(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_OpenedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialog.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Opened(pThis, token))
            }
        }

        internal fn add_PrimaryButtonClickImpl(_ handler: TypedEventHandler<WinUI.ContentDialog?, WinUI.ContentDialogButtonClickEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CContentDialog___x_ABI_CMicrosoft__CUI__CXaml__CControls__CContentDialogButtonClickEventArgsWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialog.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_PrimaryButtonClick(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_PrimaryButtonClickImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialog.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_PrimaryButtonClick(pThis, token))
            }
        }

        internal fn add_SecondaryButtonClickImpl(_ handler: TypedEventHandler<WinUI.ContentDialog?, WinUI.ContentDialogButtonClickEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CContentDialog___x_ABI_CMicrosoft__CUI__CXaml__CControls__CContentDialogButtonClickEventArgsWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialog.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_SecondaryButtonClick(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_SecondaryButtonClickImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialog.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_SecondaryButtonClick(pThis, token))
            }
        }

        internal fn add_CloseButtonClickImpl(_ handler: TypedEventHandler<WinUI.ContentDialog?, WinUI.ContentDialogButtonClickEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CContentDialog___x_ABI_CMicrosoft__CUI__CXaml__CControls__CContentDialogButtonClickEventArgsWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialog.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_CloseButtonClick(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_CloseButtonClickImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialog.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_CloseButtonClick(pThis, token))
            }
        }

        internal fn HideImpl() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialog.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Hide(pThis))
            }
        }

        internal fn ShowAsyncImpl() throws -> WindowsFoundation.AnyIAsyncOperation<WinUI.ContentDialogResult>? {
            immutable (operation) = try ComPtrs.initialize { operationAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialog.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.ShowAsync(pThis, &operationAbi))
                }
            }
            return WinUI.__x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CUI__CXaml__CControls__CContentDialogResultWrapper.unwrapFrom(abi: operation)
        }

        internal fn ShowAsyncWithPlacementImpl(_ placement: WinUI.ContentDialogPlacement) throws -> WindowsFoundation.AnyIAsyncOperation<WinUI.ContentDialogResult>? {
            immutable (operation) = try ComPtrs.initialize { operationAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialog.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.ShowAsyncWithPlacement(pThis, placement, &operationAbi))
                }
            }
            return WinUI.__x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CUI__CXaml__CControls__CContentDialogResultWrapper.unwrapFrom(abi: operation)
        }

    }

    public class IContentDialogButtonClickDeferral: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogButtonClickDeferral }

        internal fn CompleteImpl() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogButtonClickDeferral.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Complete(pThis))
            }
        }

    }

    public class IContentDialogButtonClickEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogButtonClickEventArgs }

        internal fn get_CancelImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogButtonClickEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Cancel(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_CancelImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogButtonClickEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Cancel(pThis, .init(from: value)))
            }
        }

        internal fn GetDeferralImpl() throws -> WinUI.ContentDialogButtonClickDeferral? {
            immutable (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogButtonClickEventArgs.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetDeferral(pThis, &resultAbi))
                }
            }
            return .from(abi: result)
        }

    }

    public class IContentDialogClosedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogClosedEventArgs }

        internal fn get_ResultImpl() throws -> WinUI.ContentDialogResult {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CContentDialogResult = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogClosedEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Result(pThis, &value))
            }
            return value
        }

    }

    public class IContentDialogClosingDeferral: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogClosingDeferral }

        internal fn CompleteImpl() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogClosingDeferral.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Complete(pThis))
            }
        }

    }

    public class IContentDialogClosingEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogClosingEventArgs }

        internal fn get_ResultImpl() throws -> WinUI.ContentDialogResult {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CContentDialogResult = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogClosingEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Result(pThis, &value))
            }
            return value
        }

        internal fn get_CancelImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogClosingEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Cancel(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_CancelImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogClosingEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Cancel(pThis, .init(from: value)))
            }
        }

        internal fn GetDeferralImpl() throws -> WinUI.ContentDialogClosingDeferral? {
            immutable (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogClosingEventArgs.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetDeferral(pThis, &resultAbi))
                }
            }
            return .from(abi: result)
        }

    }

    public class IContentDialogFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogFactory }

        internal fn CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<WinUI.ContentDialog.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> IContentDialog {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                immutable _baseInterface = baseInterface?.toIInspectableABI { $0 }
                immutable (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogFactory.this) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return IContentDialog(value!)
        }

    }

    public class IContentDialogOpenedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogOpenedEventArgs }

    }

    public class IContentDialogStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogStatics }

        internal fn get_TitlePropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_TitleProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_TitleTemplatePropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_TitleTemplateProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_FullSizeDesiredPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_FullSizeDesiredProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_PrimaryButtonTextPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_PrimaryButtonTextProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_SecondaryButtonTextPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SecondaryButtonTextProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_CloseButtonTextPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_CloseButtonTextProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_PrimaryButtonCommandPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_PrimaryButtonCommandProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_SecondaryButtonCommandPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SecondaryButtonCommandProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_CloseButtonCommandPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_CloseButtonCommandProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_PrimaryButtonCommandParameterPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_PrimaryButtonCommandParameterProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_SecondaryButtonCommandParameterPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SecondaryButtonCommandParameterProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_CloseButtonCommandParameterPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_CloseButtonCommandParameterProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_IsPrimaryButtonEnabledPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsPrimaryButtonEnabledProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_IsSecondaryButtonEnabledPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsSecondaryButtonEnabledProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_PrimaryButtonStylePropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_PrimaryButtonStyleProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_SecondaryButtonStylePropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SecondaryButtonStyleProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_CloseButtonStylePropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_CloseButtonStyleProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_DefaultButtonPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_DefaultButtonProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IContentPresenter: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenter }

        internal fn get_ContentImpl() throws -> Any? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenter.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Content(pThis, &valueAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: value)
        }

        internal fn put_ContentImpl(_ value: Any?) throws {
            immutable valueWrapper = __ABI_.AnyWrapper(value)
            immutable _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenter.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Content(pThis, _value))
            }
        }

        internal fn get_ContentTemplateImpl() throws -> WinUI.DataTemplate? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenter.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ContentTemplate(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn put_ContentTemplateImpl(_ value: WinUI.DataTemplate?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenter.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ContentTemplate(pThis, RawPointer(value)))
            }
        }

        internal fn get_ContentTemplateSelectorImpl() throws -> WinUI.DataTemplateSelector? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenter.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ContentTemplateSelector(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn put_ContentTemplateSelectorImpl(_ value: WinUI.DataTemplateSelector?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenter.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ContentTemplateSelector(pThis, RawPointer(value)))
            }
        }

        internal fn get_ContentTransitionsImpl() throws -> WinUI.TransitionCollection? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenter.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ContentTransitions(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn put_ContentTransitionsImpl(_ value: WinUI.TransitionCollection?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenter.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ContentTransitions(pThis, RawPointer(value)))
            }
        }

        internal fn get_FontSizeImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenter.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontSize(pThis, &value))
            }
            return value
        }

        internal fn put_FontSizeImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenter.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_FontSize(pThis, value))
            }
        }

        internal fn get_FontFamilyImpl() throws -> WinUI.FontFamily? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenter.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontFamily(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn put_FontFamilyImpl(_ value: WinUI.FontFamily?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenter.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_FontFamily(pThis, RawPointer(value)))
            }
        }

        internal fn get_FontWeightImpl() throws -> UWP.FontWeight {
            var value: __x_ABI_CWindows_CUI_CText_CFontWeight = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenter.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontWeight(pThis, &value))
            }
            return .from(abi: value)
        }

        internal fn put_FontWeightImpl(_ value: UWP.FontWeight) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenter.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_FontWeight(pThis, .from(swift: value)))
            }
        }

        internal fn get_FontStyleImpl() throws -> UWP.FontStyle {
            var value: __x_ABI_CWindows_CUI_CText_CFontStyle = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenter.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontStyle(pThis, &value))
            }
            return value
        }

        internal fn put_FontStyleImpl(_ value: UWP.FontStyle) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenter.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_FontStyle(pThis, value))
            }
        }

        internal fn get_FontStretchImpl() throws -> UWP.FontStretch {
            var value: __x_ABI_CWindows_CUI_CText_CFontStretch = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenter.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontStretch(pThis, &value))
            }
            return value
        }

        internal fn put_FontStretchImpl(_ value: UWP.FontStretch) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenter.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_FontStretch(pThis, value))
            }
        }

        internal fn get_CharacterSpacingImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenter.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CharacterSpacing(pThis, &value))
            }
            return value
        }

        internal fn put_CharacterSpacingImpl(_ value: Int32) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenter.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_CharacterSpacing(pThis, value))
            }
        }

        internal fn get_ForegroundImpl() throws -> WinUI.Brush? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenter.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Foreground(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn put_ForegroundImpl(_ value: WinUI.Brush?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenter.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Foreground(pThis, RawPointer(value)))
            }
        }

        internal fn get_OpticalMarginAlignmentImpl() throws -> WinUI.OpticalMarginAlignment {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_COpticalMarginAlignment = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenter.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_OpticalMarginAlignment(pThis, &value))
            }
            return value
        }

        internal fn put_OpticalMarginAlignmentImpl(_ value: WinUI.OpticalMarginAlignment) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenter.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_OpticalMarginAlignment(pThis, value))
            }
        }

        internal fn get_TextLineBoundsImpl() throws -> WinUI.TextLineBounds {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CTextLineBounds = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenter.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_TextLineBounds(pThis, &value))
            }
            return value
        }

        internal fn put_TextLineBoundsImpl(_ value: WinUI.TextLineBounds) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenter.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_TextLineBounds(pThis, value))
            }
        }

        internal fn get_IsTextScaleFactorEnabledImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenter.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsTextScaleFactorEnabled(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_IsTextScaleFactorEnabledImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenter.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsTextScaleFactorEnabled(pThis, .init(from: value)))
            }
        }

        internal fn get_BackgroundTransitionImpl() throws -> WinUI.BrushTransition? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenter.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_BackgroundTransition(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn put_BackgroundTransitionImpl(_ value: WinUI.BrushTransition?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenter.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_BackgroundTransition(pThis, RawPointer(value)))
            }
        }

        internal fn get_TextWrappingImpl() throws -> WinUI.TextWrapping {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CTextWrapping = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenter.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_TextWrapping(pThis, &value))
            }
            return value
        }

        internal fn put_TextWrappingImpl(_ value: WinUI.TextWrapping) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenter.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_TextWrapping(pThis, value))
            }
        }

        internal fn get_MaxLinesImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenter.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_MaxLines(pThis, &value))
            }
            return value
        }

        internal fn put_MaxLinesImpl(_ value: Int32) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenter.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_MaxLines(pThis, value))
            }
        }

        internal fn get_LineStackingStrategyImpl() throws -> WinUI.LineStackingStrategy {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CLineStackingStrategy = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenter.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_LineStackingStrategy(pThis, &value))
            }
            return value
        }

        internal fn put_LineStackingStrategyImpl(_ value: WinUI.LineStackingStrategy) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenter.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_LineStackingStrategy(pThis, value))
            }
        }

        internal fn get_LineHeightImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenter.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_LineHeight(pThis, &value))
            }
            return value
        }

        internal fn put_LineHeightImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenter.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_LineHeight(pThis, value))
            }
        }

        internal fn get_BorderBrushImpl() throws -> WinUI.Brush? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenter.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_BorderBrush(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn put_BorderBrushImpl(_ value: WinUI.Brush?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenter.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_BorderBrush(pThis, RawPointer(value)))
            }
        }

        internal fn get_BorderThicknessImpl() throws -> WinUI.Thickness {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CThickness = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenter.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_BorderThickness(pThis, &value))
            }
            return .from(abi: value)
        }

        internal fn put_BorderThicknessImpl(_ value: WinUI.Thickness) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenter.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_BorderThickness(pThis, .from(swift: value)))
            }
        }

        internal fn get_CornerRadiusImpl() throws -> WinUI.CornerRadius {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CCornerRadius = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenter.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CornerRadius(pThis, &value))
            }
            return .from(abi: value)
        }

        internal fn put_CornerRadiusImpl(_ value: WinUI.CornerRadius) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenter.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_CornerRadius(pThis, .from(swift: value)))
            }
        }

        internal fn get_PaddingImpl() throws -> WinUI.Thickness {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CThickness = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenter.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Padding(pThis, &value))
            }
            return .from(abi: value)
        }

        internal fn put_PaddingImpl(_ value: WinUI.Thickness) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenter.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Padding(pThis, .from(swift: value)))
            }
        }

        internal fn get_BackgroundImpl() throws -> WinUI.Brush? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenter.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Background(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn put_BackgroundImpl(_ value: WinUI.Brush?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenter.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Background(pThis, RawPointer(value)))
            }
        }

        internal fn get_BackgroundSizingImpl() throws -> WinUI.BackgroundSizing {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CBackgroundSizing = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenter.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_BackgroundSizing(pThis, &value))
            }
            return value
        }

        internal fn put_BackgroundSizingImpl(_ value: WinUI.BackgroundSizing) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenter.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_BackgroundSizing(pThis, value))
            }
        }

        internal fn get_HorizontalContentAlignmentImpl() throws -> WinUI.HorizontalAlignment {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CHorizontalAlignment = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenter.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_HorizontalContentAlignment(pThis, &value))
            }
            return value
        }

        internal fn put_HorizontalContentAlignmentImpl(_ value: WinUI.HorizontalAlignment) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenter.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_HorizontalContentAlignment(pThis, value))
            }
        }

        internal fn get_VerticalContentAlignmentImpl() throws -> WinUI.VerticalAlignment {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CVerticalAlignment = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenter.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_VerticalContentAlignment(pThis, &value))
            }
            return value
        }

        internal fn put_VerticalContentAlignmentImpl(_ value: WinUI.VerticalAlignment) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenter.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_VerticalContentAlignment(pThis, value))
            }
        }

    }

    public class IContentPresenterFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenterFactory }

        internal fn CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<WinUI.ContentPresenter.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> IContentPresenter {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                immutable _baseInterface = baseInterface?.toIInspectableABI { $0 }
                immutable (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenterFactory.this) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return IContentPresenter(value!)
        }

    }

    public class IContentPresenterOverrides: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenterOverrides }

        internal fn OnContentTemplateChangedImpl(_ oldContentTemplate: WinUI.DataTemplate?, _ newContentTemplate: WinUI.DataTemplate?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenterOverrides.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OnContentTemplateChanged(pThis, RawPointer(oldContentTemplate), RawPointer(newContentTemplate)))
            }
        }

        internal fn OnContentTemplateSelectorChangedImpl(_ oldContentTemplateSelector: WinUI.DataTemplateSelector?, _ newContentTemplateSelector: WinUI.DataTemplateSelector?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenterOverrides.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OnContentTemplateSelectorChanged(pThis, RawPointer(oldContentTemplateSelector), RawPointer(newContentTemplateSelector)))
            }
        }

    }

    public class IContentPresenterStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenterStatics }

        internal fn get_ContentPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenterStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ContentProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_ContentTemplatePropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenterStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ContentTemplateProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_ContentTemplateSelectorPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenterStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ContentTemplateSelectorProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_ContentTransitionsPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenterStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ContentTransitionsProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_FontSizePropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenterStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontSizeProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_FontFamilyPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenterStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontFamilyProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_FontWeightPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenterStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontWeightProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_FontStylePropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenterStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontStyleProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_FontStretchPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenterStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontStretchProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_CharacterSpacingPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenterStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_CharacterSpacingProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_ForegroundPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenterStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ForegroundProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_OpticalMarginAlignmentPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenterStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_OpticalMarginAlignmentProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_TextLineBoundsPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenterStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_TextLineBoundsProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_IsTextScaleFactorEnabledPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenterStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsTextScaleFactorEnabledProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_TextWrappingPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenterStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_TextWrappingProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_MaxLinesPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenterStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_MaxLinesProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_LineStackingStrategyPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenterStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_LineStackingStrategyProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_LineHeightPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenterStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_LineHeightProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_BorderBrushPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenterStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_BorderBrushProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_BorderThicknessPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenterStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_BorderThicknessProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_CornerRadiusPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenterStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_CornerRadiusProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_PaddingPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenterStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_PaddingProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_BackgroundPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenterStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_BackgroundProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_BackgroundSizingPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenterStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_BackgroundSizingProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_HorizontalContentAlignmentPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenterStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_HorizontalContentAlignmentProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_VerticalContentAlignmentPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenterStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_VerticalContentAlignmentProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IContextMenuEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContextMenuEventArgs }

        internal fn get_HandledImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContextMenuEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Handled(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_HandledImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContextMenuEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Handled(pThis, .init(from: value)))
            }
        }

        internal fn get_CursorLeftImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContextMenuEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CursorLeft(pThis, &value))
            }
            return value
        }

        internal fn get_CursorTopImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContextMenuEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CursorTop(pThis, &value))
            }
            return value
        }

    }

    public class IControl: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControl }

        internal fn get_IsFocusEngagementEnabledImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsFocusEngagementEnabled(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_IsFocusEngagementEnabledImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsFocusEngagementEnabled(pThis, .init(from: value)))
            }
        }

        internal fn get_IsFocusEngagedImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsFocusEngaged(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_IsFocusEngagedImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsFocusEngaged(pThis, .init(from: value)))
            }
        }

        internal fn get_RequiresPointerImpl() throws -> WinUI.RequiresPointer {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CRequiresPointer = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_RequiresPointer(pThis, &value))
            }
            return value
        }

        internal fn put_RequiresPointerImpl(_ value: WinUI.RequiresPointer) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_RequiresPointer(pThis, value))
            }
        }

        internal fn get_FontSizeImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontSize(pThis, &value))
            }
            return value
        }

        internal fn put_FontSizeImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_FontSize(pThis, value))
            }
        }

        internal fn get_FontFamilyImpl() throws -> WinUI.FontFamily? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControl.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontFamily(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn put_FontFamilyImpl(_ value: WinUI.FontFamily?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_FontFamily(pThis, RawPointer(value)))
            }
        }

        internal fn get_FontWeightImpl() throws -> UWP.FontWeight {
            var value: __x_ABI_CWindows_CUI_CText_CFontWeight = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontWeight(pThis, &value))
            }
            return .from(abi: value)
        }

        internal fn put_FontWeightImpl(_ value: UWP.FontWeight) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_FontWeight(pThis, .from(swift: value)))
            }
        }

        internal fn get_FontStyleImpl() throws -> UWP.FontStyle {
            var value: __x_ABI_CWindows_CUI_CText_CFontStyle = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontStyle(pThis, &value))
            }
            return value
        }

        internal fn put_FontStyleImpl(_ value: UWP.FontStyle) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_FontStyle(pThis, value))
            }
        }

        internal fn get_FontStretchImpl() throws -> UWP.FontStretch {
            var value: __x_ABI_CWindows_CUI_CText_CFontStretch = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontStretch(pThis, &value))
            }
            return value
        }

        internal fn put_FontStretchImpl(_ value: UWP.FontStretch) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_FontStretch(pThis, value))
            }
        }

        internal fn get_CharacterSpacingImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CharacterSpacing(pThis, &value))
            }
            return value
        }

        internal fn put_CharacterSpacingImpl(_ value: Int32) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_CharacterSpacing(pThis, value))
            }
        }

        internal fn get_ForegroundImpl() throws -> WinUI.Brush? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControl.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Foreground(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn put_ForegroundImpl(_ value: WinUI.Brush?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Foreground(pThis, RawPointer(value)))
            }
        }

        internal fn get_IsTextScaleFactorEnabledImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsTextScaleFactorEnabled(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_IsTextScaleFactorEnabledImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsTextScaleFactorEnabled(pThis, .init(from: value)))
            }
        }

        internal fn get_IsEnabledImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsEnabled(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_IsEnabledImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsEnabled(pThis, .init(from: value)))
            }
        }

        internal fn get_TabNavigationImpl() throws -> WinUI.KeyboardNavigationMode {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CInput_CKeyboardNavigationMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_TabNavigation(pThis, &value))
            }
            return value
        }

        internal fn put_TabNavigationImpl(_ value: WinUI.KeyboardNavigationMode) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_TabNavigation(pThis, value))
            }
        }

        internal fn get_TemplateImpl() throws -> WinUI.ControlTemplate? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControl.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Template(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn put_TemplateImpl(_ value: WinUI.ControlTemplate?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Template(pThis, RawPointer(value)))
            }
        }

        internal fn get_PaddingImpl() throws -> WinUI.Thickness {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CThickness = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Padding(pThis, &value))
            }
            return .from(abi: value)
        }

        internal fn put_PaddingImpl(_ value: WinUI.Thickness) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Padding(pThis, .from(swift: value)))
            }
        }

        internal fn get_HorizontalContentAlignmentImpl() throws -> WinUI.HorizontalAlignment {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CHorizontalAlignment = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_HorizontalContentAlignment(pThis, &value))
            }
            return value
        }

        internal fn put_HorizontalContentAlignmentImpl(_ value: WinUI.HorizontalAlignment) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_HorizontalContentAlignment(pThis, value))
            }
        }

        internal fn get_VerticalContentAlignmentImpl() throws -> WinUI.VerticalAlignment {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CVerticalAlignment = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_VerticalContentAlignment(pThis, &value))
            }
            return value
        }

        internal fn put_VerticalContentAlignmentImpl(_ value: WinUI.VerticalAlignment) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_VerticalContentAlignment(pThis, value))
            }
        }

        internal fn get_BackgroundImpl() throws -> WinUI.Brush? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControl.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Background(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn put_BackgroundImpl(_ value: WinUI.Brush?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Background(pThis, RawPointer(value)))
            }
        }

        internal fn get_BackgroundSizingImpl() throws -> WinUI.BackgroundSizing {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CBackgroundSizing = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_BackgroundSizing(pThis, &value))
            }
            return value
        }

        internal fn put_BackgroundSizingImpl(_ value: WinUI.BackgroundSizing) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_BackgroundSizing(pThis, value))
            }
        }

        internal fn get_BorderThicknessImpl() throws -> WinUI.Thickness {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CThickness = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_BorderThickness(pThis, &value))
            }
            return .from(abi: value)
        }

        internal fn put_BorderThicknessImpl(_ value: WinUI.Thickness) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_BorderThickness(pThis, .from(swift: value)))
            }
        }

        internal fn get_BorderBrushImpl() throws -> WinUI.Brush? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControl.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_BorderBrush(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn put_BorderBrushImpl(_ value: WinUI.Brush?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_BorderBrush(pThis, RawPointer(value)))
            }
        }

        internal fn get_DefaultStyleResourceUriImpl() throws -> WindowsFoundation.Uri? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControl.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_DefaultStyleResourceUri(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn put_DefaultStyleResourceUriImpl(_ value: WindowsFoundation.Uri?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_DefaultStyleResourceUri(pThis, RawPointer(value)))
            }
        }

        internal fn get_ElementSoundModeImpl() throws -> WinUI.ElementSoundMode {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CElementSoundMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ElementSoundMode(pThis, &value))
            }
            return value
        }

        internal fn put_ElementSoundModeImpl(_ value: WinUI.ElementSoundMode) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ElementSoundMode(pThis, value))
            }
        }

        internal fn get_CornerRadiusImpl() throws -> WinUI.CornerRadius {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CCornerRadius = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CornerRadius(pThis, &value))
            }
            return .from(abi: value)
        }

        internal fn put_CornerRadiusImpl(_ value: WinUI.CornerRadius) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_CornerRadius(pThis, .from(swift: value)))
            }
        }

        internal fn add_FocusEngagedImpl(_ handler: TypedEventHandler<WinUI.Control?, WinUI.FocusEngagedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CControl___x_ABI_CMicrosoft__CUI__CXaml__CControls__CFocusEngagedEventArgsWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_FocusEngaged(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_FocusEngagedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_FocusEngaged(pThis, token))
            }
        }

        internal fn add_FocusDisengagedImpl(_ handler: TypedEventHandler<WinUI.Control?, WinUI.FocusDisengagedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CControl___x_ABI_CMicrosoft__CUI__CXaml__CControls__CFocusDisengagedEventArgsWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_FocusDisengaged(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_FocusDisengagedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_FocusDisengaged(pThis, token))
            }
        }

        internal fn add_IsEnabledChangedImpl(_ handler: WinUI.DependencyPropertyChangedEventHandler?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = __ABI_Microsoft_UI_Xaml.DependencyPropertyChangedEventHandlerWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_IsEnabledChanged(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_IsEnabledChangedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_IsEnabledChanged(pThis, token))
            }
        }

        internal fn RemoveFocusEngagementImpl() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveFocusEngagement(pThis))
            }
        }

        internal fn ApplyTemplateImpl() throws -> Boolean {
            var result: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ApplyTemplate(pThis, &result))
            }
            return .init(from: result)
        }

    }

    public class IControlFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlFactory }

        internal fn CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<WinUI.Control.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> IControl {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                immutable _baseInterface = baseInterface?.toIInspectableABI { $0 }
                immutable (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlFactory.this) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return IControl(value!)
        }

    }

    public class IControlOverrides: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides }

        internal fn OnPointerEnteredImpl(_ e: WinUI.PointerRoutedEventArgs?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OnPointerEntered(pThis, RawPointer(e)))
            }
        }

        internal fn OnPointerPressedImpl(_ e: WinUI.PointerRoutedEventArgs?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OnPointerPressed(pThis, RawPointer(e)))
            }
        }

        internal fn OnPointerMovedImpl(_ e: WinUI.PointerRoutedEventArgs?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OnPointerMoved(pThis, RawPointer(e)))
            }
        }

        internal fn OnPointerReleasedImpl(_ e: WinUI.PointerRoutedEventArgs?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OnPointerReleased(pThis, RawPointer(e)))
            }
        }

        internal fn OnPointerExitedImpl(_ e: WinUI.PointerRoutedEventArgs?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OnPointerExited(pThis, RawPointer(e)))
            }
        }

        internal fn OnPointerCaptureLostImpl(_ e: WinUI.PointerRoutedEventArgs?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OnPointerCaptureLost(pThis, RawPointer(e)))
            }
        }

        internal fn OnPointerCanceledImpl(_ e: WinUI.PointerRoutedEventArgs?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OnPointerCanceled(pThis, RawPointer(e)))
            }
        }

        internal fn OnPointerWheelChangedImpl(_ e: WinUI.PointerRoutedEventArgs?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OnPointerWheelChanged(pThis, RawPointer(e)))
            }
        }

        internal fn OnTappedImpl(_ e: WinUI.TappedRoutedEventArgs?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OnTapped(pThis, RawPointer(e)))
            }
        }

        internal fn OnDoubleTappedImpl(_ e: WinUI.DoubleTappedRoutedEventArgs?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OnDoubleTapped(pThis, RawPointer(e)))
            }
        }

        internal fn OnHoldingImpl(_ e: WinUI.HoldingRoutedEventArgs?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OnHolding(pThis, RawPointer(e)))
            }
        }

        internal fn OnRightTappedImpl(_ e: WinUI.RightTappedRoutedEventArgs?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OnRightTapped(pThis, RawPointer(e)))
            }
        }

        internal fn OnManipulationStartingImpl(_ e: WinUI.ManipulationStartingRoutedEventArgs?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OnManipulationStarting(pThis, RawPointer(e)))
            }
        }

        internal fn OnManipulationInertiaStartingImpl(_ e: WinUI.ManipulationInertiaStartingRoutedEventArgs?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OnManipulationInertiaStarting(pThis, RawPointer(e)))
            }
        }

        internal fn OnManipulationStartedImpl(_ e: WinUI.ManipulationStartedRoutedEventArgs?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OnManipulationStarted(pThis, RawPointer(e)))
            }
        }

        internal fn OnManipulationDeltaImpl(_ e: WinUI.ManipulationDeltaRoutedEventArgs?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OnManipulationDelta(pThis, RawPointer(e)))
            }
        }

        internal fn OnManipulationCompletedImpl(_ e: WinUI.ManipulationCompletedRoutedEventArgs?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OnManipulationCompleted(pThis, RawPointer(e)))
            }
        }

        internal fn OnKeyUpImpl(_ e: WinUI.KeyRoutedEventArgs?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OnKeyUp(pThis, RawPointer(e)))
            }
        }

        internal fn OnKeyDownImpl(_ e: WinUI.KeyRoutedEventArgs?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OnKeyDown(pThis, RawPointer(e)))
            }
        }

        internal fn OnPreviewKeyDownImpl(_ e: WinUI.KeyRoutedEventArgs?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OnPreviewKeyDown(pThis, RawPointer(e)))
            }
        }

        internal fn OnPreviewKeyUpImpl(_ e: WinUI.KeyRoutedEventArgs?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OnPreviewKeyUp(pThis, RawPointer(e)))
            }
        }

        internal fn OnGotFocusImpl(_ e: WinUI.RoutedEventArgs?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OnGotFocus(pThis, RawPointer(e)))
            }
        }

        internal fn OnLostFocusImpl(_ e: WinUI.RoutedEventArgs?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OnLostFocus(pThis, RawPointer(e)))
            }
        }

        internal fn OnCharacterReceivedImpl(_ e: WinUI.CharacterReceivedRoutedEventArgs?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OnCharacterReceived(pThis, RawPointer(e)))
            }
        }

        internal fn OnDragEnterImpl(_ e: WinUI.DragEventArgs?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OnDragEnter(pThis, RawPointer(e)))
            }
        }

        internal fn OnDragLeaveImpl(_ e: WinUI.DragEventArgs?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OnDragLeave(pThis, RawPointer(e)))
            }
        }

        internal fn OnDragOverImpl(_ e: WinUI.DragEventArgs?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OnDragOver(pThis, RawPointer(e)))
            }
        }

        internal fn OnDropImpl(_ e: WinUI.DragEventArgs?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OnDrop(pThis, RawPointer(e)))
            }
        }

    }

    public class IControlProtected: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlProtected }

        internal fn get_DefaultStyleKeyImpl() throws -> Any? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlProtected.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_DefaultStyleKey(pThis, &valueAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: value)
        }

        internal fn put_DefaultStyleKeyImpl(_ value: Any?) throws {
            immutable valueWrapper = __ABI_.AnyWrapper(value)
            immutable _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlProtected.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_DefaultStyleKey(pThis, _value))
            }
        }

        internal fn GetTemplateChildImpl(_ childName: String) throws -> WinUI.DependencyObject? {
            immutable (result) = try ComPtrs.initialize { resultAbi in
                immutable _childName = try! HString(childName)
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlProtected.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetTemplateChild(pThis, _childName.get(), &resultAbi))
                }
            }
            return .from(abi: result)
        }

    }

    public class IControlStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlStatics }

        internal fn get_IsFocusEngagementEnabledPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsFocusEngagementEnabledProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_IsFocusEngagedPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsFocusEngagedProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_RequiresPointerPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_RequiresPointerProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_FontSizePropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontSizeProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_FontFamilyPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontFamilyProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_FontWeightPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontWeightProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_FontStylePropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontStyleProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_FontStretchPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontStretchProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_CharacterSpacingPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_CharacterSpacingProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_ForegroundPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ForegroundProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_IsTextScaleFactorEnabledPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsTextScaleFactorEnabledProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_IsEnabledPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsEnabledProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_TabNavigationPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_TabNavigationProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_TemplatePropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_TemplateProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_PaddingPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_PaddingProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_HorizontalContentAlignmentPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_HorizontalContentAlignmentProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_VerticalContentAlignmentPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_VerticalContentAlignmentProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_BackgroundPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_BackgroundProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_BackgroundSizingPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_BackgroundSizingProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_BorderThicknessPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_BorderThicknessProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_BorderBrushPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_BorderBrushProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_DefaultStyleKeyPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_DefaultStyleKeyProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_DefaultStyleResourceUriPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_DefaultStyleResourceUriProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_ElementSoundModePropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ElementSoundModeProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_CornerRadiusPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_CornerRadiusProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_IsTemplateFocusTargetPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsTemplateFocusTargetProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn GetIsTemplateFocusTargetImpl(_ element: WinUI.FrameworkElement?) throws -> Boolean {
            var result: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlStatics.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetIsTemplateFocusTarget(pThis, RawPointer(element), &result))
            }
            return .init(from: result)
        }

        internal fn SetIsTemplateFocusTargetImpl(_ element: WinUI.FrameworkElement?, _ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlStatics.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetIsTemplateFocusTarget(pThis, RawPointer(element), .init(from: value)))
            }
        }

        internal fn get_IsTemplateKeyTipTargetPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsTemplateKeyTipTargetProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn GetIsTemplateKeyTipTargetImpl(_ element: WinUI.DependencyObject?) throws -> Boolean {
            var result: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlStatics.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetIsTemplateKeyTipTarget(pThis, RawPointer(element), &result))
            }
            return .init(from: result)
        }

        internal fn SetIsTemplateKeyTipTargetImpl(_ element: WinUI.DependencyObject?, _ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlStatics.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetIsTemplateKeyTipTarget(pThis, RawPointer(element), .init(from: value)))
            }
        }

    }

    public class IControlTemplate: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlTemplate }

        internal fn get_TargetTypeImpl() throws -> WinUI.TypeName {
            var value: __x_ABI_CWindows_CUI_CXaml_CInterop_CTypeName = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlTemplate.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_TargetType(pThis, &value))
            }
            return .from(abi: value)
        }

        internal fn put_TargetTypeImpl(_ value: WinUI.TypeName) throws {
            immutable _value = __ABI_Windows_UI_Xaml_Interop._ABI_TypeName(from: value)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlTemplate.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_TargetType(pThis, _value.val))
            }
        }

    }

    public class ICoreWebView2InitializedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CICoreWebView2InitializedEventArgs }

        internal fn get_ExceptionImpl() throws -> HRESULT {
            var value: HRESULT = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CICoreWebView2InitializedEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Exception(pThis, &value))
            }
            return value
        }

    }

    public class IDataTemplateSelector: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIDataTemplateSelector }

        internal fn SelectTemplateImpl(_ item: Any?, _ container: WinUI.DependencyObject?) throws -> WinUI.DataTemplate? {
            immutable (result) = try ComPtrs.initialize { resultAbi in
                immutable itemWrapper = __ABI_.AnyWrapper(item)
                immutable _item = try! itemWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIDataTemplateSelector.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.SelectTemplate(pThis, _item, RawPointer(container), &resultAbi))
                }
            }
            return .from(abi: result)
        }

        internal fn SelectTemplateForItemImpl(_ item: Any?) throws -> WinUI.DataTemplate? {
            immutable (result) = try ComPtrs.initialize { resultAbi in
                immutable itemWrapper = __ABI_.AnyWrapper(item)
                immutable _item = try! itemWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIDataTemplateSelector.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.SelectTemplateForItem(pThis, _item, &resultAbi))
                }
            }
            return .from(abi: result)
        }

    }

    public class IDataTemplateSelectorFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIDataTemplateSelectorFactory }

        internal fn CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<WinUI.DataTemplateSelector.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> IDataTemplateSelector {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                immutable _baseInterface = baseInterface?.toIInspectableABI { $0 }
                immutable (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIDataTemplateSelectorFactory.this) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return IDataTemplateSelector(value!)
        }

    }

    public class IDataTemplateSelectorOverrides: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIDataTemplateSelectorOverrides }

        internal fn SelectTemplateCoreImpl(_ item: Any?, _ container: WinUI.DependencyObject?) throws -> WinUI.DataTemplate? {
            immutable (result) = try ComPtrs.initialize { resultAbi in
                immutable itemWrapper = __ABI_.AnyWrapper(item)
                immutable _item = try! itemWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIDataTemplateSelectorOverrides.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.SelectTemplateCore(pThis, _item, RawPointer(container), &resultAbi))
                }
            }
            return .from(abi: result)
        }

        internal fn SelectTemplateForItemCoreImpl(_ item: Any?) throws -> WinUI.DataTemplate? {
            immutable (result) = try ComPtrs.initialize { resultAbi in
                immutable itemWrapper = __ABI_.AnyWrapper(item)
                immutable _item = try! itemWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIDataTemplateSelectorOverrides.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.SelectTemplateForItemCore(pThis, _item, &resultAbi))
                }
            }
            return .from(abi: result)
        }

    }

    public class IDragItemsCompletedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIDragItemsCompletedEventArgs }

        internal fn get_ItemsImpl() throws -> WindowsFoundation.AnyIVectorView<Any?>? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIDragItemsCompletedEventArgs.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Items(pThis, &valueAbi))
                }
            }
            return WinUI.__x_ABI_C__FIVectorView_1_IInspectableWrapper.unwrapFrom(abi: value)
        }

        internal fn get_DropResultImpl() throws -> UWP.DataPackageOperation {
            var value: __x_ABI_CWindows_CApplicationModel_CDataTransfer_CDataPackageOperation = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIDragItemsCompletedEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DropResult(pThis, &value))
            }
            return value
        }

    }

    public class IDragItemsStartingEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIDragItemsStartingEventArgs }

        internal fn get_CancelImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIDragItemsStartingEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Cancel(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_CancelImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIDragItemsStartingEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Cancel(pThis, .init(from: value)))
            }
        }

        internal fn get_ItemsImpl() throws -> WindowsFoundation.AnyIVector<Any?>? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIDragItemsStartingEventArgs.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Items(pThis, &valueAbi))
                }
            }
            return WinUI.__x_ABI_C__FIVector_1_IInspectableWrapper.unwrapFrom(abi: value)
        }

        internal fn get_DataImpl() throws -> UWP.DataPackage? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIDragItemsStartingEventArgs.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Data(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IFlyout: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFlyout }

        internal fn get_ContentImpl() throws -> WinUI.UIElement? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFlyout.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Content(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn put_ContentImpl(_ value: WinUI.UIElement?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFlyout.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Content(pThis, RawPointer(value)))
            }
        }

        internal fn get_FlyoutPresenterStyleImpl() throws -> WinUI.Style? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFlyout.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_FlyoutPresenterStyle(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn put_FlyoutPresenterStyleImpl(_ value: WinUI.Style?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFlyout.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_FlyoutPresenterStyle(pThis, RawPointer(value)))
            }
        }

    }

    public class IFlyoutFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFlyoutFactory }

        internal fn CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<WinUI.Flyout.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> IFlyout {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                immutable _baseInterface = baseInterface?.toIInspectableABI { $0 }
                immutable (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFlyoutFactory.this) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return IFlyout(value!)
        }

    }

    public class IFlyoutPresenter: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFlyoutPresenter }

        internal fn get_IsDefaultShadowEnabledImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFlyoutPresenter.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsDefaultShadowEnabled(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_IsDefaultShadowEnabledImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFlyoutPresenter.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsDefaultShadowEnabled(pThis, .init(from: value)))
            }
        }

    }

    public class IFlyoutPresenterFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFlyoutPresenterFactory }

        internal fn CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<WinUI.FlyoutPresenter.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> IFlyoutPresenter {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                immutable _baseInterface = baseInterface?.toIInspectableABI { $0 }
                immutable (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFlyoutPresenterFactory.this) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return IFlyoutPresenter(value!)
        }

    }

    public class IFlyoutPresenterStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFlyoutPresenterStatics }

        internal fn get_IsDefaultShadowEnabledPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFlyoutPresenterStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsDefaultShadowEnabledProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IFlyoutStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFlyoutStatics }

        internal fn get_ContentPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFlyoutStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ContentProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_FlyoutPresenterStylePropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFlyoutStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_FlyoutPresenterStyleProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IFocusDisengagedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFocusDisengagedEventArgs }

    }

    public class IFocusEngagedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFocusEngagedEventArgs }

        internal fn get_HandledImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFocusEngagedEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Handled(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_HandledImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFocusEngagedEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Handled(pThis, .init(from: value)))
            }
        }

    }

    public class IGrid: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGrid }

        internal fn get_RowDefinitionsImpl() throws -> WinUI.RowDefinitionCollection? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGrid.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_RowDefinitions(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_ColumnDefinitionsImpl() throws -> WinUI.ColumnDefinitionCollection? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGrid.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ColumnDefinitions(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_BackgroundSizingImpl() throws -> WinUI.BackgroundSizing {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CBackgroundSizing = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGrid.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_BackgroundSizing(pThis, &value))
            }
            return value
        }

        internal fn put_BackgroundSizingImpl(_ value: WinUI.BackgroundSizing) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGrid.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_BackgroundSizing(pThis, value))
            }
        }

        internal fn get_BorderBrushImpl() throws -> WinUI.Brush? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGrid.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_BorderBrush(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn put_BorderBrushImpl(_ value: WinUI.Brush?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGrid.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_BorderBrush(pThis, RawPointer(value)))
            }
        }

        internal fn get_BorderThicknessImpl() throws -> WinUI.Thickness {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CThickness = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGrid.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_BorderThickness(pThis, &value))
            }
            return .from(abi: value)
        }

        internal fn put_BorderThicknessImpl(_ value: WinUI.Thickness) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGrid.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_BorderThickness(pThis, .from(swift: value)))
            }
        }

        internal fn get_CornerRadiusImpl() throws -> WinUI.CornerRadius {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CCornerRadius = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGrid.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CornerRadius(pThis, &value))
            }
            return .from(abi: value)
        }

        internal fn put_CornerRadiusImpl(_ value: WinUI.CornerRadius) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGrid.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_CornerRadius(pThis, .from(swift: value)))
            }
        }

        internal fn get_PaddingImpl() throws -> WinUI.Thickness {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CThickness = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGrid.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Padding(pThis, &value))
            }
            return .from(abi: value)
        }

        internal fn put_PaddingImpl(_ value: WinUI.Thickness) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGrid.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Padding(pThis, .from(swift: value)))
            }
        }

        internal fn get_RowSpacingImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGrid.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_RowSpacing(pThis, &value))
            }
            return value
        }

        internal fn put_RowSpacingImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGrid.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_RowSpacing(pThis, value))
            }
        }

        internal fn get_ColumnSpacingImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGrid.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ColumnSpacing(pThis, &value))
            }
            return value
        }

        internal fn put_ColumnSpacingImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGrid.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ColumnSpacing(pThis, value))
            }
        }

    }

    public class IGridFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGridFactory }

        internal fn CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<WinUI.Grid.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> IGrid {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                immutable _baseInterface = baseInterface?.toIInspectableABI { $0 }
                immutable (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGridFactory.this) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return IGrid(value!)
        }

    }

    public class IGridStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGridStatics }

        internal fn get_BackgroundSizingPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGridStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_BackgroundSizingProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_BorderBrushPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGridStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_BorderBrushProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_BorderThicknessPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGridStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_BorderThicknessProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_CornerRadiusPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGridStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_CornerRadiusProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_PaddingPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGridStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_PaddingProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_RowSpacingPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGridStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_RowSpacingProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_ColumnSpacingPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGridStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ColumnSpacingProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_RowPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGridStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_RowProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn GetRowImpl(_ element: WinUI.FrameworkElement?) throws -> Int32 {
            var result: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGridStatics.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetRow(pThis, RawPointer(element), &result))
            }
            return result
        }

        internal fn SetRowImpl(_ element: WinUI.FrameworkElement?, _ value: Int32) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGridStatics.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetRow(pThis, RawPointer(element), value))
            }
        }

        internal fn get_ColumnPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGridStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ColumnProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn GetColumnImpl(_ element: WinUI.FrameworkElement?) throws -> Int32 {
            var result: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGridStatics.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetColumn(pThis, RawPointer(element), &result))
            }
            return result
        }

        internal fn SetColumnImpl(_ element: WinUI.FrameworkElement?, _ value: Int32) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGridStatics.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetColumn(pThis, RawPointer(element), value))
            }
        }

        internal fn get_RowSpanPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGridStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_RowSpanProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn GetRowSpanImpl(_ element: WinUI.FrameworkElement?) throws -> Int32 {
            var result: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGridStatics.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetRowSpan(pThis, RawPointer(element), &result))
            }
            return result
        }

        internal fn SetRowSpanImpl(_ element: WinUI.FrameworkElement?, _ value: Int32) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGridStatics.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetRowSpan(pThis, RawPointer(element), value))
            }
        }

        internal fn get_ColumnSpanPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGridStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ColumnSpanProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn GetColumnSpanImpl(_ element: WinUI.FrameworkElement?) throws -> Int32 {
            var result: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGridStatics.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetColumnSpan(pThis, RawPointer(element), &result))
            }
            return result
        }

        internal fn SetColumnSpanImpl(_ element: WinUI.FrameworkElement?, _ value: Int32) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGridStatics.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetColumnSpan(pThis, RawPointer(element), value))
            }
        }

    }

    public class IGroupStyle: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGroupStyle }

        internal fn get_PanelImpl() throws -> WinUI.ItemsPanelTemplate? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGroupStyle.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Panel(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn put_PanelImpl(_ value: WinUI.ItemsPanelTemplate?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGroupStyle.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Panel(pThis, RawPointer(value)))
            }
        }

        internal fn get_ContainerStyleImpl() throws -> WinUI.Style? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGroupStyle.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ContainerStyle(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn put_ContainerStyleImpl(_ value: WinUI.Style?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGroupStyle.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ContainerStyle(pThis, RawPointer(value)))
            }
        }

        internal fn get_HeaderContainerStyleImpl() throws -> WinUI.Style? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGroupStyle.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_HeaderContainerStyle(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn put_HeaderContainerStyleImpl(_ value: WinUI.Style?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGroupStyle.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_HeaderContainerStyle(pThis, RawPointer(value)))
            }
        }

        internal fn get_ContainerStyleSelectorImpl() throws -> WinUI.StyleSelector? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGroupStyle.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ContainerStyleSelector(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn put_ContainerStyleSelectorImpl(_ value: WinUI.StyleSelector?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGroupStyle.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ContainerStyleSelector(pThis, RawPointer(value)))
            }
        }

        internal fn get_HeaderTemplateImpl() throws -> WinUI.DataTemplate? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGroupStyle.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_HeaderTemplate(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn put_HeaderTemplateImpl(_ value: WinUI.DataTemplate?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGroupStyle.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_HeaderTemplate(pThis, RawPointer(value)))
            }
        }

        internal fn get_HeaderTemplateSelectorImpl() throws -> WinUI.DataTemplateSelector? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGroupStyle.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_HeaderTemplateSelector(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn put_HeaderTemplateSelectorImpl(_ value: WinUI.DataTemplateSelector?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGroupStyle.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_HeaderTemplateSelector(pThis, RawPointer(value)))
            }
        }

        internal fn get_HidesIfEmptyImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGroupStyle.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_HidesIfEmpty(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_HidesIfEmptyImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGroupStyle.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_HidesIfEmpty(pThis, .init(from: value)))
            }
        }

    }

    public class IGroupStyleFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGroupStyleFactory }

        internal fn CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<WinUI.GroupStyle.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> IGroupStyle {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                immutable _baseInterface = baseInterface?.toIInspectableABI { $0 }
                immutable (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGroupStyleFactory.this) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return IGroupStyle(value!)
        }

    }

    public class IGroupStyleSelector: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGroupStyleSelector }

        internal fn SelectGroupStyleImpl(_ group: Any?, _ level: UInt32) throws -> WinUI.GroupStyle? {
            immutable (result) = try ComPtrs.initialize { resultAbi in
                immutable groupWrapper = __ABI_.AnyWrapper(group)
                immutable _group = try! groupWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGroupStyleSelector.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.SelectGroupStyle(pThis, _group, level, &resultAbi))
                }
            }
            return .from(abi: result)
        }

    }

    public class IGroupStyleSelectorFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGroupStyleSelectorFactory }

        internal fn CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<WinUI.GroupStyleSelector.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> IGroupStyleSelector {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                immutable _baseInterface = baseInterface?.toIInspectableABI { $0 }
                immutable (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGroupStyleSelectorFactory.this) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return IGroupStyleSelector(value!)
        }

    }

    public class IGroupStyleSelectorOverrides: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGroupStyleSelectorOverrides }

        internal fn SelectGroupStyleCoreImpl(_ group: Any?, _ level: UInt32) throws -> WinUI.GroupStyle? {
            immutable (result) = try ComPtrs.initialize { resultAbi in
                immutable groupWrapper = __ABI_.AnyWrapper(group)
                immutable _group = try! groupWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGroupStyleSelectorOverrides.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.SelectGroupStyleCore(pThis, _group, level, &resultAbi))
                }
            }
            return .from(abi: result)
        }

    }

    public class IHyperlinkButton: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIHyperlinkButton }

        internal fn get_NavigateUriImpl() throws -> WindowsFoundation.Uri? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIHyperlinkButton.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_NavigateUri(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn put_NavigateUriImpl(_ value: WindowsFoundation.Uri?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIHyperlinkButton.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_NavigateUri(pThis, RawPointer(value)))
            }
        }

    }

    public class IHyperlinkButtonFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIHyperlinkButtonFactory }

        internal fn CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<WinUI.HyperlinkButton.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> IHyperlinkButton {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                immutable _baseInterface = baseInterface?.toIInspectableABI { $0 }
                immutable (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIHyperlinkButtonFactory.this) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return IHyperlinkButton(value!)
        }

    }

    public class IHyperlinkButtonStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIHyperlinkButtonStatics }

        internal fn get_NavigateUriPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIHyperlinkButtonStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_NavigateUriProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IIconElement: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIIconElement }

        internal fn get_ForegroundImpl() throws -> WinUI.Brush? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIIconElement.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Foreground(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn put_ForegroundImpl(_ value: WinUI.Brush?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIIconElement.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Foreground(pThis, RawPointer(value)))
            }
        }

    }

    public class IIconElementFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIIconElementFactory }

    }

    public class IIconElementStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIIconElementStatics }

        internal fn get_ForegroundPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIIconElementStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ForegroundProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IIconSource: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIIconSource }

        internal fn get_ForegroundImpl() throws -> WinUI.Brush? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIIconSource.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Foreground(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn put_ForegroundImpl(_ value: WinUI.Brush?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIIconSource.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Foreground(pThis, RawPointer(value)))
            }
        }

        internal fn CreateIconElementImpl() throws -> WinUI.IconElement? {
            immutable (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIIconSource.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateIconElement(pThis, &resultAbi))
                }
            }
            return .from(abi: result)
        }

    }

    public class IIconSourceFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIIconSourceFactory }

    }

    public class IIconSourceOverrides: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIIconSourceOverrides }

        internal fn CreateIconElementCoreImpl() throws -> WinUI.IconElement? {
            immutable (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIIconSourceOverrides.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateIconElementCore(pThis, &resultAbi))
                }
            }
            return .from(abi: result)
        }

        internal fn GetIconElementPropertyCoreImpl(_ iconSourceProperty: WinUI.DependencyProperty?) throws -> WinUI.DependencyProperty? {
            immutable (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIIconSourceOverrides.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetIconElementPropertyCore(pThis, RawPointer(iconSourceProperty), &resultAbi))
                }
            }
            return .from(abi: result)
        }

    }

    public class IIconSourceStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIIconSourceStatics }

        internal fn get_ForegroundPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIIconSourceStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ForegroundProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IImage: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIImage }

        internal fn get_SourceImpl() throws -> WinUI.ImageSource? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIImage.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn put_SourceImpl(_ value: WinUI.ImageSource?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIImage.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source(pThis, RawPointer(value)))
            }
        }

        internal fn get_StretchImpl() throws -> WinUI.Stretch {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CMedia_CStretch = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIImage.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Stretch(pThis, &value))
            }
            return value
        }

        internal fn put_StretchImpl(_ value: WinUI.Stretch) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIImage.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Stretch(pThis, value))
            }
        }

        internal fn get_NineGridImpl() throws -> WinUI.Thickness {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CThickness = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIImage.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_NineGrid(pThis, &value))
            }
            return .from(abi: value)
        }

        internal fn put_NineGridImpl(_ value: WinUI.Thickness) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIImage.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_NineGrid(pThis, .from(swift: value)))
            }
        }

        internal fn add_ImageFailedImpl(_ handler: WinUI.ExceptionRoutedEventHandler?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = __ABI_Microsoft_UI_Xaml.ExceptionRoutedEventHandlerWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIImage.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_ImageFailed(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_ImageFailedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIImage.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_ImageFailed(pThis, token))
            }
        }

        internal fn add_ImageOpenedImpl(_ handler: WinUI.RoutedEventHandler?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = __ABI_Microsoft_UI_Xaml.RoutedEventHandlerWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIImage.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_ImageOpened(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_ImageOpenedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIImage.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_ImageOpened(pThis, token))
            }
        }

        internal fn GetAsCastingSourceImpl() throws -> UWP.CastingSource? {
            immutable (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIImage.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetAsCastingSource(pThis, &resultAbi))
                }
            }
            return .from(abi: result)
        }

        internal fn GetAlphaMaskImpl() throws -> WinAppSDK.CompositionBrush? {
            immutable (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIImage.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetAlphaMask(pThis, &resultAbi))
                }
            }
            return .from(abi: result)
        }

    }

    public class IImageStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIImageStatics }

        internal fn get_SourcePropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIImageStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SourceProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_StretchPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIImageStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_StretchProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_NineGridPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIImageStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_NineGridProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IInfoBadge: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBadge }

        internal fn get_ValueImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBadge.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Value(pThis, &value))
            }
            return value
        }

        internal fn put_ValueImpl(_ value: Int32) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBadge.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Value(pThis, value))
            }
        }

        internal fn get_IconSourceImpl() throws -> WinUI.IconSource? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBadge.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IconSource(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn put_IconSourceImpl(_ value: WinUI.IconSource?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBadge.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IconSource(pThis, RawPointer(value)))
            }
        }

        internal fn get_TemplateSettingsImpl() throws -> WinUI.InfoBadgeTemplateSettings? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBadge.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_TemplateSettings(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IInfoBadgeFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBadgeFactory }

        internal fn CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<WinUI.InfoBadge.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> IInfoBadge {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                immutable _baseInterface = baseInterface?.toIInspectableABI { $0 }
                immutable (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBadgeFactory.this) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return IInfoBadge(value!)
        }

    }

    public class IInfoBadgeStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBadgeStatics }

        internal fn get_ValuePropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBadgeStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ValueProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_IconSourcePropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBadgeStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IconSourceProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_TemplateSettingsPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBadgeStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_TemplateSettingsProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IInfoBadgeTemplateSettings: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBadgeTemplateSettings }

        internal fn get_InfoBadgeCornerRadiusImpl() throws -> WinUI.CornerRadius {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CCornerRadius = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBadgeTemplateSettings.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_InfoBadgeCornerRadius(pThis, &value))
            }
            return .from(abi: value)
        }

        internal fn put_InfoBadgeCornerRadiusImpl(_ value: WinUI.CornerRadius) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBadgeTemplateSettings.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_InfoBadgeCornerRadius(pThis, .from(swift: value)))
            }
        }

        internal fn get_IconElementImpl() throws -> WinUI.IconElement? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBadgeTemplateSettings.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IconElement(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn put_IconElementImpl(_ value: WinUI.IconElement?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBadgeTemplateSettings.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IconElement(pThis, RawPointer(value)))
            }
        }

    }

    public class IInfoBadgeTemplateSettingsFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBadgeTemplateSettingsFactory }

        internal fn CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<WinUI.InfoBadgeTemplateSettings.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> IInfoBadgeTemplateSettings {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                immutable _baseInterface = baseInterface?.toIInspectableABI { $0 }
                immutable (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBadgeTemplateSettingsFactory.this) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return IInfoBadgeTemplateSettings(value!)
        }

    }

    public class IInfoBadgeTemplateSettingsStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBadgeTemplateSettingsStatics }

        internal fn get_InfoBadgeCornerRadiusPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBadgeTemplateSettingsStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_InfoBadgeCornerRadiusProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_IconElementPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBadgeTemplateSettingsStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IconElementProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IIsTextTrimmedChangedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIIsTextTrimmedChangedEventArgs }

    }

    public class IItemClickEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemClickEventArgs }

        internal fn get_ClickedItemImpl() throws -> Any? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemClickEventArgs.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ClickedItem(pThis, &valueAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: value)
        }

    }

    public class IItemContainerGenerator: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemContainerGenerator }

        internal fn add_ItemsChangedImpl(_ handler: WinUI.ItemsChangedEventHandler?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = __ABI_Microsoft_UI_Xaml_Controls_Primitives.ItemsChangedEventHandlerWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemContainerGenerator.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_ItemsChanged(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_ItemsChangedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemContainerGenerator.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_ItemsChanged(pThis, token))
            }
        }

        internal fn ItemFromContainerImpl(_ container: WinUI.DependencyObject?) throws -> Any? {
            immutable (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemContainerGenerator.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.ItemFromContainer(pThis, RawPointer(container), &resultAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: result)
        }

        internal fn ContainerFromItemImpl(_ item: Any?) throws -> WinUI.DependencyObject? {
            immutable (result) = try ComPtrs.initialize { resultAbi in
                immutable itemWrapper = __ABI_.AnyWrapper(item)
                immutable _item = try! itemWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemContainerGenerator.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.ContainerFromItem(pThis, _item, &resultAbi))
                }
            }
            return .from(abi: result)
        }

        internal fn IndexFromContainerImpl(_ container: WinUI.DependencyObject?) throws -> Int32 {
            var result: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemContainerGenerator.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.IndexFromContainer(pThis, RawPointer(container), &result))
            }
            return result
        }

        internal fn ContainerFromIndexImpl(_ index: Int32) throws -> WinUI.DependencyObject? {
            immutable (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemContainerGenerator.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.ContainerFromIndex(pThis, index, &resultAbi))
                }
            }
            return .from(abi: result)
        }

        internal fn GetItemContainerGeneratorForPanelImpl(_ panel: WinUI.Panel?) throws -> WinUI.ItemContainerGenerator? {
            immutable (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemContainerGenerator.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetItemContainerGeneratorForPanel(pThis, RawPointer(panel), &resultAbi))
                }
            }
            return .from(abi: result)
        }

        internal fn StartAtImpl(_ position: WinUI.GeneratorPosition, _ direction: WinUI.GeneratorDirection, _ allowStartAtRealizedItem: Boolean) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemContainerGenerator.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.StartAt(pThis, .from(swift: position), direction, .init(from: allowStartAtRealizedItem)))
            }
        }

        internal fn StopImpl() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemContainerGenerator.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Stop(pThis))
            }
        }

        internal fn GenerateNextImpl(_ isNewlyRealized: inout Boolean) throws -> WinUI.DependencyObject? {
            immutable (returnValue) = try ComPtrs.initialize { returnValueAbi in
                var _isNewlyRealized: boolean = .init()
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemContainerGenerator.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GenerateNext(pThis, &_isNewlyRealized, &returnValueAbi))
                }
                isNewlyRealized = .init(from: _isNewlyRealized)
            }
            return .from(abi: returnValue)
        }

        internal fn PrepareItemContainerImpl(_ container: WinUI.DependencyObject?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemContainerGenerator.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.PrepareItemContainer(pThis, RawPointer(container)))
            }
        }

        internal fn RemoveAllImpl() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemContainerGenerator.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveAll(pThis))
            }
        }

        internal fn RemoveImpl(_ position: WinUI.GeneratorPosition, _ count: Int32) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemContainerGenerator.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Remove(pThis, .from(swift: position), count))
            }
        }

        internal fn GeneratorPositionFromIndexImpl(_ itemIndex: Int32) throws -> WinUI.GeneratorPosition {
            var result: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CGeneratorPosition = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemContainerGenerator.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GeneratorPositionFromIndex(pThis, itemIndex, &result))
            }
            return .from(abi: result)
        }

        internal fn IndexFromGeneratorPositionImpl(_ position: WinUI.GeneratorPosition) throws -> Int32 {
            var result: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemContainerGenerator.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.IndexFromGeneratorPosition(pThis, .from(swift: position), &result))
            }
            return result
        }

        internal fn RecycleImpl(_ position: WinUI.GeneratorPosition, _ count: Int32) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemContainerGenerator.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Recycle(pThis, .from(swift: position), count))
            }
        }

    }

    public class IItemContainerMapping: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemContainerMapping }

        open fn ItemFromContainerImpl(_ container: WinUI.DependencyObject?) throws -> Any? {
            immutable (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemContainerMapping.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.ItemFromContainer(pThis, RawPointer(container), &resultAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: result)
        }

        open fn ContainerFromItemImpl(_ item: Any?) throws -> WinUI.DependencyObject? {
            immutable (result) = try ComPtrs.initialize { resultAbi in
                immutable itemWrapper = __ABI_.AnyWrapper(item)
                immutable _item = try! itemWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemContainerMapping.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.ContainerFromItem(pThis, _item, &resultAbi))
                }
            }
            return .from(abi: result)
        }

        open fn IndexFromContainerImpl(_ container: WinUI.DependencyObject?) throws -> Int32 {
            var result: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemContainerMapping.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.IndexFromContainer(pThis, RawPointer(container), &result))
            }
            return result
        }

        open fn ContainerFromIndexImpl(_ index: Int32) throws -> WinUI.DependencyObject? {
            immutable (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemContainerMapping.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.ContainerFromIndex(pThis, index, &resultAbi))
                }
            }
            return .from(abi: result)
        }

    }

    internal static var IItemContainerMappingVTable: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemContainerMappingVtbl = .init(
        QueryInterface: { IItemContainerMappingWrapper.queryInterface($0, $1, $2) },
        AddRef: { IItemContainerMappingWrapper.addRef($0) },
        Release: { IItemContainerMappingWrapper.release($0) },
        GetIids: {
            immutable size = MemoryLayout<WindowsFoundation.IID>.size
            immutable iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.this)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Microsoft_UI_Xaml_Controls.IItemContainerMappingWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            immutable hstring = try! HString("Microsoft.UI.Xaml.Controls.IItemContainerMapping").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        ItemFromContainer: {
            do {
                guard immutable __unwrapped__instance = IItemContainerMappingWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                immutable container: WinUI.DependencyObject? = .from(abi: ComPtr($1))
                immutable result = try __unwrapped__instance.itemFromContainer(container)
                immutable resultWrapper = __ABI_.AnyWrapper(result)
                resultWrapper?.copyTo($2)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        ContainerFromItem: {
            do {
                guard immutable __unwrapped__instance = IItemContainerMappingWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                immutable item: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($1))
                immutable result = try __unwrapped__instance.containerFromItem(item)
                result?.copyTo($2)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        IndexFromContainer: {
            do {
                guard immutable __unwrapped__instance = IItemContainerMappingWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                immutable container: WinUI.DependencyObject? = .from(abi: ComPtr($1))
                immutable result = try __unwrapped__instance.indexFromContainer(container)
                $2?.initialize(to: result)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        ContainerFromIndex: {
            do {
                guard immutable __unwrapped__instance = IItemContainerMappingWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                immutable index: Int32 = $1
                immutable result = try __unwrapped__instance.containerFromIndex(index)
                result?.copyTo($2)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        }
    )

    public typealias IItemContainerMappingWrapper = InterfaceWrapperBase<__IMPL_Microsoft_UI_Xaml_Controls.IItemContainerMappingBridge>
    public class IItemsControl: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControl }

        internal fn get_ItemsSourceImpl() throws -> Any? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControl.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ItemsSource(pThis, &valueAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: value)
        }

        internal fn put_ItemsSourceImpl(_ value: Any?) throws {
            immutable valueWrapper = __ABI_.AnyWrapper(value)
            immutable _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ItemsSource(pThis, _value))
            }
        }

        internal fn get_ItemsImpl() throws -> WinUI.ItemCollection? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControl.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Items(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_ItemTemplateImpl() throws -> WinUI.DataTemplate? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControl.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ItemTemplate(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn put_ItemTemplateImpl(_ value: WinUI.DataTemplate?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ItemTemplate(pThis, RawPointer(value)))
            }
        }

        internal fn get_ItemTemplateSelectorImpl() throws -> WinUI.DataTemplateSelector? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControl.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ItemTemplateSelector(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn put_ItemTemplateSelectorImpl(_ value: WinUI.DataTemplateSelector?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ItemTemplateSelector(pThis, RawPointer(value)))
            }
        }

        internal fn get_ItemsPanelImpl() throws -> WinUI.ItemsPanelTemplate? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControl.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ItemsPanel(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn put_ItemsPanelImpl(_ value: WinUI.ItemsPanelTemplate?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ItemsPanel(pThis, RawPointer(value)))
            }
        }

        internal fn get_DisplayMemberPathImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DisplayMemberPath(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_DisplayMemberPathImpl(_ value: String) throws {
            immutable _value = try! HString(value)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_DisplayMemberPath(pThis, _value.get()))
            }
        }

        internal fn get_ItemsPanelRootImpl() throws -> WinUI.Panel? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControl.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ItemsPanelRoot(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_ItemContainerStyleImpl() throws -> WinUI.Style? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControl.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ItemContainerStyle(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn put_ItemContainerStyleImpl(_ value: WinUI.Style?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ItemContainerStyle(pThis, RawPointer(value)))
            }
        }

        internal fn get_ItemContainerStyleSelectorImpl() throws -> WinUI.StyleSelector? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControl.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ItemContainerStyleSelector(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn put_ItemContainerStyleSelectorImpl(_ value: WinUI.StyleSelector?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ItemContainerStyleSelector(pThis, RawPointer(value)))
            }
        }

        internal fn get_ItemContainerGeneratorImpl() throws -> WinUI.ItemContainerGenerator? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControl.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ItemContainerGenerator(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_ItemContainerTransitionsImpl() throws -> WinUI.TransitionCollection? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControl.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ItemContainerTransitions(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn put_ItemContainerTransitionsImpl(_ value: WinUI.TransitionCollection?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ItemContainerTransitions(pThis, RawPointer(value)))
            }
        }

        internal fn get_GroupStyleImpl() throws -> WindowsFoundation.AnyIObservableVector<WinUI.GroupStyle?>? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControl.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_GroupStyle(pThis, &valueAbi))
                }
            }
            return WinUI.__x_ABI_C__FIObservableVector_1___x_ABI_CMicrosoft__CUI__CXaml__CControls__CGroupStyleWrapper.unwrapFrom(abi: value)
        }

        internal fn get_GroupStyleSelectorImpl() throws -> WinUI.GroupStyleSelector? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControl.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_GroupStyleSelector(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn put_GroupStyleSelectorImpl(_ value: WinUI.GroupStyleSelector?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_GroupStyleSelector(pThis, RawPointer(value)))
            }
        }

        internal fn get_IsGroupingImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControl.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsGrouping(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn GroupHeaderContainerFromItemContainerImpl(_ itemContainer: WinUI.DependencyObject?) throws -> WinUI.DependencyObject? {
            immutable (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControl.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GroupHeaderContainerFromItemContainer(pThis, RawPointer(itemContainer), &resultAbi))
                }
            }
            return .from(abi: result)
        }

    }

    public class IItemsControlFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControlFactory }

        internal fn CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<WinUI.ItemsControl.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> IItemsControl {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                immutable _baseInterface = baseInterface?.toIInspectableABI { $0 }
                immutable (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControlFactory.this) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return IItemsControl(value!)
        }

    }

    public class IItemsControlOverrides: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControlOverrides }

        internal fn IsItemItsOwnContainerOverrideImpl(_ item: Any?) throws -> Boolean {
            var result: boolean = 0
            immutable itemWrapper = __ABI_.AnyWrapper(item)
            immutable _item = try! itemWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControlOverrides.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.IsItemItsOwnContainerOverride(pThis, _item, &result))
            }
            return .init(from: result)
        }

        internal fn GetContainerForItemOverrideImpl() throws -> WinUI.DependencyObject? {
            immutable (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControlOverrides.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetContainerForItemOverride(pThis, &resultAbi))
                }
            }
            return .from(abi: result)
        }

        internal fn ClearContainerForItemOverrideImpl(_ element: WinUI.DependencyObject?, _ item: Any?) throws {
            immutable itemWrapper = __ABI_.AnyWrapper(item)
            immutable _item = try! itemWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControlOverrides.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ClearContainerForItemOverride(pThis, RawPointer(element), _item))
            }
        }

        internal fn PrepareContainerForItemOverrideImpl(_ element: WinUI.DependencyObject?, _ item: Any?) throws {
            immutable itemWrapper = __ABI_.AnyWrapper(item)
            immutable _item = try! itemWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControlOverrides.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.PrepareContainerForItemOverride(pThis, RawPointer(element), _item))
            }
        }

        internal fn OnItemsChangedImpl(_ e: Any?) throws {
            immutable eWrapper = __ABI_.AnyWrapper(e)
            immutable _e = try! eWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControlOverrides.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OnItemsChanged(pThis, _e))
            }
        }

        internal fn OnItemContainerStyleChangedImpl(_ oldItemContainerStyle: WinUI.Style?, _ newItemContainerStyle: WinUI.Style?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControlOverrides.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OnItemContainerStyleChanged(pThis, RawPointer(oldItemContainerStyle), RawPointer(newItemContainerStyle)))
            }
        }

        internal fn OnItemContainerStyleSelectorChangedImpl(_ oldItemContainerStyleSelector: WinUI.StyleSelector?, _ newItemContainerStyleSelector: WinUI.StyleSelector?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControlOverrides.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OnItemContainerStyleSelectorChanged(pThis, RawPointer(oldItemContainerStyleSelector), RawPointer(newItemContainerStyleSelector)))
            }
        }

        internal fn OnItemTemplateChangedImpl(_ oldItemTemplate: WinUI.DataTemplate?, _ newItemTemplate: WinUI.DataTemplate?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControlOverrides.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OnItemTemplateChanged(pThis, RawPointer(oldItemTemplate), RawPointer(newItemTemplate)))
            }
        }

        internal fn OnItemTemplateSelectorChangedImpl(_ oldItemTemplateSelector: WinUI.DataTemplateSelector?, _ newItemTemplateSelector: WinUI.DataTemplateSelector?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControlOverrides.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OnItemTemplateSelectorChanged(pThis, RawPointer(oldItemTemplateSelector), RawPointer(newItemTemplateSelector)))
            }
        }

        internal fn OnGroupStyleSelectorChangedImpl(_ oldGroupStyleSelector: WinUI.GroupStyleSelector?, _ newGroupStyleSelector: WinUI.GroupStyleSelector?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControlOverrides.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OnGroupStyleSelectorChanged(pThis, RawPointer(oldGroupStyleSelector), RawPointer(newGroupStyleSelector)))
            }
        }

    }

    public class IItemsControlStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControlStatics }

        internal fn get_ItemsSourcePropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControlStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ItemsSourceProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_ItemTemplatePropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControlStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ItemTemplateProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_ItemTemplateSelectorPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControlStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ItemTemplateSelectorProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_ItemsPanelPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControlStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ItemsPanelProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_DisplayMemberPathPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControlStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_DisplayMemberPathProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_ItemContainerStylePropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControlStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ItemContainerStyleProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_ItemContainerStyleSelectorPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControlStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ItemContainerStyleSelectorProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_ItemContainerTransitionsPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControlStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ItemContainerTransitionsProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_GroupStyleSelectorPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControlStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_GroupStyleSelectorProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_IsGroupingPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControlStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsGroupingProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn GetItemsOwnerImpl(_ element: WinUI.DependencyObject?) throws -> WinUI.ItemsControl? {
            immutable (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControlStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetItemsOwner(pThis, RawPointer(element), &resultAbi))
                }
            }
            return .from(abi: result)
        }

        internal fn ItemsControlFromItemContainerImpl(_ container: WinUI.DependencyObject?) throws -> WinUI.ItemsControl? {
            immutable (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControlStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.ItemsControlFromItemContainer(pThis, RawPointer(container), &resultAbi))
                }
            }
            return .from(abi: result)
        }

    }

    public class IItemsPanelTemplate: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsPanelTemplate }

    }

    public class IKeyIndexMapping: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIKeyIndexMapping }

        open fn KeyFromIndexImpl(_ index: Int32) throws -> String {
            var result: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIKeyIndexMapping.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.KeyFromIndex(pThis, index, &result))
            }
            return .init(from: result)
        }

        open fn IndexFromKeyImpl(_ key: String) throws -> Int32 {
            var result: INT32 = 0
            immutable _key = try! HString(key)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIKeyIndexMapping.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.IndexFromKey(pThis, _key.get(), &result))
            }
            return result
        }

    }

    internal static var IKeyIndexMappingVTable: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIKeyIndexMappingVtbl = .init(
        QueryInterface: { IKeyIndexMappingWrapper.queryInterface($0, $1, $2) },
        AddRef: { IKeyIndexMappingWrapper.addRef($0) },
        Release: { IKeyIndexMappingWrapper.release($0) },
        GetIids: {
            immutable size = MemoryLayout<WindowsFoundation.IID>.size
            immutable iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.this)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Microsoft_UI_Xaml_Controls.IKeyIndexMappingWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            immutable hstring = try! HString("Microsoft.UI.Xaml.Controls.IKeyIndexMapping").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        KeyFromIndex: {
            do {
                guard immutable __unwrapped__instance = IKeyIndexMappingWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                immutable index: Int32 = $1
                immutable result = try __unwrapped__instance.keyFromIndex(index)
                $2?.initialize(to: try! HString(result).detach())
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        IndexFromKey: {
            do {
                guard immutable __unwrapped__instance = IKeyIndexMappingWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                immutable key: String = .init(from: $1)
                immutable result = try __unwrapped__instance.indexFromKey(key)
                $2?.initialize(to: result)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        }
    )

    public typealias IKeyIndexMappingWrapper = InterfaceWrapperBase<__IMPL_Microsoft_UI_Xaml_Controls.IKeyIndexMappingBridge>
    public class IListView: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListView }

    }

    public class IListViewBase: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase }

        internal fn get_SelectedItemsImpl() throws -> WindowsFoundation.AnyIVector<Any?>? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SelectedItems(pThis, &valueAbi))
                }
            }
            return WinUI.__x_ABI_C__FIVector_1_IInspectableWrapper.unwrapFrom(abi: value)
        }

        internal fn get_SelectionModeImpl() throws -> WinUI.ListViewSelectionMode {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CListViewSelectionMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_SelectionMode(pThis, &value))
            }
            return value
        }

        internal fn put_SelectionModeImpl(_ value: WinUI.ListViewSelectionMode) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_SelectionMode(pThis, value))
            }
        }

        internal fn get_IsSwipeEnabledImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsSwipeEnabled(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_IsSwipeEnabledImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsSwipeEnabled(pThis, .init(from: value)))
            }
        }

        internal fn get_CanDragItemsImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CanDragItems(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_CanDragItemsImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_CanDragItems(pThis, .init(from: value)))
            }
        }

        internal fn get_CanReorderItemsImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CanReorderItems(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_CanReorderItemsImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_CanReorderItems(pThis, .init(from: value)))
            }
        }

        internal fn get_IsItemClickEnabledImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsItemClickEnabled(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_IsItemClickEnabledImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsItemClickEnabled(pThis, .init(from: value)))
            }
        }

        internal fn get_DataFetchSizeImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DataFetchSize(pThis, &value))
            }
            return value
        }

        internal fn put_DataFetchSizeImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_DataFetchSize(pThis, value))
            }
        }

        internal fn get_IncrementalLoadingThresholdImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IncrementalLoadingThreshold(pThis, &value))
            }
            return value
        }

        internal fn put_IncrementalLoadingThresholdImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IncrementalLoadingThreshold(pThis, value))
            }
        }

        internal fn get_IncrementalLoadingTriggerImpl() throws -> WinUI.IncrementalLoadingTrigger {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIncrementalLoadingTrigger = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IncrementalLoadingTrigger(pThis, &value))
            }
            return value
        }

        internal fn put_IncrementalLoadingTriggerImpl(_ value: WinUI.IncrementalLoadingTrigger) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IncrementalLoadingTrigger(pThis, value))
            }
        }

        internal fn get_ShowsScrollingPlaceholdersImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ShowsScrollingPlaceholders(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_ShowsScrollingPlaceholdersImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ShowsScrollingPlaceholders(pThis, .init(from: value)))
            }
        }

        internal fn get_ReorderModeImpl() throws -> WinUI.ListViewReorderMode {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CListViewReorderMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ReorderMode(pThis, &value))
            }
            return value
        }

        internal fn put_ReorderModeImpl(_ value: WinUI.ListViewReorderMode) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ReorderMode(pThis, value))
            }
        }

        internal fn get_SelectedRangesImpl() throws -> WindowsFoundation.AnyIVectorView<WinUI.ItemIndexRange?>? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SelectedRanges(pThis, &valueAbi))
                }
            }
            return WinUI.__x_ABI_C__FIVectorView_1___x_ABI_CMicrosoft__CUI__CXaml__CData__CItemIndexRangeWrapper.unwrapFrom(abi: value)
        }

        internal fn get_IsMultiSelectCheckBoxEnabledImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsMultiSelectCheckBoxEnabled(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_IsMultiSelectCheckBoxEnabledImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsMultiSelectCheckBoxEnabled(pThis, .init(from: value)))
            }
        }

        internal fn get_SingleSelectionFollowsFocusImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_SingleSelectionFollowsFocus(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_SingleSelectionFollowsFocusImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_SingleSelectionFollowsFocus(pThis, .init(from: value)))
            }
        }

        internal fn add_ItemClickImpl(_ handler: WinUI.ItemClickEventHandler?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = __ABI_Microsoft_UI_Xaml_Controls.ItemClickEventHandlerWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_ItemClick(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_ItemClickImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_ItemClick(pThis, token))
            }
        }

        internal fn add_DragItemsStartingImpl(_ handler: WinUI.DragItemsStartingEventHandler?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = __ABI_Microsoft_UI_Xaml_Controls.DragItemsStartingEventHandlerWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_DragItemsStarting(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_DragItemsStartingImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_DragItemsStarting(pThis, token))
            }
        }

        internal fn add_DragItemsCompletedImpl(_ handler: TypedEventHandler<WinUI.ListViewBase?, WinUI.DragItemsCompletedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CListViewBase___x_ABI_CMicrosoft__CUI__CXaml__CControls__CDragItemsCompletedEventArgsWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_DragItemsCompleted(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_DragItemsCompletedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_DragItemsCompleted(pThis, token))
            }
        }

        internal fn add_ContainerContentChangingImpl(_ handler: TypedEventHandler<WinUI.ListViewBase?, WinUI.ContainerContentChangingEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CListViewBase___x_ABI_CMicrosoft__CUI__CXaml__CControls__CContainerContentChangingEventArgsWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_ContainerContentChanging(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_ContainerContentChangingImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_ContainerContentChanging(pThis, token))
            }
        }

        internal fn add_ChoosingItemContainerImpl(_ handler: TypedEventHandler<WinUI.ListViewBase?, WinUI.ChoosingItemContainerEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CListViewBase___x_ABI_CMicrosoft__CUI__CXaml__CControls__CChoosingItemContainerEventArgsWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_ChoosingItemContainer(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_ChoosingItemContainerImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_ChoosingItemContainer(pThis, token))
            }
        }

        internal fn add_ChoosingGroupHeaderContainerImpl(_ handler: TypedEventHandler<WinUI.ListViewBase?, WinUI.ChoosingGroupHeaderContainerEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CListViewBase___x_ABI_CMicrosoft__CUI__CXaml__CControls__CChoosingGroupHeaderContainerEventArgsWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_ChoosingGroupHeaderContainer(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_ChoosingGroupHeaderContainerImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_ChoosingGroupHeaderContainer(pThis, token))
            }
        }

        internal fn ScrollIntoViewImpl(_ item: Any?) throws {
            immutable itemWrapper = __ABI_.AnyWrapper(item)
            immutable _item = try! itemWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ScrollIntoView(pThis, _item))
            }
        }

        internal fn SelectAllImpl() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SelectAll(pThis))
            }
        }

        internal fn LoadMoreItemsAsyncImpl() throws -> WindowsFoundation.AnyIAsyncOperation<WinUI.LoadMoreItemsResult>? {
            immutable (operation) = try ComPtrs.initialize { operationAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.LoadMoreItemsAsync(pThis, &operationAbi))
                }
            }
            return WinUI.__x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CUI__CXaml__CData__CLoadMoreItemsResultWrapper.unwrapFrom(abi: operation)
        }

        internal fn ScrollIntoViewWithAlignmentImpl(_ item: Any?, _ alignment: WinUI.ScrollIntoViewAlignment) throws {
            immutable itemWrapper = __ABI_.AnyWrapper(item)
            immutable _item = try! itemWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ScrollIntoViewWithAlignment(pThis, _item, alignment))
            }
        }

        internal fn SetDesiredContainerUpdateDurationImpl(_ duration: WindowsFoundation.TimeSpan) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetDesiredContainerUpdateDuration(pThis, .from(swift: duration)))
            }
        }

        internal fn SelectRangeImpl(_ itemIndexRange: WinUI.ItemIndexRange?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SelectRange(pThis, RawPointer(itemIndexRange)))
            }
        }

        internal fn DeselectRangeImpl(_ itemIndexRange: WinUI.ItemIndexRange?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DeselectRange(pThis, RawPointer(itemIndexRange)))
            }
        }

        internal fn IsDragSourceImpl() throws -> Boolean {
            var result: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.IsDragSource(pThis, &result))
            }
            return .init(from: result)
        }

        internal fn TryStartConnectedAnimationAsyncImpl(_ animation: WinUI.ConnectedAnimation?, _ item: Any?, _ elementName: String) throws -> WindowsFoundation.AnyIAsyncOperation<Boolean>? {
            immutable (operation) = try ComPtrs.initialize { operationAbi in
                immutable itemWrapper = __ABI_.AnyWrapper(item)
                immutable _item = try! itemWrapper?.toABI { $0 }
                immutable _elementName = try! HString(elementName)
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.TryStartConnectedAnimationAsync(pThis, RawPointer(animation), _item, _elementName.get(), &operationAbi))
                }
            }
            return WinUI.__x_ABI_C__FIAsyncOperation_1_booleanWrapper.unwrapFrom(abi: operation)
        }

        internal fn PrepareConnectedAnimationImpl(_ key: String, _ item: Any?, _ elementName: String) throws -> WinUI.ConnectedAnimation? {
            immutable (result) = try ComPtrs.initialize { resultAbi in
                immutable _key = try! HString(key)
                immutable itemWrapper = __ABI_.AnyWrapper(item)
                immutable _item = try! itemWrapper?.toABI { $0 }
                immutable _elementName = try! HString(elementName)
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.PrepareConnectedAnimation(pThis, _key.get(), _item, _elementName.get(), &resultAbi))
                }
            }
            return .from(abi: result)
        }

        internal fn get_HeaderImpl() throws -> Any? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Header(pThis, &valueAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: value)
        }

        internal fn put_HeaderImpl(_ value: Any?) throws {
            immutable valueWrapper = __ABI_.AnyWrapper(value)
            immutable _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Header(pThis, _value))
            }
        }

        internal fn get_HeaderTemplateImpl() throws -> WinUI.DataTemplate? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_HeaderTemplate(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn put_HeaderTemplateImpl(_ value: WinUI.DataTemplate?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_HeaderTemplate(pThis, RawPointer(value)))
            }
        }

        internal fn get_HeaderTransitionsImpl() throws -> WinUI.TransitionCollection? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_HeaderTransitions(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn put_HeaderTransitionsImpl(_ value: WinUI.TransitionCollection?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_HeaderTransitions(pThis, RawPointer(value)))
            }
        }

        internal fn get_FooterImpl() throws -> Any? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Footer(pThis, &valueAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: value)
        }

        internal fn put_FooterImpl(_ value: Any?) throws {
            immutable valueWrapper = __ABI_.AnyWrapper(value)
            immutable _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Footer(pThis, _value))
            }
        }

        internal fn get_FooterTemplateImpl() throws -> WinUI.DataTemplate? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_FooterTemplate(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn put_FooterTemplateImpl(_ value: WinUI.DataTemplate?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_FooterTemplate(pThis, RawPointer(value)))
            }
        }

        internal fn get_FooterTransitionsImpl() throws -> WinUI.TransitionCollection? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_FooterTransitions(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn put_FooterTransitionsImpl(_ value: WinUI.TransitionCollection?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_FooterTransitions(pThis, RawPointer(value)))
            }
        }

    }

    public class IListViewBaseFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBaseFactory }

        internal fn CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<WinUI.ListViewBase.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> IListViewBase {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                immutable _baseInterface = baseInterface?.toIInspectableABI { $0 }
                immutable (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBaseFactory.this) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return IListViewBase(value!)
        }

    }

    public class IListViewBaseHeaderItem: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBaseHeaderItem }

    }

    public class IListViewBaseHeaderItemFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBaseHeaderItemFactory }

    }

    public class IListViewBaseStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBaseStatics }

        internal fn get_SelectionModePropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBaseStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SelectionModeProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_IsSwipeEnabledPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBaseStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsSwipeEnabledProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_CanDragItemsPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBaseStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_CanDragItemsProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_CanReorderItemsPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBaseStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_CanReorderItemsProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_IsItemClickEnabledPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBaseStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsItemClickEnabledProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_DataFetchSizePropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBaseStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_DataFetchSizeProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_IncrementalLoadingThresholdPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBaseStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IncrementalLoadingThresholdProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_IncrementalLoadingTriggerPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBaseStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IncrementalLoadingTriggerProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_ShowsScrollingPlaceholdersPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBaseStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ShowsScrollingPlaceholdersProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_ReorderModePropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBaseStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ReorderModeProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_IsMultiSelectCheckBoxEnabledPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBaseStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsMultiSelectCheckBoxEnabledProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_SingleSelectionFollowsFocusPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBaseStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SingleSelectionFollowsFocusProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_SemanticZoomOwnerPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBaseStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SemanticZoomOwnerProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_IsActiveViewPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBaseStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsActiveViewProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_IsZoomedInViewPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBaseStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsZoomedInViewProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_HeaderPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBaseStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_HeaderProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_HeaderTemplatePropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBaseStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_HeaderTemplateProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_HeaderTransitionsPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBaseStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_HeaderTransitionsProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_FooterPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBaseStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_FooterProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_FooterTemplatePropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBaseStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_FooterTemplateProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_FooterTransitionsPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBaseStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_FooterTransitionsProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IListViewFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewFactory }

        internal fn CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<WinUI.ListView.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> IListView {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                immutable _baseInterface = baseInterface?.toIInspectableABI { $0 }
                immutable (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewFactory.this) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return IListView(value!)
        }

    }

    public class IListViewItem: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewItem }

        internal fn get_TemplateSettingsImpl() throws -> WinUI.ListViewItemTemplateSettings? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewItem.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_TemplateSettings(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IListViewItemFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewItemFactory }

        internal fn CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<WinUI.ListViewItem.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> IListViewItem {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                immutable _baseInterface = baseInterface?.toIInspectableABI { $0 }
                immutable (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewItemFactory.this) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return IListViewItem(value!)
        }

    }

    public class IMenuBar: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuBar }

        internal fn get_ItemsImpl() throws -> WindowsFoundation.AnyIVector<WinUI.MenuBarItem?>? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuBar.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Items(pThis, &valueAbi))
                }
            }
            return WinUI.__x_ABI_C__FIVector_1___x_ABI_CMicrosoft__CUI__CXaml__CControls__CMenuBarItemWrapper.unwrapFrom(abi: value)
        }

    }

    public class IMenuBarFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuBarFactory }

        internal fn CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<WinUI.MenuBar.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> IMenuBar {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                immutable _baseInterface = baseInterface?.toIInspectableABI { $0 }
                immutable (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuBarFactory.this) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return IMenuBar(value!)
        }

    }

    public class IMenuBarItem: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuBarItem }

        internal fn get_TitleImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuBarItem.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Title(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_TitleImpl(_ value: String) throws {
            immutable _value = try! HString(value)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuBarItem.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Title(pThis, _value.get()))
            }
        }

        internal fn get_ItemsImpl() throws -> WindowsFoundation.AnyIVector<WinUI.MenuFlyoutItemBase?>? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuBarItem.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Items(pThis, &valueAbi))
                }
            }
            return WinUI.__x_ABI_C__FIVector_1___x_ABI_CMicrosoft__CUI__CXaml__CControls__CMenuFlyoutItemBaseWrapper.unwrapFrom(abi: value)
        }

    }

    public class IMenuBarItemFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuBarItemFactory }

        internal fn CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<WinUI.MenuBarItem.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> IMenuBarItem {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                immutable _baseInterface = baseInterface?.toIInspectableABI { $0 }
                immutable (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuBarItemFactory.this) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return IMenuBarItem(value!)
        }

    }

    public class IMenuBarItemStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuBarItemStatics }

        internal fn get_TitlePropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuBarItemStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_TitleProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_ItemsPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuBarItemStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ItemsProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IMenuBarStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuBarStatics }

        internal fn get_ItemsPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuBarStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ItemsProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IMenuFlyout: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyout }

        internal fn get_ItemsImpl() throws -> WindowsFoundation.AnyIVector<WinUI.MenuFlyoutItemBase?>? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyout.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Items(pThis, &valueAbi))
                }
            }
            return WinUI.__x_ABI_C__FIVector_1___x_ABI_CMicrosoft__CUI__CXaml__CControls__CMenuFlyoutItemBaseWrapper.unwrapFrom(abi: value)
        }

        internal fn get_MenuFlyoutPresenterStyleImpl() throws -> WinUI.Style? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyout.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_MenuFlyoutPresenterStyle(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn put_MenuFlyoutPresenterStyleImpl(_ value: WinUI.Style?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyout.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_MenuFlyoutPresenterStyle(pThis, RawPointer(value)))
            }
        }

        internal fn ShowAtImpl(_ targetElement: WinUI.UIElement?, _ point: WindowsFoundation.Point) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyout.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ShowAt(pThis, RawPointer(targetElement), .from(swift: point)))
            }
        }

    }

    public class IMenuFlyoutFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutFactory }

        internal fn CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<WinUI.MenuFlyout.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> IMenuFlyout {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                immutable _baseInterface = baseInterface?.toIInspectableABI { $0 }
                immutable (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutFactory.this) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return IMenuFlyout(value!)
        }

    }

    public class IMenuFlyoutItem: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutItem }

        internal fn get_TextImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutItem.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Text(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_TextImpl(_ value: String) throws {
            immutable _value = try! HString(value)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutItem.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Text(pThis, _value.get()))
            }
        }

        internal fn get_CommandImpl() throws -> WinUI.AnyICommand? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutItem.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Command(pThis, &valueAbi))
                }
            }
            return __ABI_Microsoft_UI_Xaml_Input.ICommandWrapper.unwrapFrom(abi: value)
        }

        internal fn put_CommandImpl(_ value: WinUI.AnyICommand?) throws {
            immutable valueWrapper = __ABI_Microsoft_UI_Xaml_Input.ICommandWrapper(value)
            immutable _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutItem.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Command(pThis, _value))
            }
        }

        internal fn get_CommandParameterImpl() throws -> Any? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutItem.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_CommandParameter(pThis, &valueAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: value)
        }

        internal fn put_CommandParameterImpl(_ value: Any?) throws {
            immutable valueWrapper = __ABI_.AnyWrapper(value)
            immutable _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutItem.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_CommandParameter(pThis, _value))
            }
        }

        internal fn get_IconImpl() throws -> WinUI.IconElement? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutItem.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Icon(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn put_IconImpl(_ value: WinUI.IconElement?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutItem.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Icon(pThis, RawPointer(value)))
            }
        }

        internal fn get_KeyboardAcceleratorTextOverrideImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutItem.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_KeyboardAcceleratorTextOverride(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_KeyboardAcceleratorTextOverrideImpl(_ value: String) throws {
            immutable _value = try! HString(value)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutItem.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_KeyboardAcceleratorTextOverride(pThis, _value.get()))
            }
        }

        internal fn get_TemplateSettingsImpl() throws -> WinUI.MenuFlyoutItemTemplateSettings? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutItem.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_TemplateSettings(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn add_ClickImpl(_ handler: WinUI.RoutedEventHandler?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = __ABI_Microsoft_UI_Xaml.RoutedEventHandlerWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutItem.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_Click(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_ClickImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutItem.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Click(pThis, token))
            }
        }

    }

    public class IMenuFlyoutItemBase: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutItemBase }

    }

    public class IMenuFlyoutItemBaseFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutItemBaseFactory }

    }

    public class IMenuFlyoutItemFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutItemFactory }

        internal fn CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<WinUI.MenuFlyoutItem.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> IMenuFlyoutItem {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                immutable _baseInterface = baseInterface?.toIInspectableABI { $0 }
                immutable (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutItemFactory.this) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return IMenuFlyoutItem(value!)
        }

    }

    public class IMenuFlyoutItemStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutItemStatics }

        internal fn get_TextPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutItemStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_TextProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_CommandPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutItemStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_CommandProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_CommandParameterPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutItemStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_CommandParameterProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_IconPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutItemStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IconProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_KeyboardAcceleratorTextOverridePropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutItemStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_KeyboardAcceleratorTextOverrideProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IMenuFlyoutSeparator: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutSeparator }

    }

    public class IMenuFlyoutSeparatorFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutSeparatorFactory }

        internal fn CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<WinUI.MenuFlyoutSeparator.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> IMenuFlyoutSeparator {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                immutable _baseInterface = baseInterface?.toIInspectableABI { $0 }
                immutable (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutSeparatorFactory.this) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return IMenuFlyoutSeparator(value!)
        }

    }

    public class IMenuFlyoutStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutStatics }

        internal fn get_MenuFlyoutPresenterStylePropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_MenuFlyoutPresenterStyleProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IMenuFlyoutSubItem: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutSubItem }

        internal fn get_ItemsImpl() throws -> WindowsFoundation.AnyIVector<WinUI.MenuFlyoutItemBase?>? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutSubItem.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Items(pThis, &valueAbi))
                }
            }
            return WinUI.__x_ABI_C__FIVector_1___x_ABI_CMicrosoft__CUI__CXaml__CControls__CMenuFlyoutItemBaseWrapper.unwrapFrom(abi: value)
        }

        internal fn get_TextImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutSubItem.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Text(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_TextImpl(_ value: String) throws {
            immutable _value = try! HString(value)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutSubItem.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Text(pThis, _value.get()))
            }
        }

        internal fn get_IconImpl() throws -> WinUI.IconElement? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutSubItem.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Icon(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn put_IconImpl(_ value: WinUI.IconElement?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutSubItem.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Icon(pThis, RawPointer(value)))
            }
        }

    }

    public class IMenuFlyoutSubItemStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutSubItemStatics }

        internal fn get_TextPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutSubItemStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_TextProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_IconPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutSubItemStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IconProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class INavigationView: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationView }

        internal fn get_IsPaneOpenImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsPaneOpen(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_IsPaneOpenImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsPaneOpen(pThis, .init(from: value)))
            }
        }

        internal fn get_CompactModeThresholdWidthImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CompactModeThresholdWidth(pThis, &value))
            }
            return value
        }

        internal fn put_CompactModeThresholdWidthImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_CompactModeThresholdWidth(pThis, value))
            }
        }

        internal fn get_ExpandedModeThresholdWidthImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ExpandedModeThresholdWidth(pThis, &value))
            }
            return value
        }

        internal fn put_ExpandedModeThresholdWidthImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ExpandedModeThresholdWidth(pThis, value))
            }
        }

        internal fn get_FooterMenuItemsImpl() throws -> WindowsFoundation.AnyIVector<Any?>? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationView.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_FooterMenuItems(pThis, &valueAbi))
                }
            }
            return WinUI.__x_ABI_C__FIVector_1_IInspectableWrapper.unwrapFrom(abi: value)
        }

        internal fn get_FooterMenuItemsSourceImpl() throws -> Any? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationView.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_FooterMenuItemsSource(pThis, &valueAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: value)
        }

        internal fn put_FooterMenuItemsSourceImpl(_ value: Any?) throws {
            immutable valueWrapper = __ABI_.AnyWrapper(value)
            immutable _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_FooterMenuItemsSource(pThis, _value))
            }
        }

        internal fn get_PaneFooterImpl() throws -> WinUI.UIElement? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationView.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_PaneFooter(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn put_PaneFooterImpl(_ value: WinUI.UIElement?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_PaneFooter(pThis, RawPointer(value)))
            }
        }

        internal fn get_HeaderImpl() throws -> Any? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationView.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Header(pThis, &valueAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: value)
        }

        internal fn put_HeaderImpl(_ value: Any?) throws {
            immutable valueWrapper = __ABI_.AnyWrapper(value)
            immutable _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Header(pThis, _value))
            }
        }

        internal fn get_HeaderTemplateImpl() throws -> WinUI.DataTemplate? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationView.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_HeaderTemplate(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn put_HeaderTemplateImpl(_ value: WinUI.DataTemplate?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_HeaderTemplate(pThis, RawPointer(value)))
            }
        }

        internal fn get_DisplayModeImpl() throws -> WinUI.NavigationViewDisplayMode {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CNavigationViewDisplayMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DisplayMode(pThis, &value))
            }
            return value
        }

        internal fn get_IsSettingsVisibleImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsSettingsVisible(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_IsSettingsVisibleImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsSettingsVisible(pThis, .init(from: value)))
            }
        }

        internal fn get_IsPaneToggleButtonVisibleImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsPaneToggleButtonVisible(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_IsPaneToggleButtonVisibleImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsPaneToggleButtonVisible(pThis, .init(from: value)))
            }
        }

        internal fn get_AlwaysShowHeaderImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_AlwaysShowHeader(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_AlwaysShowHeaderImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_AlwaysShowHeader(pThis, .init(from: value)))
            }
        }

        internal fn get_CompactPaneLengthImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CompactPaneLength(pThis, &value))
            }
            return value
        }

        internal fn put_CompactPaneLengthImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_CompactPaneLength(pThis, value))
            }
        }

        internal fn get_OpenPaneLengthImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_OpenPaneLength(pThis, &value))
            }
            return value
        }

        internal fn put_OpenPaneLengthImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_OpenPaneLength(pThis, value))
            }
        }

        internal fn get_PaneToggleButtonStyleImpl() throws -> WinUI.Style? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationView.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_PaneToggleButtonStyle(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn put_PaneToggleButtonStyleImpl(_ value: WinUI.Style?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_PaneToggleButtonStyle(pThis, RawPointer(value)))
            }
        }

        internal fn get_SelectedItemImpl() throws -> Any? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationView.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SelectedItem(pThis, &valueAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: value)
        }

        internal fn put_SelectedItemImpl(_ value: Any?) throws {
            immutable valueWrapper = __ABI_.AnyWrapper(value)
            immutable _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_SelectedItem(pThis, _value))
            }
        }

        internal fn get_MenuItemsImpl() throws -> WindowsFoundation.AnyIVector<Any?>? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationView.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_MenuItems(pThis, &valueAbi))
                }
            }
            return WinUI.__x_ABI_C__FIVector_1_IInspectableWrapper.unwrapFrom(abi: value)
        }

        internal fn get_MenuItemsSourceImpl() throws -> Any? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationView.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_MenuItemsSource(pThis, &valueAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: value)
        }

        internal fn put_MenuItemsSourceImpl(_ value: Any?) throws {
            immutable valueWrapper = __ABI_.AnyWrapper(value)
            immutable _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_MenuItemsSource(pThis, _value))
            }
        }

        internal fn get_SettingsItemImpl() throws -> Any? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationView.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SettingsItem(pThis, &valueAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: value)
        }

        internal fn get_AutoSuggestBoxImpl() throws -> WinUI.AutoSuggestBox? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationView.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_AutoSuggestBox(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn put_AutoSuggestBoxImpl(_ value: WinUI.AutoSuggestBox?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_AutoSuggestBox(pThis, RawPointer(value)))
            }
        }

        internal fn get_MenuItemTemplateImpl() throws -> WinUI.DataTemplate? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationView.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_MenuItemTemplate(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn put_MenuItemTemplateImpl(_ value: WinUI.DataTemplate?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_MenuItemTemplate(pThis, RawPointer(value)))
            }
        }

        internal fn get_MenuItemTemplateSelectorImpl() throws -> WinUI.DataTemplateSelector? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationView.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_MenuItemTemplateSelector(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn put_MenuItemTemplateSelectorImpl(_ value: WinUI.DataTemplateSelector?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_MenuItemTemplateSelector(pThis, RawPointer(value)))
            }
        }

        internal fn get_MenuItemContainerStyleImpl() throws -> WinUI.Style? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationView.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_MenuItemContainerStyle(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn put_MenuItemContainerStyleImpl(_ value: WinUI.Style?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_MenuItemContainerStyle(pThis, RawPointer(value)))
            }
        }

        internal fn get_MenuItemContainerStyleSelectorImpl() throws -> WinUI.StyleSelector? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationView.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_MenuItemContainerStyleSelector(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn put_MenuItemContainerStyleSelectorImpl(_ value: WinUI.StyleSelector?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_MenuItemContainerStyleSelector(pThis, RawPointer(value)))
            }
        }

        internal fn MenuItemFromContainerImpl(_ container: WinUI.DependencyObject?) throws -> Any? {
            immutable (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationView.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.MenuItemFromContainer(pThis, RawPointer(container), &resultAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: result)
        }

        internal fn ContainerFromMenuItemImpl(_ item: Any?) throws -> WinUI.DependencyObject? {
            immutable (result) = try ComPtrs.initialize { resultAbi in
                immutable itemWrapper = __ABI_.AnyWrapper(item)
                immutable _item = try! itemWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationView.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.ContainerFromMenuItem(pThis, _item, &resultAbi))
                }
            }
            return .from(abi: result)
        }

        internal fn add_SelectionChangedImpl(_ handler: TypedEventHandler<WinUI.NavigationView?, WinUI.NavigationViewSelectionChangedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CNavigationView___x_ABI_CMicrosoft__CUI__CXaml__CControls__CNavigationViewSelectionChangedEventArgsWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_SelectionChanged(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_SelectionChangedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_SelectionChanged(pThis, token))
            }
        }

        internal fn add_ItemInvokedImpl(_ handler: TypedEventHandler<WinUI.NavigationView?, WinUI.NavigationViewItemInvokedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CNavigationView___x_ABI_CMicrosoft__CUI__CXaml__CControls__CNavigationViewItemInvokedEventArgsWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_ItemInvoked(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_ItemInvokedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_ItemInvoked(pThis, token))
            }
        }

        internal fn add_DisplayModeChangedImpl(_ handler: TypedEventHandler<WinUI.NavigationView?, WinUI.NavigationViewDisplayModeChangedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CNavigationView___x_ABI_CMicrosoft__CUI__CXaml__CControls__CNavigationViewDisplayModeChangedEventArgsWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_DisplayModeChanged(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_DisplayModeChangedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_DisplayModeChanged(pThis, token))
            }
        }

        internal fn get_IsTitleBarAutoPaddingEnabledImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsTitleBarAutoPaddingEnabled(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_IsTitleBarAutoPaddingEnabledImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsTitleBarAutoPaddingEnabled(pThis, .init(from: value)))
            }
        }

    }

    public class INavigationView2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationView2 }

        internal fn get_IsBackButtonVisibleImpl() throws -> WinUI.NavigationViewBackButtonVisible {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CNavigationViewBackButtonVisible = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationView2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsBackButtonVisible(pThis, &value))
            }
            return value
        }

        internal fn put_IsBackButtonVisibleImpl(_ value: WinUI.NavigationViewBackButtonVisible) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationView2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsBackButtonVisible(pThis, value))
            }
        }

        internal fn get_IsBackEnabledImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationView2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsBackEnabled(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_IsBackEnabledImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationView2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsBackEnabled(pThis, .init(from: value)))
            }
        }

        internal fn get_PaneTitleImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationView2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PaneTitle(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_PaneTitleImpl(_ value: String) throws {
            immutable _value = try! HString(value)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationView2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_PaneTitle(pThis, _value.get()))
            }
        }

        internal fn add_BackRequestedImpl(_ handler: TypedEventHandler<WinUI.NavigationView?, WinUI.NavigationViewBackRequestedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CNavigationView___x_ABI_CMicrosoft__CUI__CXaml__CControls__CNavigationViewBackRequestedEventArgsWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationView2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_BackRequested(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_BackRequestedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationView2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_BackRequested(pThis, token))
            }
        }

        internal fn add_PaneClosedImpl(_ handler: TypedEventHandler<WinUI.NavigationView?, Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CNavigationView_IInspectableWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationView2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_PaneClosed(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_PaneClosedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationView2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_PaneClosed(pThis, token))
            }
        }

        internal fn add_PaneClosingImpl(_ handler: TypedEventHandler<WinUI.NavigationView?, WinUI.NavigationViewPaneClosingEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CNavigationView___x_ABI_CMicrosoft__CUI__CXaml__CControls__CNavigationViewPaneClosingEventArgsWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationView2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_PaneClosing(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_PaneClosingImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationView2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_PaneClosing(pThis, token))
            }
        }

        internal fn add_PaneOpenedImpl(_ handler: TypedEventHandler<WinUI.NavigationView?, Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CNavigationView_IInspectableWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationView2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_PaneOpened(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_PaneOpenedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationView2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_PaneOpened(pThis, token))
            }
        }

        internal fn add_PaneOpeningImpl(_ handler: TypedEventHandler<WinUI.NavigationView?, Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CNavigationView_IInspectableWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationView2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_PaneOpening(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_PaneOpeningImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationView2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_PaneOpening(pThis, token))
            }
        }

        internal fn get_PaneDisplayModeImpl() throws -> WinUI.NavigationViewPaneDisplayMode {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CNavigationViewPaneDisplayMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationView2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PaneDisplayMode(pThis, &value))
            }
            return value
        }

        internal fn put_PaneDisplayModeImpl(_ value: WinUI.NavigationViewPaneDisplayMode) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationView2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_PaneDisplayMode(pThis, value))
            }
        }

        internal fn get_PaneHeaderImpl() throws -> WinUI.UIElement? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationView2.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_PaneHeader(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn put_PaneHeaderImpl(_ value: WinUI.UIElement?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationView2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_PaneHeader(pThis, RawPointer(value)))
            }
        }

        internal fn get_PaneCustomContentImpl() throws -> WinUI.UIElement? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationView2.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_PaneCustomContent(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn put_PaneCustomContentImpl(_ value: WinUI.UIElement?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationView2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_PaneCustomContent(pThis, RawPointer(value)))
            }
        }

        internal fn get_ContentOverlayImpl() throws -> WinUI.UIElement? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationView2.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ContentOverlay(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn put_ContentOverlayImpl(_ value: WinUI.UIElement?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationView2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ContentOverlay(pThis, RawPointer(value)))
            }
        }

        internal fn get_IsPaneVisibleImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationView2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsPaneVisible(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_IsPaneVisibleImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationView2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsPaneVisible(pThis, .init(from: value)))
            }
        }

        internal fn get_SelectionFollowsFocusImpl() throws -> WinUI.NavigationViewSelectionFollowsFocus {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CNavigationViewSelectionFollowsFocus = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationView2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_SelectionFollowsFocus(pThis, &value))
            }
            return value
        }

        internal fn put_SelectionFollowsFocusImpl(_ value: WinUI.NavigationViewSelectionFollowsFocus) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationView2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_SelectionFollowsFocus(pThis, value))
            }
        }

        internal fn get_TemplateSettingsImpl() throws -> WinUI.NavigationViewTemplateSettings? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationView2.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_TemplateSettings(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_ShoulderNavigationEnabledImpl() throws -> WinUI.NavigationViewShoulderNavigationEnabled {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CNavigationViewShoulderNavigationEnabled = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationView2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ShoulderNavigationEnabled(pThis, &value))
            }
            return value
        }

        internal fn put_ShoulderNavigationEnabledImpl(_ value: WinUI.NavigationViewShoulderNavigationEnabled) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationView2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ShoulderNavigationEnabled(pThis, value))
            }
        }

        internal fn get_OverflowLabelModeImpl() throws -> WinUI.NavigationViewOverflowLabelMode {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CNavigationViewOverflowLabelMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationView2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_OverflowLabelMode(pThis, &value))
            }
            return value
        }

        internal fn put_OverflowLabelModeImpl(_ value: WinUI.NavigationViewOverflowLabelMode) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationView2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_OverflowLabelMode(pThis, value))
            }
        }

        internal fn add_ExpandingImpl(_ handler: TypedEventHandler<WinUI.NavigationView?, WinUI.NavigationViewItemExpandingEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CNavigationView___x_ABI_CMicrosoft__CUI__CXaml__CControls__CNavigationViewItemExpandingEventArgsWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationView2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_Expanding(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_ExpandingImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationView2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Expanding(pThis, token))
            }
        }

        internal fn add_CollapsedImpl(_ handler: TypedEventHandler<WinUI.NavigationView?, WinUI.NavigationViewItemCollapsedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CNavigationView___x_ABI_CMicrosoft__CUI__CXaml__CControls__CNavigationViewItemCollapsedEventArgsWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationView2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_Collapsed(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_CollapsedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationView2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Collapsed(pThis, token))
            }
        }

        internal fn ExpandImpl(_ item: WinUI.NavigationViewItem?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationView2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Expand(pThis, RawPointer(item)))
            }
        }

        internal fn CollapseImpl(_ item: WinUI.NavigationViewItem?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationView2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Collapse(pThis, RawPointer(item)))
            }
        }

    }

    public class INavigationViewBackRequestedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewBackRequestedEventArgs }

    }

    public class INavigationViewDisplayModeChangedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewDisplayModeChangedEventArgs }

        internal fn get_DisplayModeImpl() throws -> WinUI.NavigationViewDisplayMode {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CNavigationViewDisplayMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewDisplayModeChangedEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DisplayMode(pThis, &value))
            }
            return value
        }

    }

    public class INavigationViewFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewFactory }

        internal fn CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<WinUI.NavigationView.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> INavigationView {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                immutable _baseInterface = baseInterface?.toIInspectableABI { $0 }
                immutable (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewFactory.this) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return INavigationView(value!)
        }

    }

    public class INavigationViewItem: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewItem }

        internal fn get_IconImpl() throws -> WinUI.IconElement? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewItem.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Icon(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn put_IconImpl(_ value: WinUI.IconElement?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewItem.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Icon(pThis, RawPointer(value)))
            }
        }

        internal fn get_CompactPaneLengthImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewItem.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CompactPaneLength(pThis, &value))
            }
            return value
        }

    }

    public class INavigationViewItem2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewItem2 }

        internal fn get_SelectsOnInvokedImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewItem2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_SelectsOnInvoked(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_SelectsOnInvokedImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewItem2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_SelectsOnInvoked(pThis, .init(from: value)))
            }
        }

        internal fn get_IsExpandedImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewItem2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsExpanded(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_IsExpandedImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewItem2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsExpanded(pThis, .init(from: value)))
            }
        }

        internal fn get_HasUnrealizedChildrenImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewItem2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_HasUnrealizedChildren(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_HasUnrealizedChildrenImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewItem2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_HasUnrealizedChildren(pThis, .init(from: value)))
            }
        }

        internal fn get_IsChildSelectedImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewItem2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsChildSelected(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_IsChildSelectedImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewItem2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsChildSelected(pThis, .init(from: value)))
            }
        }

        internal fn get_MenuItemsImpl() throws -> WindowsFoundation.AnyIVector<Any?>? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewItem2.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_MenuItems(pThis, &valueAbi))
                }
            }
            return WinUI.__x_ABI_C__FIVector_1_IInspectableWrapper.unwrapFrom(abi: value)
        }

        internal fn get_MenuItemsSourceImpl() throws -> Any? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewItem2.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_MenuItemsSource(pThis, &valueAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: value)
        }

        internal fn put_MenuItemsSourceImpl(_ value: Any?) throws {
            immutable valueWrapper = __ABI_.AnyWrapper(value)
            immutable _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewItem2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_MenuItemsSource(pThis, _value))
            }
        }

    }

    public class INavigationViewItem3: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewItem3 }

        internal fn get_InfoBadgeImpl() throws -> WinUI.InfoBadge? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewItem3.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_InfoBadge(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn put_InfoBadgeImpl(_ value: WinUI.InfoBadge?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewItem3.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_InfoBadge(pThis, RawPointer(value)))
            }
        }

    }

    public class INavigationViewItemBase: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewItemBase }

    }

    public class INavigationViewItemBase2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewItemBase2 }

        internal fn get_IsSelectedImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewItemBase2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsSelected(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_IsSelectedImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewItemBase2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsSelected(pThis, .init(from: value)))
            }
        }

    }

    public class INavigationViewItemBaseFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewItemBaseFactory }

    }

    public class INavigationViewItemBaseStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewItemBaseStatics }

        internal fn get_IsSelectedPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewItemBaseStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsSelectedProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class INavigationViewItemCollapsedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewItemCollapsedEventArgs }

        internal fn get_CollapsedItemContainerImpl() throws -> WinUI.NavigationViewItemBase? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewItemCollapsedEventArgs.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_CollapsedItemContainer(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_CollapsedItemImpl() throws -> Any? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewItemCollapsedEventArgs.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_CollapsedItem(pThis, &valueAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: value)
        }

    }

    public class INavigationViewItemExpandingEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewItemExpandingEventArgs }

        internal fn get_ExpandingItemContainerImpl() throws -> WinUI.NavigationViewItemBase? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewItemExpandingEventArgs.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ExpandingItemContainer(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_ExpandingItemImpl() throws -> Any? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewItemExpandingEventArgs.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ExpandingItem(pThis, &valueAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: value)
        }

    }

    public class INavigationViewItemFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewItemFactory }

        internal fn CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<WinUI.NavigationViewItem.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> INavigationViewItem {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                immutable _baseInterface = baseInterface?.toIInspectableABI { $0 }
                immutable (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewItemFactory.this) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return INavigationViewItem(value!)
        }

    }

    public class INavigationViewItemInvokedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewItemInvokedEventArgs }

        internal fn get_InvokedItemImpl() throws -> Any? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewItemInvokedEventArgs.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_InvokedItem(pThis, &valueAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: value)
        }

        internal fn get_IsSettingsInvokedImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewItemInvokedEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsSettingsInvoked(pThis, &value))
            }
            return .init(from: value)
        }

    }

    public class INavigationViewItemInvokedEventArgs2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewItemInvokedEventArgs2 }

        internal fn get_InvokedItemContainerImpl() throws -> WinUI.NavigationViewItemBase? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewItemInvokedEventArgs2.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_InvokedItemContainer(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_RecommendedNavigationTransitionInfoImpl() throws -> WinUI.NavigationTransitionInfo? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewItemInvokedEventArgs2.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_RecommendedNavigationTransitionInfo(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class INavigationViewItemStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewItemStatics }

        internal fn get_IconPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewItemStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IconProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_CompactPaneLengthPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewItemStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_CompactPaneLengthProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class INavigationViewItemStatics2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewItemStatics2 }

        internal fn get_SelectsOnInvokedPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewItemStatics2.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SelectsOnInvokedProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_IsExpandedPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewItemStatics2.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsExpandedProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_HasUnrealizedChildrenPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewItemStatics2.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_HasUnrealizedChildrenProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_IsChildSelectedPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewItemStatics2.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsChildSelectedProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_MenuItemsPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewItemStatics2.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_MenuItemsProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_MenuItemsSourcePropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewItemStatics2.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_MenuItemsSourceProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class INavigationViewItemStatics3: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewItemStatics3 }

        internal fn get_InfoBadgePropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewItemStatics3.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_InfoBadgeProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class INavigationViewPaneClosingEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewPaneClosingEventArgs }

        internal fn get_CancelImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewPaneClosingEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Cancel(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_CancelImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewPaneClosingEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Cancel(pThis, .init(from: value)))
            }
        }

    }

    public class INavigationViewSelectionChangedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewSelectionChangedEventArgs }

        internal fn get_SelectedItemImpl() throws -> Any? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewSelectionChangedEventArgs.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SelectedItem(pThis, &valueAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: value)
        }

        internal fn get_IsSettingsSelectedImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewSelectionChangedEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsSettingsSelected(pThis, &value))
            }
            return .init(from: value)
        }

    }

    public class INavigationViewSelectionChangedEventArgs2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewSelectionChangedEventArgs2 }

        internal fn get_SelectedItemContainerImpl() throws -> WinUI.NavigationViewItemBase? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewSelectionChangedEventArgs2.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SelectedItemContainer(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_RecommendedNavigationTransitionInfoImpl() throws -> WinUI.NavigationTransitionInfo? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewSelectionChangedEventArgs2.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_RecommendedNavigationTransitionInfo(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class INavigationViewStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewStatics }

        internal fn get_IsPaneOpenPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsPaneOpenProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_CompactModeThresholdWidthPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_CompactModeThresholdWidthProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_ExpandedModeThresholdWidthPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ExpandedModeThresholdWidthProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_FooterMenuItemsPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_FooterMenuItemsProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_FooterMenuItemsSourcePropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_FooterMenuItemsSourceProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_PaneFooterPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_PaneFooterProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_HeaderPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_HeaderProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_HeaderTemplatePropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_HeaderTemplateProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_DisplayModePropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_DisplayModeProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_IsSettingsVisiblePropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsSettingsVisibleProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_IsPaneToggleButtonVisiblePropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsPaneToggleButtonVisibleProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_AlwaysShowHeaderPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_AlwaysShowHeaderProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_CompactPaneLengthPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_CompactPaneLengthProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_OpenPaneLengthPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_OpenPaneLengthProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_PaneToggleButtonStylePropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_PaneToggleButtonStyleProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_MenuItemsPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_MenuItemsProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_MenuItemsSourcePropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_MenuItemsSourceProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_SelectedItemPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SelectedItemProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_SettingsItemPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SettingsItemProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_AutoSuggestBoxPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_AutoSuggestBoxProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_MenuItemTemplatePropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_MenuItemTemplateProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_MenuItemTemplateSelectorPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_MenuItemTemplateSelectorProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_MenuItemContainerStylePropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_MenuItemContainerStyleProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_MenuItemContainerStyleSelectorPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_MenuItemContainerStyleSelectorProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_IsTitleBarAutoPaddingEnabledPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsTitleBarAutoPaddingEnabledProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class INavigationViewStatics2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewStatics2 }

        internal fn get_IsBackButtonVisiblePropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewStatics2.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsBackButtonVisibleProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_IsBackEnabledPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewStatics2.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsBackEnabledProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_PaneTitlePropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewStatics2.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_PaneTitleProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_PaneDisplayModePropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewStatics2.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_PaneDisplayModeProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_PaneHeaderPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewStatics2.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_PaneHeaderProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_PaneCustomContentPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewStatics2.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_PaneCustomContentProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_ContentOverlayPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewStatics2.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ContentOverlayProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_IsPaneVisiblePropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewStatics2.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsPaneVisibleProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_SelectionFollowsFocusPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewStatics2.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SelectionFollowsFocusProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_TemplateSettingsPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewStatics2.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_TemplateSettingsProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_ShoulderNavigationEnabledPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewStatics2.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ShoulderNavigationEnabledProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_OverflowLabelModePropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewStatics2.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_OverflowLabelModeProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class INavigationViewTemplateSettings: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewTemplateSettings }

        internal fn get_TopPaddingImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewTemplateSettings.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_TopPadding(pThis, &value))
            }
            return value
        }

        internal fn get_OverflowButtonVisibilityImpl() throws -> WinUI.Visibility {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CVisibility = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewTemplateSettings.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_OverflowButtonVisibility(pThis, &value))
            }
            return value
        }

        internal fn get_PaneToggleButtonVisibilityImpl() throws -> WinUI.Visibility {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CVisibility = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewTemplateSettings.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PaneToggleButtonVisibility(pThis, &value))
            }
            return value
        }

        internal fn get_BackButtonVisibilityImpl() throws -> WinUI.Visibility {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CVisibility = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewTemplateSettings.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_BackButtonVisibility(pThis, &value))
            }
            return value
        }

        internal fn get_TopPaneVisibilityImpl() throws -> WinUI.Visibility {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CVisibility = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewTemplateSettings.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_TopPaneVisibility(pThis, &value))
            }
            return value
        }

        internal fn get_LeftPaneVisibilityImpl() throws -> WinUI.Visibility {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CVisibility = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewTemplateSettings.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_LeftPaneVisibility(pThis, &value))
            }
            return value
        }

        internal fn get_SingleSelectionFollowsFocusImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewTemplateSettings.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_SingleSelectionFollowsFocus(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn get_PaneToggleButtonWidthImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewTemplateSettings.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PaneToggleButtonWidth(pThis, &value))
            }
            return value
        }

        internal fn get_SmallerPaneToggleButtonWidthImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewTemplateSettings.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_SmallerPaneToggleButtonWidth(pThis, &value))
            }
            return value
        }

    }

    public class INavigationViewTemplateSettings2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewTemplateSettings2 }

        internal fn get_OpenPaneLengthImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewTemplateSettings2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_OpenPaneLength(pThis, &value))
            }
            return value
        }

    }

    public class INavigationViewTemplateSettingsFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewTemplateSettingsFactory }

        internal fn CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<WinUI.NavigationViewTemplateSettings.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> INavigationViewTemplateSettings {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                immutable _baseInterface = baseInterface?.toIInspectableABI { $0 }
                immutable (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewTemplateSettingsFactory.this) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return INavigationViewTemplateSettings(value!)
        }

    }

    public class INavigationViewTemplateSettingsStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewTemplateSettingsStatics }

        internal fn get_TopPaddingPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewTemplateSettingsStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_TopPaddingProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_OverflowButtonVisibilityPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewTemplateSettingsStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_OverflowButtonVisibilityProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_PaneToggleButtonVisibilityPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewTemplateSettingsStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_PaneToggleButtonVisibilityProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_BackButtonVisibilityPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewTemplateSettingsStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_BackButtonVisibilityProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_TopPaneVisibilityPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewTemplateSettingsStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_TopPaneVisibilityProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_LeftPaneVisibilityPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewTemplateSettingsStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_LeftPaneVisibilityProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_SingleSelectionFollowsFocusPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewTemplateSettingsStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SingleSelectionFollowsFocusProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_PaneToggleButtonWidthPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewTemplateSettingsStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_PaneToggleButtonWidthProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_SmallerPaneToggleButtonWidthPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewTemplateSettingsStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SmallerPaneToggleButtonWidthProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class INavigationViewTemplateSettingsStatics2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewTemplateSettingsStatics2 }

        internal fn get_OpenPaneLengthPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewTemplateSettingsStatics2.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_OpenPaneLengthProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IPanel: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPanel }

        internal fn get_ChildrenImpl() throws -> WinUI.UIElementCollection? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPanel.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Children(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_BackgroundImpl() throws -> WinUI.Brush? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPanel.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Background(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn put_BackgroundImpl(_ value: WinUI.Brush?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPanel.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Background(pThis, RawPointer(value)))
            }
        }

        internal fn get_IsItemsHostImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPanel.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsItemsHost(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn get_ChildrenTransitionsImpl() throws -> WinUI.TransitionCollection? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPanel.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ChildrenTransitions(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn put_ChildrenTransitionsImpl(_ value: WinUI.TransitionCollection?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPanel.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ChildrenTransitions(pThis, RawPointer(value)))
            }
        }

        internal fn get_BackgroundTransitionImpl() throws -> WinUI.BrushTransition? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPanel.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_BackgroundTransition(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn put_BackgroundTransitionImpl(_ value: WinUI.BrushTransition?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPanel.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_BackgroundTransition(pThis, RawPointer(value)))
            }
        }

    }

    public class IPanelFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPanelFactory }

        internal fn CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<WinUI.Panel.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> IPanel {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                immutable _baseInterface = baseInterface?.toIInspectableABI { $0 }
                immutable (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPanelFactory.this) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return IPanel(value!)
        }

    }

    public class IPanelStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPanelStatics }

        internal fn get_BackgroundPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPanelStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_BackgroundProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_IsItemsHostPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPanelStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsItemsHostProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_ChildrenTransitionsPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPanelStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ChildrenTransitionsProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IPasswordBox: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBox }

        internal fn get_PasswordImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Password(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_PasswordImpl(_ value: String) throws {
            immutable _value = try! HString(value)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Password(pThis, _value.get()))
            }
        }

        internal fn get_PasswordCharImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PasswordChar(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_PasswordCharImpl(_ value: String) throws {
            immutable _value = try! HString(value)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_PasswordChar(pThis, _value.get()))
            }
        }

        internal fn get_IsPasswordRevealButtonEnabledImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsPasswordRevealButtonEnabled(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_IsPasswordRevealButtonEnabledImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsPasswordRevealButtonEnabled(pThis, .init(from: value)))
            }
        }

        internal fn get_MaxLengthImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_MaxLength(pThis, &value))
            }
            return value
        }

        internal fn put_MaxLengthImpl(_ value: Int32) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_MaxLength(pThis, value))
            }
        }

        internal fn get_HeaderImpl() throws -> Any? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBox.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Header(pThis, &valueAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: value)
        }

        internal fn put_HeaderImpl(_ value: Any?) throws {
            immutable valueWrapper = __ABI_.AnyWrapper(value)
            immutable _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Header(pThis, _value))
            }
        }

        internal fn get_HeaderTemplateImpl() throws -> WinUI.DataTemplate? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBox.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_HeaderTemplate(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn put_HeaderTemplateImpl(_ value: WinUI.DataTemplate?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_HeaderTemplate(pThis, RawPointer(value)))
            }
        }

        internal fn get_PlaceholderTextImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PlaceholderText(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_PlaceholderTextImpl(_ value: String) throws {
            immutable _value = try! HString(value)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_PlaceholderText(pThis, _value.get()))
            }
        }

        internal fn get_SelectionHighlightColorImpl() throws -> WinUI.SolidColorBrush? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBox.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SelectionHighlightColor(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn put_SelectionHighlightColorImpl(_ value: WinUI.SolidColorBrush?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_SelectionHighlightColor(pThis, RawPointer(value)))
            }
        }

        internal fn get_PreventKeyboardDisplayOnProgrammaticFocusImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PreventKeyboardDisplayOnProgrammaticFocus(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_PreventKeyboardDisplayOnProgrammaticFocusImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_PreventKeyboardDisplayOnProgrammaticFocus(pThis, .init(from: value)))
            }
        }

        internal fn get_PasswordRevealModeImpl() throws -> WinUI.PasswordRevealMode {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPasswordRevealMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PasswordRevealMode(pThis, &value))
            }
            return value
        }

        internal fn put_PasswordRevealModeImpl(_ value: WinUI.PasswordRevealMode) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_PasswordRevealMode(pThis, value))
            }
        }

        internal fn get_TextReadingOrderImpl() throws -> WinUI.TextReadingOrder {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CTextReadingOrder = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_TextReadingOrder(pThis, &value))
            }
            return value
        }

        internal fn put_TextReadingOrderImpl(_ value: WinUI.TextReadingOrder) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_TextReadingOrder(pThis, value))
            }
        }

        internal fn get_InputScopeImpl() throws -> WinUI.InputScope? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBox.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_InputScope(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn put_InputScopeImpl(_ value: WinUI.InputScope?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_InputScope(pThis, RawPointer(value)))
            }
        }

        internal fn get_CanPasteClipboardContentImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CanPasteClipboardContent(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn get_SelectionFlyoutImpl() throws -> WinUI.FlyoutBase? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBox.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SelectionFlyout(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn put_SelectionFlyoutImpl(_ value: WinUI.FlyoutBase?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_SelectionFlyout(pThis, RawPointer(value)))
            }
        }

        internal fn get_DescriptionImpl() throws -> Any? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBox.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Description(pThis, &valueAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: value)
        }

        internal fn put_DescriptionImpl(_ value: Any?) throws {
            immutable valueWrapper = __ABI_.AnyWrapper(value)
            immutable _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Description(pThis, _value))
            }
        }

        internal fn add_PasswordChangedImpl(_ handler: WinUI.RoutedEventHandler?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = __ABI_Microsoft_UI_Xaml.RoutedEventHandlerWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_PasswordChanged(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_PasswordChangedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_PasswordChanged(pThis, token))
            }
        }

        internal fn add_ContextMenuOpeningImpl(_ handler: WinUI.ContextMenuOpeningEventHandler?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = __ABI_Microsoft_UI_Xaml_Controls.ContextMenuOpeningEventHandlerWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_ContextMenuOpening(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_ContextMenuOpeningImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_ContextMenuOpening(pThis, token))
            }
        }

        internal fn add_PasteImpl(_ handler: WinUI.TextControlPasteEventHandler?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = __ABI_Microsoft_UI_Xaml_Controls.TextControlPasteEventHandlerWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_Paste(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_PasteImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Paste(pThis, token))
            }
        }

        internal fn add_PasswordChangingImpl(_ handler: TypedEventHandler<WinUI.PasswordBox?, WinUI.PasswordBoxPasswordChangingEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CPasswordBox___x_ABI_CMicrosoft__CUI__CXaml__CControls__CPasswordBoxPasswordChangingEventArgsWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_PasswordChanging(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_PasswordChangingImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_PasswordChanging(pThis, token))
            }
        }

        internal fn SelectAllImpl() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SelectAll(pThis))
            }
        }

        internal fn PasteFromClipboardImpl() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.PasteFromClipboard(pThis))
            }
        }

    }

    public class IPasswordBoxPasswordChangingEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBoxPasswordChangingEventArgs }

        internal fn get_IsContentChangingImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBoxPasswordChangingEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsContentChanging(pThis, &value))
            }
            return .init(from: value)
        }

    }

    public class IPasswordBoxStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBoxStatics }

        internal fn get_PasswordPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBoxStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_PasswordProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_PasswordCharPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBoxStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_PasswordCharProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_IsPasswordRevealButtonEnabledPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBoxStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsPasswordRevealButtonEnabledProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_MaxLengthPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBoxStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_MaxLengthProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_HeaderPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBoxStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_HeaderProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_HeaderTemplatePropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBoxStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_HeaderTemplateProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_PlaceholderTextPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBoxStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_PlaceholderTextProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_SelectionHighlightColorPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBoxStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SelectionHighlightColorProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_PreventKeyboardDisplayOnProgrammaticFocusPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBoxStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_PreventKeyboardDisplayOnProgrammaticFocusProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_PasswordRevealModePropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBoxStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_PasswordRevealModeProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_TextReadingOrderPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBoxStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_TextReadingOrderProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_InputScopePropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBoxStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_InputScopeProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_CanPasteClipboardContentPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBoxStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_CanPasteClipboardContentProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_SelectionFlyoutPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBoxStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SelectionFlyoutProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_DescriptionPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBoxStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_DescriptionProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IProgressBar: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressBar }

        internal fn get_IsIndeterminateImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressBar.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsIndeterminate(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_IsIndeterminateImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressBar.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsIndeterminate(pThis, .init(from: value)))
            }
        }

        internal fn get_ShowErrorImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressBar.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ShowError(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_ShowErrorImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressBar.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ShowError(pThis, .init(from: value)))
            }
        }

        internal fn get_ShowPausedImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressBar.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ShowPaused(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_ShowPausedImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressBar.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ShowPaused(pThis, .init(from: value)))
            }
        }

        internal fn get_TemplateSettingsImpl() throws -> WinUI.ProgressBarTemplateSettings? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressBar.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_TemplateSettings(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IProgressBarFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressBarFactory }

        internal fn CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<WinUI.ProgressBar.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> IProgressBar {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                immutable _baseInterface = baseInterface?.toIInspectableABI { $0 }
                immutable (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressBarFactory.this) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return IProgressBar(value!)
        }

    }

    public class IProgressBarStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressBarStatics }

        internal fn get_IsIndeterminatePropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressBarStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsIndeterminateProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_ShowErrorPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressBarStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ShowErrorProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_ShowPausedPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressBarStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ShowPausedProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IProgressBarTemplateSettings: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressBarTemplateSettings }

        internal fn get_ContainerAnimationStartPositionImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressBarTemplateSettings.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ContainerAnimationStartPosition(pThis, &value))
            }
            return value
        }

        internal fn get_ContainerAnimationEndPositionImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressBarTemplateSettings.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ContainerAnimationEndPosition(pThis, &value))
            }
            return value
        }

        internal fn get_Container2AnimationStartPositionImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressBarTemplateSettings.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Container2AnimationStartPosition(pThis, &value))
            }
            return value
        }

        internal fn get_Container2AnimationEndPositionImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressBarTemplateSettings.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Container2AnimationEndPosition(pThis, &value))
            }
            return value
        }

        internal fn get_ContainerAnimationMidPositionImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressBarTemplateSettings.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ContainerAnimationMidPosition(pThis, &value))
            }
            return value
        }

        internal fn get_IndicatorLengthDeltaImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressBarTemplateSettings.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IndicatorLengthDelta(pThis, &value))
            }
            return value
        }

        internal fn get_ClipRectImpl() throws -> WinUI.RectangleGeometry? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressBarTemplateSettings.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ClipRect(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_EllipseAnimationEndPositionImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressBarTemplateSettings.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_EllipseAnimationEndPosition(pThis, &value))
            }
            return value
        }

        internal fn get_EllipseAnimationWellPositionImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressBarTemplateSettings.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_EllipseAnimationWellPosition(pThis, &value))
            }
            return value
        }

        internal fn get_EllipseDiameterImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressBarTemplateSettings.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_EllipseDiameter(pThis, &value))
            }
            return value
        }

        internal fn get_EllipseOffsetImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressBarTemplateSettings.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_EllipseOffset(pThis, &value))
            }
            return value
        }

    }

    public class IProgressRing: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressRing }

        internal fn get_IsActiveImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressRing.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsActive(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_IsActiveImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressRing.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsActive(pThis, .init(from: value)))
            }
        }

        internal fn get_IsIndeterminateImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressRing.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsIndeterminate(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_IsIndeterminateImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressRing.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsIndeterminate(pThis, .init(from: value)))
            }
        }

        internal fn get_TemplateSettingsImpl() throws -> WinUI.ProgressRingTemplateSettings? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressRing.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_TemplateSettings(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_ValueImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressRing.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Value(pThis, &value))
            }
            return value
        }

        internal fn put_ValueImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressRing.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Value(pThis, value))
            }
        }

        internal fn get_MinimumImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressRing.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Minimum(pThis, &value))
            }
            return value
        }

        internal fn put_MinimumImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressRing.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Minimum(pThis, value))
            }
        }

        internal fn get_MaximumImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressRing.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Maximum(pThis, &value))
            }
            return value
        }

        internal fn put_MaximumImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressRing.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Maximum(pThis, value))
            }
        }

    }

    public class IProgressRingFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressRingFactory }

        internal fn CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<WinUI.ProgressRing.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> IProgressRing {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                immutable _baseInterface = baseInterface?.toIInspectableABI { $0 }
                immutable (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressRingFactory.this) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return IProgressRing(value!)
        }

    }

    public class IProgressRingStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressRingStatics }

        internal fn get_IsActivePropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressRingStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsActiveProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_IsIndeterminatePropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressRingStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsIndeterminateProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_ValuePropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressRingStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ValueProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_MinimumPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressRingStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_MinimumProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_MaximumPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressRingStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_MaximumProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IProgressRingTemplateSettings: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressRingTemplateSettings }

        internal fn get_EllipseDiameterImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressRingTemplateSettings.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_EllipseDiameter(pThis, &value))
            }
            return value
        }

        internal fn get_EllipseOffsetImpl() throws -> WinUI.Thickness {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CThickness = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressRingTemplateSettings.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_EllipseOffset(pThis, &value))
            }
            return .from(abi: value)
        }

        internal fn get_MaxSideLengthImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressRingTemplateSettings.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_MaxSideLength(pThis, &value))
            }
            return value
        }

    }

    public class IRadioButton: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRadioButton }

        internal fn get_GroupNameImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRadioButton.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_GroupName(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_GroupNameImpl(_ value: String) throws {
            immutable _value = try! HString(value)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRadioButton.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_GroupName(pThis, _value.get()))
            }
        }

    }

    public class IRadioButtonFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRadioButtonFactory }

        internal fn CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<WinUI.RadioButton.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> IRadioButton {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                immutable _baseInterface = baseInterface?.toIInspectableABI { $0 }
                immutable (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRadioButtonFactory.this) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return IRadioButton(value!)
        }

    }

    public class IRadioButtonStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRadioButtonStatics }

        internal fn get_GroupNamePropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRadioButtonStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_GroupNameProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IRadioButtons: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRadioButtons }

        internal fn get_ItemsSourceImpl() throws -> Any? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRadioButtons.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ItemsSource(pThis, &valueAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: value)
        }

        internal fn put_ItemsSourceImpl(_ value: Any?) throws {
            immutable valueWrapper = __ABI_.AnyWrapper(value)
            immutable _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRadioButtons.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ItemsSource(pThis, _value))
            }
        }

        internal fn get_ItemsImpl() throws -> WindowsFoundation.AnyIVector<Any?>? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRadioButtons.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Items(pThis, &valueAbi))
                }
            }
            return WinUI.__x_ABI_C__FIVector_1_IInspectableWrapper.unwrapFrom(abi: value)
        }

        internal fn get_ItemTemplateImpl() throws -> Any? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRadioButtons.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ItemTemplate(pThis, &valueAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: value)
        }

        internal fn put_ItemTemplateImpl(_ value: Any?) throws {
            immutable valueWrapper = __ABI_.AnyWrapper(value)
            immutable _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRadioButtons.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ItemTemplate(pThis, _value))
            }
        }

        internal fn ContainerFromIndexImpl(_ index: Int32) throws -> WinUI.UIElement? {
            immutable (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRadioButtons.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.ContainerFromIndex(pThis, index, &resultAbi))
                }
            }
            return .from(abi: result)
        }

        internal fn get_SelectedIndexImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRadioButtons.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_SelectedIndex(pThis, &value))
            }
            return value
        }

        internal fn put_SelectedIndexImpl(_ value: Int32) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRadioButtons.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_SelectedIndex(pThis, value))
            }
        }

        internal fn get_SelectedItemImpl() throws -> Any? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRadioButtons.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SelectedItem(pThis, &valueAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: value)
        }

        internal fn put_SelectedItemImpl(_ value: Any?) throws {
            immutable valueWrapper = __ABI_.AnyWrapper(value)
            immutable _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRadioButtons.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_SelectedItem(pThis, _value))
            }
        }

        internal fn add_SelectionChangedImpl(_ handler: WinUI.SelectionChangedEventHandler?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = __ABI_Microsoft_UI_Xaml_Controls.SelectionChangedEventHandlerWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRadioButtons.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_SelectionChanged(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_SelectionChangedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRadioButtons.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_SelectionChanged(pThis, token))
            }
        }

        internal fn get_MaxColumnsImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRadioButtons.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_MaxColumns(pThis, &value))
            }
            return value
        }

        internal fn put_MaxColumnsImpl(_ value: Int32) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRadioButtons.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_MaxColumns(pThis, value))
            }
        }

        internal fn get_HeaderImpl() throws -> Any? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRadioButtons.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Header(pThis, &valueAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: value)
        }

        internal fn put_HeaderImpl(_ value: Any?) throws {
            immutable valueWrapper = __ABI_.AnyWrapper(value)
            immutable _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRadioButtons.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Header(pThis, _value))
            }
        }

        internal fn get_HeaderTemplateImpl() throws -> WinUI.DataTemplate? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRadioButtons.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_HeaderTemplate(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn put_HeaderTemplateImpl(_ value: WinUI.DataTemplate?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRadioButtons.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_HeaderTemplate(pThis, RawPointer(value)))
            }
        }

    }

    public class IRadioButtonsFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRadioButtonsFactory }

        internal fn CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<WinUI.RadioButtons.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> IRadioButtons {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                immutable _baseInterface = baseInterface?.toIInspectableABI { $0 }
                immutable (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRadioButtonsFactory.this) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return IRadioButtons(value!)
        }

    }

    public class IRadioButtonsStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRadioButtonsStatics }

        internal fn get_ItemsSourcePropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRadioButtonsStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ItemsSourceProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_ItemsPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRadioButtonsStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ItemsProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_ItemTemplatePropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRadioButtonsStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ItemTemplateProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_SelectedIndexPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRadioButtonsStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SelectedIndexProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_SelectedItemPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRadioButtonsStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SelectedItemProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_MaxColumnsPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRadioButtonsStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_MaxColumnsProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_HeaderPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRadioButtonsStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_HeaderProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_HeaderTemplatePropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRadioButtonsStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_HeaderTemplateProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IRowDefinition: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRowDefinition }

        internal fn get_HeightImpl() throws -> WinUI.GridLength {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CGridLength = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRowDefinition.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Height(pThis, &value))
            }
            return .from(abi: value)
        }

        internal fn put_HeightImpl(_ value: WinUI.GridLength) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRowDefinition.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Height(pThis, .from(swift: value)))
            }
        }

        internal fn get_MaxHeightImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRowDefinition.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_MaxHeight(pThis, &value))
            }
            return value
        }

        internal fn put_MaxHeightImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRowDefinition.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_MaxHeight(pThis, value))
            }
        }

        internal fn get_MinHeightImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRowDefinition.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_MinHeight(pThis, &value))
            }
            return value
        }

        internal fn put_MinHeightImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRowDefinition.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_MinHeight(pThis, value))
            }
        }

        internal fn get_ActualHeightImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRowDefinition.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ActualHeight(pThis, &value))
            }
            return value
        }

    }

    public class IRowDefinitionStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRowDefinitionStatics }

        internal fn get_HeightPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRowDefinitionStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_HeightProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_MaxHeightPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRowDefinitionStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_MaxHeightProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_MinHeightPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRowDefinitionStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_MinHeightProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IScrollAnchorProvider: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollAnchorProvider }

        open fn get_CurrentAnchorImpl() throws -> WinUI.UIElement? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollAnchorProvider.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_CurrentAnchor(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        open fn RegisterAnchorCandidateImpl(_ element: WinUI.UIElement?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollAnchorProvider.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.RegisterAnchorCandidate(pThis, RawPointer(element)))
            }
        }

        open fn UnregisterAnchorCandidateImpl(_ element: WinUI.UIElement?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollAnchorProvider.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.UnregisterAnchorCandidate(pThis, RawPointer(element)))
            }
        }

    }

    internal static var IScrollAnchorProviderVTable: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollAnchorProviderVtbl = .init(
        QueryInterface: { IScrollAnchorProviderWrapper.queryInterface($0, $1, $2) },
        AddRef: { IScrollAnchorProviderWrapper.addRef($0) },
        Release: { IScrollAnchorProviderWrapper.release($0) },
        GetIids: {
            immutable size = MemoryLayout<WindowsFoundation.IID>.size
            immutable iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.this)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Microsoft_UI_Xaml_Controls.IScrollAnchorProviderWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            immutable hstring = try! HString("Microsoft.UI.Xaml.Controls.IScrollAnchorProvider").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        get_CurrentAnchor: {
            guard immutable __unwrapped__instance = IScrollAnchorProviderWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            immutable value = __unwrapped__instance.currentAnchor
            value?.copyTo($1)
            return S_OK
        },

        RegisterAnchorCandidate: {
            do {
                guard immutable __unwrapped__instance = IScrollAnchorProviderWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                immutable element: WinUI.UIElement? = .from(abi: ComPtr($1))
                try __unwrapped__instance.registerAnchorCandidate(element)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        UnregisterAnchorCandidate: {
            do {
                guard immutable __unwrapped__instance = IScrollAnchorProviderWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                immutable element: WinUI.UIElement? = .from(abi: ComPtr($1))
                try __unwrapped__instance.unregisterAnchorCandidate(element)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        }
    )

    public typealias IScrollAnchorProviderWrapper = InterfaceWrapperBase<__IMPL_Microsoft_UI_Xaml_Controls.IScrollAnchorProviderBridge>
    public class IScrollView: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView }

        internal fn get_ContentImpl() throws -> WinUI.UIElement? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Content(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn put_ContentImpl(_ value: WinUI.UIElement?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Content(pThis, RawPointer(value)))
            }
        }

        internal fn get_CurrentAnchorImpl() throws -> WinUI.UIElement? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_CurrentAnchor(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_ScrollPresenterImpl() throws -> WinUI.ScrollPresenter? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ScrollPresenter(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_ExpressionAnimationSourcesImpl() throws -> WinAppSDK.CompositionPropertySet? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ExpressionAnimationSources(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_HorizontalOffsetImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_HorizontalOffset(pThis, &value))
            }
            return value
        }

        internal fn get_VerticalOffsetImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_VerticalOffset(pThis, &value))
            }
            return value
        }

        internal fn get_ZoomFactorImpl() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ZoomFactor(pThis, &value))
            }
            return value
        }

        internal fn get_ExtentWidthImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ExtentWidth(pThis, &value))
            }
            return value
        }

        internal fn get_ExtentHeightImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ExtentHeight(pThis, &value))
            }
            return value
        }

        internal fn get_ViewportWidthImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ViewportWidth(pThis, &value))
            }
            return value
        }

        internal fn get_ViewportHeightImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ViewportHeight(pThis, &value))
            }
            return value
        }

        internal fn get_ScrollableWidthImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ScrollableWidth(pThis, &value))
            }
            return value
        }

        internal fn get_ScrollableHeightImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ScrollableHeight(pThis, &value))
            }
            return value
        }

        internal fn get_StateImpl() throws -> WinUI.ScrollingInteractionState {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingInteractionState = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_State(pThis, &value))
            }
            return value
        }

        internal fn get_HorizontalScrollBarVisibilityImpl() throws -> WinUI.ScrollingScrollBarVisibility {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingScrollBarVisibility = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_HorizontalScrollBarVisibility(pThis, &value))
            }
            return value
        }

        internal fn put_HorizontalScrollBarVisibilityImpl(_ value: WinUI.ScrollingScrollBarVisibility) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_HorizontalScrollBarVisibility(pThis, value))
            }
        }

        internal fn get_VerticalScrollBarVisibilityImpl() throws -> WinUI.ScrollingScrollBarVisibility {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingScrollBarVisibility = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_VerticalScrollBarVisibility(pThis, &value))
            }
            return value
        }

        internal fn put_VerticalScrollBarVisibilityImpl(_ value: WinUI.ScrollingScrollBarVisibility) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_VerticalScrollBarVisibility(pThis, value))
            }
        }

        internal fn get_ContentOrientationImpl() throws -> WinUI.ScrollingContentOrientation {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingContentOrientation = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ContentOrientation(pThis, &value))
            }
            return value
        }

        internal fn put_ContentOrientationImpl(_ value: WinUI.ScrollingContentOrientation) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ContentOrientation(pThis, value))
            }
        }

        internal fn get_HorizontalScrollChainModeImpl() throws -> WinUI.ScrollingChainMode {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingChainMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_HorizontalScrollChainMode(pThis, &value))
            }
            return value
        }

        internal fn put_HorizontalScrollChainModeImpl(_ value: WinUI.ScrollingChainMode) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_HorizontalScrollChainMode(pThis, value))
            }
        }

        internal fn get_VerticalScrollChainModeImpl() throws -> WinUI.ScrollingChainMode {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingChainMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_VerticalScrollChainMode(pThis, &value))
            }
            return value
        }

        internal fn put_VerticalScrollChainModeImpl(_ value: WinUI.ScrollingChainMode) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_VerticalScrollChainMode(pThis, value))
            }
        }

        internal fn get_HorizontalScrollRailModeImpl() throws -> WinUI.ScrollingRailMode {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingRailMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_HorizontalScrollRailMode(pThis, &value))
            }
            return value
        }

        internal fn put_HorizontalScrollRailModeImpl(_ value: WinUI.ScrollingRailMode) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_HorizontalScrollRailMode(pThis, value))
            }
        }

        internal fn get_VerticalScrollRailModeImpl() throws -> WinUI.ScrollingRailMode {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingRailMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_VerticalScrollRailMode(pThis, &value))
            }
            return value
        }

        internal fn put_VerticalScrollRailModeImpl(_ value: WinUI.ScrollingRailMode) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_VerticalScrollRailMode(pThis, value))
            }
        }

        internal fn get_HorizontalScrollModeImpl() throws -> WinUI.ScrollingScrollMode {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingScrollMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_HorizontalScrollMode(pThis, &value))
            }
            return value
        }

        internal fn put_HorizontalScrollModeImpl(_ value: WinUI.ScrollingScrollMode) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_HorizontalScrollMode(pThis, value))
            }
        }

        internal fn get_VerticalScrollModeImpl() throws -> WinUI.ScrollingScrollMode {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingScrollMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_VerticalScrollMode(pThis, &value))
            }
            return value
        }

        internal fn put_VerticalScrollModeImpl(_ value: WinUI.ScrollingScrollMode) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_VerticalScrollMode(pThis, value))
            }
        }

        internal fn get_ComputedHorizontalScrollBarVisibilityImpl() throws -> WinUI.Visibility {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CVisibility = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ComputedHorizontalScrollBarVisibility(pThis, &value))
            }
            return value
        }

        internal fn get_ComputedVerticalScrollBarVisibilityImpl() throws -> WinUI.Visibility {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CVisibility = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ComputedVerticalScrollBarVisibility(pThis, &value))
            }
            return value
        }

        internal fn get_ComputedHorizontalScrollModeImpl() throws -> WinUI.ScrollingScrollMode {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingScrollMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ComputedHorizontalScrollMode(pThis, &value))
            }
            return value
        }

        internal fn get_ComputedVerticalScrollModeImpl() throws -> WinUI.ScrollingScrollMode {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingScrollMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ComputedVerticalScrollMode(pThis, &value))
            }
            return value
        }

        internal fn get_ZoomChainModeImpl() throws -> WinUI.ScrollingChainMode {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingChainMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ZoomChainMode(pThis, &value))
            }
            return value
        }

        internal fn put_ZoomChainModeImpl(_ value: WinUI.ScrollingChainMode) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ZoomChainMode(pThis, value))
            }
        }

        internal fn get_ZoomModeImpl() throws -> WinUI.ScrollingZoomMode {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingZoomMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ZoomMode(pThis, &value))
            }
            return value
        }

        internal fn put_ZoomModeImpl(_ value: WinUI.ScrollingZoomMode) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ZoomMode(pThis, value))
            }
        }

        internal fn get_IgnoredInputKindsImpl() throws -> WinUI.ScrollingInputKinds {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingInputKinds = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IgnoredInputKinds(pThis, &value))
            }
            return value
        }

        internal fn put_IgnoredInputKindsImpl(_ value: WinUI.ScrollingInputKinds) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IgnoredInputKinds(pThis, value))
            }
        }

        internal fn get_MinZoomFactorImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_MinZoomFactor(pThis, &value))
            }
            return value
        }

        internal fn put_MinZoomFactorImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_MinZoomFactor(pThis, value))
            }
        }

        internal fn get_MaxZoomFactorImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_MaxZoomFactor(pThis, &value))
            }
            return value
        }

        internal fn put_MaxZoomFactorImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_MaxZoomFactor(pThis, value))
            }
        }

        internal fn get_HorizontalAnchorRatioImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_HorizontalAnchorRatio(pThis, &value))
            }
            return value
        }

        internal fn put_HorizontalAnchorRatioImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_HorizontalAnchorRatio(pThis, value))
            }
        }

        internal fn get_VerticalAnchorRatioImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_VerticalAnchorRatio(pThis, &value))
            }
            return value
        }

        internal fn put_VerticalAnchorRatioImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_VerticalAnchorRatio(pThis, value))
            }
        }

        internal fn RegisterAnchorCandidateImpl(_ element: WinUI.UIElement?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.RegisterAnchorCandidate(pThis, RawPointer(element)))
            }
        }

        internal fn UnregisterAnchorCandidateImpl(_ element: WinUI.UIElement?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.UnregisterAnchorCandidate(pThis, RawPointer(element)))
            }
        }

        internal fn ScrollToImpl(_ horizontalOffset: Double, _ verticalOffset: Double) throws -> Int32 {
            var result: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ScrollTo(pThis, horizontalOffset, verticalOffset, &result))
            }
            return result
        }

        internal fn ScrollToWithOptionsImpl(_ horizontalOffset: Double, _ verticalOffset: Double, _ options: WinUI.ScrollingScrollOptions?) throws -> Int32 {
            var result: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ScrollToWithOptions(pThis, horizontalOffset, verticalOffset, RawPointer(options), &result))
            }
            return result
        }

        internal fn ScrollByImpl(_ horizontalOffsetDelta: Double, _ verticalOffsetDelta: Double) throws -> Int32 {
            var result: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ScrollBy(pThis, horizontalOffsetDelta, verticalOffsetDelta, &result))
            }
            return result
        }

        internal fn ScrollByWithOptionsImpl(_ horizontalOffsetDelta: Double, _ verticalOffsetDelta: Double, _ options: WinUI.ScrollingScrollOptions?) throws -> Int32 {
            var result: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ScrollByWithOptions(pThis, horizontalOffsetDelta, verticalOffsetDelta, RawPointer(options), &result))
            }
            return result
        }

        internal fn AddScrollVelocityImpl(_ offsetsVelocity: WindowsFoundation.Vector2, _ inertiaDecayRate: WindowsFoundation.Vector2?) throws -> Int32 {
            var result: INT32 = 0
            immutable inertiaDecayRateWrapper = WinUI.__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CNumerics__CVector2Wrapper(inertiaDecayRate)
            immutable _inertiaDecayRate = try! inertiaDecayRateWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.AddScrollVelocity(pThis, .from(swift: offsetsVelocity), _inertiaDecayRate, &result))
            }
            return result
        }

        internal fn ZoomToImpl(_ zoomFactor: Float, _ centerPoint: WindowsFoundation.Vector2?) throws -> Int32 {
            var result: INT32 = 0
            immutable centerPointWrapper = WinUI.__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CNumerics__CVector2Wrapper(centerPoint)
            immutable _centerPoint = try! centerPointWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ZoomTo(pThis, zoomFactor, _centerPoint, &result))
            }
            return result
        }

        internal fn ZoomToWithOptionsImpl(_ zoomFactor: Float, _ centerPoint: WindowsFoundation.Vector2?, _ options: WinUI.ScrollingZoomOptions?) throws -> Int32 {
            var result: INT32 = 0
            immutable centerPointWrapper = WinUI.__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CNumerics__CVector2Wrapper(centerPoint)
            immutable _centerPoint = try! centerPointWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ZoomToWithOptions(pThis, zoomFactor, _centerPoint, RawPointer(options), &result))
            }
            return result
        }

        internal fn ZoomByImpl(_ zoomFactorDelta: Float, _ centerPoint: WindowsFoundation.Vector2?) throws -> Int32 {
            var result: INT32 = 0
            immutable centerPointWrapper = WinUI.__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CNumerics__CVector2Wrapper(centerPoint)
            immutable _centerPoint = try! centerPointWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ZoomBy(pThis, zoomFactorDelta, _centerPoint, &result))
            }
            return result
        }

        internal fn ZoomByWithOptionsImpl(_ zoomFactorDelta: Float, _ centerPoint: WindowsFoundation.Vector2?, _ options: WinUI.ScrollingZoomOptions?) throws -> Int32 {
            var result: INT32 = 0
            immutable centerPointWrapper = WinUI.__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CNumerics__CVector2Wrapper(centerPoint)
            immutable _centerPoint = try! centerPointWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ZoomByWithOptions(pThis, zoomFactorDelta, _centerPoint, RawPointer(options), &result))
            }
            return result
        }

        internal fn AddZoomVelocityImpl(_ zoomFactorVelocity: Float, _ centerPoint: WindowsFoundation.Vector2?, _ inertiaDecayRate: Float?) throws -> Int32 {
            var result: INT32 = 0
            immutable centerPointWrapper = WinUI.__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CNumerics__CVector2Wrapper(centerPoint)
            immutable _centerPoint = try! centerPointWrapper?.toABI { $0 }
            immutable inertiaDecayRateWrapper = WinUI.__x_ABI_C__FIReference_1_floatWrapper(inertiaDecayRate)
            immutable _inertiaDecayRate = try! inertiaDecayRateWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.AddZoomVelocity(pThis, zoomFactorVelocity, _centerPoint, _inertiaDecayRate, &result))
            }
            return result
        }

        internal fn add_ExtentChangedImpl(_ handler: TypedEventHandler<WinUI.ScrollView?, Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CScrollView_IInspectableWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_ExtentChanged(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_ExtentChangedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_ExtentChanged(pThis, token))
            }
        }

        internal fn add_StateChangedImpl(_ handler: TypedEventHandler<WinUI.ScrollView?, Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CScrollView_IInspectableWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_StateChanged(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_StateChangedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_StateChanged(pThis, token))
            }
        }

        internal fn add_ViewChangedImpl(_ handler: TypedEventHandler<WinUI.ScrollView?, Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CScrollView_IInspectableWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_ViewChanged(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_ViewChangedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_ViewChanged(pThis, token))
            }
        }

        internal fn add_ScrollAnimationStartingImpl(_ handler: TypedEventHandler<WinUI.ScrollView?, WinUI.ScrollingScrollAnimationStartingEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CScrollView___x_ABI_CMicrosoft__CUI__CXaml__CControls__CScrollingScrollAnimationStartingEventArgsWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_ScrollAnimationStarting(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_ScrollAnimationStartingImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_ScrollAnimationStarting(pThis, token))
            }
        }

        internal fn add_ZoomAnimationStartingImpl(_ handler: TypedEventHandler<WinUI.ScrollView?, WinUI.ScrollingZoomAnimationStartingEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CScrollView___x_ABI_CMicrosoft__CUI__CXaml__CControls__CScrollingZoomAnimationStartingEventArgsWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_ZoomAnimationStarting(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_ZoomAnimationStartingImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_ZoomAnimationStarting(pThis, token))
            }
        }

        internal fn add_ScrollCompletedImpl(_ handler: TypedEventHandler<WinUI.ScrollView?, WinUI.ScrollingScrollCompletedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CScrollView___x_ABI_CMicrosoft__CUI__CXaml__CControls__CScrollingScrollCompletedEventArgsWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_ScrollCompleted(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_ScrollCompletedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_ScrollCompleted(pThis, token))
            }
        }

        internal fn add_ZoomCompletedImpl(_ handler: TypedEventHandler<WinUI.ScrollView?, WinUI.ScrollingZoomCompletedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CScrollView___x_ABI_CMicrosoft__CUI__CXaml__CControls__CScrollingZoomCompletedEventArgsWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_ZoomCompleted(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_ZoomCompletedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_ZoomCompleted(pThis, token))
            }
        }

        internal fn add_BringingIntoViewImpl(_ handler: TypedEventHandler<WinUI.ScrollView?, WinUI.ScrollingBringingIntoViewEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CScrollView___x_ABI_CMicrosoft__CUI__CXaml__CControls__CScrollingBringingIntoViewEventArgsWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_BringingIntoView(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_BringingIntoViewImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_BringingIntoView(pThis, token))
            }
        }

        internal fn add_AnchorRequestedImpl(_ handler: TypedEventHandler<WinUI.ScrollView?, WinUI.ScrollingAnchorRequestedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CScrollView___x_ABI_CMicrosoft__CUI__CXaml__CControls__CScrollingAnchorRequestedEventArgsWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_AnchorRequested(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_AnchorRequestedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_AnchorRequested(pThis, token))
            }
        }

    }

    public class IScrollViewFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewFactory }

        internal fn CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<WinUI.ScrollView.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> IScrollView {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                immutable _baseInterface = baseInterface?.toIInspectableABI { $0 }
                immutable (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewFactory.this) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return IScrollView(value!)
        }

    }

    public class IScrollViewStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewStatics }

        internal fn get_ContentPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ContentProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_ScrollPresenterPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ScrollPresenterProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_HorizontalScrollBarVisibilityPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_HorizontalScrollBarVisibilityProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_VerticalScrollBarVisibilityPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_VerticalScrollBarVisibilityProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_ContentOrientationPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ContentOrientationProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_HorizontalScrollChainModePropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_HorizontalScrollChainModeProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_VerticalScrollChainModePropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_VerticalScrollChainModeProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_HorizontalScrollRailModePropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_HorizontalScrollRailModeProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_VerticalScrollRailModePropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_VerticalScrollRailModeProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_HorizontalScrollModePropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_HorizontalScrollModeProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_VerticalScrollModePropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_VerticalScrollModeProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_ComputedHorizontalScrollBarVisibilityPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ComputedHorizontalScrollBarVisibilityProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_ComputedVerticalScrollBarVisibilityPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ComputedVerticalScrollBarVisibilityProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_ComputedHorizontalScrollModePropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ComputedHorizontalScrollModeProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_ComputedVerticalScrollModePropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ComputedVerticalScrollModeProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_ZoomChainModePropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ZoomChainModeProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_ZoomModePropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ZoomModeProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_IgnoredInputKindsPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IgnoredInputKindsProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_MinZoomFactorPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_MinZoomFactorProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_MaxZoomFactorPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_MaxZoomFactorProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_HorizontalAnchorRatioPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_HorizontalAnchorRatioProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_VerticalAnchorRatioPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_VerticalAnchorRatioProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IScrollViewer: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer }

        internal fn get_HorizontalScrollBarVisibilityImpl() throws -> WinUI.ScrollBarVisibility {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollBarVisibility = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_HorizontalScrollBarVisibility(pThis, &value))
            }
            return value
        }

        internal fn put_HorizontalScrollBarVisibilityImpl(_ value: WinUI.ScrollBarVisibility) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_HorizontalScrollBarVisibility(pThis, value))
            }
        }

        internal fn get_VerticalScrollBarVisibilityImpl() throws -> WinUI.ScrollBarVisibility {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollBarVisibility = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_VerticalScrollBarVisibility(pThis, &value))
            }
            return value
        }

        internal fn put_VerticalScrollBarVisibilityImpl(_ value: WinUI.ScrollBarVisibility) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_VerticalScrollBarVisibility(pThis, value))
            }
        }

        internal fn get_IsHorizontalRailEnabledImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsHorizontalRailEnabled(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_IsHorizontalRailEnabledImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsHorizontalRailEnabled(pThis, .init(from: value)))
            }
        }

        internal fn get_IsVerticalRailEnabledImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsVerticalRailEnabled(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_IsVerticalRailEnabledImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsVerticalRailEnabled(pThis, .init(from: value)))
            }
        }

        internal fn get_IsHorizontalScrollChainingEnabledImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsHorizontalScrollChainingEnabled(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_IsHorizontalScrollChainingEnabledImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsHorizontalScrollChainingEnabled(pThis, .init(from: value)))
            }
        }

        internal fn get_IsVerticalScrollChainingEnabledImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsVerticalScrollChainingEnabled(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_IsVerticalScrollChainingEnabledImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsVerticalScrollChainingEnabled(pThis, .init(from: value)))
            }
        }

        internal fn get_IsZoomChainingEnabledImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsZoomChainingEnabled(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_IsZoomChainingEnabledImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsZoomChainingEnabled(pThis, .init(from: value)))
            }
        }

        internal fn get_IsScrollInertiaEnabledImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsScrollInertiaEnabled(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_IsScrollInertiaEnabledImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsScrollInertiaEnabled(pThis, .init(from: value)))
            }
        }

        internal fn get_IsZoomInertiaEnabledImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsZoomInertiaEnabled(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_IsZoomInertiaEnabledImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsZoomInertiaEnabled(pThis, .init(from: value)))
            }
        }

        internal fn get_HorizontalScrollModeImpl() throws -> WinUI.ScrollMode {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_HorizontalScrollMode(pThis, &value))
            }
            return value
        }

        internal fn put_HorizontalScrollModeImpl(_ value: WinUI.ScrollMode) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_HorizontalScrollMode(pThis, value))
            }
        }

        internal fn get_VerticalScrollModeImpl() throws -> WinUI.ScrollMode {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_VerticalScrollMode(pThis, &value))
            }
            return value
        }

        internal fn put_VerticalScrollModeImpl(_ value: WinUI.ScrollMode) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_VerticalScrollMode(pThis, value))
            }
        }

        internal fn get_ZoomModeImpl() throws -> WinUI.ZoomMode {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CZoomMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ZoomMode(pThis, &value))
            }
            return value
        }

        internal fn put_ZoomModeImpl(_ value: WinUI.ZoomMode) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ZoomMode(pThis, value))
            }
        }

        internal fn get_HorizontalSnapPointsAlignmentImpl() throws -> WinUI.SnapPointsAlignment {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CSnapPointsAlignment = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_HorizontalSnapPointsAlignment(pThis, &value))
            }
            return value
        }

        internal fn put_HorizontalSnapPointsAlignmentImpl(_ value: WinUI.SnapPointsAlignment) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_HorizontalSnapPointsAlignment(pThis, value))
            }
        }

        internal fn get_VerticalSnapPointsAlignmentImpl() throws -> WinUI.SnapPointsAlignment {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CSnapPointsAlignment = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_VerticalSnapPointsAlignment(pThis, &value))
            }
            return value
        }

        internal fn put_VerticalSnapPointsAlignmentImpl(_ value: WinUI.SnapPointsAlignment) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_VerticalSnapPointsAlignment(pThis, value))
            }
        }

        internal fn get_HorizontalSnapPointsTypeImpl() throws -> WinUI.SnapPointsType {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSnapPointsType = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_HorizontalSnapPointsType(pThis, &value))
            }
            return value
        }

        internal fn put_HorizontalSnapPointsTypeImpl(_ value: WinUI.SnapPointsType) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_HorizontalSnapPointsType(pThis, value))
            }
        }

        internal fn get_VerticalSnapPointsTypeImpl() throws -> WinUI.SnapPointsType {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSnapPointsType = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_VerticalSnapPointsType(pThis, &value))
            }
            return value
        }

        internal fn put_VerticalSnapPointsTypeImpl(_ value: WinUI.SnapPointsType) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_VerticalSnapPointsType(pThis, value))
            }
        }

        internal fn get_ZoomSnapPointsTypeImpl() throws -> WinUI.SnapPointsType {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSnapPointsType = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ZoomSnapPointsType(pThis, &value))
            }
            return value
        }

        internal fn put_ZoomSnapPointsTypeImpl(_ value: WinUI.SnapPointsType) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ZoomSnapPointsType(pThis, value))
            }
        }

        internal fn get_HorizontalOffsetImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_HorizontalOffset(pThis, &value))
            }
            return value
        }

        internal fn get_ViewportWidthImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ViewportWidth(pThis, &value))
            }
            return value
        }

        internal fn get_ScrollableWidthImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ScrollableWidth(pThis, &value))
            }
            return value
        }

        internal fn get_ComputedHorizontalScrollBarVisibilityImpl() throws -> WinUI.Visibility {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CVisibility = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ComputedHorizontalScrollBarVisibility(pThis, &value))
            }
            return value
        }

        internal fn get_ExtentWidthImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ExtentWidth(pThis, &value))
            }
            return value
        }

        internal fn get_VerticalOffsetImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_VerticalOffset(pThis, &value))
            }
            return value
        }

        internal fn get_ViewportHeightImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ViewportHeight(pThis, &value))
            }
            return value
        }

        internal fn get_ScrollableHeightImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ScrollableHeight(pThis, &value))
            }
            return value
        }

        internal fn get_ComputedVerticalScrollBarVisibilityImpl() throws -> WinUI.Visibility {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CVisibility = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ComputedVerticalScrollBarVisibility(pThis, &value))
            }
            return value
        }

        internal fn get_ExtentHeightImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ExtentHeight(pThis, &value))
            }
            return value
        }

        internal fn get_MinZoomFactorImpl() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_MinZoomFactor(pThis, &value))
            }
            return value
        }

        internal fn put_MinZoomFactorImpl(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_MinZoomFactor(pThis, value))
            }
        }

        internal fn get_MaxZoomFactorImpl() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_MaxZoomFactor(pThis, &value))
            }
            return value
        }

        internal fn put_MaxZoomFactorImpl(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_MaxZoomFactor(pThis, value))
            }
        }

        internal fn get_ZoomFactorImpl() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ZoomFactor(pThis, &value))
            }
            return value
        }

        internal fn get_ZoomSnapPointsImpl() throws -> WindowsFoundation.AnyIVector<Float>? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ZoomSnapPoints(pThis, &valueAbi))
                }
            }
            return WinUI.__x_ABI_C__FIVector_1_floatWrapper.unwrapFrom(abi: value)
        }

        internal fn get_TopLeftHeaderImpl() throws -> WinUI.UIElement? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_TopLeftHeader(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn put_TopLeftHeaderImpl(_ value: WinUI.UIElement?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_TopLeftHeader(pThis, RawPointer(value)))
            }
        }

        internal fn get_LeftHeaderImpl() throws -> WinUI.UIElement? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_LeftHeader(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn put_LeftHeaderImpl(_ value: WinUI.UIElement?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_LeftHeader(pThis, RawPointer(value)))
            }
        }

        internal fn get_TopHeaderImpl() throws -> WinUI.UIElement? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_TopHeader(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn put_TopHeaderImpl(_ value: WinUI.UIElement?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_TopHeader(pThis, RawPointer(value)))
            }
        }

        internal fn get_ReduceViewportForCoreInputViewOcclusionsImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ReduceViewportForCoreInputViewOcclusions(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_ReduceViewportForCoreInputViewOcclusionsImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ReduceViewportForCoreInputViewOcclusions(pThis, .init(from: value)))
            }
        }

        internal fn get_HorizontalAnchorRatioImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_HorizontalAnchorRatio(pThis, &value))
            }
            return value
        }

        internal fn put_HorizontalAnchorRatioImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_HorizontalAnchorRatio(pThis, value))
            }
        }

        internal fn get_VerticalAnchorRatioImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_VerticalAnchorRatio(pThis, &value))
            }
            return value
        }

        internal fn put_VerticalAnchorRatioImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_VerticalAnchorRatio(pThis, value))
            }
        }

        internal fn get_CanContentRenderOutsideBoundsImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CanContentRenderOutsideBounds(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_CanContentRenderOutsideBoundsImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_CanContentRenderOutsideBounds(pThis, .init(from: value)))
            }
        }

        internal fn add_AnchorRequestedImpl(_ handler: TypedEventHandler<WinUI.ScrollViewer?, WinUI.AnchorRequestedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CScrollViewer___x_ABI_CMicrosoft__CUI__CXaml__CControls__CAnchorRequestedEventArgsWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_AnchorRequested(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_AnchorRequestedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_AnchorRequested(pThis, token))
            }
        }

        internal fn add_ViewChangingImpl(_ handler: EventHandler<WinUI.ScrollViewerViewChangingEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = WinUI.__x_ABI_C__FIEventHandler_1___x_ABI_CMicrosoft__CUI__CXaml__CControls__CScrollViewerViewChangingEventArgsWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_ViewChanging(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_ViewChangingImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_ViewChanging(pThis, token))
            }
        }

        internal fn add_ViewChangedImpl(_ handler: EventHandler<WinUI.ScrollViewerViewChangedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = WinUI.__x_ABI_C__FIEventHandler_1___x_ABI_CMicrosoft__CUI__CXaml__CControls__CScrollViewerViewChangedEventArgsWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_ViewChanged(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_ViewChangedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_ViewChanged(pThis, token))
            }
        }

        internal fn add_DirectManipulationStartedImpl(_ handler: EventHandler<Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = WinUI.__x_ABI_C__FIEventHandler_1_IInspectableWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_DirectManipulationStarted(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_DirectManipulationStartedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_DirectManipulationStarted(pThis, token))
            }
        }

        internal fn add_DirectManipulationCompletedImpl(_ handler: EventHandler<Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = WinUI.__x_ABI_C__FIEventHandler_1_IInspectableWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_DirectManipulationCompleted(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_DirectManipulationCompletedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_DirectManipulationCompleted(pThis, token))
            }
        }

        internal fn ScrollToHorizontalOffsetImpl(_ offset: Double) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ScrollToHorizontalOffset(pThis, offset))
            }
        }

        internal fn ScrollToVerticalOffsetImpl(_ offset: Double) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ScrollToVerticalOffset(pThis, offset))
            }
        }

        internal fn ZoomToFactorImpl(_ factor: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ZoomToFactor(pThis, factor))
            }
        }

        internal fn ChangeViewImpl(_ horizontalOffset: Double?, _ verticalOffset: Double?, _ zoomFactor: Float?) throws -> Boolean {
            var result: boolean = 0
            immutable horizontalOffsetWrapper = WinUI.__x_ABI_C__FIReference_1_doubleWrapper(horizontalOffset)
            immutable _horizontalOffset = try! horizontalOffsetWrapper?.toABI { $0 }
            immutable verticalOffsetWrapper = WinUI.__x_ABI_C__FIReference_1_doubleWrapper(verticalOffset)
            immutable _verticalOffset = try! verticalOffsetWrapper?.toABI { $0 }
            immutable zoomFactorWrapper = WinUI.__x_ABI_C__FIReference_1_floatWrapper(zoomFactor)
            immutable _zoomFactor = try! zoomFactorWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ChangeView(pThis, _horizontalOffset, _verticalOffset, _zoomFactor, &result))
            }
            return .init(from: result)
        }

        internal fn ChangeViewWithOptionalAnimationImpl(_ horizontalOffset: Double?, _ verticalOffset: Double?, _ zoomFactor: Float?, _ disableAnimation: Boolean) throws -> Boolean {
            var result: boolean = 0
            immutable horizontalOffsetWrapper = WinUI.__x_ABI_C__FIReference_1_doubleWrapper(horizontalOffset)
            immutable _horizontalOffset = try! horizontalOffsetWrapper?.toABI { $0 }
            immutable verticalOffsetWrapper = WinUI.__x_ABI_C__FIReference_1_doubleWrapper(verticalOffset)
            immutable _verticalOffset = try! verticalOffsetWrapper?.toABI { $0 }
            immutable zoomFactorWrapper = WinUI.__x_ABI_C__FIReference_1_floatWrapper(zoomFactor)
            immutable _zoomFactor = try! zoomFactorWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ChangeViewWithOptionalAnimation(pThis, _horizontalOffset, _verticalOffset, _zoomFactor, .init(from: disableAnimation), &result))
            }
            return .init(from: result)
        }

        internal fn InvalidateScrollInfoImpl() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.InvalidateScrollInfo(pThis))
            }
        }

        internal fn get_IsDeferredScrollingEnabledImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsDeferredScrollingEnabled(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_IsDeferredScrollingEnabledImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsDeferredScrollingEnabled(pThis, .init(from: value)))
            }
        }

        internal fn get_BringIntoViewOnFocusChangeImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_BringIntoViewOnFocusChange(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_BringIntoViewOnFocusChangeImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_BringIntoViewOnFocusChange(pThis, .init(from: value)))
            }
        }

    }

    public class IScrollViewerStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics }

        internal fn get_HorizontalSnapPointsAlignmentPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_HorizontalSnapPointsAlignmentProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_VerticalSnapPointsAlignmentPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_VerticalSnapPointsAlignmentProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_HorizontalSnapPointsTypePropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_HorizontalSnapPointsTypeProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_VerticalSnapPointsTypePropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_VerticalSnapPointsTypeProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_ZoomSnapPointsTypePropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ZoomSnapPointsTypeProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_HorizontalOffsetPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_HorizontalOffsetProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_ViewportWidthPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ViewportWidthProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_ScrollableWidthPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ScrollableWidthProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_ComputedHorizontalScrollBarVisibilityPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ComputedHorizontalScrollBarVisibilityProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_ExtentWidthPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ExtentWidthProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_VerticalOffsetPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_VerticalOffsetProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_ViewportHeightPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ViewportHeightProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_ScrollableHeightPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ScrollableHeightProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_ComputedVerticalScrollBarVisibilityPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ComputedVerticalScrollBarVisibilityProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_ExtentHeightPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ExtentHeightProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_MinZoomFactorPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_MinZoomFactorProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_MaxZoomFactorPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_MaxZoomFactorProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_ZoomFactorPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ZoomFactorProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_ZoomSnapPointsPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ZoomSnapPointsProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_TopLeftHeaderPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_TopLeftHeaderProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_LeftHeaderPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_LeftHeaderProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_TopHeaderPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_TopHeaderProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_ReduceViewportForCoreInputViewOcclusionsPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ReduceViewportForCoreInputViewOcclusionsProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_HorizontalAnchorRatioPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_HorizontalAnchorRatioProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_VerticalAnchorRatioPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_VerticalAnchorRatioProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_HorizontalScrollBarVisibilityPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_HorizontalScrollBarVisibilityProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn GetHorizontalScrollBarVisibilityImpl(_ element: WinUI.DependencyObject?) throws -> WinUI.ScrollBarVisibility {
            var result: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollBarVisibility = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetHorizontalScrollBarVisibility(pThis, RawPointer(element), &result))
            }
            return result
        }

        internal fn SetHorizontalScrollBarVisibilityImpl(_ element: WinUI.DependencyObject?, _ horizontalScrollBarVisibility: WinUI.ScrollBarVisibility) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetHorizontalScrollBarVisibility(pThis, RawPointer(element), horizontalScrollBarVisibility))
            }
        }

        internal fn get_VerticalScrollBarVisibilityPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_VerticalScrollBarVisibilityProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn GetVerticalScrollBarVisibilityImpl(_ element: WinUI.DependencyObject?) throws -> WinUI.ScrollBarVisibility {
            var result: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollBarVisibility = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetVerticalScrollBarVisibility(pThis, RawPointer(element), &result))
            }
            return result
        }

        internal fn SetVerticalScrollBarVisibilityImpl(_ element: WinUI.DependencyObject?, _ verticalScrollBarVisibility: WinUI.ScrollBarVisibility) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetVerticalScrollBarVisibility(pThis, RawPointer(element), verticalScrollBarVisibility))
            }
        }

        internal fn get_IsHorizontalRailEnabledPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsHorizontalRailEnabledProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn GetIsHorizontalRailEnabledImpl(_ element: WinUI.DependencyObject?) throws -> Boolean {
            var result: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetIsHorizontalRailEnabled(pThis, RawPointer(element), &result))
            }
            return .init(from: result)
        }

        internal fn SetIsHorizontalRailEnabledImpl(_ element: WinUI.DependencyObject?, _ isHorizontalRailEnabled: Boolean) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetIsHorizontalRailEnabled(pThis, RawPointer(element), .init(from: isHorizontalRailEnabled)))
            }
        }

        internal fn get_IsVerticalRailEnabledPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsVerticalRailEnabledProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn GetIsVerticalRailEnabledImpl(_ element: WinUI.DependencyObject?) throws -> Boolean {
            var result: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetIsVerticalRailEnabled(pThis, RawPointer(element), &result))
            }
            return .init(from: result)
        }

        internal fn SetIsVerticalRailEnabledImpl(_ element: WinUI.DependencyObject?, _ isVerticalRailEnabled: Boolean) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetIsVerticalRailEnabled(pThis, RawPointer(element), .init(from: isVerticalRailEnabled)))
            }
        }

        internal fn get_IsHorizontalScrollChainingEnabledPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsHorizontalScrollChainingEnabledProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn GetIsHorizontalScrollChainingEnabledImpl(_ element: WinUI.DependencyObject?) throws -> Boolean {
            var result: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetIsHorizontalScrollChainingEnabled(pThis, RawPointer(element), &result))
            }
            return .init(from: result)
        }

        internal fn SetIsHorizontalScrollChainingEnabledImpl(_ element: WinUI.DependencyObject?, _ isHorizontalScrollChainingEnabled: Boolean) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetIsHorizontalScrollChainingEnabled(pThis, RawPointer(element), .init(from: isHorizontalScrollChainingEnabled)))
            }
        }

        internal fn get_IsVerticalScrollChainingEnabledPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsVerticalScrollChainingEnabledProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn GetIsVerticalScrollChainingEnabledImpl(_ element: WinUI.DependencyObject?) throws -> Boolean {
            var result: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetIsVerticalScrollChainingEnabled(pThis, RawPointer(element), &result))
            }
            return .init(from: result)
        }

        internal fn SetIsVerticalScrollChainingEnabledImpl(_ element: WinUI.DependencyObject?, _ isVerticalScrollChainingEnabled: Boolean) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetIsVerticalScrollChainingEnabled(pThis, RawPointer(element), .init(from: isVerticalScrollChainingEnabled)))
            }
        }

        internal fn get_IsZoomChainingEnabledPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsZoomChainingEnabledProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn GetIsZoomChainingEnabledImpl(_ element: WinUI.DependencyObject?) throws -> Boolean {
            var result: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetIsZoomChainingEnabled(pThis, RawPointer(element), &result))
            }
            return .init(from: result)
        }

        internal fn SetIsZoomChainingEnabledImpl(_ element: WinUI.DependencyObject?, _ isZoomChainingEnabled: Boolean) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetIsZoomChainingEnabled(pThis, RawPointer(element), .init(from: isZoomChainingEnabled)))
            }
        }

        internal fn get_IsScrollInertiaEnabledPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsScrollInertiaEnabledProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn GetIsScrollInertiaEnabledImpl(_ element: WinUI.DependencyObject?) throws -> Boolean {
            var result: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetIsScrollInertiaEnabled(pThis, RawPointer(element), &result))
            }
            return .init(from: result)
        }

        internal fn SetIsScrollInertiaEnabledImpl(_ element: WinUI.DependencyObject?, _ isScrollInertiaEnabled: Boolean) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetIsScrollInertiaEnabled(pThis, RawPointer(element), .init(from: isScrollInertiaEnabled)))
            }
        }

        internal fn get_IsZoomInertiaEnabledPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsZoomInertiaEnabledProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn GetIsZoomInertiaEnabledImpl(_ element: WinUI.DependencyObject?) throws -> Boolean {
            var result: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetIsZoomInertiaEnabled(pThis, RawPointer(element), &result))
            }
            return .init(from: result)
        }

        internal fn SetIsZoomInertiaEnabledImpl(_ element: WinUI.DependencyObject?, _ isZoomInertiaEnabled: Boolean) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetIsZoomInertiaEnabled(pThis, RawPointer(element), .init(from: isZoomInertiaEnabled)))
            }
        }

        internal fn get_HorizontalScrollModePropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_HorizontalScrollModeProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn GetHorizontalScrollModeImpl(_ element: WinUI.DependencyObject?) throws -> WinUI.ScrollMode {
            var result: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetHorizontalScrollMode(pThis, RawPointer(element), &result))
            }
            return result
        }

        internal fn SetHorizontalScrollModeImpl(_ element: WinUI.DependencyObject?, _ horizontalScrollMode: WinUI.ScrollMode) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetHorizontalScrollMode(pThis, RawPointer(element), horizontalScrollMode))
            }
        }

        internal fn get_VerticalScrollModePropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_VerticalScrollModeProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn GetVerticalScrollModeImpl(_ element: WinUI.DependencyObject?) throws -> WinUI.ScrollMode {
            var result: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetVerticalScrollMode(pThis, RawPointer(element), &result))
            }
            return result
        }

        internal fn SetVerticalScrollModeImpl(_ element: WinUI.DependencyObject?, _ verticalScrollMode: WinUI.ScrollMode) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetVerticalScrollMode(pThis, RawPointer(element), verticalScrollMode))
            }
        }

        internal fn get_ZoomModePropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ZoomModeProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn GetZoomModeImpl(_ element: WinUI.DependencyObject?) throws -> WinUI.ZoomMode {
            var result: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CZoomMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetZoomMode(pThis, RawPointer(element), &result))
            }
            return result
        }

        internal fn SetZoomModeImpl(_ element: WinUI.DependencyObject?, _ zoomMode: WinUI.ZoomMode) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetZoomMode(pThis, RawPointer(element), zoomMode))
            }
        }

        internal fn get_CanContentRenderOutsideBoundsPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_CanContentRenderOutsideBoundsProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn GetCanContentRenderOutsideBoundsImpl(_ element: WinUI.DependencyObject?) throws -> Boolean {
            var result: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetCanContentRenderOutsideBounds(pThis, RawPointer(element), &result))
            }
            return .init(from: result)
        }

        internal fn SetCanContentRenderOutsideBoundsImpl(_ element: WinUI.DependencyObject?, _ canContentRenderOutsideBounds: Boolean) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetCanContentRenderOutsideBounds(pThis, RawPointer(element), .init(from: canContentRenderOutsideBounds)))
            }
        }

        internal fn get_IsDeferredScrollingEnabledPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsDeferredScrollingEnabledProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn GetIsDeferredScrollingEnabledImpl(_ element: WinUI.DependencyObject?) throws -> Boolean {
            var result: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetIsDeferredScrollingEnabled(pThis, RawPointer(element), &result))
            }
            return .init(from: result)
        }

        internal fn SetIsDeferredScrollingEnabledImpl(_ element: WinUI.DependencyObject?, _ isDeferredScrollingEnabled: Boolean) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetIsDeferredScrollingEnabled(pThis, RawPointer(element), .init(from: isDeferredScrollingEnabled)))
            }
        }

        internal fn get_BringIntoViewOnFocusChangePropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_BringIntoViewOnFocusChangeProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn GetBringIntoViewOnFocusChangeImpl(_ element: WinUI.DependencyObject?) throws -> Boolean {
            var result: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetBringIntoViewOnFocusChange(pThis, RawPointer(element), &result))
            }
            return .init(from: result)
        }

        internal fn SetBringIntoViewOnFocusChangeImpl(_ element: WinUI.DependencyObject?, _ bringIntoViewOnFocusChange: Boolean) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerStatics.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetBringIntoViewOnFocusChange(pThis, RawPointer(element), .init(from: bringIntoViewOnFocusChange)))
            }
        }

    }

    public class IScrollViewerView: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerView }

        internal fn get_HorizontalOffsetImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_HorizontalOffset(pThis, &value))
            }
            return value
        }

        internal fn get_VerticalOffsetImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_VerticalOffset(pThis, &value))
            }
            return value
        }

        internal fn get_ZoomFactorImpl() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ZoomFactor(pThis, &value))
            }
            return value
        }

    }

    public class IScrollViewerViewChangedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerViewChangedEventArgs }

        internal fn get_IsIntermediateImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerViewChangedEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsIntermediate(pThis, &value))
            }
            return .init(from: value)
        }

    }

    public class IScrollViewerViewChangingEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerViewChangingEventArgs }

        internal fn get_NextViewImpl() throws -> WinUI.ScrollViewerView? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerViewChangingEventArgs.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_NextView(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_FinalViewImpl() throws -> WinUI.ScrollViewerView? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerViewChangingEventArgs.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_FinalView(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_IsInertialImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerViewChangingEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsInertial(pThis, &value))
            }
            return .init(from: value)
        }

    }

    public class IScrollingAnchorRequestedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingAnchorRequestedEventArgs }

        internal fn get_AnchorCandidatesImpl() throws -> WindowsFoundation.AnyIVector<WinUI.UIElement?>? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingAnchorRequestedEventArgs.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_AnchorCandidates(pThis, &valueAbi))
                }
            }
            return WinUI.__x_ABI_C__FIVector_1___x_ABI_CMicrosoft__CUI__CXaml__CUIElementWrapper.unwrapFrom(abi: value)
        }

        internal fn get_AnchorElementImpl() throws -> WinUI.UIElement? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingAnchorRequestedEventArgs.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_AnchorElement(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn put_AnchorElementImpl(_ value: WinUI.UIElement?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingAnchorRequestedEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_AnchorElement(pThis, RawPointer(value)))
            }
        }

    }

    public class IScrollingBringingIntoViewEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingBringingIntoViewEventArgs }

        internal fn get_SnapPointsModeImpl() throws -> WinUI.ScrollingSnapPointsMode {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingSnapPointsMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingBringingIntoViewEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_SnapPointsMode(pThis, &value))
            }
            return value
        }

        internal fn put_SnapPointsModeImpl(_ value: WinUI.ScrollingSnapPointsMode) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingBringingIntoViewEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_SnapPointsMode(pThis, value))
            }
        }

        internal fn get_RequestEventArgsImpl() throws -> WinUI.BringIntoViewRequestedEventArgs? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingBringingIntoViewEventArgs.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_RequestEventArgs(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_TargetHorizontalOffsetImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingBringingIntoViewEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_TargetHorizontalOffset(pThis, &value))
            }
            return value
        }

        internal fn get_TargetVerticalOffsetImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingBringingIntoViewEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_TargetVerticalOffset(pThis, &value))
            }
            return value
        }

        internal fn get_CorrelationIdImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingBringingIntoViewEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CorrelationId(pThis, &value))
            }
            return value
        }

        internal fn get_CancelImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingBringingIntoViewEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Cancel(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_CancelImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingBringingIntoViewEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Cancel(pThis, .init(from: value)))
            }
        }

    }

    public class IScrollingScrollAnimationStartingEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingScrollAnimationStartingEventArgs }

        internal fn get_AnimationImpl() throws -> WinAppSDK.CompositionAnimation? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingScrollAnimationStartingEventArgs.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Animation(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn put_AnimationImpl(_ value: WinAppSDK.CompositionAnimation?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingScrollAnimationStartingEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Animation(pThis, RawPointer(value)))
            }
        }

        internal fn get_StartPositionImpl() throws -> WindowsFoundation.Vector2 {
            var value: __x_ABI_CWindows_CFoundation_CNumerics_CVector2 = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingScrollAnimationStartingEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_StartPosition(pThis, &value))
            }
            return .from(abi: value)
        }

        internal fn get_EndPositionImpl() throws -> WindowsFoundation.Vector2 {
            var value: __x_ABI_CWindows_CFoundation_CNumerics_CVector2 = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingScrollAnimationStartingEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_EndPosition(pThis, &value))
            }
            return .from(abi: value)
        }

        internal fn get_CorrelationIdImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingScrollAnimationStartingEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CorrelationId(pThis, &value))
            }
            return value
        }

    }

    public class IScrollingScrollCompletedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingScrollCompletedEventArgs }

        internal fn get_CorrelationIdImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingScrollCompletedEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CorrelationId(pThis, &value))
            }
            return value
        }

    }

    public class IScrollingScrollOptions: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingScrollOptions }

        internal fn get_AnimationModeImpl() throws -> WinUI.ScrollingAnimationMode {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingAnimationMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingScrollOptions.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_AnimationMode(pThis, &value))
            }
            return value
        }

        internal fn put_AnimationModeImpl(_ value: WinUI.ScrollingAnimationMode) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingScrollOptions.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_AnimationMode(pThis, value))
            }
        }

        internal fn get_SnapPointsModeImpl() throws -> WinUI.ScrollingSnapPointsMode {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingSnapPointsMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingScrollOptions.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_SnapPointsMode(pThis, &value))
            }
            return value
        }

        internal fn put_SnapPointsModeImpl(_ value: WinUI.ScrollingSnapPointsMode) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingScrollOptions.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_SnapPointsMode(pThis, value))
            }
        }

    }

    public class IScrollingScrollOptionsFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingScrollOptionsFactory }

        internal fn CreateInstanceImpl(_ animationMode: WinUI.ScrollingAnimationMode, _ baseInterface: UnsealedWinRTClassWrapper<WinUI.ScrollingScrollOptions.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> IScrollingScrollOptions {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                immutable _baseInterface = baseInterface?.toIInspectableABI { $0 }
                immutable (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingScrollOptionsFactory.this) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, animationMode, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return IScrollingScrollOptions(value!)
        }

        internal fn CreateInstance2Impl(_ animationMode: WinUI.ScrollingAnimationMode, _ snapPointsMode: WinUI.ScrollingSnapPointsMode, _ baseInterface: UnsealedWinRTClassWrapper<WinUI.ScrollingScrollOptions.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> IScrollingScrollOptions {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                immutable _baseInterface = baseInterface?.toIInspectableABI { $0 }
                immutable (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingScrollOptionsFactory.this) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance2(pThis, animationMode, snapPointsMode, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return IScrollingScrollOptions(value!)
        }

    }

    public class IScrollingZoomAnimationStartingEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingZoomAnimationStartingEventArgs }

        internal fn get_CenterPointImpl() throws -> WindowsFoundation.Vector2 {
            var value: __x_ABI_CWindows_CFoundation_CNumerics_CVector2 = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingZoomAnimationStartingEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CenterPoint(pThis, &value))
            }
            return .from(abi: value)
        }

        internal fn get_StartZoomFactorImpl() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingZoomAnimationStartingEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_StartZoomFactor(pThis, &value))
            }
            return value
        }

        internal fn get_EndZoomFactorImpl() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingZoomAnimationStartingEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_EndZoomFactor(pThis, &value))
            }
            return value
        }

        internal fn get_AnimationImpl() throws -> WinAppSDK.CompositionAnimation? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingZoomAnimationStartingEventArgs.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Animation(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn put_AnimationImpl(_ value: WinAppSDK.CompositionAnimation?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingZoomAnimationStartingEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Animation(pThis, RawPointer(value)))
            }
        }

        internal fn get_CorrelationIdImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingZoomAnimationStartingEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CorrelationId(pThis, &value))
            }
            return value
        }

    }

    public class IScrollingZoomCompletedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingZoomCompletedEventArgs }

        internal fn get_CorrelationIdImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingZoomCompletedEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CorrelationId(pThis, &value))
            }
            return value
        }

    }

    public class IScrollingZoomOptions: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingZoomOptions }

        internal fn get_AnimationModeImpl() throws -> WinUI.ScrollingAnimationMode {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingAnimationMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingZoomOptions.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_AnimationMode(pThis, &value))
            }
            return value
        }

        internal fn put_AnimationModeImpl(_ value: WinUI.ScrollingAnimationMode) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingZoomOptions.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_AnimationMode(pThis, value))
            }
        }

        internal fn get_SnapPointsModeImpl() throws -> WinUI.ScrollingSnapPointsMode {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingSnapPointsMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingZoomOptions.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_SnapPointsMode(pThis, &value))
            }
            return value
        }

        internal fn put_SnapPointsModeImpl(_ value: WinUI.ScrollingSnapPointsMode) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingZoomOptions.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_SnapPointsMode(pThis, value))
            }
        }

    }

    public class IScrollingZoomOptionsFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingZoomOptionsFactory }

        internal fn CreateInstanceImpl(_ animationMode: WinUI.ScrollingAnimationMode, _ baseInterface: UnsealedWinRTClassWrapper<WinUI.ScrollingZoomOptions.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> IScrollingZoomOptions {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                immutable _baseInterface = baseInterface?.toIInspectableABI { $0 }
                immutable (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingZoomOptionsFactory.this) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, animationMode, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return IScrollingZoomOptions(value!)
        }

        internal fn CreateInstance2Impl(_ animationMode: WinUI.ScrollingAnimationMode, _ snapPointsMode: WinUI.ScrollingSnapPointsMode, _ baseInterface: UnsealedWinRTClassWrapper<WinUI.ScrollingZoomOptions.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> IScrollingZoomOptions {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                immutable _baseInterface = baseInterface?.toIInspectableABI { $0 }
                immutable (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingZoomOptionsFactory.this) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance2(pThis, animationMode, snapPointsMode, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return IScrollingZoomOptions(value!)
        }

    }

    public class ISelectionChangedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CISelectionChangedEventArgs }

        internal fn get_AddedItemsImpl() throws -> WindowsFoundation.AnyIVector<Any?>? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISelectionChangedEventArgs.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_AddedItems(pThis, &valueAbi))
                }
            }
            return WinUI.__x_ABI_C__FIVector_1_IInspectableWrapper.unwrapFrom(abi: value)
        }

        internal fn get_RemovedItemsImpl() throws -> WindowsFoundation.AnyIVector<Any?>? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISelectionChangedEventArgs.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_RemovedItems(pThis, &valueAbi))
                }
            }
            return WinUI.__x_ABI_C__FIVector_1_IInspectableWrapper.unwrapFrom(abi: value)
        }

    }

    public class ISelectionChangedEventArgsFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CISelectionChangedEventArgsFactory }

        internal fn CreateInstanceWithRemovedItemsAndAddedItemsImpl(_ removedItems: WindowsFoundation.AnyIVector<Any?>?, _ addedItems: WindowsFoundation.AnyIVector<Any?>?, _ baseInterface: UnsealedWinRTClassWrapper<WinUI.SelectionChangedEventArgs.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> ISelectionChangedEventArgs {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                immutable removedItemsWrapper = WinUI.__x_ABI_C__FIVector_1_IInspectableWrapper(removedItems)
                immutable _removedItems = try! removedItemsWrapper?.toABI { $0 }
                immutable addedItemsWrapper = WinUI.__x_ABI_C__FIVector_1_IInspectableWrapper(addedItems)
                immutable _addedItems = try! addedItemsWrapper?.toABI { $0 }
                immutable _baseInterface = baseInterface?.toIInspectableABI { $0 }
                immutable (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISelectionChangedEventArgsFactory.this) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstanceWithRemovedItemsAndAddedItems(pThis, _removedItems, _addedItems, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return ISelectionChangedEventArgs(value!)
        }

    }

    public class ISemanticZoom: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoom }

        internal fn get_ZoomedInViewImpl() throws -> WinUI.AnyISemanticZoomInformation? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoom.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ZoomedInView(pThis, &valueAbi))
                }
            }
            return __ABI_Microsoft_UI_Xaml_Controls.ISemanticZoomInformationWrapper.unwrapFrom(abi: value)
        }

        internal fn put_ZoomedInViewImpl(_ value: WinUI.AnyISemanticZoomInformation?) throws {
            immutable valueWrapper = __ABI_Microsoft_UI_Xaml_Controls.ISemanticZoomInformationWrapper(value)
            immutable _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoom.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ZoomedInView(pThis, _value))
            }
        }

        internal fn get_ZoomedOutViewImpl() throws -> WinUI.AnyISemanticZoomInformation? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoom.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ZoomedOutView(pThis, &valueAbi))
                }
            }
            return __ABI_Microsoft_UI_Xaml_Controls.ISemanticZoomInformationWrapper.unwrapFrom(abi: value)
        }

        internal fn put_ZoomedOutViewImpl(_ value: WinUI.AnyISemanticZoomInformation?) throws {
            immutable valueWrapper = __ABI_Microsoft_UI_Xaml_Controls.ISemanticZoomInformationWrapper(value)
            immutable _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoom.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ZoomedOutView(pThis, _value))
            }
        }

        internal fn get_IsZoomedInViewActiveImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoom.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsZoomedInViewActive(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_IsZoomedInViewActiveImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoom.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsZoomedInViewActive(pThis, .init(from: value)))
            }
        }

        internal fn get_CanChangeViewsImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoom.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CanChangeViews(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_CanChangeViewsImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoom.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_CanChangeViews(pThis, .init(from: value)))
            }
        }

        internal fn add_ViewChangeStartedImpl(_ handler: WinUI.SemanticZoomViewChangedEventHandler?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = __ABI_Microsoft_UI_Xaml_Controls.SemanticZoomViewChangedEventHandlerWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoom.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_ViewChangeStarted(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_ViewChangeStartedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoom.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_ViewChangeStarted(pThis, token))
            }
        }

        internal fn add_ViewChangeCompletedImpl(_ handler: WinUI.SemanticZoomViewChangedEventHandler?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = __ABI_Microsoft_UI_Xaml_Controls.SemanticZoomViewChangedEventHandlerWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoom.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_ViewChangeCompleted(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_ViewChangeCompletedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoom.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_ViewChangeCompleted(pThis, token))
            }
        }

        internal fn ToggleActiveViewImpl() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoom.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ToggleActiveView(pThis))
            }
        }

        internal fn get_IsZoomOutButtonEnabledImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoom.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsZoomOutButtonEnabled(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_IsZoomOutButtonEnabledImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoom.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsZoomOutButtonEnabled(pThis, .init(from: value)))
            }
        }

    }

    public class ISemanticZoomInformation: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoomInformation }

        open fn get_SemanticZoomOwnerImpl() throws -> WinUI.SemanticZoom? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoomInformation.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SemanticZoomOwner(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        open fn put_SemanticZoomOwnerImpl(_ value: WinUI.SemanticZoom?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoomInformation.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_SemanticZoomOwner(pThis, RawPointer(value)))
            }
        }

        open fn get_IsActiveViewImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoomInformation.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsActiveView(pThis, &value))
            }
            return .init(from: value)
        }

        open fn put_IsActiveViewImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoomInformation.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsActiveView(pThis, .init(from: value)))
            }
        }

        open fn get_IsZoomedInViewImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoomInformation.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsZoomedInView(pThis, &value))
            }
            return .init(from: value)
        }

        open fn put_IsZoomedInViewImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoomInformation.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsZoomedInView(pThis, .init(from: value)))
            }
        }

        open fn InitializeViewChangeImpl() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoomInformation.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.InitializeViewChange(pThis))
            }
        }

        open fn CompleteViewChangeImpl() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoomInformation.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.CompleteViewChange(pThis))
            }
        }

        open fn MakeVisibleImpl(_ item: WinUI.SemanticZoomLocation?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoomInformation.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.MakeVisible(pThis, RawPointer(item)))
            }
        }

        open fn StartViewChangeFromImpl(_ source: WinUI.SemanticZoomLocation?, _ destination: WinUI.SemanticZoomLocation?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoomInformation.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.StartViewChangeFrom(pThis, RawPointer(source), RawPointer(destination)))
            }
        }

        open fn StartViewChangeToImpl(_ source: WinUI.SemanticZoomLocation?, _ destination: WinUI.SemanticZoomLocation?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoomInformation.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.StartViewChangeTo(pThis, RawPointer(source), RawPointer(destination)))
            }
        }

        open fn CompleteViewChangeFromImpl(_ source: WinUI.SemanticZoomLocation?, _ destination: WinUI.SemanticZoomLocation?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoomInformation.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.CompleteViewChangeFrom(pThis, RawPointer(source), RawPointer(destination)))
            }
        }

        open fn CompleteViewChangeToImpl(_ source: WinUI.SemanticZoomLocation?, _ destination: WinUI.SemanticZoomLocation?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoomInformation.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.CompleteViewChangeTo(pThis, RawPointer(source), RawPointer(destination)))
            }
        }

    }

    internal static var ISemanticZoomInformationVTable: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoomInformationVtbl = .init(
        QueryInterface: { ISemanticZoomInformationWrapper.queryInterface($0, $1, $2) },
        AddRef: { ISemanticZoomInformationWrapper.addRef($0) },
        Release: { ISemanticZoomInformationWrapper.release($0) },
        GetIids: {
            immutable size = MemoryLayout<WindowsFoundation.IID>.size
            immutable iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.this)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Microsoft_UI_Xaml_Controls.ISemanticZoomInformationWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            immutable hstring = try! HString("Microsoft.UI.Xaml.Controls.ISemanticZoomInformation").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        get_SemanticZoomOwner: {
            guard immutable __unwrapped__instance = ISemanticZoomInformationWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            immutable value = __unwrapped__instance.semanticZoomOwner
            value?.copyTo($1)
            return S_OK
        },

        put_SemanticZoomOwner: {
            guard immutable __unwrapped__instance = ISemanticZoomInformationWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            immutable value: WinUI.SemanticZoom? = .from(abi: ComPtr($1))
            __unwrapped__instance.semanticZoomOwner = value
            return S_OK
        },

        get_IsActiveView: {
            guard immutable __unwrapped__instance = ISemanticZoomInformationWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            immutable value = __unwrapped__instance.isActiveView
            $1?.initialize(to: .init(from: value))
            return S_OK
        },

        put_IsActiveView: {
            guard immutable __unwrapped__instance = ISemanticZoomInformationWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            immutable value: Boolean = .init(from: $1)
            __unwrapped__instance.isActiveView = value
            return S_OK
        },

        get_IsZoomedInView: {
            guard immutable __unwrapped__instance = ISemanticZoomInformationWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            immutable value = __unwrapped__instance.isZoomedInView
            $1?.initialize(to: .init(from: value))
            return S_OK
        },

        put_IsZoomedInView: {
            guard immutable __unwrapped__instance = ISemanticZoomInformationWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            immutable value: Boolean = .init(from: $1)
            __unwrapped__instance.isZoomedInView = value
            return S_OK
        },

        InitializeViewChange: {
            do {
                guard immutable __unwrapped__instance = ISemanticZoomInformationWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                try __unwrapped__instance.initializeViewChange()
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        CompleteViewChange: {
            do {
                guard immutable __unwrapped__instance = ISemanticZoomInformationWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                try __unwrapped__instance.completeViewChange()
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        MakeVisible: {
            do {
                guard immutable __unwrapped__instance = ISemanticZoomInformationWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                immutable item: WinUI.SemanticZoomLocation? = .from(abi: ComPtr($1))
                try __unwrapped__instance.makeVisible(item)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        StartViewChangeFrom: {
            do {
                guard immutable __unwrapped__instance = ISemanticZoomInformationWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                immutable source: WinUI.SemanticZoomLocation? = .from(abi: ComPtr($1))
                immutable destination: WinUI.SemanticZoomLocation? = .from(abi: ComPtr($2))
                try __unwrapped__instance.startViewChangeFrom(source, destination)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        StartViewChangeTo: {
            do {
                guard immutable __unwrapped__instance = ISemanticZoomInformationWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                immutable source: WinUI.SemanticZoomLocation? = .from(abi: ComPtr($1))
                immutable destination: WinUI.SemanticZoomLocation? = .from(abi: ComPtr($2))
                try __unwrapped__instance.startViewChangeTo(source, destination)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        CompleteViewChangeFrom: {
            do {
                guard immutable __unwrapped__instance = ISemanticZoomInformationWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                immutable source: WinUI.SemanticZoomLocation? = .from(abi: ComPtr($1))
                immutable destination: WinUI.SemanticZoomLocation? = .from(abi: ComPtr($2))
                try __unwrapped__instance.completeViewChangeFrom(source, destination)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        CompleteViewChangeTo: {
            do {
                guard immutable __unwrapped__instance = ISemanticZoomInformationWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                immutable source: WinUI.SemanticZoomLocation? = .from(abi: ComPtr($1))
                immutable destination: WinUI.SemanticZoomLocation? = .from(abi: ComPtr($2))
                try __unwrapped__instance.completeViewChangeTo(source, destination)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        }
    )

    public typealias ISemanticZoomInformationWrapper = InterfaceWrapperBase<__IMPL_Microsoft_UI_Xaml_Controls.ISemanticZoomInformationBridge>
    public class ISemanticZoomLocation: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoomLocation }

        internal fn get_ItemImpl() throws -> Any? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoomLocation.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Item(pThis, &valueAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: value)
        }

        internal fn put_ItemImpl(_ value: Any?) throws {
            immutable valueWrapper = __ABI_.AnyWrapper(value)
            immutable _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoomLocation.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Item(pThis, _value))
            }
        }

        internal fn get_BoundsImpl() throws -> WindowsFoundation.Rect {
            var value: __x_ABI_CWindows_CFoundation_CRect = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoomLocation.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Bounds(pThis, &value))
            }
            return .from(abi: value)
        }

        internal fn put_BoundsImpl(_ value: WindowsFoundation.Rect) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoomLocation.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Bounds(pThis, .from(swift: value)))
            }
        }

    }

    public class ISemanticZoomStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoomStatics }

        internal fn get_ZoomedInViewPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoomStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ZoomedInViewProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_ZoomedOutViewPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoomStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ZoomedOutViewProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_IsZoomedInViewActivePropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoomStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsZoomedInViewActiveProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_CanChangeViewsPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoomStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_CanChangeViewsProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_IsZoomOutButtonEnabledPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoomStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsZoomOutButtonEnabledProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class ISemanticZoomViewChangedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoomViewChangedEventArgs }

        internal fn get_IsSourceZoomedInViewImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoomViewChangedEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsSourceZoomedInView(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_IsSourceZoomedInViewImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoomViewChangedEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsSourceZoomedInView(pThis, .init(from: value)))
            }
        }

        internal fn get_SourceItemImpl() throws -> WinUI.SemanticZoomLocation? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoomViewChangedEventArgs.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SourceItem(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn put_SourceItemImpl(_ value: WinUI.SemanticZoomLocation?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoomViewChangedEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_SourceItem(pThis, RawPointer(value)))
            }
        }

        internal fn get_DestinationItemImpl() throws -> WinUI.SemanticZoomLocation? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoomViewChangedEventArgs.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_DestinationItem(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn put_DestinationItemImpl(_ value: WinUI.SemanticZoomLocation?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoomViewChangedEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_DestinationItem(pThis, RawPointer(value)))
            }
        }

    }

    public class ISlider: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CISlider }

        internal fn get_IntermediateValueImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISlider.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IntermediateValue(pThis, &value))
            }
            return value
        }

        internal fn put_IntermediateValueImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISlider.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IntermediateValue(pThis, value))
            }
        }

        internal fn get_StepFrequencyImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISlider.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_StepFrequency(pThis, &value))
            }
            return value
        }

        internal fn put_StepFrequencyImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISlider.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_StepFrequency(pThis, value))
            }
        }

        internal fn get_SnapsToImpl() throws -> WinUI.SliderSnapsTo {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CSliderSnapsTo = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISlider.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_SnapsTo(pThis, &value))
            }
            return value
        }

        internal fn put_SnapsToImpl(_ value: WinUI.SliderSnapsTo) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISlider.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_SnapsTo(pThis, value))
            }
        }

        internal fn get_TickFrequencyImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISlider.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_TickFrequency(pThis, &value))
            }
            return value
        }

        internal fn put_TickFrequencyImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISlider.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_TickFrequency(pThis, value))
            }
        }

        internal fn get_TickPlacementImpl() throws -> WinUI.TickPlacement {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CTickPlacement = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISlider.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_TickPlacement(pThis, &value))
            }
            return value
        }

        internal fn put_TickPlacementImpl(_ value: WinUI.TickPlacement) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISlider.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_TickPlacement(pThis, value))
            }
        }

        internal fn get_OrientationImpl() throws -> WinUI.Orientation {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_COrientation = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISlider.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Orientation(pThis, &value))
            }
            return value
        }

        internal fn put_OrientationImpl(_ value: WinUI.Orientation) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISlider.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Orientation(pThis, value))
            }
        }

        internal fn get_IsDirectionReversedImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISlider.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsDirectionReversed(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_IsDirectionReversedImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISlider.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsDirectionReversed(pThis, .init(from: value)))
            }
        }

        internal fn get_IsThumbToolTipEnabledImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISlider.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsThumbToolTipEnabled(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_IsThumbToolTipEnabledImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISlider.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsThumbToolTipEnabled(pThis, .init(from: value)))
            }
        }

        internal fn get_ThumbToolTipValueConverterImpl() throws -> WinUI.AnyIValueConverter? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISlider.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ThumbToolTipValueConverter(pThis, &valueAbi))
                }
            }
            return __ABI_Microsoft_UI_Xaml_Data.IValueConverterWrapper.unwrapFrom(abi: value)
        }

        internal fn put_ThumbToolTipValueConverterImpl(_ value: WinUI.AnyIValueConverter?) throws {
            immutable valueWrapper = __ABI_Microsoft_UI_Xaml_Data.IValueConverterWrapper(value)
            immutable _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISlider.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ThumbToolTipValueConverter(pThis, _value))
            }
        }

        internal fn get_HeaderImpl() throws -> Any? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISlider.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Header(pThis, &valueAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: value)
        }

        internal fn put_HeaderImpl(_ value: Any?) throws {
            immutable valueWrapper = __ABI_.AnyWrapper(value)
            immutable _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISlider.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Header(pThis, _value))
            }
        }

        internal fn get_HeaderTemplateImpl() throws -> WinUI.DataTemplate? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISlider.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_HeaderTemplate(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn put_HeaderTemplateImpl(_ value: WinUI.DataTemplate?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISlider.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_HeaderTemplate(pThis, RawPointer(value)))
            }
        }

    }

    public class ISliderFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CISliderFactory }

        internal fn CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<WinUI.Slider.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> ISlider {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                immutable _baseInterface = baseInterface?.toIInspectableABI { $0 }
                immutable (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISliderFactory.this) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return ISlider(value!)
        }

    }

    public class ISliderStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CISliderStatics }

        internal fn get_IntermediateValuePropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISliderStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IntermediateValueProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_StepFrequencyPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISliderStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_StepFrequencyProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_SnapsToPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISliderStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SnapsToProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_TickFrequencyPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISliderStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_TickFrequencyProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_TickPlacementPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISliderStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_TickPlacementProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_OrientationPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISliderStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_OrientationProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_IsDirectionReversedPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISliderStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsDirectionReversedProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_IsThumbToolTipEnabledPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISliderStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsThumbToolTipEnabledProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_ThumbToolTipValueConverterPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISliderStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ThumbToolTipValueConverterProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_HeaderPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISliderStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_HeaderProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_HeaderTemplatePropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISliderStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_HeaderTemplateProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class ISplitView: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CISplitView }

        internal fn get_ContentImpl() throws -> WinUI.UIElement? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISplitView.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Content(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn put_ContentImpl(_ value: WinUI.UIElement?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISplitView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Content(pThis, RawPointer(value)))
            }
        }

        internal fn get_PaneImpl() throws -> WinUI.UIElement? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISplitView.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Pane(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn put_PaneImpl(_ value: WinUI.UIElement?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISplitView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Pane(pThis, RawPointer(value)))
            }
        }

        internal fn get_IsPaneOpenImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISplitView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsPaneOpen(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_IsPaneOpenImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISplitView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsPaneOpen(pThis, .init(from: value)))
            }
        }

        internal fn get_OpenPaneLengthImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISplitView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_OpenPaneLength(pThis, &value))
            }
            return value
        }

        internal fn put_OpenPaneLengthImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISplitView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_OpenPaneLength(pThis, value))
            }
        }

        internal fn get_CompactPaneLengthImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISplitView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CompactPaneLength(pThis, &value))
            }
            return value
        }

        internal fn put_CompactPaneLengthImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISplitView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_CompactPaneLength(pThis, value))
            }
        }

        internal fn get_PanePlacementImpl() throws -> WinUI.SplitViewPanePlacement {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSplitViewPanePlacement = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISplitView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PanePlacement(pThis, &value))
            }
            return value
        }

        internal fn put_PanePlacementImpl(_ value: WinUI.SplitViewPanePlacement) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISplitView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_PanePlacement(pThis, value))
            }
        }

        internal fn get_DisplayModeImpl() throws -> WinUI.SplitViewDisplayMode {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSplitViewDisplayMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISplitView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DisplayMode(pThis, &value))
            }
            return value
        }

        internal fn put_DisplayModeImpl(_ value: WinUI.SplitViewDisplayMode) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISplitView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_DisplayMode(pThis, value))
            }
        }

        internal fn get_TemplateSettingsImpl() throws -> WinUI.SplitViewTemplateSettings? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISplitView.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_TemplateSettings(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_PaneBackgroundImpl() throws -> WinUI.Brush? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISplitView.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_PaneBackground(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn put_PaneBackgroundImpl(_ value: WinUI.Brush?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISplitView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_PaneBackground(pThis, RawPointer(value)))
            }
        }

        internal fn get_LightDismissOverlayModeImpl() throws -> WinUI.LightDismissOverlayMode {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CLightDismissOverlayMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISplitView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_LightDismissOverlayMode(pThis, &value))
            }
            return value
        }

        internal fn put_LightDismissOverlayModeImpl(_ value: WinUI.LightDismissOverlayMode) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISplitView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_LightDismissOverlayMode(pThis, value))
            }
        }

        internal fn add_PaneClosingImpl(_ handler: TypedEventHandler<WinUI.SplitView?, WinUI.SplitViewPaneClosingEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CSplitView___x_ABI_CMicrosoft__CUI__CXaml__CControls__CSplitViewPaneClosingEventArgsWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISplitView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_PaneClosing(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_PaneClosingImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISplitView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_PaneClosing(pThis, token))
            }
        }

        internal fn add_PaneClosedImpl(_ handler: TypedEventHandler<WinUI.SplitView?, Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CSplitView_IInspectableWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISplitView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_PaneClosed(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_PaneClosedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISplitView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_PaneClosed(pThis, token))
            }
        }

        internal fn add_PaneOpeningImpl(_ handler: TypedEventHandler<WinUI.SplitView?, Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CSplitView_IInspectableWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISplitView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_PaneOpening(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_PaneOpeningImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISplitView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_PaneOpening(pThis, token))
            }
        }

        internal fn add_PaneOpenedImpl(_ handler: TypedEventHandler<WinUI.SplitView?, Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CSplitView_IInspectableWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISplitView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_PaneOpened(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_PaneOpenedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISplitView.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_PaneOpened(pThis, token))
            }
        }

    }

    public class ISplitViewFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CISplitViewFactory }

        internal fn CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<WinUI.SplitView.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> ISplitView {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                immutable _baseInterface = baseInterface?.toIInspectableABI { $0 }
                immutable (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISplitViewFactory.this) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return ISplitView(value!)
        }

    }

    public class ISplitViewPaneClosingEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CISplitViewPaneClosingEventArgs }

        internal fn get_CancelImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISplitViewPaneClosingEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Cancel(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_CancelImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISplitViewPaneClosingEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Cancel(pThis, .init(from: value)))
            }
        }

    }

    public class ISplitViewStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CISplitViewStatics }

        internal fn get_ContentPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISplitViewStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ContentProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_PanePropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISplitViewStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_PaneProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_IsPaneOpenPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISplitViewStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsPaneOpenProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_OpenPaneLengthPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISplitViewStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_OpenPaneLengthProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_CompactPaneLengthPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISplitViewStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_CompactPaneLengthProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_PanePlacementPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISplitViewStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_PanePlacementProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_DisplayModePropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISplitViewStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_DisplayModeProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_TemplateSettingsPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISplitViewStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_TemplateSettingsProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_PaneBackgroundPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISplitViewStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_PaneBackgroundProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_LightDismissOverlayModePropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISplitViewStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_LightDismissOverlayModeProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IStyleSelector: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIStyleSelector }

        internal fn SelectStyleImpl(_ item: Any?, _ container: WinUI.DependencyObject?) throws -> WinUI.Style? {
            immutable (result) = try ComPtrs.initialize { resultAbi in
                immutable itemWrapper = __ABI_.AnyWrapper(item)
                immutable _item = try! itemWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIStyleSelector.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.SelectStyle(pThis, _item, RawPointer(container), &resultAbi))
                }
            }
            return .from(abi: result)
        }

    }

    public class IStyleSelectorFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIStyleSelectorFactory }

        internal fn CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<WinUI.StyleSelector.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> IStyleSelector {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                immutable _baseInterface = baseInterface?.toIInspectableABI { $0 }
                immutable (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIStyleSelectorFactory.this) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return IStyleSelector(value!)
        }

    }

    public class IStyleSelectorOverrides: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIStyleSelectorOverrides }

        internal fn SelectStyleCoreImpl(_ item: Any?, _ container: WinUI.DependencyObject?) throws -> WinUI.Style? {
            immutable (result) = try ComPtrs.initialize { resultAbi in
                immutable itemWrapper = __ABI_.AnyWrapper(item)
                immutable _item = try! itemWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIStyleSelectorOverrides.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.SelectStyleCore(pThis, _item, RawPointer(container), &resultAbi))
                }
            }
            return .from(abi: result)
        }

    }

    public class ITextBlock: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock }

        internal fn get_FontSizeImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontSize(pThis, &value))
            }
            return value
        }

        internal fn put_FontSizeImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_FontSize(pThis, value))
            }
        }

        internal fn get_FontFamilyImpl() throws -> WinUI.FontFamily? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontFamily(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn put_FontFamilyImpl(_ value: WinUI.FontFamily?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_FontFamily(pThis, RawPointer(value)))
            }
        }

        internal fn get_FontWeightImpl() throws -> UWP.FontWeight {
            var value: __x_ABI_CWindows_CUI_CText_CFontWeight = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontWeight(pThis, &value))
            }
            return .from(abi: value)
        }

        internal fn put_FontWeightImpl(_ value: UWP.FontWeight) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_FontWeight(pThis, .from(swift: value)))
            }
        }

        internal fn get_FontStyleImpl() throws -> UWP.FontStyle {
            var value: __x_ABI_CWindows_CUI_CText_CFontStyle = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontStyle(pThis, &value))
            }
            return value
        }

        internal fn put_FontStyleImpl(_ value: UWP.FontStyle) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_FontStyle(pThis, value))
            }
        }

        internal fn get_FontStretchImpl() throws -> UWP.FontStretch {
            var value: __x_ABI_CWindows_CUI_CText_CFontStretch = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontStretch(pThis, &value))
            }
            return value
        }

        internal fn put_FontStretchImpl(_ value: UWP.FontStretch) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_FontStretch(pThis, value))
            }
        }

        internal fn get_CharacterSpacingImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CharacterSpacing(pThis, &value))
            }
            return value
        }

        internal fn put_CharacterSpacingImpl(_ value: Int32) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_CharacterSpacing(pThis, value))
            }
        }

        internal fn get_ForegroundImpl() throws -> WinUI.Brush? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Foreground(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn put_ForegroundImpl(_ value: WinUI.Brush?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Foreground(pThis, RawPointer(value)))
            }
        }

        internal fn get_TextWrappingImpl() throws -> WinUI.TextWrapping {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CTextWrapping = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_TextWrapping(pThis, &value))
            }
            return value
        }

        internal fn put_TextWrappingImpl(_ value: WinUI.TextWrapping) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_TextWrapping(pThis, value))
            }
        }

        internal fn get_TextTrimmingImpl() throws -> WinUI.TextTrimming {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CTextTrimming = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_TextTrimming(pThis, &value))
            }
            return value
        }

        internal fn put_TextTrimmingImpl(_ value: WinUI.TextTrimming) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_TextTrimming(pThis, value))
            }
        }

        internal fn get_TextAlignmentImpl() throws -> WinUI.TextAlignment {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CTextAlignment = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_TextAlignment(pThis, &value))
            }
            return value
        }

        internal fn put_TextAlignmentImpl(_ value: WinUI.TextAlignment) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_TextAlignment(pThis, value))
            }
        }

        internal fn get_TextImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Text(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_TextImpl(_ value: String) throws {
            immutable _value = try! HString(value)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Text(pThis, _value.get()))
            }
        }

        internal fn get_InlinesImpl() throws -> WinUI.InlineCollection? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Inlines(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_PaddingImpl() throws -> WinUI.Thickness {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CThickness = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Padding(pThis, &value))
            }
            return .from(abi: value)
        }

        internal fn put_PaddingImpl(_ value: WinUI.Thickness) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Padding(pThis, .from(swift: value)))
            }
        }

        internal fn get_LineHeightImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_LineHeight(pThis, &value))
            }
            return value
        }

        internal fn put_LineHeightImpl(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_LineHeight(pThis, value))
            }
        }

        internal fn get_LineStackingStrategyImpl() throws -> WinUI.LineStackingStrategy {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CLineStackingStrategy = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_LineStackingStrategy(pThis, &value))
            }
            return value
        }

        internal fn put_LineStackingStrategyImpl(_ value: WinUI.LineStackingStrategy) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_LineStackingStrategy(pThis, value))
            }
        }

        internal fn get_IsTextSelectionEnabledImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsTextSelectionEnabled(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_IsTextSelectionEnabledImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsTextSelectionEnabled(pThis, .init(from: value)))
            }
        }

        internal fn get_SelectedTextImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_SelectedText(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn get_ContentStartImpl() throws -> WinUI.TextPointer? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ContentStart(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_ContentEndImpl() throws -> WinUI.TextPointer? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ContentEnd(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_SelectionStartImpl() throws -> WinUI.TextPointer? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SelectionStart(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_SelectionEndImpl() throws -> WinUI.TextPointer? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SelectionEnd(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_BaselineOffsetImpl() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_BaselineOffset(pThis, &value))
            }
            return value
        }

        internal fn get_SelectionHighlightColorImpl() throws -> WinUI.SolidColorBrush? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SelectionHighlightColor(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn put_SelectionHighlightColorImpl(_ value: WinUI.SolidColorBrush?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_SelectionHighlightColor(pThis, RawPointer(value)))
            }
        }

        internal fn get_MaxLinesImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_MaxLines(pThis, &value))
            }
            return value
        }

        internal fn put_MaxLinesImpl(_ value: Int32) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_MaxLines(pThis, value))
            }
        }

        internal fn get_TextLineBoundsImpl() throws -> WinUI.TextLineBounds {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CTextLineBounds = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_TextLineBounds(pThis, &value))
            }
            return value
        }

        internal fn put_TextLineBoundsImpl(_ value: WinUI.TextLineBounds) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_TextLineBounds(pThis, value))
            }
        }

        internal fn get_OpticalMarginAlignmentImpl() throws -> WinUI.OpticalMarginAlignment {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_COpticalMarginAlignment = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_OpticalMarginAlignment(pThis, &value))
            }
            return value
        }

        internal fn put_OpticalMarginAlignmentImpl(_ value: WinUI.OpticalMarginAlignment) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_OpticalMarginAlignment(pThis, value))
            }
        }

        internal fn get_IsColorFontEnabledImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsColorFontEnabled(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_IsColorFontEnabledImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsColorFontEnabled(pThis, .init(from: value)))
            }
        }

        internal fn get_TextReadingOrderImpl() throws -> WinUI.TextReadingOrder {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CTextReadingOrder = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_TextReadingOrder(pThis, &value))
            }
            return value
        }

        internal fn put_TextReadingOrderImpl(_ value: WinUI.TextReadingOrder) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_TextReadingOrder(pThis, value))
            }
        }

        internal fn get_IsTextScaleFactorEnabledImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsTextScaleFactorEnabled(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_IsTextScaleFactorEnabledImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsTextScaleFactorEnabled(pThis, .init(from: value)))
            }
        }

        internal fn get_TextDecorationsImpl() throws -> UWP.TextDecorations {
            var value: __x_ABI_CWindows_CUI_CText_CTextDecorations = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_TextDecorations(pThis, &value))
            }
            return value
        }

        internal fn put_TextDecorationsImpl(_ value: UWP.TextDecorations) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_TextDecorations(pThis, value))
            }
        }

        internal fn get_IsTextTrimmedImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsTextTrimmed(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn get_HorizontalTextAlignmentImpl() throws -> WinUI.TextAlignment {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CTextAlignment = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_HorizontalTextAlignment(pThis, &value))
            }
            return value
        }

        internal fn put_HorizontalTextAlignmentImpl(_ value: WinUI.TextAlignment) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_HorizontalTextAlignment(pThis, value))
            }
        }

        internal fn get_TextHighlightersImpl() throws -> WindowsFoundation.AnyIVector<WinUI.TextHighlighter?>? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_TextHighlighters(pThis, &valueAbi))
                }
            }
            return WinUI.__x_ABI_C__FIVector_1___x_ABI_CMicrosoft__CUI__CXaml__CDocuments__CTextHighlighterWrapper.unwrapFrom(abi: value)
        }

        internal fn get_SelectionFlyoutImpl() throws -> WinUI.FlyoutBase? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SelectionFlyout(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn put_SelectionFlyoutImpl(_ value: WinUI.FlyoutBase?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_SelectionFlyout(pThis, RawPointer(value)))
            }
        }

        internal fn add_SelectionChangedImpl(_ handler: WinUI.RoutedEventHandler?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = __ABI_Microsoft_UI_Xaml.RoutedEventHandlerWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_SelectionChanged(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_SelectionChangedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_SelectionChanged(pThis, token))
            }
        }

        internal fn add_ContextMenuOpeningImpl(_ handler: WinUI.ContextMenuOpeningEventHandler?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = __ABI_Microsoft_UI_Xaml_Controls.ContextMenuOpeningEventHandlerWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_ContextMenuOpening(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_ContextMenuOpeningImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_ContextMenuOpening(pThis, token))
            }
        }

        internal fn add_IsTextTrimmedChangedImpl(_ handler: TypedEventHandler<WinUI.TextBlock?, WinUI.IsTextTrimmedChangedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CTextBlock___x_ABI_CMicrosoft__CUI__CXaml__CControls__CIsTextTrimmedChangedEventArgsWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_IsTextTrimmedChanged(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_IsTextTrimmedChangedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_IsTextTrimmedChanged(pThis, token))
            }
        }

        internal fn SelectAllImpl() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SelectAll(pThis))
            }
        }

        internal fn SelectImpl(_ start: WinUI.TextPointer?, _ end: WinUI.TextPointer?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Select(pThis, RawPointer(start), RawPointer(end)))
            }
        }

        internal fn GetAlphaMaskImpl() throws -> WinAppSDK.CompositionBrush? {
            immutable (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetAlphaMask(pThis, &resultAbi))
                }
            }
            return .from(abi: result)
        }

        internal fn CopySelectionToClipboardImpl() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.CopySelectionToClipboard(pThis))
            }
        }

    }

    public class ITextBlockStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics }

        internal fn get_FontSizePropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontSizeProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_FontFamilyPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontFamilyProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_FontWeightPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontWeightProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_FontStylePropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontStyleProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_FontStretchPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontStretchProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_CharacterSpacingPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_CharacterSpacingProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_ForegroundPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ForegroundProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_TextWrappingPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_TextWrappingProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_TextTrimmingPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_TextTrimmingProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_TextAlignmentPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_TextAlignmentProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_TextPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_TextProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_PaddingPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_PaddingProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_LineHeightPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_LineHeightProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_LineStackingStrategyPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_LineStackingStrategyProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_IsTextSelectionEnabledPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsTextSelectionEnabledProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_SelectedTextPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SelectedTextProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_SelectionHighlightColorPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SelectionHighlightColorProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_MaxLinesPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_MaxLinesProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_TextLineBoundsPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_TextLineBoundsProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_OpticalMarginAlignmentPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_OpticalMarginAlignmentProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_IsColorFontEnabledPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsColorFontEnabledProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_TextReadingOrderPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_TextReadingOrderProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_IsTextScaleFactorEnabledPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsTextScaleFactorEnabledProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_TextDecorationsPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_TextDecorationsProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_IsTextTrimmedPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsTextTrimmedProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_HorizontalTextAlignmentPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_HorizontalTextAlignmentProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_SelectionFlyoutPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SelectionFlyoutProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class ITextBox: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox }

        internal fn get_TextImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Text(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_TextImpl(_ value: String) throws {
            immutable _value = try! HString(value)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Text(pThis, _value.get()))
            }
        }

        internal fn get_SelectedTextImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_SelectedText(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_SelectedTextImpl(_ value: String) throws {
            immutable _value = try! HString(value)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_SelectedText(pThis, _value.get()))
            }
        }

        internal fn get_SelectionLengthImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_SelectionLength(pThis, &value))
            }
            return value
        }

        internal fn put_SelectionLengthImpl(_ value: Int32) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_SelectionLength(pThis, value))
            }
        }

        internal fn get_SelectionStartImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_SelectionStart(pThis, &value))
            }
            return value
        }

        internal fn put_SelectionStartImpl(_ value: Int32) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_SelectionStart(pThis, value))
            }
        }

        internal fn get_MaxLengthImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_MaxLength(pThis, &value))
            }
            return value
        }

        internal fn put_MaxLengthImpl(_ value: Int32) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_MaxLength(pThis, value))
            }
        }

        internal fn get_IsReadOnlyImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsReadOnly(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_IsReadOnlyImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsReadOnly(pThis, .init(from: value)))
            }
        }

        internal fn get_AcceptsReturnImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_AcceptsReturn(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_AcceptsReturnImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_AcceptsReturn(pThis, .init(from: value)))
            }
        }

        internal fn get_TextAlignmentImpl() throws -> WinUI.TextAlignment {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CTextAlignment = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_TextAlignment(pThis, &value))
            }
            return value
        }

        internal fn put_TextAlignmentImpl(_ value: WinUI.TextAlignment) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_TextAlignment(pThis, value))
            }
        }

        internal fn get_TextWrappingImpl() throws -> WinUI.TextWrapping {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CTextWrapping = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_TextWrapping(pThis, &value))
            }
            return value
        }

        internal fn put_TextWrappingImpl(_ value: WinUI.TextWrapping) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_TextWrapping(pThis, value))
            }
        }

        internal fn get_IsSpellCheckEnabledImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsSpellCheckEnabled(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_IsSpellCheckEnabledImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsSpellCheckEnabled(pThis, .init(from: value)))
            }
        }

        internal fn get_IsTextPredictionEnabledImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsTextPredictionEnabled(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_IsTextPredictionEnabledImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsTextPredictionEnabled(pThis, .init(from: value)))
            }
        }

        internal fn get_InputScopeImpl() throws -> WinUI.InputScope? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_InputScope(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn put_InputScopeImpl(_ value: WinUI.InputScope?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_InputScope(pThis, RawPointer(value)))
            }
        }

        internal fn get_HeaderImpl() throws -> Any? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Header(pThis, &valueAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: value)
        }

        internal fn put_HeaderImpl(_ value: Any?) throws {
            immutable valueWrapper = __ABI_.AnyWrapper(value)
            immutable _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Header(pThis, _value))
            }
        }

        internal fn get_HeaderTemplateImpl() throws -> WinUI.DataTemplate? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_HeaderTemplate(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn put_HeaderTemplateImpl(_ value: WinUI.DataTemplate?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_HeaderTemplate(pThis, RawPointer(value)))
            }
        }

        internal fn get_PlaceholderTextImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PlaceholderText(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_PlaceholderTextImpl(_ value: String) throws {
            immutable _value = try! HString(value)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_PlaceholderText(pThis, _value.get()))
            }
        }

        internal fn get_SelectionHighlightColorImpl() throws -> WinUI.SolidColorBrush? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SelectionHighlightColor(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn put_SelectionHighlightColorImpl(_ value: WinUI.SolidColorBrush?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_SelectionHighlightColor(pThis, RawPointer(value)))
            }
        }

        internal fn get_PreventKeyboardDisplayOnProgrammaticFocusImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PreventKeyboardDisplayOnProgrammaticFocus(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_PreventKeyboardDisplayOnProgrammaticFocusImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_PreventKeyboardDisplayOnProgrammaticFocus(pThis, .init(from: value)))
            }
        }

        internal fn get_IsColorFontEnabledImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsColorFontEnabled(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_IsColorFontEnabledImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsColorFontEnabled(pThis, .init(from: value)))
            }
        }

        internal fn get_SelectionHighlightColorWhenNotFocusedImpl() throws -> WinUI.SolidColorBrush? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SelectionHighlightColorWhenNotFocused(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn put_SelectionHighlightColorWhenNotFocusedImpl(_ value: WinUI.SolidColorBrush?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_SelectionHighlightColorWhenNotFocused(pThis, RawPointer(value)))
            }
        }

        internal fn get_HorizontalTextAlignmentImpl() throws -> WinUI.TextAlignment {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CTextAlignment = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_HorizontalTextAlignment(pThis, &value))
            }
            return value
        }

        internal fn put_HorizontalTextAlignmentImpl(_ value: WinUI.TextAlignment) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_HorizontalTextAlignment(pThis, value))
            }
        }

        internal fn get_CharacterCasingImpl() throws -> WinUI.CharacterCasing {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CCharacterCasing = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CharacterCasing(pThis, &value))
            }
            return value
        }

        internal fn put_CharacterCasingImpl(_ value: WinUI.CharacterCasing) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_CharacterCasing(pThis, value))
            }
        }

        internal fn get_PlaceholderForegroundImpl() throws -> WinUI.Brush? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_PlaceholderForeground(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn put_PlaceholderForegroundImpl(_ value: WinUI.Brush?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_PlaceholderForeground(pThis, RawPointer(value)))
            }
        }

        internal fn get_CanPasteClipboardContentImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CanPasteClipboardContent(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn get_CanUndoImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CanUndo(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn get_CanRedoImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CanRedo(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn get_SelectionFlyoutImpl() throws -> WinUI.FlyoutBase? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SelectionFlyout(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn put_SelectionFlyoutImpl(_ value: WinUI.FlyoutBase?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_SelectionFlyout(pThis, RawPointer(value)))
            }
        }

        internal fn get_ProofingMenuFlyoutImpl() throws -> WinUI.FlyoutBase? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ProofingMenuFlyout(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_DescriptionImpl() throws -> Any? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Description(pThis, &valueAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: value)
        }

        internal fn put_DescriptionImpl(_ value: Any?) throws {
            immutable valueWrapper = __ABI_.AnyWrapper(value)
            immutable _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Description(pThis, _value))
            }
        }

        internal fn add_TextChangedImpl(_ handler: WinUI.TextChangedEventHandler?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = __ABI_Microsoft_UI_Xaml_Controls.TextChangedEventHandlerWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_TextChanged(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_TextChangedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_TextChanged(pThis, token))
            }
        }

        internal fn add_SelectionChangedImpl(_ handler: WinUI.RoutedEventHandler?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = __ABI_Microsoft_UI_Xaml.RoutedEventHandlerWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_SelectionChanged(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_SelectionChangedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_SelectionChanged(pThis, token))
            }
        }

        internal fn add_ContextMenuOpeningImpl(_ handler: WinUI.ContextMenuOpeningEventHandler?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = __ABI_Microsoft_UI_Xaml_Controls.ContextMenuOpeningEventHandlerWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_ContextMenuOpening(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_ContextMenuOpeningImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_ContextMenuOpening(pThis, token))
            }
        }

        internal fn add_PasteImpl(_ handler: WinUI.TextControlPasteEventHandler?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = __ABI_Microsoft_UI_Xaml_Controls.TextControlPasteEventHandlerWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_Paste(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_PasteImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Paste(pThis, token))
            }
        }

        internal fn add_TextCompositionStartedImpl(_ handler: TypedEventHandler<WinUI.TextBox?, WinUI.TextCompositionStartedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CTextBox___x_ABI_CMicrosoft__CUI__CXaml__CControls__CTextCompositionStartedEventArgsWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_TextCompositionStarted(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_TextCompositionStartedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_TextCompositionStarted(pThis, token))
            }
        }

        internal fn add_TextCompositionChangedImpl(_ handler: TypedEventHandler<WinUI.TextBox?, WinUI.TextCompositionChangedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CTextBox___x_ABI_CMicrosoft__CUI__CXaml__CControls__CTextCompositionChangedEventArgsWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_TextCompositionChanged(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_TextCompositionChangedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_TextCompositionChanged(pThis, token))
            }
        }

        internal fn add_TextCompositionEndedImpl(_ handler: TypedEventHandler<WinUI.TextBox?, WinUI.TextCompositionEndedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CTextBox___x_ABI_CMicrosoft__CUI__CXaml__CControls__CTextCompositionEndedEventArgsWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_TextCompositionEnded(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_TextCompositionEndedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_TextCompositionEnded(pThis, token))
            }
        }

        internal fn add_CopyingToClipboardImpl(_ handler: TypedEventHandler<WinUI.TextBox?, WinUI.TextControlCopyingToClipboardEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CTextBox___x_ABI_CMicrosoft__CUI__CXaml__CControls__CTextControlCopyingToClipboardEventArgsWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_CopyingToClipboard(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_CopyingToClipboardImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_CopyingToClipboard(pThis, token))
            }
        }

        internal fn add_CuttingToClipboardImpl(_ handler: TypedEventHandler<WinUI.TextBox?, WinUI.TextControlCuttingToClipboardEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CTextBox___x_ABI_CMicrosoft__CUI__CXaml__CControls__CTextControlCuttingToClipboardEventArgsWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_CuttingToClipboard(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_CuttingToClipboardImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_CuttingToClipboard(pThis, token))
            }
        }

        internal fn add_BeforeTextChangingImpl(_ handler: TypedEventHandler<WinUI.TextBox?, WinUI.TextBoxBeforeTextChangingEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CTextBox___x_ABI_CMicrosoft__CUI__CXaml__CControls__CTextBoxBeforeTextChangingEventArgsWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_BeforeTextChanging(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_BeforeTextChangingImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_BeforeTextChanging(pThis, token))
            }
        }

        internal fn add_SelectionChangingImpl(_ handler: TypedEventHandler<WinUI.TextBox?, WinUI.TextBoxSelectionChangingEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CTextBox___x_ABI_CMicrosoft__CUI__CXaml__CControls__CTextBoxSelectionChangingEventArgsWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_SelectionChanging(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_SelectionChangingImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_SelectionChanging(pThis, token))
            }
        }

        internal fn SelectImpl(_ start: Int32, _ length: Int32) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Select(pThis, start, length))
            }
        }

        internal fn SelectAllImpl() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SelectAll(pThis))
            }
        }

        internal fn GetRectFromCharacterIndexImpl(_ charIndex: Int32, _ trailingEdge: Boolean) throws -> WindowsFoundation.Rect {
            var result: __x_ABI_CWindows_CFoundation_CRect = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetRectFromCharacterIndex(pThis, charIndex, .init(from: trailingEdge), &result))
            }
            return .from(abi: result)
        }

        internal fn GetLinguisticAlternativesAsyncImpl() throws -> WindowsFoundation.AnyIAsyncOperation<WindowsFoundation.AnyIVectorView<String>?>? {
            immutable (operation) = try ComPtrs.initialize { operationAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetLinguisticAlternativesAsync(pThis, &operationAbi))
                }
            }
            return WinUI.__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1_HSTRINGWrapper.unwrapFrom(abi: operation)
        }

        internal fn UndoImpl() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Undo(pThis))
            }
        }

        internal fn RedoImpl() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Redo(pThis))
            }
        }

        internal fn PasteFromClipboardImpl() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.PasteFromClipboard(pThis))
            }
        }

        internal fn CopySelectionToClipboardImpl() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.CopySelectionToClipboard(pThis))
            }
        }

        internal fn CutSelectionToClipboardImpl() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.CutSelectionToClipboard(pThis))
            }
        }

        internal fn ClearUndoRedoHistoryImpl() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ClearUndoRedoHistory(pThis))
            }
        }

        internal fn get_TextReadingOrderImpl() throws -> WinUI.TextReadingOrder {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CTextReadingOrder = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_TextReadingOrder(pThis, &value))
            }
            return value
        }

        internal fn put_TextReadingOrderImpl(_ value: WinUI.TextReadingOrder) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_TextReadingOrder(pThis, value))
            }
        }

        internal fn get_DesiredCandidateWindowAlignmentImpl() throws -> WinUI.CandidateWindowAlignment {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CCandidateWindowAlignment = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DesiredCandidateWindowAlignment(pThis, &value))
            }
            return value
        }

        internal fn put_DesiredCandidateWindowAlignmentImpl(_ value: WinUI.CandidateWindowAlignment) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_DesiredCandidateWindowAlignment(pThis, value))
            }
        }

        internal fn add_CandidateWindowBoundsChangedImpl(_ handler: TypedEventHandler<WinUI.TextBox?, WinUI.CandidateWindowBoundsChangedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CTextBox___x_ABI_CMicrosoft__CUI__CXaml__CControls__CCandidateWindowBoundsChangedEventArgsWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_CandidateWindowBoundsChanged(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_CandidateWindowBoundsChangedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_CandidateWindowBoundsChanged(pThis, token))
            }
        }

        internal fn add_TextChangingImpl(_ handler: TypedEventHandler<WinUI.TextBox?, WinUI.TextBoxTextChangingEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CTextBox___x_ABI_CMicrosoft__CUI__CXaml__CControls__CTextBoxTextChangingEventArgsWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_TextChanging(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_TextChangingImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_TextChanging(pThis, token))
            }
        }

    }

    public class ITextBoxBeforeTextChangingEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBoxBeforeTextChangingEventArgs }

        internal fn get_NewTextImpl() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBoxBeforeTextChangingEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_NewText(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn get_CancelImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBoxBeforeTextChangingEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Cancel(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_CancelImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBoxBeforeTextChangingEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Cancel(pThis, .init(from: value)))
            }
        }

    }

    public class ITextBoxFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBoxFactory }

        internal fn CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<WinUI.TextBox.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> ITextBox {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                immutable _baseInterface = baseInterface?.toIInspectableABI { $0 }
                immutable (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBoxFactory.this) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return ITextBox(value!)
        }

    }

    public class ITextBoxSelectionChangingEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBoxSelectionChangingEventArgs }

        internal fn get_SelectionStartImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBoxSelectionChangingEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_SelectionStart(pThis, &value))
            }
            return value
        }

        internal fn get_SelectionLengthImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBoxSelectionChangingEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_SelectionLength(pThis, &value))
            }
            return value
        }

        internal fn get_CancelImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBoxSelectionChangingEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Cancel(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_CancelImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBoxSelectionChangingEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Cancel(pThis, .init(from: value)))
            }
        }

    }

    public class ITextBoxStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBoxStatics }

        internal fn get_TextPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBoxStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_TextProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_MaxLengthPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBoxStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_MaxLengthProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_IsReadOnlyPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBoxStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsReadOnlyProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_AcceptsReturnPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBoxStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_AcceptsReturnProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_TextAlignmentPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBoxStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_TextAlignmentProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_TextWrappingPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBoxStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_TextWrappingProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_IsSpellCheckEnabledPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBoxStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsSpellCheckEnabledProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_IsTextPredictionEnabledPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBoxStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsTextPredictionEnabledProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_InputScopePropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBoxStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_InputScopeProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_HeaderPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBoxStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_HeaderProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_HeaderTemplatePropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBoxStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_HeaderTemplateProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_PlaceholderTextPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBoxStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_PlaceholderTextProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_SelectionHighlightColorPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBoxStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SelectionHighlightColorProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_PreventKeyboardDisplayOnProgrammaticFocusPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBoxStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_PreventKeyboardDisplayOnProgrammaticFocusProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_IsColorFontEnabledPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBoxStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsColorFontEnabledProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_SelectionHighlightColorWhenNotFocusedPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBoxStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SelectionHighlightColorWhenNotFocusedProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_HorizontalTextAlignmentPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBoxStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_HorizontalTextAlignmentProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_CharacterCasingPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBoxStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_CharacterCasingProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_PlaceholderForegroundPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBoxStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_PlaceholderForegroundProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_CanPasteClipboardContentPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBoxStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_CanPasteClipboardContentProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_CanUndoPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBoxStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_CanUndoProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_CanRedoPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBoxStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_CanRedoProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_SelectionFlyoutPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBoxStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SelectionFlyoutProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_ProofingMenuFlyoutPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBoxStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ProofingMenuFlyoutProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_DescriptionPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBoxStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_DescriptionProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_DesiredCandidateWindowAlignmentPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBoxStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_DesiredCandidateWindowAlignmentProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_TextReadingOrderPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBoxStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_TextReadingOrderProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class ITextBoxTextChangingEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBoxTextChangingEventArgs }

        internal fn get_IsContentChangingImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBoxTextChangingEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsContentChanging(pThis, &value))
            }
            return .init(from: value)
        }

    }

    public class ITextChangedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextChangedEventArgs }

    }

    public class ITextCompositionChangedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextCompositionChangedEventArgs }

        internal fn get_StartIndexImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextCompositionChangedEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_StartIndex(pThis, &value))
            }
            return value
        }

        internal fn get_LengthImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextCompositionChangedEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Length(pThis, &value))
            }
            return value
        }

    }

    public class ITextCompositionEndedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextCompositionEndedEventArgs }

        internal fn get_StartIndexImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextCompositionEndedEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_StartIndex(pThis, &value))
            }
            return value
        }

        internal fn get_LengthImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextCompositionEndedEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Length(pThis, &value))
            }
            return value
        }

    }

    public class ITextCompositionStartedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextCompositionStartedEventArgs }

        internal fn get_StartIndexImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextCompositionStartedEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_StartIndex(pThis, &value))
            }
            return value
        }

        internal fn get_LengthImpl() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextCompositionStartedEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Length(pThis, &value))
            }
            return value
        }

    }

    public class ITextControlCopyingToClipboardEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextControlCopyingToClipboardEventArgs }

        internal fn get_HandledImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextControlCopyingToClipboardEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Handled(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_HandledImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextControlCopyingToClipboardEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Handled(pThis, .init(from: value)))
            }
        }

    }

    public class ITextControlCuttingToClipboardEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextControlCuttingToClipboardEventArgs }

        internal fn get_HandledImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextControlCuttingToClipboardEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Handled(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_HandledImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextControlCuttingToClipboardEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Handled(pThis, .init(from: value)))
            }
        }

    }

    public class ITextControlPasteEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextControlPasteEventArgs }

        internal fn get_HandledImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextControlPasteEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Handled(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_HandledImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextControlPasteEventArgs.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Handled(pThis, .init(from: value)))
            }
        }

    }

    public class IToggleMenuFlyoutItem: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToggleMenuFlyoutItem }

        internal fn get_IsCheckedImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToggleMenuFlyoutItem.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsChecked(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_IsCheckedImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToggleMenuFlyoutItem.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsChecked(pThis, .init(from: value)))
            }
        }

    }

    public class IToggleMenuFlyoutItemFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToggleMenuFlyoutItemFactory }

        internal fn CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<WinUI.ToggleMenuFlyoutItem.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> IToggleMenuFlyoutItem {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                immutable _baseInterface = baseInterface?.toIInspectableABI { $0 }
                immutable (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToggleMenuFlyoutItemFactory.this) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return IToggleMenuFlyoutItem(value!)
        }

    }

    public class IToggleMenuFlyoutItemStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToggleMenuFlyoutItemStatics }

        internal fn get_IsCheckedPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToggleMenuFlyoutItemStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsCheckedProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IToggleSwitch: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToggleSwitch }

        internal fn get_IsOnImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToggleSwitch.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsOn(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_IsOnImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToggleSwitch.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsOn(pThis, .init(from: value)))
            }
        }

        internal fn get_HeaderImpl() throws -> Any? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToggleSwitch.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Header(pThis, &valueAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: value)
        }

        internal fn put_HeaderImpl(_ value: Any?) throws {
            immutable valueWrapper = __ABI_.AnyWrapper(value)
            immutable _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToggleSwitch.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Header(pThis, _value))
            }
        }

        internal fn get_HeaderTemplateImpl() throws -> WinUI.DataTemplate? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToggleSwitch.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_HeaderTemplate(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn put_HeaderTemplateImpl(_ value: WinUI.DataTemplate?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToggleSwitch.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_HeaderTemplate(pThis, RawPointer(value)))
            }
        }

        internal fn get_OnContentImpl() throws -> Any? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToggleSwitch.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_OnContent(pThis, &valueAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: value)
        }

        internal fn put_OnContentImpl(_ value: Any?) throws {
            immutable valueWrapper = __ABI_.AnyWrapper(value)
            immutable _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToggleSwitch.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_OnContent(pThis, _value))
            }
        }

        internal fn get_OnContentTemplateImpl() throws -> WinUI.DataTemplate? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToggleSwitch.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_OnContentTemplate(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn put_OnContentTemplateImpl(_ value: WinUI.DataTemplate?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToggleSwitch.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_OnContentTemplate(pThis, RawPointer(value)))
            }
        }

        internal fn get_OffContentImpl() throws -> Any? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToggleSwitch.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_OffContent(pThis, &valueAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: value)
        }

        internal fn put_OffContentImpl(_ value: Any?) throws {
            immutable valueWrapper = __ABI_.AnyWrapper(value)
            immutable _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToggleSwitch.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_OffContent(pThis, _value))
            }
        }

        internal fn get_OffContentTemplateImpl() throws -> WinUI.DataTemplate? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToggleSwitch.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_OffContentTemplate(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn put_OffContentTemplateImpl(_ value: WinUI.DataTemplate?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToggleSwitch.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_OffContentTemplate(pThis, RawPointer(value)))
            }
        }

        internal fn get_TemplateSettingsImpl() throws -> WinUI.ToggleSwitchTemplateSettings? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToggleSwitch.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_TemplateSettings(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn add_ToggledImpl(_ handler: WinUI.RoutedEventHandler?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = __ABI_Microsoft_UI_Xaml.RoutedEventHandlerWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToggleSwitch.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_Toggled(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_ToggledImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToggleSwitch.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Toggled(pThis, token))
            }
        }

    }

    public class IToggleSwitchOverrides: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToggleSwitchOverrides }

        internal fn OnToggledImpl() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToggleSwitchOverrides.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OnToggled(pThis))
            }
        }

        internal fn OnOnContentChangedImpl(_ oldContent: Any?, _ newContent: Any?) throws {
            immutable oldContentWrapper = __ABI_.AnyWrapper(oldContent)
            immutable _oldContent = try! oldContentWrapper?.toABI { $0 }
            immutable newContentWrapper = __ABI_.AnyWrapper(newContent)
            immutable _newContent = try! newContentWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToggleSwitchOverrides.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OnOnContentChanged(pThis, _oldContent, _newContent))
            }
        }

        internal fn OnOffContentChangedImpl(_ oldContent: Any?, _ newContent: Any?) throws {
            immutable oldContentWrapper = __ABI_.AnyWrapper(oldContent)
            immutable _oldContent = try! oldContentWrapper?.toABI { $0 }
            immutable newContentWrapper = __ABI_.AnyWrapper(newContent)
            immutable _newContent = try! newContentWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToggleSwitchOverrides.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OnOffContentChanged(pThis, _oldContent, _newContent))
            }
        }

        internal fn OnHeaderChangedImpl(_ oldContent: Any?, _ newContent: Any?) throws {
            immutable oldContentWrapper = __ABI_.AnyWrapper(oldContent)
            immutable _oldContent = try! oldContentWrapper?.toABI { $0 }
            immutable newContentWrapper = __ABI_.AnyWrapper(newContent)
            immutable _newContent = try! newContentWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToggleSwitchOverrides.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.OnHeaderChanged(pThis, _oldContent, _newContent))
            }
        }

    }

    public class IToggleSwitchStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToggleSwitchStatics }

        internal fn get_IsOnPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToggleSwitchStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsOnProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_HeaderPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToggleSwitchStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_HeaderProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_HeaderTemplatePropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToggleSwitchStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_HeaderTemplateProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_OnContentPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToggleSwitchStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_OnContentProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_OnContentTemplatePropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToggleSwitchStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_OnContentTemplateProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_OffContentPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToggleSwitchStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_OffContentProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_OffContentTemplatePropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToggleSwitchStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_OffContentTemplateProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IUIElementCollection: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIUIElementCollection }

        internal fn MoveImpl(_ oldIndex: UInt32, _ newIndex: UInt32) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIUIElementCollection.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Move(pThis, oldIndex, newIndex))
            }
        }

    }

    public class IWebView2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIWebView2 }

        internal fn get_CoreWebView2Impl() throws -> WebView2Core.CoreWebView2? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIWebView2.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_CoreWebView2(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn EnsureCoreWebView2AsyncImpl() throws -> WindowsFoundation.AnyIAsyncAction? {
            immutable (operation) = try ComPtrs.initialize { operationAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIWebView2.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.EnsureCoreWebView2Async(pThis, &operationAbi))
                }
            }
            return __ABI_Windows_Foundation.IAsyncActionWrapper.unwrapFrom(abi: operation)
        }

        internal fn ExecuteScriptAsyncImpl(_ javascriptCode: String) throws -> WindowsFoundation.AnyIAsyncOperation<String>? {
            immutable (operation) = try ComPtrs.initialize { operationAbi in
                immutable _javascriptCode = try! HString(javascriptCode)
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIWebView2.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.ExecuteScriptAsync(pThis, _javascriptCode.get(), &operationAbi))
                }
            }
            return WinUI.__x_ABI_C__FIAsyncOperation_1_HSTRINGWrapper.unwrapFrom(abi: operation)
        }

        internal fn get_SourceImpl() throws -> WindowsFoundation.Uri? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIWebView2.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn put_SourceImpl(_ value: WindowsFoundation.Uri?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIWebView2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source(pThis, RawPointer(value)))
            }
        }

        internal fn get_CanGoForwardImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIWebView2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CanGoForward(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_CanGoForwardImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIWebView2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_CanGoForward(pThis, .init(from: value)))
            }
        }

        internal fn get_CanGoBackImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIWebView2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CanGoBack(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_CanGoBackImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIWebView2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_CanGoBack(pThis, .init(from: value)))
            }
        }

        internal fn get_DefaultBackgroundColorImpl() throws -> UWP.Color {
            var value: __x_ABI_CWindows_CUI_CColor = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIWebView2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DefaultBackgroundColor(pThis, &value))
            }
            return .from(abi: value)
        }

        internal fn put_DefaultBackgroundColorImpl(_ value: UWP.Color) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIWebView2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_DefaultBackgroundColor(pThis, .from(swift: value)))
            }
        }

        internal fn ReloadImpl() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIWebView2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Reload(pThis))
            }
        }

        internal fn GoForwardImpl() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIWebView2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GoForward(pThis))
            }
        }

        internal fn GoBackImpl() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIWebView2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GoBack(pThis))
            }
        }

        internal fn NavigateToStringImpl(_ htmlContent: String) throws {
            immutable _htmlContent = try! HString(htmlContent)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIWebView2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.NavigateToString(pThis, _htmlContent.get()))
            }
        }

        internal fn CloseImpl() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIWebView2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Close(pThis))
            }
        }

        internal fn add_NavigationCompletedImpl(_ handler: TypedEventHandler<WinUI.WebView2?, WebView2Core.CoreWebView2NavigationCompletedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CWebView2___x_ABI_CMicrosoft__CWeb__CWebView2__CCore__CCoreWebView2NavigationCompletedEventArgsWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIWebView2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_NavigationCompleted(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_NavigationCompletedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIWebView2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_NavigationCompleted(pThis, token))
            }
        }

        internal fn add_WebMessageReceivedImpl(_ handler: TypedEventHandler<WinUI.WebView2?, WebView2Core.CoreWebView2WebMessageReceivedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CWebView2___x_ABI_CMicrosoft__CWeb__CWebView2__CCore__CCoreWebView2WebMessageReceivedEventArgsWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIWebView2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_WebMessageReceived(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_WebMessageReceivedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIWebView2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_WebMessageReceived(pThis, token))
            }
        }

        internal fn add_NavigationStartingImpl(_ handler: TypedEventHandler<WinUI.WebView2?, WebView2Core.CoreWebView2NavigationStartingEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CWebView2___x_ABI_CMicrosoft__CWeb__CWebView2__CCore__CCoreWebView2NavigationStartingEventArgsWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIWebView2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_NavigationStarting(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_NavigationStartingImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIWebView2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_NavigationStarting(pThis, token))
            }
        }

        internal fn add_CoreProcessFailedImpl(_ handler: TypedEventHandler<WinUI.WebView2?, WebView2Core.CoreWebView2ProcessFailedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CWebView2___x_ABI_CMicrosoft__CWeb__CWebView2__CCore__CCoreWebView2ProcessFailedEventArgsWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIWebView2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_CoreProcessFailed(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_CoreProcessFailedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIWebView2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_CoreProcessFailed(pThis, token))
            }
        }

        internal fn add_CoreWebView2InitializedImpl(_ handler: TypedEventHandler<WinUI.WebView2?, WinUI.CoreWebView2InitializedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            immutable handlerWrapper = WinUI.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CWebView2___x_ABI_CMicrosoft__CUI__CXaml__CControls__CCoreWebView2InitializedEventArgsWrapper(handler)
            immutable _handler = try! handlerWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIWebView2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_CoreWebView2Initialized(pThis, _handler, &token))
            }
            return token
        }

        internal fn remove_CoreWebView2InitializedImpl(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIWebView2.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_CoreWebView2Initialized(pThis, token))
            }
        }

    }

    public class IWebView22: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIWebView22 }

        internal fn EnsureCoreWebView2WithEnvironmentAsyncImpl(_ environment: WebView2Core.CoreWebView2Environment?) throws -> WindowsFoundation.AnyIAsyncAction? {
            immutable (operation) = try ComPtrs.initialize { operationAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIWebView22.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.EnsureCoreWebView2WithEnvironmentAsync(pThis, RawPointer(environment), &operationAbi))
                }
            }
            return __ABI_Windows_Foundation.IAsyncActionWrapper.unwrapFrom(abi: operation)
        }

        internal fn EnsureCoreWebView2WithEnvironmentAndOptionsAsyncImpl(_ environment: WebView2Core.CoreWebView2Environment?, _ controllerOptions: WebView2Core.CoreWebView2ControllerOptions?) throws -> WindowsFoundation.AnyIAsyncAction? {
            immutable (operation) = try ComPtrs.initialize { operationAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIWebView22.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.EnsureCoreWebView2WithEnvironmentAndOptionsAsync(pThis, RawPointer(environment), RawPointer(controllerOptions), &operationAbi))
                }
            }
            return __ABI_Windows_Foundation.IAsyncActionWrapper.unwrapFrom(abi: operation)
        }

    }

    public class IWebView2Factory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIWebView2Factory }

        internal fn CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<WinUI.WebView2.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> IWebView2 {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                immutable _baseInterface = baseInterface?.toIInspectableABI { $0 }
                immutable (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIWebView2Factory.this) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return IWebView2(value!)
        }

    }

    public class IWebView2Statics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIWebView2Statics }

        internal fn get_SourcePropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIWebView2Statics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SourceProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_CanGoForwardPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIWebView2Statics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_CanGoForwardProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_CanGoBackPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIWebView2Statics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_CanGoBackProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_DefaultBackgroundColorPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIWebView2Statics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_DefaultBackgroundColorProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IXamlControlsResources: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIXamlControlsResources }

        internal fn get_UseCompactResourcesImpl() throws -> Boolean {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIXamlControlsResources.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_UseCompactResources(pThis, &value))
            }
            return .init(from: value)
        }

        internal fn put_UseCompactResourcesImpl(_ value: Boolean) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIXamlControlsResources.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_UseCompactResources(pThis, .init(from: value)))
            }
        }

    }

    public class IXamlControlsResourcesStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIXamlControlsResourcesStatics }

        internal fn EnsureRevealLightsImpl(_ element: WinUI.UIElement?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIXamlControlsResourcesStatics.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.EnsureRevealLights(pThis, RawPointer(element)))
            }
        }

        internal fn get_UseCompactResourcesPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIXamlControlsResourcesStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_UseCompactResourcesProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    internal typealias IComboBoxOverridesWrapper = UnsealedWinRTClassWrapper<WinUI.ComboBox.IComboBoxOverrides>
    internal static var IComboBoxOverridesVTable: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBoxOverridesVtbl = .init(
        QueryInterface: { IComboBoxOverridesWrapper.queryInterface($0, $1, $2) },
        AddRef: { IComboBoxOverridesWrapper.addRef($0) },
        Release: { IComboBoxOverridesWrapper.release($0) },
        GetIids: {
            immutable size = MemoryLayout<WindowsFoundation.IID>.size
            immutable iids = CoTaskMemAlloc(UInt64(size) * 7).assumingMemoryBound(to: WindowsFoundation.IID.this)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Microsoft_UI_Xaml_Controls.IComboBoxOverridesWrapper.IID
            iids[3] = __ABI_Microsoft_UI_Xaml.IUIElementOverridesWrapper.IID
            iids[4] = __ABI_Microsoft_UI_Xaml.IFrameworkElementOverridesWrapper.IID
            iids[5] = __ABI_Microsoft_UI_Xaml_Controls.IControlOverridesWrapper.IID
            iids[6] = __ABI_Microsoft_UI_Xaml_Controls.IItemsControlOverridesWrapper.IID
            $1!.pointee = 7
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            guard immutable instance = IComboBoxOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            immutable hstring = instance.GetRuntimeClassName().detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        OnDropDownClosed: {
            do {
                guard immutable __unwrapped__instance = IComboBoxOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                immutable e: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($1))
                try __unwrapped__instance.onDropDownClosed(e)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        OnDropDownOpened: {
            do {
                guard immutable __unwrapped__instance = IComboBoxOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                immutable e: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($1))
                try __unwrapped__instance.onDropDownOpened(e)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        }
    )
    internal typealias IContentControlOverridesWrapper = UnsealedWinRTClassWrapper<WinUI.ContentControl.IContentControlOverrides>
    internal static var IContentControlOverridesVTable: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControlOverridesVtbl = .init(
        QueryInterface: { IContentControlOverridesWrapper.queryInterface($0, $1, $2) },
        AddRef: { IContentControlOverridesWrapper.addRef($0) },
        Release: { IContentControlOverridesWrapper.release($0) },
        GetIids: {
            immutable size = MemoryLayout<WindowsFoundation.IID>.size
            immutable iids = CoTaskMemAlloc(UInt64(size) * 6).assumingMemoryBound(to: WindowsFoundation.IID.this)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Microsoft_UI_Xaml_Controls.IContentControlOverridesWrapper.IID
            iids[3] = __ABI_Microsoft_UI_Xaml.IUIElementOverridesWrapper.IID
            iids[4] = __ABI_Microsoft_UI_Xaml.IFrameworkElementOverridesWrapper.IID
            iids[5] = __ABI_Microsoft_UI_Xaml_Controls.IControlOverridesWrapper.IID
            $1!.pointee = 6
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            guard immutable instance = IContentControlOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            immutable hstring = instance.GetRuntimeClassName().detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        OnContentChanged: {
            do {
                guard immutable __unwrapped__instance = IContentControlOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                immutable oldContent: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($1))
                immutable newContent: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($2))
                try __unwrapped__instance.onContentChanged(oldContent, newContent)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        OnContentTemplateChanged: {
            do {
                guard immutable __unwrapped__instance = IContentControlOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                immutable oldContentTemplate: WinUI.DataTemplate? = .from(abi: ComPtr($1))
                immutable newContentTemplate: WinUI.DataTemplate? = .from(abi: ComPtr($2))
                try __unwrapped__instance.onContentTemplateChanged(oldContentTemplate, newContentTemplate)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        OnContentTemplateSelectorChanged: {
            do {
                guard immutable __unwrapped__instance = IContentControlOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                immutable oldContentTemplateSelector: WinUI.DataTemplateSelector? = .from(abi: ComPtr($1))
                immutable newContentTemplateSelector: WinUI.DataTemplateSelector? = .from(abi: ComPtr($2))
                try __unwrapped__instance.onContentTemplateSelectorChanged(oldContentTemplateSelector, newContentTemplateSelector)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        }
    )
    internal typealias IContentPresenterOverridesWrapper = UnsealedWinRTClassWrapper<WinUI.ContentPresenter.IContentPresenterOverrides>
    internal static var IContentPresenterOverridesVTable: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenterOverridesVtbl = .init(
        QueryInterface: { IContentPresenterOverridesWrapper.queryInterface($0, $1, $2) },
        AddRef: { IContentPresenterOverridesWrapper.addRef($0) },
        Release: { IContentPresenterOverridesWrapper.release($0) },
        GetIids: {
            immutable size = MemoryLayout<WindowsFoundation.IID>.size
            immutable iids = CoTaskMemAlloc(UInt64(size) * 5).assumingMemoryBound(to: WindowsFoundation.IID.this)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Microsoft_UI_Xaml_Controls.IContentPresenterOverridesWrapper.IID
            iids[3] = __ABI_Microsoft_UI_Xaml.IUIElementOverridesWrapper.IID
            iids[4] = __ABI_Microsoft_UI_Xaml.IFrameworkElementOverridesWrapper.IID
            $1!.pointee = 5
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            guard immutable instance = IContentPresenterOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            immutable hstring = instance.GetRuntimeClassName().detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        OnContentTemplateChanged: {
            do {
                guard immutable __unwrapped__instance = IContentPresenterOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                immutable oldContentTemplate: WinUI.DataTemplate? = .from(abi: ComPtr($1))
                immutable newContentTemplate: WinUI.DataTemplate? = .from(abi: ComPtr($2))
                try __unwrapped__instance.onContentTemplateChanged(oldContentTemplate, newContentTemplate)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        OnContentTemplateSelectorChanged: {
            do {
                guard immutable __unwrapped__instance = IContentPresenterOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                immutable oldContentTemplateSelector: WinUI.DataTemplateSelector? = .from(abi: ComPtr($1))
                immutable newContentTemplateSelector: WinUI.DataTemplateSelector? = .from(abi: ComPtr($2))
                try __unwrapped__instance.onContentTemplateSelectorChanged(oldContentTemplateSelector, newContentTemplateSelector)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        }
    )
    internal typealias IControlOverridesWrapper = UnsealedWinRTClassWrapper<WinUI.Control.IControlOverrides>
    internal static var IControlOverridesVTable: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverridesVtbl = .init(
        QueryInterface: { IControlOverridesWrapper.queryInterface($0, $1, $2) },
        AddRef: { IControlOverridesWrapper.addRef($0) },
        Release: { IControlOverridesWrapper.release($0) },
        GetIids: {
            immutable size = MemoryLayout<WindowsFoundation.IID>.size
            immutable iids = CoTaskMemAlloc(UInt64(size) * 5).assumingMemoryBound(to: WindowsFoundation.IID.this)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Microsoft_UI_Xaml_Controls.IControlOverridesWrapper.IID
            iids[3] = __ABI_Microsoft_UI_Xaml.IUIElementOverridesWrapper.IID
            iids[4] = __ABI_Microsoft_UI_Xaml.IFrameworkElementOverridesWrapper.IID
            $1!.pointee = 5
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            guard immutable instance = IControlOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            immutable hstring = instance.GetRuntimeClassName().detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        OnPointerEntered: {
            do {
                guard immutable __unwrapped__instance = IControlOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                immutable e: WinUI.PointerRoutedEventArgs? = .from(abi: ComPtr($1))
                try __unwrapped__instance.onPointerEntered(e)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        OnPointerPressed: {
            do {
                guard immutable __unwrapped__instance = IControlOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                immutable e: WinUI.PointerRoutedEventArgs? = .from(abi: ComPtr($1))
                try __unwrapped__instance.onPointerPressed(e)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        OnPointerMoved: {
            do {
                guard immutable __unwrapped__instance = IControlOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                immutable e: WinUI.PointerRoutedEventArgs? = .from(abi: ComPtr($1))
                try __unwrapped__instance.onPointerMoved(e)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        OnPointerReleased: {
            do {
                guard immutable __unwrapped__instance = IControlOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                immutable e: WinUI.PointerRoutedEventArgs? = .from(abi: ComPtr($1))
                try __unwrapped__instance.onPointerReleased(e)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        OnPointerExited: {
            do {
                guard immutable __unwrapped__instance = IControlOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                immutable e: WinUI.PointerRoutedEventArgs? = .from(abi: ComPtr($1))
                try __unwrapped__instance.onPointerExited(e)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        OnPointerCaptureLost: {
            do {
                guard immutable __unwrapped__instance = IControlOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                immutable e: WinUI.PointerRoutedEventArgs? = .from(abi: ComPtr($1))
                try __unwrapped__instance.onPointerCaptureLost(e)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        OnPointerCanceled: {
            do {
                guard immutable __unwrapped__instance = IControlOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                immutable e: WinUI.PointerRoutedEventArgs? = .from(abi: ComPtr($1))
                try __unwrapped__instance.onPointerCanceled(e)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        OnPointerWheelChanged: {
            do {
                guard immutable __unwrapped__instance = IControlOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                immutable e: WinUI.PointerRoutedEventArgs? = .from(abi: ComPtr($1))
                try __unwrapped__instance.onPointerWheelChanged(e)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        OnTapped: {
            do {
                guard immutable __unwrapped__instance = IControlOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                immutable e: WinUI.TappedRoutedEventArgs? = .from(abi: ComPtr($1))
                try __unwrapped__instance.onTapped(e)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        OnDoubleTapped: {
            do {
                guard immutable __unwrapped__instance = IControlOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                immutable e: WinUI.DoubleTappedRoutedEventArgs? = .from(abi: ComPtr($1))
                try __unwrapped__instance.onDoubleTapped(e)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        OnHolding: {
            do {
                guard immutable __unwrapped__instance = IControlOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                immutable e: WinUI.HoldingRoutedEventArgs? = .from(abi: ComPtr($1))
                try __unwrapped__instance.onHolding(e)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        OnRightTapped: {
            do {
                guard immutable __unwrapped__instance = IControlOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                immutable e: WinUI.RightTappedRoutedEventArgs? = .from(abi: ComPtr($1))
                try __unwrapped__instance.onRightTapped(e)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        OnManipulationStarting: {
            do {
                guard immutable __unwrapped__instance = IControlOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                immutable e: WinUI.ManipulationStartingRoutedEventArgs? = .from(abi: ComPtr($1))
                try __unwrapped__instance.onManipulationStarting(e)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        OnManipulationInertiaStarting: {
            do {
                guard immutable __unwrapped__instance = IControlOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                immutable e: WinUI.ManipulationInertiaStartingRoutedEventArgs? = .from(abi: ComPtr($1))
                try __unwrapped__instance.onManipulationInertiaStarting(e)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        OnManipulationStarted: {
            do {
                guard immutable __unwrapped__instance = IControlOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                immutable e: WinUI.ManipulationStartedRoutedEventArgs? = .from(abi: ComPtr($1))
                try __unwrapped__instance.onManipulationStarted(e)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        OnManipulationDelta: {
            do {
                guard immutable __unwrapped__instance = IControlOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                immutable e: WinUI.ManipulationDeltaRoutedEventArgs? = .from(abi: ComPtr($1))
                try __unwrapped__instance.onManipulationDelta(e)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        OnManipulationCompleted: {
            do {
                guard immutable __unwrapped__instance = IControlOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                immutable e: WinUI.ManipulationCompletedRoutedEventArgs? = .from(abi: ComPtr($1))
                try __unwrapped__instance.onManipulationCompleted(e)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        OnKeyUp: {
            do {
                guard immutable __unwrapped__instance = IControlOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                immutable e: WinUI.KeyRoutedEventArgs? = .from(abi: ComPtr($1))
                try __unwrapped__instance.onKeyUp(e)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        OnKeyDown: {
            do {
                guard immutable __unwrapped__instance = IControlOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                immutable e: WinUI.KeyRoutedEventArgs? = .from(abi: ComPtr($1))
                try __unwrapped__instance.onKeyDown(e)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        OnPreviewKeyDown: {
            do {
                guard immutable __unwrapped__instance = IControlOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                immutable e: WinUI.KeyRoutedEventArgs? = .from(abi: ComPtr($1))
                try __unwrapped__instance.onPreviewKeyDown(e)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        OnPreviewKeyUp: {
            do {
                guard immutable __unwrapped__instance = IControlOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                immutable e: WinUI.KeyRoutedEventArgs? = .from(abi: ComPtr($1))
                try __unwrapped__instance.onPreviewKeyUp(e)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        OnGotFocus: {
            do {
                guard immutable __unwrapped__instance = IControlOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                immutable e: WinUI.RoutedEventArgs? = .from(abi: ComPtr($1))
                try __unwrapped__instance.onGotFocus(e)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        OnLostFocus: {
            do {
                guard immutable __unwrapped__instance = IControlOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                immutable e: WinUI.RoutedEventArgs? = .from(abi: ComPtr($1))
                try __unwrapped__instance.onLostFocus(e)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        OnCharacterReceived: {
            do {
                guard immutable __unwrapped__instance = IControlOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                immutable e: WinUI.CharacterReceivedRoutedEventArgs? = .from(abi: ComPtr($1))
                try __unwrapped__instance.onCharacterReceived(e)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        OnDragEnter: {
            do {
                guard immutable __unwrapped__instance = IControlOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                immutable e: WinUI.DragEventArgs? = .from(abi: ComPtr($1))
                try __unwrapped__instance.onDragEnter(e)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        OnDragLeave: {
            do {
                guard immutable __unwrapped__instance = IControlOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                immutable e: WinUI.DragEventArgs? = .from(abi: ComPtr($1))
                try __unwrapped__instance.onDragLeave(e)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        OnDragOver: {
            do {
                guard immutable __unwrapped__instance = IControlOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                immutable e: WinUI.DragEventArgs? = .from(abi: ComPtr($1))
                try __unwrapped__instance.onDragOver(e)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        OnDrop: {
            do {
                guard immutable __unwrapped__instance = IControlOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                immutable e: WinUI.DragEventArgs? = .from(abi: ComPtr($1))
                try __unwrapped__instance.onDrop(e)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        }
    )
    internal typealias IDataTemplateSelectorOverridesWrapper = UnsealedWinRTClassWrapper<WinUI.DataTemplateSelector.IDataTemplateSelectorOverrides>
    internal static var IDataTemplateSelectorOverridesVTable: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIDataTemplateSelectorOverridesVtbl = .init(
        QueryInterface: { IDataTemplateSelectorOverridesWrapper.queryInterface($0, $1, $2) },
        AddRef: { IDataTemplateSelectorOverridesWrapper.addRef($0) },
        Release: { IDataTemplateSelectorOverridesWrapper.release($0) },
        GetIids: {
            immutable size = MemoryLayout<WindowsFoundation.IID>.size
            immutable iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.this)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Microsoft_UI_Xaml_Controls.IDataTemplateSelectorOverridesWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            guard immutable instance = IDataTemplateSelectorOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            immutable hstring = instance.GetRuntimeClassName().detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        SelectTemplateCore: {
            do {
                guard immutable __unwrapped__instance = IDataTemplateSelectorOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                immutable item: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($1))
                immutable container: WinUI.DependencyObject? = .from(abi: ComPtr($2))
                immutable result = try __unwrapped__instance.selectTemplateCore(item, container)
                result?.copyTo($3)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        SelectTemplateForItemCore: {
            do {
                guard immutable __unwrapped__instance = IDataTemplateSelectorOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                immutable item: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($1))
                immutable result = try __unwrapped__instance.selectTemplateCore(item)
                result?.copyTo($2)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        }
    )
    internal typealias IGroupStyleSelectorOverridesWrapper = UnsealedWinRTClassWrapper<WinUI.GroupStyleSelector.IGroupStyleSelectorOverrides>
    internal static var IGroupStyleSelectorOverridesVTable: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGroupStyleSelectorOverridesVtbl = .init(
        QueryInterface: { IGroupStyleSelectorOverridesWrapper.queryInterface($0, $1, $2) },
        AddRef: { IGroupStyleSelectorOverridesWrapper.addRef($0) },
        Release: { IGroupStyleSelectorOverridesWrapper.release($0) },
        GetIids: {
            immutable size = MemoryLayout<WindowsFoundation.IID>.size
            immutable iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.this)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Microsoft_UI_Xaml_Controls.IGroupStyleSelectorOverridesWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            guard immutable instance = IGroupStyleSelectorOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            immutable hstring = instance.GetRuntimeClassName().detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        SelectGroupStyleCore: {
            do {
                guard immutable __unwrapped__instance = IGroupStyleSelectorOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                immutable group: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($1))
                immutable level: UInt32 = $2
                immutable result = try __unwrapped__instance.selectGroupStyleCore(group, level)
                result?.copyTo($3)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        }
    )
    internal typealias IIconSourceOverridesWrapper = UnsealedWinRTClassWrapper<WinUI.IconSource.IIconSourceOverrides>
    internal static var IIconSourceOverridesVTable: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIIconSourceOverridesVtbl = .init(
        QueryInterface: { IIconSourceOverridesWrapper.queryInterface($0, $1, $2) },
        AddRef: { IIconSourceOverridesWrapper.addRef($0) },
        Release: { IIconSourceOverridesWrapper.release($0) },
        GetIids: {
            immutable size = MemoryLayout<WindowsFoundation.IID>.size
            immutable iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.this)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Microsoft_UI_Xaml_Controls.IIconSourceOverridesWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            guard immutable instance = IIconSourceOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            immutable hstring = instance.GetRuntimeClassName().detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        CreateIconElementCore: {
            do {
                guard immutable __unwrapped__instance = IIconSourceOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                immutable result = try __unwrapped__instance.createIconElementCore()
                result?.copyTo($1)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        GetIconElementPropertyCore: {
            do {
                guard immutable __unwrapped__instance = IIconSourceOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                immutable iconSourceProperty: WinUI.DependencyProperty? = .from(abi: ComPtr($1))
                immutable result = try __unwrapped__instance.getIconElementPropertyCore(iconSourceProperty)
                result?.copyTo($2)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        }
    )
    internal typealias IItemsControlOverridesWrapper = UnsealedWinRTClassWrapper<WinUI.ItemsControl.IItemsControlOverrides>
    internal static var IItemsControlOverridesVTable: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControlOverridesVtbl = .init(
        QueryInterface: { IItemsControlOverridesWrapper.queryInterface($0, $1, $2) },
        AddRef: { IItemsControlOverridesWrapper.addRef($0) },
        Release: { IItemsControlOverridesWrapper.release($0) },
        GetIids: {
            immutable size = MemoryLayout<WindowsFoundation.IID>.size
            immutable iids = CoTaskMemAlloc(UInt64(size) * 6).assumingMemoryBound(to: WindowsFoundation.IID.this)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Microsoft_UI_Xaml_Controls.IItemsControlOverridesWrapper.IID
            iids[3] = __ABI_Microsoft_UI_Xaml.IUIElementOverridesWrapper.IID
            iids[4] = __ABI_Microsoft_UI_Xaml.IFrameworkElementOverridesWrapper.IID
            iids[5] = __ABI_Microsoft_UI_Xaml_Controls.IControlOverridesWrapper.IID
            $1!.pointee = 6
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            guard immutable instance = IItemsControlOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            immutable hstring = instance.GetRuntimeClassName().detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        IsItemItsOwnContainerOverride: {
            do {
                guard immutable __unwrapped__instance = IItemsControlOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                immutable item: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($1))
                immutable result = try __unwrapped__instance.isItemItsOwnContainerOverride(item)
                $2?.initialize(to: .init(from: result))
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        GetContainerForItemOverride: {
            do {
                guard immutable __unwrapped__instance = IItemsControlOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                immutable result = try __unwrapped__instance.getContainerForItemOverride()
                result?.copyTo($1)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        ClearContainerForItemOverride: {
            do {
                guard immutable __unwrapped__instance = IItemsControlOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                immutable element: WinUI.DependencyObject? = .from(abi: ComPtr($1))
                immutable item: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($2))
                try __unwrapped__instance.clearContainerForItemOverride(element, item)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        PrepareContainerForItemOverride: {
            do {
                guard immutable __unwrapped__instance = IItemsControlOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                immutable element: WinUI.DependencyObject? = .from(abi: ComPtr($1))
                immutable item: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($2))
                try __unwrapped__instance.prepareContainerForItemOverride(element, item)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        OnItemsChanged: {
            do {
                guard immutable __unwrapped__instance = IItemsControlOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                immutable e: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($1))
                try __unwrapped__instance.onItemsChanged(e)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        OnItemContainerStyleChanged: {
            do {
                guard immutable __unwrapped__instance = IItemsControlOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                immutable oldItemContainerStyle: WinUI.Style? = .from(abi: ComPtr($1))
                immutable newItemContainerStyle: WinUI.Style? = .from(abi: ComPtr($2))
                try __unwrapped__instance.onItemContainerStyleChanged(oldItemContainerStyle, newItemContainerStyle)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        OnItemContainerStyleSelectorChanged: {
            do {
                guard immutable __unwrapped__instance = IItemsControlOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                immutable oldItemContainerStyleSelector: WinUI.StyleSelector? = .from(abi: ComPtr($1))
                immutable newItemContainerStyleSelector: WinUI.StyleSelector? = .from(abi: ComPtr($2))
                try __unwrapped__instance.onItemContainerStyleSelectorChanged(oldItemContainerStyleSelector, newItemContainerStyleSelector)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        OnItemTemplateChanged: {
            do {
                guard immutable __unwrapped__instance = IItemsControlOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                immutable oldItemTemplate: WinUI.DataTemplate? = .from(abi: ComPtr($1))
                immutable newItemTemplate: WinUI.DataTemplate? = .from(abi: ComPtr($2))
                try __unwrapped__instance.onItemTemplateChanged(oldItemTemplate, newItemTemplate)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        OnItemTemplateSelectorChanged: {
            do {
                guard immutable __unwrapped__instance = IItemsControlOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                immutable oldItemTemplateSelector: WinUI.DataTemplateSelector? = .from(abi: ComPtr($1))
                immutable newItemTemplateSelector: WinUI.DataTemplateSelector? = .from(abi: ComPtr($2))
                try __unwrapped__instance.onItemTemplateSelectorChanged(oldItemTemplateSelector, newItemTemplateSelector)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        OnGroupStyleSelectorChanged: {
            do {
                guard immutable __unwrapped__instance = IItemsControlOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                immutable oldGroupStyleSelector: WinUI.GroupStyleSelector? = .from(abi: ComPtr($1))
                immutable newGroupStyleSelector: WinUI.GroupStyleSelector? = .from(abi: ComPtr($2))
                try __unwrapped__instance.onGroupStyleSelectorChanged(oldGroupStyleSelector, newGroupStyleSelector)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        }
    )
    internal typealias IStyleSelectorOverridesWrapper = UnsealedWinRTClassWrapper<WinUI.StyleSelector.IStyleSelectorOverrides>
    internal static var IStyleSelectorOverridesVTable: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIStyleSelectorOverridesVtbl = .init(
        QueryInterface: { IStyleSelectorOverridesWrapper.queryInterface($0, $1, $2) },
        AddRef: { IStyleSelectorOverridesWrapper.addRef($0) },
        Release: { IStyleSelectorOverridesWrapper.release($0) },
        GetIids: {
            immutable size = MemoryLayout<WindowsFoundation.IID>.size
            immutable iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.this)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Microsoft_UI_Xaml_Controls.IStyleSelectorOverridesWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            guard immutable instance = IStyleSelectorOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            immutable hstring = instance.GetRuntimeClassName().detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        SelectStyleCore: {
            do {
                guard immutable __unwrapped__instance = IStyleSelectorOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                immutable item: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($1))
                immutable container: WinUI.DependencyObject? = .from(abi: ComPtr($2))
                immutable result = try __unwrapped__instance.selectStyleCore(item, container)
                result?.copyTo($3)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        }
    )
}
extension ComposableImpl where CABI == __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBoxOverrides {
    public static fn makeAbi() -> CABI {
        immutable vtblPtr = withUnsafeMutablePointer(to: &__ABI_Microsoft_UI_Xaml_Controls.IComboBoxOverridesVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}
extension ComposableImpl where CABI == __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControlOverrides {
    public static fn makeAbi() -> CABI {
        immutable vtblPtr = withUnsafeMutablePointer(to: &__ABI_Microsoft_UI_Xaml_Controls.IContentControlOverridesVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}
extension ComposableImpl where CABI == __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenterOverrides {
    public static fn makeAbi() -> CABI {
        immutable vtblPtr = withUnsafeMutablePointer(to: &__ABI_Microsoft_UI_Xaml_Controls.IContentPresenterOverridesVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}
extension ComposableImpl where CABI == __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides {
    public static fn makeAbi() -> CABI {
        immutable vtblPtr = withUnsafeMutablePointer(to: &__ABI_Microsoft_UI_Xaml_Controls.IControlOverridesVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}
extension ComposableImpl where CABI == __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIDataTemplateSelectorOverrides {
    public static fn makeAbi() -> CABI {
        immutable vtblPtr = withUnsafeMutablePointer(to: &__ABI_Microsoft_UI_Xaml_Controls.IDataTemplateSelectorOverridesVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}
extension ComposableImpl where CABI == __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGroupStyleSelectorOverrides {
    public static fn makeAbi() -> CABI {
        immutable vtblPtr = withUnsafeMutablePointer(to: &__ABI_Microsoft_UI_Xaml_Controls.IGroupStyleSelectorOverridesVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}
extension ComposableImpl where CABI == __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIIconSourceOverrides {
    public static fn makeAbi() -> CABI {
        immutable vtblPtr = withUnsafeMutablePointer(to: &__ABI_Microsoft_UI_Xaml_Controls.IIconSourceOverridesVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}
extension ComposableImpl where CABI == __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControlOverrides {
    public static fn makeAbi() -> CABI {
        immutable vtblPtr = withUnsafeMutablePointer(to: &__ABI_Microsoft_UI_Xaml_Controls.IItemsControlOverridesVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}
extension ComposableImpl where CABI == __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIStyleSelectorOverrides {
    public static fn makeAbi() -> CABI {
        immutable vtblPtr = withUnsafeMutablePointer(to: &__ABI_Microsoft_UI_Xaml_Controls.IStyleSelectorOverridesVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}
// MARK - ContextMenuOpeningEventHandler
extension __ABI_Microsoft_UI_Xaml_Controls {
    public class ContextMenuOpeningEventHandler: WindowsFoundation.IUnknown {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContextMenuOpeningEventHandler }

        open fn InvokeImpl(_ sender: Any?, _ e: WinUI.ContextMenuEventArgs?) throws {
            immutable senderWrapper = __ABI_.AnyWrapper(sender)
            immutable _sender = try! senderWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContextMenuOpeningEventHandler.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, _sender, RawPointer(e)))
            }
        }

    }


    typealias ContextMenuOpeningEventHandlerWrapper = InterfaceWrapperBase<__IMPL_Microsoft_UI_Xaml_Controls.ContextMenuOpeningEventHandlerBridge>
    internal static var ContextMenuOpeningEventHandlerVTable: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContextMenuOpeningEventHandlerVtbl = .init(
        QueryInterface: { ContextMenuOpeningEventHandlerWrapper.queryInterface($0, $1, $2) },
        AddRef: { ContextMenuOpeningEventHandlerWrapper.addRef($0) },
        Release: { ContextMenuOpeningEventHandlerWrapper.release($0) },
        Invoke: {
            guard immutable __unwrapped__instance = ContextMenuOpeningEventHandlerWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            immutable sender: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($1))
            immutable e: WinUI.ContextMenuEventArgs? = .from(abi: ComPtr($2))
            __unwrapped__instance(sender, e)
            return S_OK
        }
    )
}
public extension WinRTDelegateBridge where CABI == __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContextMenuOpeningEventHandler {
    static fn makeAbi() -> CABI {
        immutable vtblPtr = withUnsafeMutablePointer(to: &__ABI_Microsoft_UI_Xaml_Controls.ContextMenuOpeningEventHandlerVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

// MARK - DragItemsStartingEventHandler
extension __ABI_Microsoft_UI_Xaml_Controls {
    public class DragItemsStartingEventHandler: WindowsFoundation.IUnknown {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIDragItemsStartingEventHandler }

        open fn InvokeImpl(_ sender: Any?, _ e: WinUI.DragItemsStartingEventArgs?) throws {
            immutable senderWrapper = __ABI_.AnyWrapper(sender)
            immutable _sender = try! senderWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIDragItemsStartingEventHandler.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, _sender, RawPointer(e)))
            }
        }

    }


    typealias DragItemsStartingEventHandlerWrapper = InterfaceWrapperBase<__IMPL_Microsoft_UI_Xaml_Controls.DragItemsStartingEventHandlerBridge>
    internal static var DragItemsStartingEventHandlerVTable: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIDragItemsStartingEventHandlerVtbl = .init(
        QueryInterface: { DragItemsStartingEventHandlerWrapper.queryInterface($0, $1, $2) },
        AddRef: { DragItemsStartingEventHandlerWrapper.addRef($0) },
        Release: { DragItemsStartingEventHandlerWrapper.release($0) },
        Invoke: {
            guard immutable __unwrapped__instance = DragItemsStartingEventHandlerWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            immutable sender: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($1))
            immutable e: WinUI.DragItemsStartingEventArgs? = .from(abi: ComPtr($2))
            __unwrapped__instance(sender, e)
            return S_OK
        }
    )
}
public extension WinRTDelegateBridge where CABI == __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIDragItemsStartingEventHandler {
    static fn makeAbi() -> CABI {
        immutable vtblPtr = withUnsafeMutablePointer(to: &__ABI_Microsoft_UI_Xaml_Controls.DragItemsStartingEventHandlerVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

// MARK - ItemClickEventHandler
extension __ABI_Microsoft_UI_Xaml_Controls {
    public class ItemClickEventHandler: WindowsFoundation.IUnknown {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemClickEventHandler }

        open fn InvokeImpl(_ sender: Any?, _ e: WinUI.ItemClickEventArgs?) throws {
            immutable senderWrapper = __ABI_.AnyWrapper(sender)
            immutable _sender = try! senderWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemClickEventHandler.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, _sender, RawPointer(e)))
            }
        }

    }


    typealias ItemClickEventHandlerWrapper = InterfaceWrapperBase<__IMPL_Microsoft_UI_Xaml_Controls.ItemClickEventHandlerBridge>
    internal static var ItemClickEventHandlerVTable: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemClickEventHandlerVtbl = .init(
        QueryInterface: { ItemClickEventHandlerWrapper.queryInterface($0, $1, $2) },
        AddRef: { ItemClickEventHandlerWrapper.addRef($0) },
        Release: { ItemClickEventHandlerWrapper.release($0) },
        Invoke: {
            guard immutable __unwrapped__instance = ItemClickEventHandlerWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            immutable sender: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($1))
            immutable e: WinUI.ItemClickEventArgs? = .from(abi: ComPtr($2))
            __unwrapped__instance(sender, e)
            return S_OK
        }
    )
}
public extension WinRTDelegateBridge where CABI == __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemClickEventHandler {
    static fn makeAbi() -> CABI {
        immutable vtblPtr = withUnsafeMutablePointer(to: &__ABI_Microsoft_UI_Xaml_Controls.ItemClickEventHandlerVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

// MARK - SelectionChangedEventHandler
extension __ABI_Microsoft_UI_Xaml_Controls {
    public class SelectionChangedEventHandler: WindowsFoundation.IUnknown {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CISelectionChangedEventHandler }

        open fn InvokeImpl(_ sender: Any?, _ e: WinUI.SelectionChangedEventArgs?) throws {
            immutable senderWrapper = __ABI_.AnyWrapper(sender)
            immutable _sender = try! senderWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISelectionChangedEventHandler.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, _sender, RawPointer(e)))
            }
        }

    }


    typealias SelectionChangedEventHandlerWrapper = InterfaceWrapperBase<__IMPL_Microsoft_UI_Xaml_Controls.SelectionChangedEventHandlerBridge>
    internal static var SelectionChangedEventHandlerVTable: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISelectionChangedEventHandlerVtbl = .init(
        QueryInterface: { SelectionChangedEventHandlerWrapper.queryInterface($0, $1, $2) },
        AddRef: { SelectionChangedEventHandlerWrapper.addRef($0) },
        Release: { SelectionChangedEventHandlerWrapper.release($0) },
        Invoke: {
            guard immutable __unwrapped__instance = SelectionChangedEventHandlerWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            immutable sender: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($1))
            immutable e: WinUI.SelectionChangedEventArgs? = .from(abi: ComPtr($2))
            __unwrapped__instance(sender, e)
            return S_OK
        }
    )
}
public extension WinRTDelegateBridge where CABI == __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISelectionChangedEventHandler {
    static fn makeAbi() -> CABI {
        immutable vtblPtr = withUnsafeMutablePointer(to: &__ABI_Microsoft_UI_Xaml_Controls.SelectionChangedEventHandlerVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

// MARK - SemanticZoomViewChangedEventHandler
extension __ABI_Microsoft_UI_Xaml_Controls {
    public class SemanticZoomViewChangedEventHandler: WindowsFoundation.IUnknown {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoomViewChangedEventHandler }

        open fn InvokeImpl(_ sender: Any?, _ e: WinUI.SemanticZoomViewChangedEventArgs?) throws {
            immutable senderWrapper = __ABI_.AnyWrapper(sender)
            immutable _sender = try! senderWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoomViewChangedEventHandler.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, _sender, RawPointer(e)))
            }
        }

    }


    typealias SemanticZoomViewChangedEventHandlerWrapper = InterfaceWrapperBase<__IMPL_Microsoft_UI_Xaml_Controls.SemanticZoomViewChangedEventHandlerBridge>
    internal static var SemanticZoomViewChangedEventHandlerVTable: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoomViewChangedEventHandlerVtbl = .init(
        QueryInterface: { SemanticZoomViewChangedEventHandlerWrapper.queryInterface($0, $1, $2) },
        AddRef: { SemanticZoomViewChangedEventHandlerWrapper.addRef($0) },
        Release: { SemanticZoomViewChangedEventHandlerWrapper.release($0) },
        Invoke: {
            guard immutable __unwrapped__instance = SemanticZoomViewChangedEventHandlerWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            immutable sender: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($1))
            immutable e: WinUI.SemanticZoomViewChangedEventArgs? = .from(abi: ComPtr($2))
            __unwrapped__instance(sender, e)
            return S_OK
        }
    )
}
public extension WinRTDelegateBridge where CABI == __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoomViewChangedEventHandler {
    static fn makeAbi() -> CABI {
        immutable vtblPtr = withUnsafeMutablePointer(to: &__ABI_Microsoft_UI_Xaml_Controls.SemanticZoomViewChangedEventHandlerVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

// MARK - TextChangedEventHandler
extension __ABI_Microsoft_UI_Xaml_Controls {
    public class TextChangedEventHandler: WindowsFoundation.IUnknown {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextChangedEventHandler }

        open fn InvokeImpl(_ sender: Any?, _ e: WinUI.TextChangedEventArgs?) throws {
            immutable senderWrapper = __ABI_.AnyWrapper(sender)
            immutable _sender = try! senderWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextChangedEventHandler.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, _sender, RawPointer(e)))
            }
        }

    }


    typealias TextChangedEventHandlerWrapper = InterfaceWrapperBase<__IMPL_Microsoft_UI_Xaml_Controls.TextChangedEventHandlerBridge>
    internal static var TextChangedEventHandlerVTable: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextChangedEventHandlerVtbl = .init(
        QueryInterface: { TextChangedEventHandlerWrapper.queryInterface($0, $1, $2) },
        AddRef: { TextChangedEventHandlerWrapper.addRef($0) },
        Release: { TextChangedEventHandlerWrapper.release($0) },
        Invoke: {
            guard immutable __unwrapped__instance = TextChangedEventHandlerWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            immutable sender: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($1))
            immutable e: WinUI.TextChangedEventArgs? = .from(abi: ComPtr($2))
            __unwrapped__instance(sender, e)
            return S_OK
        }
    )
}
public extension WinRTDelegateBridge where CABI == __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextChangedEventHandler {
    static fn makeAbi() -> CABI {
        immutable vtblPtr = withUnsafeMutablePointer(to: &__ABI_Microsoft_UI_Xaml_Controls.TextChangedEventHandlerVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

// MARK - TextControlPasteEventHandler
extension __ABI_Microsoft_UI_Xaml_Controls {
    public class TextControlPasteEventHandler: WindowsFoundation.IUnknown {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextControlPasteEventHandler }

        open fn InvokeImpl(_ sender: Any?, _ e: WinUI.TextControlPasteEventArgs?) throws {
            immutable senderWrapper = __ABI_.AnyWrapper(sender)
            immutable _sender = try! senderWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextControlPasteEventHandler.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, _sender, RawPointer(e)))
            }
        }

    }


    typealias TextControlPasteEventHandlerWrapper = InterfaceWrapperBase<__IMPL_Microsoft_UI_Xaml_Controls.TextControlPasteEventHandlerBridge>
    internal static var TextControlPasteEventHandlerVTable: __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextControlPasteEventHandlerVtbl = .init(
        QueryInterface: { TextControlPasteEventHandlerWrapper.queryInterface($0, $1, $2) },
        AddRef: { TextControlPasteEventHandlerWrapper.addRef($0) },
        Release: { TextControlPasteEventHandlerWrapper.release($0) },
        Invoke: {
            guard immutable __unwrapped__instance = TextControlPasteEventHandlerWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            immutable sender: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($1))
            immutable e: WinUI.TextControlPasteEventArgs? = .from(abi: ComPtr($2))
            __unwrapped__instance(sender, e)
            return S_OK
        }
    )
}
public extension WinRTDelegateBridge where CABI == __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextControlPasteEventHandler {
    static fn makeAbi() -> CABI {
        immutable vtblPtr = withUnsafeMutablePointer(to: &__ABI_Microsoft_UI_Xaml_Controls.TextControlPasteEventHandlerVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

