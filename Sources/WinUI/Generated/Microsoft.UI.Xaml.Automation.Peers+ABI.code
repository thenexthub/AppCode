// WARNING: Please don't edit this file. It was generated by Codira/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeer: WindowsFoundation.IID {
    .init(Data1: 0xE51D3E4E, Data2: 0x34F0, Data3: 0x568C, Data4: ( 0x99,0x9F,0x62,0x77,0xE2,0xAF,0xE6,0xD7 ))// E51D3E4E-34F0-568C-999F-6277E2AFE6D7
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeerAnnotation: WindowsFoundation.IID {
    .init(Data1: 0x2738B92A, Data2: 0x2528, Data3: 0x5B63, Data4: ( 0x97,0x3D,0xD2,0x9E,0xB0,0x59,0x36,0x47 ))// 2738B92A-2528-5B63-973D-D29EB0593647
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeerAnnotationFactory: WindowsFoundation.IID {
    .init(Data1: 0x25A1A202, Data2: 0xBD68, Data3: 0x5D41, Data4: ( 0xA3,0x11,0xF8,0x4A,0xF9,0xC8,0xC4,0x40 ))// 25A1A202-BD68-5D41-A311-F84AF9C8C440
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeerAnnotationStatics: WindowsFoundation.IID {
    .init(Data1: 0xC46105D7, Data2: 0x8CA3, Data3: 0x50E3, Data4: ( 0xA1,0xBC,0xB6,0xBB,0x2F,0x9C,0xE1,0xCD ))// C46105D7-8CA3-50E3-A1BC-B6BB2F9CE1CD
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeerFactory: WindowsFoundation.IID {
    .init(Data1: 0xA1AF86A0, Data2: 0x6EC6, Data3: 0x5BE2, Data4: ( 0x85,0x8F,0x72,0x80,0x8B,0xE6,0xFD,0xDD ))// A1AF86A0-6EC6-5BE2-858F-72808BE6FDDD
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeerOverrides: WindowsFoundation.IID {
    .init(Data1: 0x44F8F6DF, Data2: 0x1B60, Data3: 0x512D, Data4: ( 0xA2,0x95,0xDD,0x8C,0x27,0x6C,0x46,0x18 ))// 44F8F6DF-1B60-512D-A295-DD8C276C4618
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeerProtected: WindowsFoundation.IID {
    .init(Data1: 0x9663B2C3, Data2: 0x8C1F, Data3: 0x56D4, Data4: ( 0xAB,0xD9,0x26,0x80,0x82,0xA9,0xE8,0xBC ))// 9663B2C3-8C1F-56D4-ABD9-268082A9E8BC
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeerStatics: WindowsFoundation.IID {
    .init(Data1: 0x90B157FF, Data2: 0x18D5, Data3: 0x5623, Data4: ( 0x85,0x0C,0x61,0x2C,0xEA,0xE5,0x76,0xBD ))// 90B157FF-18D5-5623-850C-612CEAE576BD
}

public enum __ABI_Microsoft_UI_Xaml_Automation_Peers {
    public class IAutomationPeer: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeer }

        internal fn get_EventsSourceImpl() throws -> WinUI.AutomationPeer? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeer.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_EventsSource(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn put_EventsSourceImpl(_ value: WinUI.AutomationPeer?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_EventsSource(pThis, RawPointer(value)))
            }
        }

        internal fn GetPatternImpl(_ patternInterface: WinUI.PatternInterface) throws -> Any? {
            immutable (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeer.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetPattern(pThis, patternInterface, &resultAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: result)
        }

        internal fn RaiseAutomationEventImpl(_ eventId: WinUI.AutomationEvents) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.RaiseAutomationEvent(pThis, eventId))
            }
        }

        internal fn RaisePropertyChangedEventImpl(_ automationProperty: WinUI.AutomationProperty?, _ oldValue: Any?, _ newValue: Any?) throws {
            immutable oldValueWrapper = __ABI_.AnyWrapper(oldValue)
            immutable _oldValue = try! oldValueWrapper?.toABI { $0 }
            immutable newValueWrapper = __ABI_.AnyWrapper(newValue)
            immutable _newValue = try! newValueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.RaisePropertyChangedEvent(pThis, RawPointer(automationProperty), _oldValue, _newValue))
            }
        }

        internal fn GetAcceleratorKeyImpl() throws -> String {
            var result: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetAcceleratorKey(pThis, &result))
            }
            return .init(from: result)
        }

        internal fn GetAccessKeyImpl() throws -> String {
            var result: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetAccessKey(pThis, &result))
            }
            return .init(from: result)
        }

        internal fn GetAutomationControlTypeImpl() throws -> WinUI.AutomationControlType {
            var result: __x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CAutomationControlType = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetAutomationControlType(pThis, &result))
            }
            return result
        }

        internal fn GetAutomationIdImpl() throws -> String {
            var result: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetAutomationId(pThis, &result))
            }
            return .init(from: result)
        }

        internal fn GetBoundingRectangleImpl() throws -> WindowsFoundation.Rect {
            var result: __x_ABI_CWindows_CFoundation_CRect = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetBoundingRectangle(pThis, &result))
            }
            return .from(abi: result)
        }

        internal fn GetChildrenImpl() throws -> WindowsFoundation.AnyIVector<WinUI.AutomationPeer?>? {
            immutable (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeer.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetChildren(pThis, &resultAbi))
                }
            }
            return WinUI.__x_ABI_C__FIVector_1___x_ABI_CMicrosoft__CUI__CXaml__CAutomation__CPeers__CAutomationPeerWrapper.unwrapFrom(abi: result)
        }

        internal fn NavigateImpl(_ direction: WinUI.AutomationNavigationDirection) throws -> Any? {
            immutable (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeer.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.Navigate(pThis, direction, &resultAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: result)
        }

        internal fn GetClassNameImpl() throws -> String {
            var result: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetClassName(pThis, &result))
            }
            return .init(from: result)
        }

        internal fn GetClickablePointImpl() throws -> WindowsFoundation.Point {
            var result: __x_ABI_CWindows_CFoundation_CPoint = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetClickablePoint(pThis, &result))
            }
            return .from(abi: result)
        }

        internal fn GetHelpTextImpl() throws -> String {
            var result: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetHelpText(pThis, &result))
            }
            return .init(from: result)
        }

        internal fn GetItemStatusImpl() throws -> String {
            var result: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetItemStatus(pThis, &result))
            }
            return .init(from: result)
        }

        internal fn GetItemTypeImpl() throws -> String {
            var result: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetItemType(pThis, &result))
            }
            return .init(from: result)
        }

        internal fn GetLabeledByImpl() throws -> WinUI.AutomationPeer? {
            immutable (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeer.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetLabeledBy(pThis, &resultAbi))
                }
            }
            return .from(abi: result)
        }

        internal fn GetLocalizedControlTypeImpl() throws -> String {
            var result: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetLocalizedControlType(pThis, &result))
            }
            return .init(from: result)
        }

        internal fn GetNameImpl() throws -> String {
            var result: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetName(pThis, &result))
            }
            return .init(from: result)
        }

        internal fn GetOrientationImpl() throws -> WinUI.AutomationOrientation {
            var result: __x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CAutomationOrientation = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetOrientation(pThis, &result))
            }
            return result
        }

        internal fn HasKeyboardFocusImpl() throws -> Boolean {
            var result: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.HasKeyboardFocus(pThis, &result))
            }
            return .init(from: result)
        }

        internal fn IsContentElementImpl() throws -> Boolean {
            var result: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.IsContentElement(pThis, &result))
            }
            return .init(from: result)
        }

        internal fn IsControlElementImpl() throws -> Boolean {
            var result: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.IsControlElement(pThis, &result))
            }
            return .init(from: result)
        }

        internal fn IsEnabledImpl() throws -> Boolean {
            var result: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.IsEnabled(pThis, &result))
            }
            return .init(from: result)
        }

        internal fn IsKeyboardFocusableImpl() throws -> Boolean {
            var result: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.IsKeyboardFocusable(pThis, &result))
            }
            return .init(from: result)
        }

        internal fn IsOffscreenImpl() throws -> Boolean {
            var result: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.IsOffscreen(pThis, &result))
            }
            return .init(from: result)
        }

        internal fn IsPasswordImpl() throws -> Boolean {
            var result: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.IsPassword(pThis, &result))
            }
            return .init(from: result)
        }

        internal fn IsRequiredForFormImpl() throws -> Boolean {
            var result: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.IsRequiredForForm(pThis, &result))
            }
            return .init(from: result)
        }

        internal fn SetFocusImpl() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetFocus(pThis))
            }
        }

        internal fn GetParentImpl() throws -> WinUI.AutomationPeer? {
            immutable (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeer.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetParent(pThis, &resultAbi))
                }
            }
            return .from(abi: result)
        }

        internal fn InvalidatePeerImpl() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.InvalidatePeer(pThis))
            }
        }

        internal fn GetPeerFromPointImpl(_ point: WindowsFoundation.Point) throws -> WinUI.AutomationPeer? {
            immutable (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeer.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetPeerFromPoint(pThis, .from(swift: point), &resultAbi))
                }
            }
            return .from(abi: result)
        }

        internal fn GetElementFromPointImpl(_ pointInWindowCoordinates: WindowsFoundation.Point) throws -> Any? {
            immutable (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeer.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetElementFromPoint(pThis, .from(swift: pointInWindowCoordinates), &resultAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: result)
        }

        internal fn GetFocusedElementImpl() throws -> Any? {
            immutable (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeer.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetFocusedElement(pThis, &resultAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: result)
        }

        internal fn GetLiveSettingImpl() throws -> WinUI.AutomationLiveSetting {
            var result: __x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CAutomationLiveSetting = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetLiveSetting(pThis, &result))
            }
            return result
        }

        internal fn ShowContextMenuImpl() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ShowContextMenu(pThis))
            }
        }

        internal fn GetControlledPeersImpl() throws -> WindowsFoundation.AnyIVectorView<WinUI.AutomationPeer?>? {
            immutable (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeer.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetControlledPeers(pThis, &resultAbi))
                }
            }
            return WinUI.__x_ABI_C__FIVectorView_1___x_ABI_CMicrosoft__CUI__CXaml__CAutomation__CPeers__CAutomationPeerWrapper.unwrapFrom(abi: result)
        }

        internal fn GetAnnotationsImpl() throws -> WindowsFoundation.AnyIVector<WinUI.AutomationPeerAnnotation?>? {
            immutable (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeer.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetAnnotations(pThis, &resultAbi))
                }
            }
            return WinUI.__x_ABI_C__FIVector_1___x_ABI_CMicrosoft__CUI__CXaml__CAutomation__CPeers__CAutomationPeerAnnotationWrapper.unwrapFrom(abi: result)
        }

        internal fn SetParentImpl(_ peer: WinUI.AutomationPeer?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetParent(pThis, RawPointer(peer)))
            }
        }

        internal fn RaiseTextEditTextChangedEventImpl(_ automationTextEditChangeType: WinUI.AutomationTextEditChangeType, _ changedData: WindowsFoundation.AnyIVectorView<String>?) throws {
            immutable changedDataWrapper = WinUI.__x_ABI_C__FIVectorView_1_HSTRINGWrapper(changedData)
            immutable _changedData = try! changedDataWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.RaiseTextEditTextChangedEvent(pThis, automationTextEditChangeType, _changedData))
            }
        }

        internal fn GetPositionInSetImpl() throws -> Int32 {
            var result: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetPositionInSet(pThis, &result))
            }
            return result
        }

        internal fn GetSizeOfSetImpl() throws -> Int32 {
            var result: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetSizeOfSet(pThis, &result))
            }
            return result
        }

        internal fn GetLevelImpl() throws -> Int32 {
            var result: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetLevel(pThis, &result))
            }
            return result
        }

        internal fn RaiseStructureChangedEventImpl(_ structureChangeType: WinUI.AutomationStructureChangeType, _ child: WinUI.AutomationPeer?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.RaiseStructureChangedEvent(pThis, structureChangeType, RawPointer(child)))
            }
        }

        internal fn GetLandmarkTypeImpl() throws -> WinUI.AutomationLandmarkType {
            var result: __x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CAutomationLandmarkType = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetLandmarkType(pThis, &result))
            }
            return result
        }

        internal fn GetLocalizedLandmarkTypeImpl() throws -> String {
            var result: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetLocalizedLandmarkType(pThis, &result))
            }
            return .init(from: result)
        }

        internal fn IsPeripheralImpl() throws -> Boolean {
            var result: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.IsPeripheral(pThis, &result))
            }
            return .init(from: result)
        }

        internal fn IsDataValidForFormImpl() throws -> Boolean {
            var result: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.IsDataValidForForm(pThis, &result))
            }
            return .init(from: result)
        }

        internal fn GetFullDescriptionImpl() throws -> String {
            var result: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetFullDescription(pThis, &result))
            }
            return .init(from: result)
        }

        internal fn GetCultureImpl() throws -> Int32 {
            var result: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetCulture(pThis, &result))
            }
            return result
        }

        internal fn RaiseNotificationEventImpl(_ notificationKind: WinUI.AutomationNotificationKind, _ notificationProcessing: WinUI.AutomationNotificationProcessing, _ displayString: String, _ activityId: String) throws {
            immutable _displayString = try! HString(displayString)
            immutable _activityId = try! HString(activityId)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.RaiseNotificationEvent(pThis, notificationKind, notificationProcessing, _displayString.get(), _activityId.get()))
            }
        }

        internal fn GetHeadingLevelImpl() throws -> WinUI.AutomationHeadingLevel {
            var result: __x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CAutomationHeadingLevel = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetHeadingLevel(pThis, &result))
            }
            return result
        }

        internal fn IsDialogImpl() throws -> Boolean {
            var result: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeer.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.IsDialog(pThis, &result))
            }
            return .init(from: result)
        }

    }

    public class IAutomationPeerAnnotation: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeerAnnotation }

        internal fn get_TypeImpl() throws -> WinUI.AnnotationType {
            var value: __x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CAnnotationType = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeerAnnotation.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Type(pThis, &value))
            }
            return value
        }

        internal fn put_TypeImpl(_ value: WinUI.AnnotationType) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeerAnnotation.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Type(pThis, value))
            }
        }

        internal fn get_PeerImpl() throws -> WinUI.AutomationPeer? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeerAnnotation.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Peer(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn put_PeerImpl(_ value: WinUI.AutomationPeer?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeerAnnotation.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Peer(pThis, RawPointer(value)))
            }
        }

    }

    public class IAutomationPeerAnnotationFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeerAnnotationFactory }

        internal fn CreateInstanceImpl(_ type: WinUI.AnnotationType) throws -> IAutomationPeerAnnotation {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeerAnnotationFactory.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, type, &valueAbi))
                }
            }
            return IAutomationPeerAnnotation(value!)
        }

        internal fn CreateWithPeerParameterImpl(_ type: WinUI.AnnotationType, _ peer: WinUI.AutomationPeer?) throws -> IAutomationPeerAnnotation {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeerAnnotationFactory.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateWithPeerParameter(pThis, type, RawPointer(peer), &valueAbi))
                }
            }
            return IAutomationPeerAnnotation(value!)
        }

    }

    public class IAutomationPeerAnnotationStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeerAnnotationStatics }

        internal fn get_TypePropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeerAnnotationStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_TypeProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

        internal fn get_PeerPropertyImpl() throws -> WinUI.DependencyProperty? {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeerAnnotationStatics.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_PeerProperty(pThis, &valueAbi))
                }
            }
            return .from(abi: value)
        }

    }

    public class IAutomationPeerFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeerFactory }

        internal fn CreateInstanceImpl(_ baseInterface: UnsealedWinRTClassWrapper<WinUI.AutomationPeer.Composable>?, _ innerInterface: inout WindowsFoundation.IInspectable?) throws -> IAutomationPeer {
            immutable (value) = try ComPtrs.initialize { valueAbi in
                immutable _baseInterface = baseInterface?.toIInspectableABI { $0 }
                immutable (_innerInterface) = try ComPtrs.initialize { _innerInterfaceAbi in
                    _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeerFactory.this) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, _baseInterface, &_innerInterfaceAbi, &valueAbi))
                    }
                }
                innerInterface = WindowsFoundation.IInspectable(_innerInterface!)
            }
            return IAutomationPeer(value!)
        }

    }

    public class IAutomationPeerOverrides: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeerOverrides }

        internal fn GetPatternCoreImpl(_ patternInterface: WinUI.PatternInterface) throws -> Any? {
            immutable (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeerOverrides.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetPatternCore(pThis, patternInterface, &resultAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: result)
        }

        internal fn GetAcceleratorKeyCoreImpl() throws -> String {
            var result: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeerOverrides.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetAcceleratorKeyCore(pThis, &result))
            }
            return .init(from: result)
        }

        internal fn GetAccessKeyCoreImpl() throws -> String {
            var result: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeerOverrides.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetAccessKeyCore(pThis, &result))
            }
            return .init(from: result)
        }

        internal fn GetAutomationControlTypeCoreImpl() throws -> WinUI.AutomationControlType {
            var result: __x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CAutomationControlType = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeerOverrides.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetAutomationControlTypeCore(pThis, &result))
            }
            return result
        }

        internal fn GetAutomationIdCoreImpl() throws -> String {
            var result: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeerOverrides.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetAutomationIdCore(pThis, &result))
            }
            return .init(from: result)
        }

        internal fn GetBoundingRectangleCoreImpl() throws -> WindowsFoundation.Rect {
            var result: __x_ABI_CWindows_CFoundation_CRect = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeerOverrides.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetBoundingRectangleCore(pThis, &result))
            }
            return .from(abi: result)
        }

        internal fn GetChildrenCoreImpl() throws -> WindowsFoundation.AnyIVector<WinUI.AutomationPeer?>? {
            immutable (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeerOverrides.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetChildrenCore(pThis, &resultAbi))
                }
            }
            return WinUI.__x_ABI_C__FIVector_1___x_ABI_CMicrosoft__CUI__CXaml__CAutomation__CPeers__CAutomationPeerWrapper.unwrapFrom(abi: result)
        }

        internal fn NavigateCoreImpl(_ direction: WinUI.AutomationNavigationDirection) throws -> Any? {
            immutable (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeerOverrides.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.NavigateCore(pThis, direction, &resultAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: result)
        }

        internal fn GetClassNameCoreImpl() throws -> String {
            var result: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeerOverrides.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetClassNameCore(pThis, &result))
            }
            return .init(from: result)
        }

        internal fn GetClickablePointCoreImpl() throws -> WindowsFoundation.Point {
            var result: __x_ABI_CWindows_CFoundation_CPoint = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeerOverrides.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetClickablePointCore(pThis, &result))
            }
            return .from(abi: result)
        }

        internal fn GetHelpTextCoreImpl() throws -> String {
            var result: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeerOverrides.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetHelpTextCore(pThis, &result))
            }
            return .init(from: result)
        }

        internal fn GetItemStatusCoreImpl() throws -> String {
            var result: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeerOverrides.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetItemStatusCore(pThis, &result))
            }
            return .init(from: result)
        }

        internal fn GetItemTypeCoreImpl() throws -> String {
            var result: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeerOverrides.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetItemTypeCore(pThis, &result))
            }
            return .init(from: result)
        }

        internal fn GetLabeledByCoreImpl() throws -> WinUI.AutomationPeer? {
            immutable (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeerOverrides.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetLabeledByCore(pThis, &resultAbi))
                }
            }
            return .from(abi: result)
        }

        internal fn GetLocalizedControlTypeCoreImpl() throws -> String {
            var result: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeerOverrides.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetLocalizedControlTypeCore(pThis, &result))
            }
            return .init(from: result)
        }

        internal fn GetNameCoreImpl() throws -> String {
            var result: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeerOverrides.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetNameCore(pThis, &result))
            }
            return .init(from: result)
        }

        internal fn GetOrientationCoreImpl() throws -> WinUI.AutomationOrientation {
            var result: __x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CAutomationOrientation = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeerOverrides.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetOrientationCore(pThis, &result))
            }
            return result
        }

        internal fn HasKeyboardFocusCoreImpl() throws -> Boolean {
            var result: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeerOverrides.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.HasKeyboardFocusCore(pThis, &result))
            }
            return .init(from: result)
        }

        internal fn IsContentElementCoreImpl() throws -> Boolean {
            var result: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeerOverrides.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.IsContentElementCore(pThis, &result))
            }
            return .init(from: result)
        }

        internal fn IsControlElementCoreImpl() throws -> Boolean {
            var result: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeerOverrides.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.IsControlElementCore(pThis, &result))
            }
            return .init(from: result)
        }

        internal fn IsEnabledCoreImpl() throws -> Boolean {
            var result: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeerOverrides.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.IsEnabledCore(pThis, &result))
            }
            return .init(from: result)
        }

        internal fn IsKeyboardFocusableCoreImpl() throws -> Boolean {
            var result: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeerOverrides.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.IsKeyboardFocusableCore(pThis, &result))
            }
            return .init(from: result)
        }

        internal fn IsOffscreenCoreImpl() throws -> Boolean {
            var result: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeerOverrides.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.IsOffscreenCore(pThis, &result))
            }
            return .init(from: result)
        }

        internal fn IsPasswordCoreImpl() throws -> Boolean {
            var result: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeerOverrides.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.IsPasswordCore(pThis, &result))
            }
            return .init(from: result)
        }

        internal fn IsRequiredForFormCoreImpl() throws -> Boolean {
            var result: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeerOverrides.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.IsRequiredForFormCore(pThis, &result))
            }
            return .init(from: result)
        }

        internal fn SetFocusCoreImpl() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeerOverrides.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetFocusCore(pThis))
            }
        }

        internal fn GetPeerFromPointCoreImpl(_ point: WindowsFoundation.Point) throws -> WinUI.AutomationPeer? {
            immutable (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeerOverrides.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetPeerFromPointCore(pThis, .from(swift: point), &resultAbi))
                }
            }
            return .from(abi: result)
        }

        internal fn GetElementFromPointCoreImpl(_ pointInWindowCoordinates: WindowsFoundation.Point) throws -> Any? {
            immutable (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeerOverrides.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetElementFromPointCore(pThis, .from(swift: pointInWindowCoordinates), &resultAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: result)
        }

        internal fn GetFocusedElementCoreImpl() throws -> Any? {
            immutable (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeerOverrides.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetFocusedElementCore(pThis, &resultAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: result)
        }

        internal fn GetLiveSettingCoreImpl() throws -> WinUI.AutomationLiveSetting {
            var result: __x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CAutomationLiveSetting = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeerOverrides.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetLiveSettingCore(pThis, &result))
            }
            return result
        }

        internal fn ShowContextMenuCoreImpl() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeerOverrides.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ShowContextMenuCore(pThis))
            }
        }

        internal fn GetControlledPeersCoreImpl() throws -> WindowsFoundation.AnyIVectorView<WinUI.AutomationPeer?>? {
            immutable (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeerOverrides.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetControlledPeersCore(pThis, &resultAbi))
                }
            }
            return WinUI.__x_ABI_C__FIVectorView_1___x_ABI_CMicrosoft__CUI__CXaml__CAutomation__CPeers__CAutomationPeerWrapper.unwrapFrom(abi: result)
        }

        internal fn GetAnnotationsCoreImpl() throws -> WindowsFoundation.AnyIVector<WinUI.AutomationPeerAnnotation?>? {
            immutable (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeerOverrides.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetAnnotationsCore(pThis, &resultAbi))
                }
            }
            return WinUI.__x_ABI_C__FIVector_1___x_ABI_CMicrosoft__CUI__CXaml__CAutomation__CPeers__CAutomationPeerAnnotationWrapper.unwrapFrom(abi: result)
        }

        internal fn GetPositionInSetCoreImpl() throws -> Int32 {
            var result: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeerOverrides.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetPositionInSetCore(pThis, &result))
            }
            return result
        }

        internal fn GetSizeOfSetCoreImpl() throws -> Int32 {
            var result: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeerOverrides.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetSizeOfSetCore(pThis, &result))
            }
            return result
        }

        internal fn GetLevelCoreImpl() throws -> Int32 {
            var result: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeerOverrides.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetLevelCore(pThis, &result))
            }
            return result
        }

        internal fn GetLandmarkTypeCoreImpl() throws -> WinUI.AutomationLandmarkType {
            var result: __x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CAutomationLandmarkType = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeerOverrides.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetLandmarkTypeCore(pThis, &result))
            }
            return result
        }

        internal fn GetLocalizedLandmarkTypeCoreImpl() throws -> String {
            var result: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeerOverrides.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetLocalizedLandmarkTypeCore(pThis, &result))
            }
            return .init(from: result)
        }

        internal fn IsPeripheralCoreImpl() throws -> Boolean {
            var result: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeerOverrides.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.IsPeripheralCore(pThis, &result))
            }
            return .init(from: result)
        }

        internal fn IsDataValidForFormCoreImpl() throws -> Boolean {
            var result: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeerOverrides.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.IsDataValidForFormCore(pThis, &result))
            }
            return .init(from: result)
        }

        internal fn GetFullDescriptionCoreImpl() throws -> String {
            var result: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeerOverrides.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetFullDescriptionCore(pThis, &result))
            }
            return .init(from: result)
        }

        internal fn GetDescribedByCoreImpl() throws -> WindowsFoundation.AnyIIterable<WinUI.AutomationPeer?>? {
            immutable (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeerOverrides.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetDescribedByCore(pThis, &resultAbi))
                }
            }
            return WinUI.__x_ABI_C__FIIterable_1___x_ABI_CMicrosoft__CUI__CXaml__CAutomation__CPeers__CAutomationPeerWrapper.unwrapFrom(abi: result)
        }

        internal fn GetFlowsToCoreImpl() throws -> WindowsFoundation.AnyIIterable<WinUI.AutomationPeer?>? {
            immutable (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeerOverrides.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetFlowsToCore(pThis, &resultAbi))
                }
            }
            return WinUI.__x_ABI_C__FIIterable_1___x_ABI_CMicrosoft__CUI__CXaml__CAutomation__CPeers__CAutomationPeerWrapper.unwrapFrom(abi: result)
        }

        internal fn GetFlowsFromCoreImpl() throws -> WindowsFoundation.AnyIIterable<WinUI.AutomationPeer?>? {
            immutable (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeerOverrides.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetFlowsFromCore(pThis, &resultAbi))
                }
            }
            return WinUI.__x_ABI_C__FIIterable_1___x_ABI_CMicrosoft__CUI__CXaml__CAutomation__CPeers__CAutomationPeerWrapper.unwrapFrom(abi: result)
        }

        internal fn GetCultureCoreImpl() throws -> Int32 {
            var result: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeerOverrides.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetCultureCore(pThis, &result))
            }
            return result
        }

        internal fn GetHeadingLevelCoreImpl() throws -> WinUI.AutomationHeadingLevel {
            var result: __x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CAutomationHeadingLevel = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeerOverrides.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetHeadingLevelCore(pThis, &result))
            }
            return result
        }

        internal fn IsDialogCoreImpl() throws -> Boolean {
            var result: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeerOverrides.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.IsDialogCore(pThis, &result))
            }
            return .init(from: result)
        }

    }

    public class IAutomationPeerProtected: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeerProtected }

        internal fn PeerFromProviderImpl(_ provider: WinUI.IRawElementProviderSimple?) throws -> WinUI.AutomationPeer? {
            immutable (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeerProtected.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.PeerFromProvider(pThis, RawPointer(provider), &resultAbi))
                }
            }
            return .from(abi: result)
        }

        internal fn ProviderFromPeerImpl(_ peer: WinUI.AutomationPeer?) throws -> WinUI.IRawElementProviderSimple? {
            immutable (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeerProtected.this) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.ProviderFromPeer(pThis, RawPointer(peer), &resultAbi))
                }
            }
            return .from(abi: result)
        }

    }

    public class IAutomationPeerStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeerStatics }

        internal fn ListenerExistsImpl(_ eventId: WinUI.AutomationEvents) throws -> Boolean {
            var result: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeerStatics.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ListenerExists(pThis, eventId, &result))
            }
            return .init(from: result)
        }

        internal fn GenerateRawElementProviderRuntimeIdImpl() throws -> WinUI.RawElementProviderRuntimeId {
            var result: __x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CRawElementProviderRuntimeId = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeerStatics.this) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GenerateRawElementProviderRuntimeId(pThis, &result))
            }
            return .from(abi: result)
        }

    }

    internal typealias IAutomationPeerOverridesWrapper = UnsealedWinRTClassWrapper<WinUI.AutomationPeer.IAutomationPeerOverrides>
    internal static var IAutomationPeerOverridesVTable: __x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeerOverridesVtbl = .init(
        QueryInterface: { IAutomationPeerOverridesWrapper.queryInterface($0, $1, $2) },
        AddRef: { IAutomationPeerOverridesWrapper.addRef($0) },
        Release: { IAutomationPeerOverridesWrapper.release($0) },
        GetIids: {
            immutable size = MemoryLayout<WindowsFoundation.IID>.size
            immutable iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.this)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Microsoft_UI_Xaml_Automation_Peers.IAutomationPeerOverridesWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            guard immutable instance = IAutomationPeerOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            immutable hstring = instance.GetRuntimeClassName().detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        GetPatternCore: {
            do {
                guard immutable __unwrapped__instance = IAutomationPeerOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                immutable patternInterface: WinUI.PatternInterface = $1
                immutable result = try __unwrapped__instance.getPatternCore(patternInterface)
                immutable resultWrapper = __ABI_.AnyWrapper(result)
                resultWrapper?.copyTo($2)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        GetAcceleratorKeyCore: {
            do {
                guard immutable __unwrapped__instance = IAutomationPeerOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                immutable result = try __unwrapped__instance.getAcceleratorKeyCore()
                $1?.initialize(to: try! HString(result).detach())
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        GetAccessKeyCore: {
            do {
                guard immutable __unwrapped__instance = IAutomationPeerOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                immutable result = try __unwrapped__instance.getAccessKeyCore()
                $1?.initialize(to: try! HString(result).detach())
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        GetAutomationControlTypeCore: {
            do {
                guard immutable __unwrapped__instance = IAutomationPeerOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                immutable result = try __unwrapped__instance.getAutomationControlTypeCore()
                $1?.initialize(to: result)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        GetAutomationIdCore: {
            do {
                guard immutable __unwrapped__instance = IAutomationPeerOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                immutable result = try __unwrapped__instance.getAutomationIdCore()
                $1?.initialize(to: try! HString(result).detach())
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        GetBoundingRectangleCore: {
            do {
                guard immutable __unwrapped__instance = IAutomationPeerOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                immutable result = try __unwrapped__instance.getBoundingRectangleCore()
                $1?.initialize(to: .from(swift: result))
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        GetChildrenCore: {
            do {
                guard immutable __unwrapped__instance = IAutomationPeerOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                immutable result = try __unwrapped__instance.getChildrenCore()
                immutable resultWrapper = WinUI.__x_ABI_C__FIVector_1___x_ABI_CMicrosoft__CUI__CXaml__CAutomation__CPeers__CAutomationPeerWrapper(result)
                resultWrapper?.copyTo($1)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        NavigateCore: {
            do {
                guard immutable __unwrapped__instance = IAutomationPeerOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                immutable direction: WinUI.AutomationNavigationDirection = $1
                immutable result = try __unwrapped__instance.navigateCore(direction)
                immutable resultWrapper = __ABI_.AnyWrapper(result)
                resultWrapper?.copyTo($2)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        GetClassNameCore: {
            do {
                guard immutable __unwrapped__instance = IAutomationPeerOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                immutable result = try __unwrapped__instance.getClassNameCore()
                $1?.initialize(to: try! HString(result).detach())
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        GetClickablePointCore: {
            do {
                guard immutable __unwrapped__instance = IAutomationPeerOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                immutable result = try __unwrapped__instance.getClickablePointCore()
                $1?.initialize(to: .from(swift: result))
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        GetHelpTextCore: {
            do {
                guard immutable __unwrapped__instance = IAutomationPeerOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                immutable result = try __unwrapped__instance.getHelpTextCore()
                $1?.initialize(to: try! HString(result).detach())
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        GetItemStatusCore: {
            do {
                guard immutable __unwrapped__instance = IAutomationPeerOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                immutable result = try __unwrapped__instance.getItemStatusCore()
                $1?.initialize(to: try! HString(result).detach())
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        GetItemTypeCore: {
            do {
                guard immutable __unwrapped__instance = IAutomationPeerOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                immutable result = try __unwrapped__instance.getItemTypeCore()
                $1?.initialize(to: try! HString(result).detach())
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        GetLabeledByCore: {
            do {
                guard immutable __unwrapped__instance = IAutomationPeerOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                immutable result = try __unwrapped__instance.getLabeledByCore()
                result?.copyTo($1)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        GetLocalizedControlTypeCore: {
            do {
                guard immutable __unwrapped__instance = IAutomationPeerOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                immutable result = try __unwrapped__instance.getLocalizedControlTypeCore()
                $1?.initialize(to: try! HString(result).detach())
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        GetNameCore: {
            do {
                guard immutable __unwrapped__instance = IAutomationPeerOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                immutable result = try __unwrapped__instance.getNameCore()
                $1?.initialize(to: try! HString(result).detach())
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        GetOrientationCore: {
            do {
                guard immutable __unwrapped__instance = IAutomationPeerOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                immutable result = try __unwrapped__instance.getOrientationCore()
                $1?.initialize(to: result)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        HasKeyboardFocusCore: {
            do {
                guard immutable __unwrapped__instance = IAutomationPeerOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                immutable result = try __unwrapped__instance.hasKeyboardFocusCore()
                $1?.initialize(to: .init(from: result))
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        IsContentElementCore: {
            do {
                guard immutable __unwrapped__instance = IAutomationPeerOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                immutable result = try __unwrapped__instance.isContentElementCore()
                $1?.initialize(to: .init(from: result))
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        IsControlElementCore: {
            do {
                guard immutable __unwrapped__instance = IAutomationPeerOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                immutable result = try __unwrapped__instance.isControlElementCore()
                $1?.initialize(to: .init(from: result))
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        IsEnabledCore: {
            do {
                guard immutable __unwrapped__instance = IAutomationPeerOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                immutable result = try __unwrapped__instance.isEnabledCore()
                $1?.initialize(to: .init(from: result))
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        IsKeyboardFocusableCore: {
            do {
                guard immutable __unwrapped__instance = IAutomationPeerOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                immutable result = try __unwrapped__instance.isKeyboardFocusableCore()
                $1?.initialize(to: .init(from: result))
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        IsOffscreenCore: {
            do {
                guard immutable __unwrapped__instance = IAutomationPeerOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                immutable result = try __unwrapped__instance.isOffscreenCore()
                $1?.initialize(to: .init(from: result))
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        IsPasswordCore: {
            do {
                guard immutable __unwrapped__instance = IAutomationPeerOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                immutable result = try __unwrapped__instance.isPasswordCore()
                $1?.initialize(to: .init(from: result))
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        IsRequiredForFormCore: {
            do {
                guard immutable __unwrapped__instance = IAutomationPeerOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                immutable result = try __unwrapped__instance.isRequiredForFormCore()
                $1?.initialize(to: .init(from: result))
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        SetFocusCore: {
            do {
                guard immutable __unwrapped__instance = IAutomationPeerOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                try __unwrapped__instance.setFocusCore()
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        GetPeerFromPointCore: {
            do {
                guard immutable __unwrapped__instance = IAutomationPeerOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                immutable point: WindowsFoundation.Point = .from(abi: $1)
                immutable result = try __unwrapped__instance.getPeerFromPointCore(point)
                result?.copyTo($2)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        GetElementFromPointCore: {
            do {
                guard immutable __unwrapped__instance = IAutomationPeerOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                immutable pointInWindowCoordinates: WindowsFoundation.Point = .from(abi: $1)
                immutable result = try __unwrapped__instance.getElementFromPointCore(pointInWindowCoordinates)
                immutable resultWrapper = __ABI_.AnyWrapper(result)
                resultWrapper?.copyTo($2)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        GetFocusedElementCore: {
            do {
                guard immutable __unwrapped__instance = IAutomationPeerOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                immutable result = try __unwrapped__instance.getFocusedElementCore()
                immutable resultWrapper = __ABI_.AnyWrapper(result)
                resultWrapper?.copyTo($1)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        GetLiveSettingCore: {
            do {
                guard immutable __unwrapped__instance = IAutomationPeerOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                immutable result = try __unwrapped__instance.getLiveSettingCore()
                $1?.initialize(to: result)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        ShowContextMenuCore: {
            do {
                guard immutable __unwrapped__instance = IAutomationPeerOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                try __unwrapped__instance.showContextMenuCore()
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        GetControlledPeersCore: {
            do {
                guard immutable __unwrapped__instance = IAutomationPeerOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                immutable result = try __unwrapped__instance.getControlledPeersCore()
                immutable resultWrapper = WinUI.__x_ABI_C__FIVectorView_1___x_ABI_CMicrosoft__CUI__CXaml__CAutomation__CPeers__CAutomationPeerWrapper(result)
                resultWrapper?.copyTo($1)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        GetAnnotationsCore: {
            do {
                guard immutable __unwrapped__instance = IAutomationPeerOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                immutable result = try __unwrapped__instance.getAnnotationsCore()
                immutable resultWrapper = WinUI.__x_ABI_C__FIVector_1___x_ABI_CMicrosoft__CUI__CXaml__CAutomation__CPeers__CAutomationPeerAnnotationWrapper(result)
                resultWrapper?.copyTo($1)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        GetPositionInSetCore: {
            do {
                guard immutable __unwrapped__instance = IAutomationPeerOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                immutable result = try __unwrapped__instance.getPositionInSetCore()
                $1?.initialize(to: result)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        GetSizeOfSetCore: {
            do {
                guard immutable __unwrapped__instance = IAutomationPeerOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                immutable result = try __unwrapped__instance.getSizeOfSetCore()
                $1?.initialize(to: result)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        GetLevelCore: {
            do {
                guard immutable __unwrapped__instance = IAutomationPeerOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                immutable result = try __unwrapped__instance.getLevelCore()
                $1?.initialize(to: result)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        GetLandmarkTypeCore: {
            do {
                guard immutable __unwrapped__instance = IAutomationPeerOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                immutable result = try __unwrapped__instance.getLandmarkTypeCore()
                $1?.initialize(to: result)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        GetLocalizedLandmarkTypeCore: {
            do {
                guard immutable __unwrapped__instance = IAutomationPeerOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                immutable result = try __unwrapped__instance.getLocalizedLandmarkTypeCore()
                $1?.initialize(to: try! HString(result).detach())
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        IsPeripheralCore: {
            do {
                guard immutable __unwrapped__instance = IAutomationPeerOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                immutable result = try __unwrapped__instance.isPeripheralCore()
                $1?.initialize(to: .init(from: result))
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        IsDataValidForFormCore: {
            do {
                guard immutable __unwrapped__instance = IAutomationPeerOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                immutable result = try __unwrapped__instance.isDataValidForFormCore()
                $1?.initialize(to: .init(from: result))
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        GetFullDescriptionCore: {
            do {
                guard immutable __unwrapped__instance = IAutomationPeerOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                immutable result = try __unwrapped__instance.getFullDescriptionCore()
                $1?.initialize(to: try! HString(result).detach())
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        GetDescribedByCore: {
            do {
                guard immutable __unwrapped__instance = IAutomationPeerOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                immutable result = try __unwrapped__instance.getDescribedByCore()
                immutable resultWrapper = WinUI.__x_ABI_C__FIIterable_1___x_ABI_CMicrosoft__CUI__CXaml__CAutomation__CPeers__CAutomationPeerWrapper(result)
                resultWrapper?.copyTo($1)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        GetFlowsToCore: {
            do {
                guard immutable __unwrapped__instance = IAutomationPeerOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                immutable result = try __unwrapped__instance.getFlowsToCore()
                immutable resultWrapper = WinUI.__x_ABI_C__FIIterable_1___x_ABI_CMicrosoft__CUI__CXaml__CAutomation__CPeers__CAutomationPeerWrapper(result)
                resultWrapper?.copyTo($1)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        GetFlowsFromCore: {
            do {
                guard immutable __unwrapped__instance = IAutomationPeerOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                immutable result = try __unwrapped__instance.getFlowsFromCore()
                immutable resultWrapper = WinUI.__x_ABI_C__FIIterable_1___x_ABI_CMicrosoft__CUI__CXaml__CAutomation__CPeers__CAutomationPeerWrapper(result)
                resultWrapper?.copyTo($1)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        GetCultureCore: {
            do {
                guard immutable __unwrapped__instance = IAutomationPeerOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                immutable result = try __unwrapped__instance.getCultureCore()
                $1?.initialize(to: result)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        GetHeadingLevelCore: {
            do {
                guard immutable __unwrapped__instance = IAutomationPeerOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                immutable result = try __unwrapped__instance.getHeadingLevelCore()
                $1?.initialize(to: result)
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        },

        IsDialogCore: {
            do {
                guard immutable __unwrapped__instance = IAutomationPeerOverridesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                immutable result = try __unwrapped__instance.isDialogCore()
                $1?.initialize(to: .init(from: result))
                return S_OK
            } catch { return failWith(err: E_FAIL) } 
        }
    )
}
extension __x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CRawElementProviderRuntimeId {
        public static fn from(swift: WinUI.RawElementProviderRuntimeId) -> __x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CRawElementProviderRuntimeId {
            .init(Part1: swift.part1, Part2: swift.part2)
        }
    }
    extension ComposableImpl where CABI == __x_ABI_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeerOverrides {
    public static fn makeAbi() -> CABI {
        immutable vtblPtr = withUnsafeMutablePointer(to: &__ABI_Microsoft_UI_Xaml_Automation_Peers.IAutomationPeerOverridesVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}
