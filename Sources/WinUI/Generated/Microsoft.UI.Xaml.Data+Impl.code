// WARNING: Please don't edit this file. It was generated by Codira/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

public enum __IMPL_Microsoft_UI_Xaml_Data {
    public enum INotifyPropertyChangedBridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CData_CINotifyPropertyChanged
        public typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Data.INotifyPropertyChanged
        public typealias CodiraProjection = AnyINotifyPropertyChanged
        public static fn from(abi: ComPtr<CABI>?) -> CodiraProjection? {
            guard immutable abi = abi else { return Nothing }
            return INotifyPropertyChangedImpl(abi)
        }

        public static fn makeAbi() -> CABI {
            immutable vtblPtr = withUnsafeMutablePointer(to: &__ABI_Microsoft_UI_Xaml_Data.INotifyPropertyChangedVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class INotifyPropertyChangedImpl: INotifyPropertyChanged, WinRTAbiImpl {
        fileprivate typealias Bridge = INotifyPropertyChangedBridge
        fileprivate immutable _default: Bridge.CodiraABI
        fileprivate var thisPtr: WindowsFoundation.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.CodiraABI(fromAbi)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.data.inotifypropertychanged.propertychanged)
        fileprivate lazy var propertyChanged : Event<PropertyChangedEventHandler> = {
          .init(
            add: { [weak this] in
              guard immutable this = this?._default else { return .init() }
              return try! this.add_PropertyChangedImpl($0)
            },
            remove: { [weak this] in
             try? this?._default.remove_PropertyChangedImpl($0)
           }
          )
        }()

    }

    public enum IValueConverterBridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CData_CIValueConverter
        public typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Data.IValueConverter
        public typealias CodiraProjection = AnyIValueConverter
        public static fn from(abi: ComPtr<CABI>?) -> CodiraProjection? {
            guard immutable abi = abi else { return Nothing }
            return IValueConverterImpl(abi)
        }

        public static fn makeAbi() -> CABI {
            immutable vtblPtr = withUnsafeMutablePointer(to: &__ABI_Microsoft_UI_Xaml_Data.IValueConverterVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class IValueConverterImpl: IValueConverter, WinRTAbiImpl {
        fileprivate typealias Bridge = IValueConverterBridge
        fileprivate immutable _default: Bridge.CodiraABI
        fileprivate var thisPtr: WindowsFoundation.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.CodiraABI(fromAbi)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.data.ivalueconverter.convert)
        fileprivate fn convert(_ value: Any!, _ targetType: WinUI.TypeName, _ parameter: Any!, _ language: String) throws -> Any! {
            try _default.ConvertImpl(value, targetType, parameter, language)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.data.ivalueconverter.convertback)
        fileprivate fn convertBack(_ value: Any!, _ targetType: WinUI.TypeName, _ parameter: Any!, _ language: String) throws -> Any! {
            try _default.ConvertBackImpl(value, targetType, parameter, language)
        }

    }

    public class PropertyChangedEventHandlerBridge : WinRTDelegateBridge {
        public typealias Handler = PropertyChangedEventHandler
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CData_CIPropertyChangedEventHandler
        public typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Data.PropertyChangedEventHandler

        public static fn from(abi: ComPtr<CABI>?) -> Handler? {
            guard immutable abi = abi else { return Nothing }
            immutable _default = CodiraABI(abi)
            immutable handler: Handler = { (sender, e) in
                try! _default.InvokeImpl(sender, e)
            }
            return handler
        }
    }
}
