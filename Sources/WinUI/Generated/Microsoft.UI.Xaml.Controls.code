// WARNING: Please don't edit this file. It was generated by Codira/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import UWP
@_spi(WinRTInternal) @_spi(WinRTImplements) import WebView2Core
@_spi(WinRTInternal) @_spi(WinRTImplements) import WinAppSDK
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.autosuggestionboxtextchangereason)
public typealias AutoSuggestionBoxTextChangeReason = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CAutoSuggestionBoxTextChangeReason
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.backgroundsizing)
public typealias BackgroundSizing = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CBackgroundSizing
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.candidatewindowalignment)
public typealias CandidateWindowAlignment = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CCandidateWindowAlignment
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.charactercasing)
public typealias CharacterCasing = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CCharacterCasing
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.clickmode)
public typealias ClickMode = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CClickMode
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.comboboxselectionchangedtrigger)
public typealias ComboBoxSelectionChangedTrigger = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CComboBoxSelectionChangedTrigger
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialogbutton)
public typealias ContentDialogButton = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CContentDialogButton
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialogplacement)
public typealias ContentDialogPlacement = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CContentDialogPlacement
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialogresult)
public typealias ContentDialogResult = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CContentDialogResult
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.incrementalloadingtrigger)
public typealias IncrementalLoadingTrigger = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIncrementalLoadingTrigger
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.lightdismissoverlaymode)
public typealias LightDismissOverlayMode = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CLightDismissOverlayMode
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewreordermode)
public typealias ListViewReorderMode = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CListViewReorderMode
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewselectionmode)
public typealias ListViewSelectionMode = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CListViewSelectionMode
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewbackbuttonvisible)
public typealias NavigationViewBackButtonVisible = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CNavigationViewBackButtonVisible
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewdisplaymode)
public typealias NavigationViewDisplayMode = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CNavigationViewDisplayMode
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewoverflowlabelmode)
public typealias NavigationViewOverflowLabelMode = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CNavigationViewOverflowLabelMode
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewpanedisplaymode)
public typealias NavigationViewPaneDisplayMode = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CNavigationViewPaneDisplayMode
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewselectionfollowsfocus)
public typealias NavigationViewSelectionFollowsFocus = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CNavigationViewSelectionFollowsFocus
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewshouldernavigationenabled)
public typealias NavigationViewShoulderNavigationEnabled = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CNavigationViewShoulderNavigationEnabled
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.orientation)
public typealias Orientation = __x_ABI_CMicrosoft_CUI_CXaml_CControls_COrientation
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.passwordrevealmode)
public typealias PasswordRevealMode = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPasswordRevealMode
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.requirespointer)
public typealias RequiresPointer = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CRequiresPointer
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollbarvisibility)
public typealias ScrollBarVisibility = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollBarVisibility
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollintoviewalignment)
public typealias ScrollIntoViewAlignment = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollIntoViewAlignment
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollmode)
public typealias ScrollMode = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollMode
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollinganimationmode)
public typealias ScrollingAnimationMode = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingAnimationMode
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollingchainmode)
public typealias ScrollingChainMode = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingChainMode
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollingcontentorientation)
public typealias ScrollingContentOrientation = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingContentOrientation
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollinginputkinds)
public typealias ScrollingInputKinds = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingInputKinds
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollinginteractionstate)
public typealias ScrollingInteractionState = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingInteractionState
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollingrailmode)
public typealias ScrollingRailMode = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingRailMode
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollingscrollbarvisibility)
public typealias ScrollingScrollBarVisibility = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingScrollBarVisibility
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollingscrollmode)
public typealias ScrollingScrollMode = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingScrollMode
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollingsnappointsmode)
public typealias ScrollingSnapPointsMode = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingSnapPointsMode
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollingzoommode)
public typealias ScrollingZoomMode = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingZoomMode
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.snappointstype)
public typealias SnapPointsType = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSnapPointsType
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.splitviewdisplaymode)
public typealias SplitViewDisplayMode = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSplitViewDisplayMode
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.splitviewpaneplacement)
public typealias SplitViewPanePlacement = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSplitViewPanePlacement
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.zoommode)
public typealias ZoomMode = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CZoomMode
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.anchorrequestedeventargs)
public final class AnchorRequestedEventArgs : WinRTClass {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IAnchorRequestedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAnchorRequestedEventArgs
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAnchorRequestedEventArgs>?) -> AnchorRequestedEventArgs? {
        guard immutable abi = abi else { return Nothing }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.anchorrequestedeventargs.anchor)
    public var anchor : WinUI.UIElement! {
        get { try! _default.get_AnchorImpl() }
        set { try! _default.put_AnchorImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.anchorrequestedeventargs.anchorcandidates)
    public var anchorCandidates : WindowsFoundation.AnyIVector<WinUI.UIElement?>! {
        get { try! _default.get_AnchorCandidatesImpl() }
    }

    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.autosuggestbox)
public final class AutoSuggestBox : WinUI.ItemsControl {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IAutoSuggestBox
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAutoSuggestBox
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAutoSuggestBox>?) -> AutoSuggestBox? {
        guard immutable abi = abi else { return Nothing }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Controls.AutoSuggestBox")))
    }

    private static immutable _IAutoSuggestBoxStatics: __ABI_Microsoft_UI_Xaml_Controls.IAutoSuggestBoxStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.AutoSuggestBox"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.autosuggestbox.automaximizesuggestionareaproperty)
    public static var autoMaximizeSuggestionAreaProperty : WinUI.DependencyProperty! {
        get { try! _IAutoSuggestBoxStatics.get_AutoMaximizeSuggestionAreaPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.autosuggestbox.descriptionproperty)
    public static var descriptionProperty : WinUI.DependencyProperty! {
        get { try! _IAutoSuggestBoxStatics.get_DescriptionPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.autosuggestbox.headerproperty)
    public static var headerProperty : WinUI.DependencyProperty! {
        get { try! _IAutoSuggestBoxStatics.get_HeaderPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.autosuggestbox.issuggestionlistopenproperty)
    public static var isSuggestionListOpenProperty : WinUI.DependencyProperty! {
        get { try! _IAutoSuggestBoxStatics.get_IsSuggestionListOpenPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.autosuggestbox.lightdismissoverlaymodeproperty)
    public static var lightDismissOverlayModeProperty : WinUI.DependencyProperty! {
        get { try! _IAutoSuggestBoxStatics.get_LightDismissOverlayModePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.autosuggestbox.maxsuggestionlistheightproperty)
    public static var maxSuggestionListHeightProperty : WinUI.DependencyProperty! {
        get { try! _IAutoSuggestBoxStatics.get_MaxSuggestionListHeightPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.autosuggestbox.placeholdertextproperty)
    public static var placeholderTextProperty : WinUI.DependencyProperty! {
        get { try! _IAutoSuggestBoxStatics.get_PlaceholderTextPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.autosuggestbox.queryiconproperty)
    public static var queryIconProperty : WinUI.DependencyProperty! {
        get { try! _IAutoSuggestBoxStatics.get_QueryIconPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.autosuggestbox.textboxstyleproperty)
    public static var textBoxStyleProperty : WinUI.DependencyProperty! {
        get { try! _IAutoSuggestBoxStatics.get_TextBoxStylePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.autosuggestbox.textmemberpathproperty)
    public static var textMemberPathProperty : WinUI.DependencyProperty! {
        get { try! _IAutoSuggestBoxStatics.get_TextMemberPathPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.autosuggestbox.textproperty)
    public static var textProperty : WinUI.DependencyProperty! {
        get { try! _IAutoSuggestBoxStatics.get_TextPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.autosuggestbox.updatetextonselectproperty)
    public static var updateTextOnSelectProperty : WinUI.DependencyProperty! {
        get { try! _IAutoSuggestBoxStatics.get_UpdateTextOnSelectPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.autosuggestbox.automaximizesuggestionarea)
    public var autoMaximizeSuggestionArea : Boolean {
        get { try! _default.get_AutoMaximizeSuggestionAreaImpl() }
        set { try! _default.put_AutoMaximizeSuggestionAreaImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.autosuggestbox.description)
    public var description : Any! {
        get { try! _default.get_DescriptionImpl() }
        set { try! _default.put_DescriptionImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.autosuggestbox.header)
    public var header : Any! {
        get { try! _default.get_HeaderImpl() }
        set { try! _default.put_HeaderImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.autosuggestbox.issuggestionlistopen)
    public var isSuggestionListOpen : Boolean {
        get { try! _default.get_IsSuggestionListOpenImpl() }
        set { try! _default.put_IsSuggestionListOpenImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.autosuggestbox.lightdismissoverlaymode)
    public var lightDismissOverlayMode : LightDismissOverlayMode {
        get { try! _default.get_LightDismissOverlayModeImpl() }
        set { try! _default.put_LightDismissOverlayModeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.autosuggestbox.maxsuggestionlistheight)
    public var maxSuggestionListHeight : Double {
        get { try! _default.get_MaxSuggestionListHeightImpl() }
        set { try! _default.put_MaxSuggestionListHeightImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.autosuggestbox.placeholdertext)
    public var placeholderText : String {
        get { try! _default.get_PlaceholderTextImpl() }
        set { try! _default.put_PlaceholderTextImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.autosuggestbox.queryicon)
    public var queryIcon : IconElement! {
        get { try! _default.get_QueryIconImpl() }
        set { try! _default.put_QueryIconImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.autosuggestbox.text)
    public var text : String {
        get { try! _default.get_TextImpl() }
        set { try! _default.put_TextImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.autosuggestbox.textboxstyle)
    public var textBoxStyle : WinUI.Style! {
        get { try! _default.get_TextBoxStyleImpl() }
        set { try! _default.put_TextBoxStyleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.autosuggestbox.textmemberpath)
    public var textMemberPath : String {
        get { try! _default.get_TextMemberPathImpl() }
        set { try! _default.put_TextMemberPathImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.autosuggestbox.updatetextonselect)
    public var updateTextOnSelect : Boolean {
        get { try! _default.get_UpdateTextOnSelectImpl() }
        set { try! _default.put_UpdateTextOnSelectImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.autosuggestbox.querysubmitted)
    public lazy var querySubmitted : Event<TypedEventHandler<AutoSuggestBox?, AutoSuggestBoxQuerySubmittedEventArgs?>> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_QuerySubmittedImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_QuerySubmittedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.autosuggestbox.suggestionchosen)
    public lazy var suggestionChosen : Event<TypedEventHandler<AutoSuggestBox?, AutoSuggestBoxSuggestionChosenEventArgs?>> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_SuggestionChosenImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_SuggestionChosenImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.autosuggestbox.textchanged)
    public lazy var textChanged : Event<TypedEventHandler<AutoSuggestBox?, AutoSuggestBoxTextChangedEventArgs?>> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_TextChangedImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_TextChangedImpl($0)
       }
      )
    }()

    internal enum IItemsControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControlOverrides
        internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IItemsControlOverrides
        internal typealias Class = AutoSuggestBox
        internal typealias CodiraProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAutoSuggestBox
            internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IAutoSuggestBox
        }
    }
    internal typealias Composable = IItemsControlOverrides
    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.autosuggestboxquerysubmittedeventargs)
public final class AutoSuggestBoxQuerySubmittedEventArgs : WinUI.DependencyObject {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IAutoSuggestBoxQuerySubmittedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAutoSuggestBoxQuerySubmittedEventArgs
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAutoSuggestBoxQuerySubmittedEventArgs>?) -> AutoSuggestBoxQuerySubmittedEventArgs? {
        guard immutable abi = abi else { return Nothing }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Controls.AutoSuggestBoxQuerySubmittedEventArgs")))
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.autosuggestboxquerysubmittedeventargs.chosensuggestion)
    public var chosenSuggestion : Any! {
        get { try! _default.get_ChosenSuggestionImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.autosuggestboxquerysubmittedeventargs.querytext)
    public var queryText : String {
        get { try! _default.get_QueryTextImpl() }
    }

    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.autosuggestboxsuggestionchoseneventargs)
public final class AutoSuggestBoxSuggestionChosenEventArgs : WinUI.DependencyObject {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IAutoSuggestBoxSuggestionChosenEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAutoSuggestBoxSuggestionChosenEventArgs
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAutoSuggestBoxSuggestionChosenEventArgs>?) -> AutoSuggestBoxSuggestionChosenEventArgs? {
        guard immutable abi = abi else { return Nothing }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Controls.AutoSuggestBoxSuggestionChosenEventArgs")))
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.autosuggestboxsuggestionchoseneventargs.selecteditem)
    public var selectedItem : Any! {
        get { try! _default.get_SelectedItemImpl() }
    }

    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.autosuggestboxtextchangedeventargs)
public final class AutoSuggestBoxTextChangedEventArgs : WinUI.DependencyObject {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IAutoSuggestBoxTextChangedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAutoSuggestBoxTextChangedEventArgs
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIAutoSuggestBoxTextChangedEventArgs>?) -> AutoSuggestBoxTextChangedEventArgs? {
        guard immutable abi = abi else { return Nothing }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Controls.AutoSuggestBoxTextChangedEventArgs")))
    }

    private static immutable _IAutoSuggestBoxTextChangedEventArgsStatics: __ABI_Microsoft_UI_Xaml_Controls.IAutoSuggestBoxTextChangedEventArgsStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.AutoSuggestBoxTextChangedEventArgs"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.autosuggestboxtextchangedeventargs.reasonproperty)
    public static var reasonProperty : WinUI.DependencyProperty! {
        get { try! _IAutoSuggestBoxTextChangedEventArgsStatics.get_ReasonPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.autosuggestboxtextchangedeventargs.checkcurrent)
    public fn checkCurrent() throws -> Boolean {
        try _default.CheckCurrentImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.autosuggestboxtextchangedeventargs.reason)
    public var reason : AutoSuggestionBoxTextChangeReason {
        get { try! _default.get_ReasonImpl() }
        set { try! _default.put_ReasonImpl(newValue) }
    }

    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.border)
public final class Border : WinUI.FrameworkElement {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IBorder
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIBorder
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIBorder>?) -> Border? {
        guard immutable abi = abi else { return Nothing }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Controls.Border")))
    }

    private static immutable _IBorderStatics: __ABI_Microsoft_UI_Xaml_Controls.IBorderStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.Border"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.border.backgroundproperty)
    public static var backgroundProperty : WinUI.DependencyProperty! {
        get { try! _IBorderStatics.get_BackgroundPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.border.backgroundsizingproperty)
    public static var backgroundSizingProperty : WinUI.DependencyProperty! {
        get { try! _IBorderStatics.get_BackgroundSizingPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.border.borderbrushproperty)
    public static var borderBrushProperty : WinUI.DependencyProperty! {
        get { try! _IBorderStatics.get_BorderBrushPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.border.borderthicknessproperty)
    public static var borderThicknessProperty : WinUI.DependencyProperty! {
        get { try! _IBorderStatics.get_BorderThicknessPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.border.childtransitionsproperty)
    public static var childTransitionsProperty : WinUI.DependencyProperty! {
        get { try! _IBorderStatics.get_ChildTransitionsPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.border.cornerradiusproperty)
    public static var cornerRadiusProperty : WinUI.DependencyProperty! {
        get { try! _IBorderStatics.get_CornerRadiusPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.border.paddingproperty)
    public static var paddingProperty : WinUI.DependencyProperty! {
        get { try! _IBorderStatics.get_PaddingPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.border.background)
    public var background : WinUI.Brush! {
        get { try! _default.get_BackgroundImpl() }
        set { try! _default.put_BackgroundImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.border.backgroundsizing)
    public var backgroundSizing : BackgroundSizing {
        get { try! _default.get_BackgroundSizingImpl() }
        set { try! _default.put_BackgroundSizingImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.border.backgroundtransition)
    public var backgroundTransition : WinUI.BrushTransition! {
        get { try! _default.get_BackgroundTransitionImpl() }
        set { try! _default.put_BackgroundTransitionImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.border.borderbrush)
    public var borderBrush : WinUI.Brush! {
        get { try! _default.get_BorderBrushImpl() }
        set { try! _default.put_BorderBrushImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.border.borderthickness)
    public var borderThickness : WinUI.Thickness {
        get { try! _default.get_BorderThicknessImpl() }
        set { try! _default.put_BorderThicknessImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.border.child)
    public var child : WinUI.UIElement! {
        get { try! _default.get_ChildImpl() }
        set { try! _default.put_ChildImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.border.childtransitions)
    public var childTransitions : WinUI.TransitionCollection! {
        get { try! _default.get_ChildTransitionsImpl() }
        set { try! _default.put_ChildTransitionsImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.border.cornerradius)
    public var cornerRadius : WinUI.CornerRadius {
        get { try! _default.get_CornerRadiusImpl() }
        set { try! _default.put_CornerRadiusImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.border.padding)
    public var padding : WinUI.Thickness {
        get { try! _default.get_PaddingImpl() }
        set { try! _default.put_PaddingImpl(newValue) }
    }

    internal enum IFrameworkElementOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIFrameworkElementOverrides
        internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml.IFrameworkElementOverrides
        internal typealias Class = Border
        internal typealias CodiraProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIBorder
            internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IBorder
        }
    }
    internal typealias Composable = IFrameworkElementOverrides
    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.button)
open class Button : WinUI.ButtonBase {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IButton
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIButton
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIButton>?) -> Button? {
        guard immutable abi = abi else { return Nothing }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.CodiraABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open fn queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IButtonFactory : __ABI_Microsoft_UI_Xaml_Controls.IButtonFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.Button"))

    override public init() {
        super.init(composing: Self.Composable.this) { baseInterface, innerInterface in 
            try! Self._IButtonFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static immutable _IButtonStatics: __ABI_Microsoft_UI_Xaml_Controls.IButtonStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.Button"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.button.flyoutproperty)
    public class var flyoutProperty : WinUI.DependencyProperty! {
        get { try! _IButtonStatics.get_FlyoutPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.button.flyout)
    public var flyout : WinUI.FlyoutBase! {
        get { try! _default.get_FlyoutImpl() }
        set { try! _default.put_FlyoutImpl(newValue) }
    }

    internal enum IContentControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControlOverrides
        internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IContentControlOverrides
        internal typealias Class = Button
        internal typealias CodiraProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIButton
            internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IButton
        }
    }
    internal typealias Composable = IContentControlOverrides
    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.candidatewindowboundschangedeventargs)
public final class CandidateWindowBoundsChangedEventArgs : WinRTClass {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.ICandidateWindowBoundsChangedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CICandidateWindowBoundsChangedEventArgs
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CICandidateWindowBoundsChangedEventArgs>?) -> CandidateWindowBoundsChangedEventArgs? {
        guard immutable abi = abi else { return Nothing }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.candidatewindowboundschangedeventargs.bounds)
    public var bounds : WindowsFoundation.Rect {
        get { try! _default.get_BoundsImpl() }
    }

    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.canvas)
open class Canvas : WinUI.Panel {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.ICanvas
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CICanvas
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CICanvas>?) -> Canvas? {
        guard immutable abi = abi else { return Nothing }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.CodiraABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open fn queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _ICanvasFactory : __ABI_Microsoft_UI_Xaml_Controls.ICanvasFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.Canvas"))

    override public init() {
        super.init(composing: Self.Composable.this) { baseInterface, innerInterface in 
            try! Self._ICanvasFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static immutable _ICanvasStatics: __ABI_Microsoft_UI_Xaml_Controls.ICanvasStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.Canvas"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.canvas.getleft)
    public class fn getLeft(_ element: WinUI.UIElement!) -> Double {
        return try! _ICanvasStatics.GetLeftImpl(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.canvas.setleft)
    public class fn setLeft(_ element: WinUI.UIElement!, _ length: Double) {
        try! _ICanvasStatics.SetLeftImpl(element, length)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.canvas.gettop)
    public class fn getTop(_ element: WinUI.UIElement!) -> Double {
        return try! _ICanvasStatics.GetTopImpl(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.canvas.settop)
    public class fn setTop(_ element: WinUI.UIElement!, _ length: Double) {
        try! _ICanvasStatics.SetTopImpl(element, length)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.canvas.getzindex)
    public class fn getZIndex(_ element: WinUI.UIElement!) -> Int32 {
        return try! _ICanvasStatics.GetZIndexImpl(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.canvas.setzindex)
    public class fn setZIndex(_ element: WinUI.UIElement!, _ value: Int32) {
        try! _ICanvasStatics.SetZIndexImpl(element, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.canvas.leftproperty)
    public class var leftProperty : WinUI.DependencyProperty! {
        get { try! _ICanvasStatics.get_LeftPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.canvas.topproperty)
    public class var topProperty : WinUI.DependencyProperty! {
        get { try! _ICanvasStatics.get_TopPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.canvas.zindexproperty)
    public class var zindexProperty : WinUI.DependencyProperty! {
        get { try! _ICanvasStatics.get_ZIndexPropertyImpl() }
    }

    internal enum IFrameworkElementOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIFrameworkElementOverrides
        internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml.IFrameworkElementOverrides
        internal typealias Class = Canvas
        internal typealias CodiraProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CICanvas
            internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.ICanvas
        }
    }
    internal typealias Composable = IFrameworkElementOverrides
    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.checkbox)
open class CheckBox : WinUI.ToggleButton {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.ICheckBox
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CICheckBox
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CICheckBox>?) -> CheckBox? {
        guard immutable abi = abi else { return Nothing }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.CodiraABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open fn queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _ICheckBoxFactory : __ABI_Microsoft_UI_Xaml_Controls.ICheckBoxFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.CheckBox"))

    override public init() {
        super.init(composing: Self.Composable.this) { baseInterface, innerInterface in 
            try! Self._ICheckBoxFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    internal enum IToggleButtonOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIToggleButtonOverrides
        internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls_Primitives.IToggleButtonOverrides
        internal typealias Class = CheckBox
        internal typealias CodiraProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CICheckBox
            internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.ICheckBox
        }
    }
    internal typealias Composable = IToggleButtonOverrides
    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.choosinggroupheadercontainereventargs)
public final class ChoosingGroupHeaderContainerEventArgs : WinRTClass {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IChoosingGroupHeaderContainerEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIChoosingGroupHeaderContainerEventArgs
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIChoosingGroupHeaderContainerEventArgs>?) -> ChoosingGroupHeaderContainerEventArgs? {
        guard immutable abi = abi else { return Nothing }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public init() {
        super.init(try! RoActivateInstance(HString("Microsoft.UI.Xaml.Controls.ChoosingGroupHeaderContainerEventArgs")))
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.choosinggroupheadercontainereventargs.group)
    public var group : Any! {
        get { try! _default.get_GroupImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.choosinggroupheadercontainereventargs.groupheadercontainer)
    public var groupHeaderContainer : ListViewBaseHeaderItem! {
        get { try! _default.get_GroupHeaderContainerImpl() }
        set { try! _default.put_GroupHeaderContainerImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.choosinggroupheadercontainereventargs.groupindex)
    public var groupIndex : Int32 {
        get { try! _default.get_GroupIndexImpl() }
    }

    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.choosingitemcontainereventargs)
public final class ChoosingItemContainerEventArgs : WinRTClass {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IChoosingItemContainerEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIChoosingItemContainerEventArgs
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIChoosingItemContainerEventArgs>?) -> ChoosingItemContainerEventArgs? {
        guard immutable abi = abi else { return Nothing }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public init() {
        super.init(try! RoActivateInstance(HString("Microsoft.UI.Xaml.Controls.ChoosingItemContainerEventArgs")))
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.choosingitemcontainereventargs.iscontainerprepared)
    public var isContainerPrepared : Boolean {
        get { try! _default.get_IsContainerPreparedImpl() }
        set { try! _default.put_IsContainerPreparedImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.choosingitemcontainereventargs.item)
    public var item : Any! {
        get { try! _default.get_ItemImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.choosingitemcontainereventargs.itemcontainer)
    public var itemContainer : WinUI.SelectorItem! {
        get { try! _default.get_ItemContainerImpl() }
        set { try! _default.put_ItemContainerImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.choosingitemcontainereventargs.itemindex)
    public var itemIndex : Int32 {
        get { try! _default.get_ItemIndexImpl() }
    }

    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.columndefinition)
public final class ColumnDefinition : WinUI.DependencyObject {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IColumnDefinition
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIColumnDefinition
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIColumnDefinition>?) -> ColumnDefinition? {
        guard immutable abi = abi else { return Nothing }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Controls.ColumnDefinition")))
    }

    private static immutable _IColumnDefinitionStatics: __ABI_Microsoft_UI_Xaml_Controls.IColumnDefinitionStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.ColumnDefinition"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.columndefinition.maxwidthproperty)
    public static var maxWidthProperty : WinUI.DependencyProperty! {
        get { try! _IColumnDefinitionStatics.get_MaxWidthPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.columndefinition.minwidthproperty)
    public static var minWidthProperty : WinUI.DependencyProperty! {
        get { try! _IColumnDefinitionStatics.get_MinWidthPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.columndefinition.widthproperty)
    public static var widthProperty : WinUI.DependencyProperty! {
        get { try! _IColumnDefinitionStatics.get_WidthPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.columndefinition.actualwidth)
    public var actualWidth : Double {
        get { try! _default.get_ActualWidthImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.columndefinition.maxwidth)
    public var maxWidth : Double {
        get { try! _default.get_MaxWidthImpl() }
        set { try! _default.put_MaxWidthImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.columndefinition.minwidth)
    public var minWidth : Double {
        get { try! _default.get_MinWidthImpl() }
        set { try! _default.put_MinWidthImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.columndefinition.width)
    public var width : WinUI.GridLength {
        get { try! _default.get_WidthImpl() }
        set { try! _default.put_WidthImpl(newValue) }
    }

    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.columndefinitioncollection)
public final class ColumnDefinitionCollection : WinRTClass, IVector, IIterable {
    public typealias T = ColumnDefinition?
    private typealias CodiraABI = WinUI.IVectorColumnDefinition
    private typealias CABI = __x_ABI_C__FIVector_1___x_ABI_CMicrosoft__CUI__CXaml__CControls__CColumnDefinition
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_C__FIVector_1___x_ABI_CMicrosoft__CUI__CXaml__CControls__CColumnDefinition>?) -> ColumnDefinitionCollection? {
        guard immutable abi = abi else { return Nothing }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public fn queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    // MARK: Collection
    public typealias Element = T
    public var startIndex: Integer { 0 }
    public var endIndex: Integer { Integer(size) }
    public fn index(after i: Integer) -> Integer {
        i+1
    }

    public fn index(of: Element) -> Integer? {
        var index: UInt32 = 0
        immutable result = indexOf(of, &index)
        guard result else { return Nothing }
        return Integer(index)
    }
    public var count: Integer { Integer(size) }


    public subscript(position: Integer) -> Element {
        get {
            getAt(UInt32(position))
        }
        set(newValue) {
            setAt(UInt32(position), newValue)
        }
    }

    public fn removeLast() {
        removeAtEnd()
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.columndefinitioncollection.getat)
    public fn getAt(_ index: UInt32) -> ColumnDefinition? {
        try! _default.GetAtImpl(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.columndefinitioncollection.getview)
    public fn getView() -> WindowsFoundation.AnyIVectorView<ColumnDefinition?>? {
        try! _default.GetViewImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.columndefinitioncollection.indexof)
    public fn indexOf(_ value: ColumnDefinition?, _ index: inout UInt32) -> Boolean {
        try! _default.IndexOfImpl(value, &index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.columndefinitioncollection.setat)
    public fn setAt(_ index: UInt32, _ value: ColumnDefinition?) {
        try! _default.SetAtImpl(index, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.columndefinitioncollection.insertat)
    public fn insertAt(_ index: UInt32, _ value: ColumnDefinition?) {
        try! _default.InsertAtImpl(index, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.columndefinitioncollection.removeat)
    public fn removeAt(_ index: UInt32) {
        try! _default.RemoveAtImpl(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.columndefinitioncollection.append)
    public fn append(_ value: ColumnDefinition?) {
        try! _default.AppendImpl(value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.columndefinitioncollection.removeatend)
    public fn removeAtEnd() {
        try! _default.RemoveAtEndImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.columndefinitioncollection.clear)
    public fn clear() {
        try! _default.ClearImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.columndefinitioncollection.size)
    public var size : UInt32 {
        get { try! _default.get_SizeImpl() }
    }

    private lazy var _IIterable: IIterableColumnDefinition! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.columndefinitioncollection.first)
    public fn first() -> WindowsFoundation.AnyIIterator<ColumnDefinition?>? {
        try! _IIterable.FirstImpl()
    }

    deinit {
        _default = Nothing
        _IIterable = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.combobox)
open class ComboBox : WinUI.Selector {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IComboBox
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBox
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBox>?) -> ComboBox? {
        guard immutable abi = abi else { return Nothing }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.CodiraABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open fn queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_UI_Xaml_Controls.IComboBoxOverridesWrapper.IID:
                immutable wrapper = __ABI_Microsoft_UI_Xaml_Controls.IComboBoxOverridesWrapper(this)
                return wrapper!.queryInterface(iid)
            default: return super.queryInterface(iid)
        }
    }
    private static var _IComboBoxFactory : __ABI_Microsoft_UI_Xaml_Controls.IComboBoxFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.ComboBox"))

    public init() {
        super.init(composing: Self.Composable.this) { baseInterface, innerInterface in 
            try! Self._IComboBoxFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static immutable _IComboBoxStatics: __ABI_Microsoft_UI_Xaml_Controls.IComboBoxStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.ComboBox"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.combobox.descriptionproperty)
    public class var descriptionProperty : WinUI.DependencyProperty! {
        get { try! _IComboBoxStatics.get_DescriptionPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.combobox.headerproperty)
    public class var headerProperty : WinUI.DependencyProperty! {
        get { try! _IComboBoxStatics.get_HeaderPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.combobox.headertemplateproperty)
    public class var headerTemplateProperty : WinUI.DependencyProperty! {
        get { try! _IComboBoxStatics.get_HeaderTemplatePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.combobox.isdropdownopenproperty)
    public class var isDropDownOpenProperty : WinUI.DependencyProperty! {
        get { try! _IComboBoxStatics.get_IsDropDownOpenPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.combobox.iseditableproperty)
    public class var isEditableProperty : WinUI.DependencyProperty! {
        get { try! _IComboBoxStatics.get_IsEditablePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.combobox.istextsearchenabledproperty)
    public class var isTextSearchEnabledProperty : WinUI.DependencyProperty! {
        get { try! _IComboBoxStatics.get_IsTextSearchEnabledPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.combobox.lightdismissoverlaymodeproperty)
    public class var lightDismissOverlayModeProperty : WinUI.DependencyProperty! {
        get { try! _IComboBoxStatics.get_LightDismissOverlayModePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.combobox.maxdropdownheightproperty)
    public class var maxDropDownHeightProperty : WinUI.DependencyProperty! {
        get { try! _IComboBoxStatics.get_MaxDropDownHeightPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.combobox.placeholderforegroundproperty)
    public class var placeholderForegroundProperty : WinUI.DependencyProperty! {
        get { try! _IComboBoxStatics.get_PlaceholderForegroundPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.combobox.placeholdertextproperty)
    public class var placeholderTextProperty : WinUI.DependencyProperty! {
        get { try! _IComboBoxStatics.get_PlaceholderTextPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.combobox.selectionchangedtriggerproperty)
    public class var selectionChangedTriggerProperty : WinUI.DependencyProperty! {
        get { try! _IComboBoxStatics.get_SelectionChangedTriggerPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.combobox.textboxstyleproperty)
    public class var textBoxStyleProperty : WinUI.DependencyProperty! {
        get { try! _IComboBoxStatics.get_TextBoxStylePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.combobox.textproperty)
    public class var textProperty : WinUI.DependencyProperty! {
        get { try! _IComboBoxStatics.get_TextPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.combobox.description)
    public var description : Any! {
        get { try! _default.get_DescriptionImpl() }
        set { try! _default.put_DescriptionImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.combobox.header)
    public var header : Any! {
        get { try! _default.get_HeaderImpl() }
        set { try! _default.put_HeaderImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.combobox.headertemplate)
    public var headerTemplate : WinUI.DataTemplate! {
        get { try! _default.get_HeaderTemplateImpl() }
        set { try! _default.put_HeaderTemplateImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.combobox.isdropdownopen)
    public var isDropDownOpen : Boolean {
        get { try! _default.get_IsDropDownOpenImpl() }
        set { try! _default.put_IsDropDownOpenImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.combobox.iseditable)
    public var isEditable : Boolean {
        get { try! _default.get_IsEditableImpl() }
        set { try! _default.put_IsEditableImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.combobox.isselectionboxhighlighted)
    public var isSelectionBoxHighlighted : Boolean {
        get { try! _default.get_IsSelectionBoxHighlightedImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.combobox.istextsearchenabled)
    public var isTextSearchEnabled : Boolean {
        get { try! _default.get_IsTextSearchEnabledImpl() }
        set { try! _default.put_IsTextSearchEnabledImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.combobox.lightdismissoverlaymode)
    public var lightDismissOverlayMode : LightDismissOverlayMode {
        get { try! _default.get_LightDismissOverlayModeImpl() }
        set { try! _default.put_LightDismissOverlayModeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.combobox.maxdropdownheight)
    public var maxDropDownHeight : Double {
        get { try! _default.get_MaxDropDownHeightImpl() }
        set { try! _default.put_MaxDropDownHeightImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.combobox.placeholderforeground)
    public var placeholderForeground : WinUI.Brush! {
        get { try! _default.get_PlaceholderForegroundImpl() }
        set { try! _default.put_PlaceholderForegroundImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.combobox.placeholdertext)
    public var placeholderText : String {
        get { try! _default.get_PlaceholderTextImpl() }
        set { try! _default.put_PlaceholderTextImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.combobox.selectionboxitem)
    public var selectionBoxItem : Any! {
        get { try! _default.get_SelectionBoxItemImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.combobox.selectionboxitemtemplate)
    public var selectionBoxItemTemplate : WinUI.DataTemplate! {
        get { try! _default.get_SelectionBoxItemTemplateImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.combobox.selectionchangedtrigger)
    public var selectionChangedTrigger : ComboBoxSelectionChangedTrigger {
        get { try! _default.get_SelectionChangedTriggerImpl() }
        set { try! _default.put_SelectionChangedTriggerImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.combobox.templatesettings)
    public var templateSettings : WinUI.ComboBoxTemplateSettings! {
        get { try! _default.get_TemplateSettingsImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.combobox.text)
    public var text : String {
        get { try! _default.get_TextImpl() }
        set { try! _default.put_TextImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.combobox.textboxstyle)
    public var textBoxStyle : WinUI.Style! {
        get { try! _default.get_TextBoxStyleImpl() }
        set { try! _default.put_TextBoxStyleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.combobox.dropdownclosed)
    public lazy var dropDownClosed : Event<EventHandler<Any?>> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_DropDownClosedImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_DropDownClosedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.combobox.dropdownopened)
    public lazy var dropDownOpened : Event<EventHandler<Any?>> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_DropDownOpenedImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_DropDownOpenedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.combobox.textsubmitted)
    public lazy var textSubmitted : Event<TypedEventHandler<ComboBox?, ComboBoxTextSubmittedEventArgs?>> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_TextSubmittedImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_TextSubmittedImpl($0)
       }
      )
    }()

    private lazy var _IComboBoxOverrides: __ABI_Microsoft_UI_Xaml_Controls.IComboBoxOverrides! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.combobox.ondropdownclosed)
    open fn onDropDownClosed(_ e: Any!) throws {
        try _IComboBoxOverrides.OnDropDownClosedImpl(e)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.combobox.ondropdownopened)
    open fn onDropDownOpened(_ e: Any!) throws {
        try _IComboBoxOverrides.OnDropDownOpenedImpl(e)
    }

    internal enum IComboBoxOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBoxOverrides
        internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IComboBoxOverrides
        internal typealias Class = ComboBox
        internal typealias CodiraProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBox
            internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IComboBox
        }
    }
    internal typealias Composable = IComboBoxOverrides
    deinit {
        _default = Nothing
        _IComboBoxOverrides = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.comboboxtextsubmittedeventargs)
public final class ComboBoxTextSubmittedEventArgs : WinRTClass {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IComboBoxTextSubmittedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBoxTextSubmittedEventArgs
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIComboBoxTextSubmittedEventArgs>?) -> ComboBoxTextSubmittedEventArgs? {
        guard immutable abi = abi else { return Nothing }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.comboboxtextsubmittedeventargs.handled)
    public var handled : Boolean {
        get { try! _default.get_HandledImpl() }
        set { try! _default.put_HandledImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.comboboxtextsubmittedeventargs.text)
    public var text : String {
        get { try! _default.get_TextImpl() }
    }

    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.containercontentchangingeventargs)
public final class ContainerContentChangingEventArgs : WinRTClass {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IContainerContentChangingEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContainerContentChangingEventArgs
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContainerContentChangingEventArgs>?) -> ContainerContentChangingEventArgs? {
        guard immutable abi = abi else { return Nothing }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public init() {
        super.init(try! RoActivateInstance(HString("Microsoft.UI.Xaml.Controls.ContainerContentChangingEventArgs")))
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.containercontentchangingeventargs.registerupdatecallback)
    public fn registerUpdateCallback(_ callback: TypedEventHandler<ListViewBase?, ContainerContentChangingEventArgs?>!) throws {
        try _default.RegisterUpdateCallbackImpl(callback)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.containercontentchangingeventargs.registerupdatecallback)
    public fn registerUpdateCallback(_ callbackPhase: UInt32, _ callback: TypedEventHandler<ListViewBase?, ContainerContentChangingEventArgs?>!) throws {
        try _default.RegisterUpdateCallbackWithPhaseImpl(callbackPhase, callback)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.containercontentchangingeventargs.handled)
    public var handled : Boolean {
        get { try! _default.get_HandledImpl() }
        set { try! _default.put_HandledImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.containercontentchangingeventargs.inrecyclequeue)
    public var inRecycleQueue : Boolean {
        get { try! _default.get_InRecycleQueueImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.containercontentchangingeventargs.item)
    public var item : Any! {
        get { try! _default.get_ItemImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.containercontentchangingeventargs.itemcontainer)
    public var itemContainer : WinUI.SelectorItem! {
        get { try! _default.get_ItemContainerImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.containercontentchangingeventargs.itemindex)
    public var itemIndex : Int32 {
        get { try! _default.get_ItemIndexImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.containercontentchangingeventargs.phase)
    public var phase : UInt32 {
        get { try! _default.get_PhaseImpl() }
    }

    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentcontrol)
open class ContentControl : WinUI.Control {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IContentControl
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControl
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControl>?) -> ContentControl? {
        guard immutable abi = abi else { return Nothing }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.CodiraABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open fn queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_UI_Xaml_Controls.IContentControlOverridesWrapper.IID:
                immutable wrapper = __ABI_Microsoft_UI_Xaml_Controls.IContentControlOverridesWrapper(this)
                return wrapper!.queryInterface(iid)
            default: return super.queryInterface(iid)
        }
    }
    private static var _IContentControlFactory : __ABI_Microsoft_UI_Xaml_Controls.IContentControlFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.ContentControl"))

    override public init() {
        super.init(composing: Self.Composable.this) { baseInterface, innerInterface in 
            try! Self._IContentControlFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static immutable _IContentControlStatics: __ABI_Microsoft_UI_Xaml_Controls.IContentControlStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.ContentControl"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentcontrol.contentproperty)
    public class var contentProperty : WinUI.DependencyProperty! {
        get { try! _IContentControlStatics.get_ContentPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentcontrol.contenttemplateproperty)
    public class var contentTemplateProperty : WinUI.DependencyProperty! {
        get { try! _IContentControlStatics.get_ContentTemplatePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentcontrol.contenttemplateselectorproperty)
    public class var contentTemplateSelectorProperty : WinUI.DependencyProperty! {
        get { try! _IContentControlStatics.get_ContentTemplateSelectorPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentcontrol.contenttransitionsproperty)
    public class var contentTransitionsProperty : WinUI.DependencyProperty! {
        get { try! _IContentControlStatics.get_ContentTransitionsPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentcontrol.content)
    public var content : Any! {
        get { try! _default.get_ContentImpl() }
        set { try! _default.put_ContentImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentcontrol.contenttemplate)
    public var contentTemplate : WinUI.DataTemplate! {
        get { try! _default.get_ContentTemplateImpl() }
        set { try! _default.put_ContentTemplateImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentcontrol.contenttemplateroot)
    public var contentTemplateRoot : WinUI.UIElement! {
        get { try! _default.get_ContentTemplateRootImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentcontrol.contenttemplateselector)
    public var contentTemplateSelector : DataTemplateSelector! {
        get { try! _default.get_ContentTemplateSelectorImpl() }
        set { try! _default.put_ContentTemplateSelectorImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentcontrol.contenttransitions)
    public var contentTransitions : WinUI.TransitionCollection! {
        get { try! _default.get_ContentTransitionsImpl() }
        set { try! _default.put_ContentTransitionsImpl(newValue) }
    }

    private lazy var _IContentControlOverrides: __ABI_Microsoft_UI_Xaml_Controls.IContentControlOverrides! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentcontrol.oncontentchanged)
    open fn onContentChanged(_ oldContent: Any!, _ newContent: Any!) throws {
        try _IContentControlOverrides.OnContentChangedImpl(oldContent, newContent)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentcontrol.oncontenttemplatechanged)
    open fn onContentTemplateChanged(_ oldContentTemplate: WinUI.DataTemplate!, _ newContentTemplate: WinUI.DataTemplate!) throws {
        try _IContentControlOverrides.OnContentTemplateChangedImpl(oldContentTemplate, newContentTemplate)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentcontrol.oncontenttemplateselectorchanged)
    open fn onContentTemplateSelectorChanged(_ oldContentTemplateSelector: DataTemplateSelector!, _ newContentTemplateSelector: DataTemplateSelector!) throws {
        try _IContentControlOverrides.OnContentTemplateSelectorChangedImpl(oldContentTemplateSelector, newContentTemplateSelector)
    }

    internal enum IContentControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControlOverrides
        internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IContentControlOverrides
        internal typealias Class = ContentControl
        internal typealias CodiraProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControl
            internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IContentControl
        }
    }
    internal typealias Composable = IContentControlOverrides
    deinit {
        _default = Nothing
        _IContentControlOverrides = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog)
open class ContentDialog : WinUI.ContentControl {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IContentDialog
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialog
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialog>?) -> ContentDialog? {
        guard immutable abi = abi else { return Nothing }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.CodiraABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open fn queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IContentDialogFactory : __ABI_Microsoft_UI_Xaml_Controls.IContentDialogFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.ContentDialog"))

    override public init() {
        super.init(composing: Self.Composable.this) { baseInterface, innerInterface in 
            try! Self._IContentDialogFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static immutable _IContentDialogStatics: __ABI_Microsoft_UI_Xaml_Controls.IContentDialogStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.ContentDialog"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.closebuttoncommandparameterproperty)
    public class var closeButtonCommandParameterProperty : WinUI.DependencyProperty! {
        get { try! _IContentDialogStatics.get_CloseButtonCommandParameterPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.closebuttoncommandproperty)
    public class var closeButtonCommandProperty : WinUI.DependencyProperty! {
        get { try! _IContentDialogStatics.get_CloseButtonCommandPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.closebuttonstyleproperty)
    public class var closeButtonStyleProperty : WinUI.DependencyProperty! {
        get { try! _IContentDialogStatics.get_CloseButtonStylePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.closebuttontextproperty)
    public class var closeButtonTextProperty : WinUI.DependencyProperty! {
        get { try! _IContentDialogStatics.get_CloseButtonTextPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.defaultbuttonproperty)
    public class var defaultButtonProperty : WinUI.DependencyProperty! {
        get { try! _IContentDialogStatics.get_DefaultButtonPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.fullsizedesiredproperty)
    public class var fullSizeDesiredProperty : WinUI.DependencyProperty! {
        get { try! _IContentDialogStatics.get_FullSizeDesiredPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.isprimarybuttonenabledproperty)
    public class var isPrimaryButtonEnabledProperty : WinUI.DependencyProperty! {
        get { try! _IContentDialogStatics.get_IsPrimaryButtonEnabledPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.issecondarybuttonenabledproperty)
    public class var isSecondaryButtonEnabledProperty : WinUI.DependencyProperty! {
        get { try! _IContentDialogStatics.get_IsSecondaryButtonEnabledPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.primarybuttoncommandparameterproperty)
    public class var primaryButtonCommandParameterProperty : WinUI.DependencyProperty! {
        get { try! _IContentDialogStatics.get_PrimaryButtonCommandParameterPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.primarybuttoncommandproperty)
    public class var primaryButtonCommandProperty : WinUI.DependencyProperty! {
        get { try! _IContentDialogStatics.get_PrimaryButtonCommandPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.primarybuttonstyleproperty)
    public class var primaryButtonStyleProperty : WinUI.DependencyProperty! {
        get { try! _IContentDialogStatics.get_PrimaryButtonStylePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.primarybuttontextproperty)
    public class var primaryButtonTextProperty : WinUI.DependencyProperty! {
        get { try! _IContentDialogStatics.get_PrimaryButtonTextPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.secondarybuttoncommandparameterproperty)
    public class var secondaryButtonCommandParameterProperty : WinUI.DependencyProperty! {
        get { try! _IContentDialogStatics.get_SecondaryButtonCommandParameterPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.secondarybuttoncommandproperty)
    public class var secondaryButtonCommandProperty : WinUI.DependencyProperty! {
        get { try! _IContentDialogStatics.get_SecondaryButtonCommandPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.secondarybuttonstyleproperty)
    public class var secondaryButtonStyleProperty : WinUI.DependencyProperty! {
        get { try! _IContentDialogStatics.get_SecondaryButtonStylePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.secondarybuttontextproperty)
    public class var secondaryButtonTextProperty : WinUI.DependencyProperty! {
        get { try! _IContentDialogStatics.get_SecondaryButtonTextPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.titleproperty)
    public class var titleProperty : WinUI.DependencyProperty! {
        get { try! _IContentDialogStatics.get_TitlePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.titletemplateproperty)
    public class var titleTemplateProperty : WinUI.DependencyProperty! {
        get { try! _IContentDialogStatics.get_TitleTemplatePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.hide)
    public fn hide() throws {
        try _default.HideImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.showasync)
    public fn showAsync() throws -> WindowsFoundation.AnyIAsyncOperation<ContentDialogResult>! {
        try _default.ShowAsyncImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.showasync)
    public fn showAsync(_ placement: ContentDialogPlacement) throws -> WindowsFoundation.AnyIAsyncOperation<ContentDialogResult>! {
        try _default.ShowAsyncWithPlacementImpl(placement)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.closebuttoncommand)
    public var closeButtonCommand : WinUI.AnyICommand! {
        get { try! _default.get_CloseButtonCommandImpl() }
        set { try! _default.put_CloseButtonCommandImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.closebuttoncommandparameter)
    public var closeButtonCommandParameter : Any! {
        get { try! _default.get_CloseButtonCommandParameterImpl() }
        set { try! _default.put_CloseButtonCommandParameterImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.closebuttonstyle)
    public var closeButtonStyle : WinUI.Style! {
        get { try! _default.get_CloseButtonStyleImpl() }
        set { try! _default.put_CloseButtonStyleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.closebuttontext)
    public var closeButtonText : String {
        get { try! _default.get_CloseButtonTextImpl() }
        set { try! _default.put_CloseButtonTextImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.defaultbutton)
    public var defaultButton : ContentDialogButton {
        get { try! _default.get_DefaultButtonImpl() }
        set { try! _default.put_DefaultButtonImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.fullsizedesired)
    public var fullSizeDesired : Boolean {
        get { try! _default.get_FullSizeDesiredImpl() }
        set { try! _default.put_FullSizeDesiredImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.isprimarybuttonenabled)
    public var isPrimaryButtonEnabled : Boolean {
        get { try! _default.get_IsPrimaryButtonEnabledImpl() }
        set { try! _default.put_IsPrimaryButtonEnabledImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.issecondarybuttonenabled)
    public var isSecondaryButtonEnabled : Boolean {
        get { try! _default.get_IsSecondaryButtonEnabledImpl() }
        set { try! _default.put_IsSecondaryButtonEnabledImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.primarybuttoncommand)
    public var primaryButtonCommand : WinUI.AnyICommand! {
        get { try! _default.get_PrimaryButtonCommandImpl() }
        set { try! _default.put_PrimaryButtonCommandImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.primarybuttoncommandparameter)
    public var primaryButtonCommandParameter : Any! {
        get { try! _default.get_PrimaryButtonCommandParameterImpl() }
        set { try! _default.put_PrimaryButtonCommandParameterImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.primarybuttonstyle)
    public var primaryButtonStyle : WinUI.Style! {
        get { try! _default.get_PrimaryButtonStyleImpl() }
        set { try! _default.put_PrimaryButtonStyleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.primarybuttontext)
    public var primaryButtonText : String {
        get { try! _default.get_PrimaryButtonTextImpl() }
        set { try! _default.put_PrimaryButtonTextImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.secondarybuttoncommand)
    public var secondaryButtonCommand : WinUI.AnyICommand! {
        get { try! _default.get_SecondaryButtonCommandImpl() }
        set { try! _default.put_SecondaryButtonCommandImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.secondarybuttoncommandparameter)
    public var secondaryButtonCommandParameter : Any! {
        get { try! _default.get_SecondaryButtonCommandParameterImpl() }
        set { try! _default.put_SecondaryButtonCommandParameterImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.secondarybuttonstyle)
    public var secondaryButtonStyle : WinUI.Style! {
        get { try! _default.get_SecondaryButtonStyleImpl() }
        set { try! _default.put_SecondaryButtonStyleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.secondarybuttontext)
    public var secondaryButtonText : String {
        get { try! _default.get_SecondaryButtonTextImpl() }
        set { try! _default.put_SecondaryButtonTextImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.title)
    public var title : Any! {
        get { try! _default.get_TitleImpl() }
        set { try! _default.put_TitleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.titletemplate)
    public var titleTemplate : WinUI.DataTemplate! {
        get { try! _default.get_TitleTemplateImpl() }
        set { try! _default.put_TitleTemplateImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.closebuttonclick)
    public lazy var closeButtonClick : Event<TypedEventHandler<ContentDialog?, ContentDialogButtonClickEventArgs?>> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_CloseButtonClickImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_CloseButtonClickImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.closed)
    public lazy var closed : Event<TypedEventHandler<ContentDialog?, ContentDialogClosedEventArgs?>> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_ClosedImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_ClosedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.closing)
    public lazy var closing : Event<TypedEventHandler<ContentDialog?, ContentDialogClosingEventArgs?>> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_ClosingImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_ClosingImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.opened)
    public lazy var opened : Event<TypedEventHandler<ContentDialog?, ContentDialogOpenedEventArgs?>> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_OpenedImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_OpenedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.primarybuttonclick)
    public lazy var primaryButtonClick : Event<TypedEventHandler<ContentDialog?, ContentDialogButtonClickEventArgs?>> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_PrimaryButtonClickImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_PrimaryButtonClickImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialog.secondarybuttonclick)
    public lazy var secondaryButtonClick : Event<TypedEventHandler<ContentDialog?, ContentDialogButtonClickEventArgs?>> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_SecondaryButtonClickImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_SecondaryButtonClickImpl($0)
       }
      )
    }()

    internal enum IContentControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControlOverrides
        internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IContentControlOverrides
        internal typealias Class = ContentDialog
        internal typealias CodiraProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialog
            internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IContentDialog
        }
    }
    internal typealias Composable = IContentControlOverrides
    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialogbuttonclickdeferral)
public final class ContentDialogButtonClickDeferral : WinRTClass {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IContentDialogButtonClickDeferral
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogButtonClickDeferral
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogButtonClickDeferral>?) -> ContentDialogButtonClickDeferral? {
        guard immutable abi = abi else { return Nothing }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialogbuttonclickdeferral.complete)
    public fn complete() throws {
        try _default.CompleteImpl()
    }

    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialogbuttonclickeventargs)
public final class ContentDialogButtonClickEventArgs : WinRTClass {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IContentDialogButtonClickEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogButtonClickEventArgs
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogButtonClickEventArgs>?) -> ContentDialogButtonClickEventArgs? {
        guard immutable abi = abi else { return Nothing }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialogbuttonclickeventargs.getdeferral)
    public fn getDeferral() throws -> ContentDialogButtonClickDeferral! {
        try _default.GetDeferralImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialogbuttonclickeventargs.cancel)
    public var cancel : Boolean {
        get { try! _default.get_CancelImpl() }
        set { try! _default.put_CancelImpl(newValue) }
    }

    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialogclosedeventargs)
public final class ContentDialogClosedEventArgs : WinRTClass {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IContentDialogClosedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogClosedEventArgs
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogClosedEventArgs>?) -> ContentDialogClosedEventArgs? {
        guard immutable abi = abi else { return Nothing }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialogclosedeventargs.result)
    public var result : ContentDialogResult {
        get { try! _default.get_ResultImpl() }
    }

    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialogclosingdeferral)
public final class ContentDialogClosingDeferral : WinRTClass {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IContentDialogClosingDeferral
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogClosingDeferral
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogClosingDeferral>?) -> ContentDialogClosingDeferral? {
        guard immutable abi = abi else { return Nothing }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialogclosingdeferral.complete)
    public fn complete() throws {
        try _default.CompleteImpl()
    }

    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialogclosingeventargs)
public final class ContentDialogClosingEventArgs : WinRTClass {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IContentDialogClosingEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogClosingEventArgs
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogClosingEventArgs>?) -> ContentDialogClosingEventArgs? {
        guard immutable abi = abi else { return Nothing }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialogclosingeventargs.getdeferral)
    public fn getDeferral() throws -> ContentDialogClosingDeferral! {
        try _default.GetDeferralImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialogclosingeventargs.cancel)
    public var cancel : Boolean {
        get { try! _default.get_CancelImpl() }
        set { try! _default.put_CancelImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialogclosingeventargs.result)
    public var result : ContentDialogResult {
        get { try! _default.get_ResultImpl() }
    }

    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentdialogopenedeventargs)
public final class ContentDialogOpenedEventArgs : WinRTClass {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IContentDialogOpenedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogOpenedEventArgs
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentDialogOpenedEventArgs>?) -> ContentDialogOpenedEventArgs? {
        guard immutable abi = abi else { return Nothing }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter)
open class ContentPresenter : WinUI.FrameworkElement {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IContentPresenter
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenter
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenter>?) -> ContentPresenter? {
        guard immutable abi = abi else { return Nothing }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.CodiraABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open fn queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_UI_Xaml_Controls.IContentPresenterOverridesWrapper.IID:
                immutable wrapper = __ABI_Microsoft_UI_Xaml_Controls.IContentPresenterOverridesWrapper(this)
                return wrapper!.queryInterface(iid)
            default: return super.queryInterface(iid)
        }
    }
    private static var _IContentPresenterFactory : __ABI_Microsoft_UI_Xaml_Controls.IContentPresenterFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.ContentPresenter"))

    override public init() {
        super.init(composing: Self.Composable.this) { baseInterface, innerInterface in 
            try! Self._IContentPresenterFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static immutable _IContentPresenterStatics: __ABI_Microsoft_UI_Xaml_Controls.IContentPresenterStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.ContentPresenter"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.backgroundproperty)
    public class var backgroundProperty : WinUI.DependencyProperty! {
        get { try! _IContentPresenterStatics.get_BackgroundPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.backgroundsizingproperty)
    public class var backgroundSizingProperty : WinUI.DependencyProperty! {
        get { try! _IContentPresenterStatics.get_BackgroundSizingPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.borderbrushproperty)
    public class var borderBrushProperty : WinUI.DependencyProperty! {
        get { try! _IContentPresenterStatics.get_BorderBrushPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.borderthicknessproperty)
    public class var borderThicknessProperty : WinUI.DependencyProperty! {
        get { try! _IContentPresenterStatics.get_BorderThicknessPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.characterspacingproperty)
    public class var characterSpacingProperty : WinUI.DependencyProperty! {
        get { try! _IContentPresenterStatics.get_CharacterSpacingPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.contentproperty)
    public class var contentProperty : WinUI.DependencyProperty! {
        get { try! _IContentPresenterStatics.get_ContentPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.contenttemplateproperty)
    public class var contentTemplateProperty : WinUI.DependencyProperty! {
        get { try! _IContentPresenterStatics.get_ContentTemplatePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.contenttemplateselectorproperty)
    public class var contentTemplateSelectorProperty : WinUI.DependencyProperty! {
        get { try! _IContentPresenterStatics.get_ContentTemplateSelectorPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.contenttransitionsproperty)
    public class var contentTransitionsProperty : WinUI.DependencyProperty! {
        get { try! _IContentPresenterStatics.get_ContentTransitionsPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.cornerradiusproperty)
    public class var cornerRadiusProperty : WinUI.DependencyProperty! {
        get { try! _IContentPresenterStatics.get_CornerRadiusPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.fontfamilyproperty)
    public class var fontFamilyProperty : WinUI.DependencyProperty! {
        get { try! _IContentPresenterStatics.get_FontFamilyPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.fontsizeproperty)
    public class var fontSizeProperty : WinUI.DependencyProperty! {
        get { try! _IContentPresenterStatics.get_FontSizePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.fontstretchproperty)
    public class var fontStretchProperty : WinUI.DependencyProperty! {
        get { try! _IContentPresenterStatics.get_FontStretchPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.fontstyleproperty)
    public class var fontStyleProperty : WinUI.DependencyProperty! {
        get { try! _IContentPresenterStatics.get_FontStylePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.fontweightproperty)
    public class var fontWeightProperty : WinUI.DependencyProperty! {
        get { try! _IContentPresenterStatics.get_FontWeightPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.foregroundproperty)
    public class var foregroundProperty : WinUI.DependencyProperty! {
        get { try! _IContentPresenterStatics.get_ForegroundPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.horizontalcontentalignmentproperty)
    public class var horizontalContentAlignmentProperty : WinUI.DependencyProperty! {
        get { try! _IContentPresenterStatics.get_HorizontalContentAlignmentPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.istextscalefactorenabledproperty)
    public class var isTextScaleFactorEnabledProperty : WinUI.DependencyProperty! {
        get { try! _IContentPresenterStatics.get_IsTextScaleFactorEnabledPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.lineheightproperty)
    public class var lineHeightProperty : WinUI.DependencyProperty! {
        get { try! _IContentPresenterStatics.get_LineHeightPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.linestackingstrategyproperty)
    public class var lineStackingStrategyProperty : WinUI.DependencyProperty! {
        get { try! _IContentPresenterStatics.get_LineStackingStrategyPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.maxlinesproperty)
    public class var maxLinesProperty : WinUI.DependencyProperty! {
        get { try! _IContentPresenterStatics.get_MaxLinesPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.opticalmarginalignmentproperty)
    public class var opticalMarginAlignmentProperty : WinUI.DependencyProperty! {
        get { try! _IContentPresenterStatics.get_OpticalMarginAlignmentPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.paddingproperty)
    public class var paddingProperty : WinUI.DependencyProperty! {
        get { try! _IContentPresenterStatics.get_PaddingPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.textlineboundsproperty)
    public class var textLineBoundsProperty : WinUI.DependencyProperty! {
        get { try! _IContentPresenterStatics.get_TextLineBoundsPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.textwrappingproperty)
    public class var textWrappingProperty : WinUI.DependencyProperty! {
        get { try! _IContentPresenterStatics.get_TextWrappingPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.verticalcontentalignmentproperty)
    public class var verticalContentAlignmentProperty : WinUI.DependencyProperty! {
        get { try! _IContentPresenterStatics.get_VerticalContentAlignmentPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.background)
    public var background : WinUI.Brush! {
        get { try! _default.get_BackgroundImpl() }
        set { try! _default.put_BackgroundImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.backgroundsizing)
    public var backgroundSizing : BackgroundSizing {
        get { try! _default.get_BackgroundSizingImpl() }
        set { try! _default.put_BackgroundSizingImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.backgroundtransition)
    public var backgroundTransition : WinUI.BrushTransition! {
        get { try! _default.get_BackgroundTransitionImpl() }
        set { try! _default.put_BackgroundTransitionImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.borderbrush)
    public var borderBrush : WinUI.Brush! {
        get { try! _default.get_BorderBrushImpl() }
        set { try! _default.put_BorderBrushImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.borderthickness)
    public var borderThickness : WinUI.Thickness {
        get { try! _default.get_BorderThicknessImpl() }
        set { try! _default.put_BorderThicknessImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.characterspacing)
    public var characterSpacing : Int32 {
        get { try! _default.get_CharacterSpacingImpl() }
        set { try! _default.put_CharacterSpacingImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.content)
    public var content : Any! {
        get { try! _default.get_ContentImpl() }
        set { try! _default.put_ContentImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.contenttemplate)
    public var contentTemplate : WinUI.DataTemplate! {
        get { try! _default.get_ContentTemplateImpl() }
        set { try! _default.put_ContentTemplateImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.contenttemplateselector)
    public var contentTemplateSelector : DataTemplateSelector! {
        get { try! _default.get_ContentTemplateSelectorImpl() }
        set { try! _default.put_ContentTemplateSelectorImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.contenttransitions)
    public var contentTransitions : WinUI.TransitionCollection! {
        get { try! _default.get_ContentTransitionsImpl() }
        set { try! _default.put_ContentTransitionsImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.cornerradius)
    public var cornerRadius : WinUI.CornerRadius {
        get { try! _default.get_CornerRadiusImpl() }
        set { try! _default.put_CornerRadiusImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.fontfamily)
    public var fontFamily : WinUI.FontFamily! {
        get { try! _default.get_FontFamilyImpl() }
        set { try! _default.put_FontFamilyImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.fontsize)
    public var fontSize : Double {
        get { try! _default.get_FontSizeImpl() }
        set { try! _default.put_FontSizeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.fontstretch)
    public var fontStretch : UWP.FontStretch {
        get { try! _default.get_FontStretchImpl() }
        set { try! _default.put_FontStretchImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.fontstyle)
    public var fontStyle : UWP.FontStyle {
        get { try! _default.get_FontStyleImpl() }
        set { try! _default.put_FontStyleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.fontweight)
    public var fontWeight : UWP.FontWeight {
        get { try! _default.get_FontWeightImpl() }
        set { try! _default.put_FontWeightImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.foreground)
    public var foreground : WinUI.Brush! {
        get { try! _default.get_ForegroundImpl() }
        set { try! _default.put_ForegroundImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.horizontalcontentalignment)
    public var horizontalContentAlignment : WinUI.HorizontalAlignment {
        get { try! _default.get_HorizontalContentAlignmentImpl() }
        set { try! _default.put_HorizontalContentAlignmentImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.istextscalefactorenabled)
    public var isTextScaleFactorEnabled : Boolean {
        get { try! _default.get_IsTextScaleFactorEnabledImpl() }
        set { try! _default.put_IsTextScaleFactorEnabledImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.lineheight)
    public var lineHeight : Double {
        get { try! _default.get_LineHeightImpl() }
        set { try! _default.put_LineHeightImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.linestackingstrategy)
    public var lineStackingStrategy : WinUI.LineStackingStrategy {
        get { try! _default.get_LineStackingStrategyImpl() }
        set { try! _default.put_LineStackingStrategyImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.maxlines)
    public var maxLines : Int32 {
        get { try! _default.get_MaxLinesImpl() }
        set { try! _default.put_MaxLinesImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.opticalmarginalignment)
    public var opticalMarginAlignment : WinUI.OpticalMarginAlignment {
        get { try! _default.get_OpticalMarginAlignmentImpl() }
        set { try! _default.put_OpticalMarginAlignmentImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.padding)
    public var padding : WinUI.Thickness {
        get { try! _default.get_PaddingImpl() }
        set { try! _default.put_PaddingImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.textlinebounds)
    public var textLineBounds : WinUI.TextLineBounds {
        get { try! _default.get_TextLineBoundsImpl() }
        set { try! _default.put_TextLineBoundsImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.textwrapping)
    public var textWrapping : WinUI.TextWrapping {
        get { try! _default.get_TextWrappingImpl() }
        set { try! _default.put_TextWrappingImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.verticalcontentalignment)
    public var verticalContentAlignment : WinUI.VerticalAlignment {
        get { try! _default.get_VerticalContentAlignmentImpl() }
        set { try! _default.put_VerticalContentAlignmentImpl(newValue) }
    }

    private lazy var _IContentPresenterOverrides: __ABI_Microsoft_UI_Xaml_Controls.IContentPresenterOverrides! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.oncontenttemplatechanged)
    open fn onContentTemplateChanged(_ oldContentTemplate: WinUI.DataTemplate!, _ newContentTemplate: WinUI.DataTemplate!) throws {
        try _IContentPresenterOverrides.OnContentTemplateChangedImpl(oldContentTemplate, newContentTemplate)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contentpresenter.oncontenttemplateselectorchanged)
    open fn onContentTemplateSelectorChanged(_ oldContentTemplateSelector: DataTemplateSelector!, _ newContentTemplateSelector: DataTemplateSelector!) throws {
        try _IContentPresenterOverrides.OnContentTemplateSelectorChangedImpl(oldContentTemplateSelector, newContentTemplateSelector)
    }

    internal enum IContentPresenterOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenterOverrides
        internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IContentPresenterOverrides
        internal typealias Class = ContentPresenter
        internal typealias CodiraProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentPresenter
            internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IContentPresenter
        }
    }
    internal typealias Composable = IContentPresenterOverrides
    deinit {
        _default = Nothing
        _IContentPresenterOverrides = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contextmenueventargs)
public final class ContextMenuEventArgs : WinUI.RoutedEventArgs {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IContextMenuEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContextMenuEventArgs
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContextMenuEventArgs>?) -> ContextMenuEventArgs? {
        guard immutable abi = abi else { return Nothing }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contextmenueventargs.cursorleft)
    public var cursorLeft : Double {
        get { try! _default.get_CursorLeftImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contextmenueventargs.cursortop)
    public var cursorTop : Double {
        get { try! _default.get_CursorTopImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.contextmenueventargs.handled)
    public var handled : Boolean {
        get { try! _default.get_HandledImpl() }
        set { try! _default.put_HandledImpl(newValue) }
    }

    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control)
open class Control : WinUI.FrameworkElement {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IControl
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControl
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControl>?) -> Control? {
        guard immutable abi = abi else { return Nothing }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.CodiraABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open fn queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_UI_Xaml_Controls.IControlOverridesWrapper.IID:
                immutable wrapper = __ABI_Microsoft_UI_Xaml_Controls.IControlOverridesWrapper(this)
                return wrapper!.queryInterface(iid)
            default: return super.queryInterface(iid)
        }
    }
    private static var _IControlFactory : __ABI_Microsoft_UI_Xaml_Controls.IControlFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.Control"))

    override public init() {
        super.init(composing: Self.Composable.this) { baseInterface, innerInterface in 
            try! Self._IControlFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static immutable _IControlStatics: __ABI_Microsoft_UI_Xaml_Controls.IControlStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.Control"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.getistemplatefocustarget)
    public class fn getIsTemplateFocusTarget(_ element: WinUI.FrameworkElement!) -> Boolean {
        return try! _IControlStatics.GetIsTemplateFocusTargetImpl(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.setistemplatefocustarget)
    public class fn setIsTemplateFocusTarget(_ element: WinUI.FrameworkElement!, _ value: Boolean) {
        try! _IControlStatics.SetIsTemplateFocusTargetImpl(element, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.getistemplatekeytiptarget)
    public class fn getIsTemplateKeyTipTarget(_ element: WinUI.DependencyObject!) -> Boolean {
        return try! _IControlStatics.GetIsTemplateKeyTipTargetImpl(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.setistemplatekeytiptarget)
    public class fn setIsTemplateKeyTipTarget(_ element: WinUI.DependencyObject!, _ value: Boolean) {
        try! _IControlStatics.SetIsTemplateKeyTipTargetImpl(element, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.backgroundproperty)
    public class var backgroundProperty : WinUI.DependencyProperty! {
        get { try! _IControlStatics.get_BackgroundPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.backgroundsizingproperty)
    public class var backgroundSizingProperty : WinUI.DependencyProperty! {
        get { try! _IControlStatics.get_BackgroundSizingPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.borderbrushproperty)
    public class var borderBrushProperty : WinUI.DependencyProperty! {
        get { try! _IControlStatics.get_BorderBrushPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.borderthicknessproperty)
    public class var borderThicknessProperty : WinUI.DependencyProperty! {
        get { try! _IControlStatics.get_BorderThicknessPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.characterspacingproperty)
    public class var characterSpacingProperty : WinUI.DependencyProperty! {
        get { try! _IControlStatics.get_CharacterSpacingPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.cornerradiusproperty)
    public class var cornerRadiusProperty : WinUI.DependencyProperty! {
        get { try! _IControlStatics.get_CornerRadiusPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.defaultstylekeyproperty)
    public class var defaultStyleKeyProperty : WinUI.DependencyProperty! {
        get { try! _IControlStatics.get_DefaultStyleKeyPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.defaultstyleresourceuriproperty)
    public class var defaultStyleResourceUriProperty : WinUI.DependencyProperty! {
        get { try! _IControlStatics.get_DefaultStyleResourceUriPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.elementsoundmodeproperty)
    public class var elementSoundModeProperty : WinUI.DependencyProperty! {
        get { try! _IControlStatics.get_ElementSoundModePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.fontfamilyproperty)
    public class var fontFamilyProperty : WinUI.DependencyProperty! {
        get { try! _IControlStatics.get_FontFamilyPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.fontsizeproperty)
    public class var fontSizeProperty : WinUI.DependencyProperty! {
        get { try! _IControlStatics.get_FontSizePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.fontstretchproperty)
    public class var fontStretchProperty : WinUI.DependencyProperty! {
        get { try! _IControlStatics.get_FontStretchPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.fontstyleproperty)
    public class var fontStyleProperty : WinUI.DependencyProperty! {
        get { try! _IControlStatics.get_FontStylePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.fontweightproperty)
    public class var fontWeightProperty : WinUI.DependencyProperty! {
        get { try! _IControlStatics.get_FontWeightPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.foregroundproperty)
    public class var foregroundProperty : WinUI.DependencyProperty! {
        get { try! _IControlStatics.get_ForegroundPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.horizontalcontentalignmentproperty)
    public class var horizontalContentAlignmentProperty : WinUI.DependencyProperty! {
        get { try! _IControlStatics.get_HorizontalContentAlignmentPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.isenabledproperty)
    public class var isEnabledProperty : WinUI.DependencyProperty! {
        get { try! _IControlStatics.get_IsEnabledPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.isfocusengagedproperty)
    public class var isFocusEngagedProperty : WinUI.DependencyProperty! {
        get { try! _IControlStatics.get_IsFocusEngagedPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.isfocusengagementenabledproperty)
    public class var isFocusEngagementEnabledProperty : WinUI.DependencyProperty! {
        get { try! _IControlStatics.get_IsFocusEngagementEnabledPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.istemplatefocustargetproperty)
    public class var isTemplateFocusTargetProperty : WinUI.DependencyProperty! {
        get { try! _IControlStatics.get_IsTemplateFocusTargetPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.istemplatekeytiptargetproperty)
    public class var isTemplateKeyTipTargetProperty : WinUI.DependencyProperty! {
        get { try! _IControlStatics.get_IsTemplateKeyTipTargetPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.istextscalefactorenabledproperty)
    public class var isTextScaleFactorEnabledProperty : WinUI.DependencyProperty! {
        get { try! _IControlStatics.get_IsTextScaleFactorEnabledPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.paddingproperty)
    public class var paddingProperty : WinUI.DependencyProperty! {
        get { try! _IControlStatics.get_PaddingPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.requirespointerproperty)
    public class var requiresPointerProperty : WinUI.DependencyProperty! {
        get { try! _IControlStatics.get_RequiresPointerPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.tabnavigationproperty)
    public class var tabNavigationProperty : WinUI.DependencyProperty! {
        get { try! _IControlStatics.get_TabNavigationPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.templateproperty)
    public class var templateProperty : WinUI.DependencyProperty! {
        get { try! _IControlStatics.get_TemplatePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.verticalcontentalignmentproperty)
    public class var verticalContentAlignmentProperty : WinUI.DependencyProperty! {
        get { try! _IControlStatics.get_VerticalContentAlignmentPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.removefocusengagement)
    public fn removeFocusEngagement() throws {
        try _default.RemoveFocusEngagementImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.applytemplate)
    public fn applyTemplate() throws -> Boolean {
        try _default.ApplyTemplateImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.background)
    public var background : WinUI.Brush! {
        get { try! _default.get_BackgroundImpl() }
        set { try! _default.put_BackgroundImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.backgroundsizing)
    public var backgroundSizing : BackgroundSizing {
        get { try! _default.get_BackgroundSizingImpl() }
        set { try! _default.put_BackgroundSizingImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.borderbrush)
    public var borderBrush : WinUI.Brush! {
        get { try! _default.get_BorderBrushImpl() }
        set { try! _default.put_BorderBrushImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.borderthickness)
    public var borderThickness : WinUI.Thickness {
        get { try! _default.get_BorderThicknessImpl() }
        set { try! _default.put_BorderThicknessImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.characterspacing)
    public var characterSpacing : Int32 {
        get { try! _default.get_CharacterSpacingImpl() }
        set { try! _default.put_CharacterSpacingImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.cornerradius)
    public var cornerRadius : WinUI.CornerRadius {
        get { try! _default.get_CornerRadiusImpl() }
        set { try! _default.put_CornerRadiusImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.defaultstyleresourceuri)
    public var defaultStyleResourceUri : WindowsFoundation.Uri! {
        get { try! _default.get_DefaultStyleResourceUriImpl() }
        set { try! _default.put_DefaultStyleResourceUriImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.elementsoundmode)
    public var elementSoundMode : WinUI.ElementSoundMode {
        get { try! _default.get_ElementSoundModeImpl() }
        set { try! _default.put_ElementSoundModeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.fontfamily)
    public var fontFamily : WinUI.FontFamily! {
        get { try! _default.get_FontFamilyImpl() }
        set { try! _default.put_FontFamilyImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.fontsize)
    public var fontSize : Double {
        get { try! _default.get_FontSizeImpl() }
        set { try! _default.put_FontSizeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.fontstretch)
    public var fontStretch : UWP.FontStretch {
        get { try! _default.get_FontStretchImpl() }
        set { try! _default.put_FontStretchImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.fontstyle)
    public var fontStyle : UWP.FontStyle {
        get { try! _default.get_FontStyleImpl() }
        set { try! _default.put_FontStyleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.fontweight)
    public var fontWeight : UWP.FontWeight {
        get { try! _default.get_FontWeightImpl() }
        set { try! _default.put_FontWeightImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.foreground)
    public var foreground : WinUI.Brush! {
        get { try! _default.get_ForegroundImpl() }
        set { try! _default.put_ForegroundImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.horizontalcontentalignment)
    public var horizontalContentAlignment : WinUI.HorizontalAlignment {
        get { try! _default.get_HorizontalContentAlignmentImpl() }
        set { try! _default.put_HorizontalContentAlignmentImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.isenabled)
    public var isEnabled : Boolean {
        get { try! _default.get_IsEnabledImpl() }
        set { try! _default.put_IsEnabledImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.isfocusengaged)
    public var isFocusEngaged : Boolean {
        get { try! _default.get_IsFocusEngagedImpl() }
        set { try! _default.put_IsFocusEngagedImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.isfocusengagementenabled)
    public var isFocusEngagementEnabled : Boolean {
        get { try! _default.get_IsFocusEngagementEnabledImpl() }
        set { try! _default.put_IsFocusEngagementEnabledImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.istextscalefactorenabled)
    public var isTextScaleFactorEnabled : Boolean {
        get { try! _default.get_IsTextScaleFactorEnabledImpl() }
        set { try! _default.put_IsTextScaleFactorEnabledImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.padding)
    public var padding : WinUI.Thickness {
        get { try! _default.get_PaddingImpl() }
        set { try! _default.put_PaddingImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.requirespointer)
    public var requiresPointer : RequiresPointer {
        get { try! _default.get_RequiresPointerImpl() }
        set { try! _default.put_RequiresPointerImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.tabnavigation)
    public var tabNavigation : WinUI.KeyboardNavigationMode {
        get { try! _default.get_TabNavigationImpl() }
        set { try! _default.put_TabNavigationImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.template)
    public var template : ControlTemplate! {
        get { try! _default.get_TemplateImpl() }
        set { try! _default.put_TemplateImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.verticalcontentalignment)
    public var verticalContentAlignment : WinUI.VerticalAlignment {
        get { try! _default.get_VerticalContentAlignmentImpl() }
        set { try! _default.put_VerticalContentAlignmentImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.focusdisengaged)
    public lazy var focusDisengaged : Event<TypedEventHandler<Control?, FocusDisengagedEventArgs?>> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_FocusDisengagedImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_FocusDisengagedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.focusengaged)
    public lazy var focusEngaged : Event<TypedEventHandler<Control?, FocusEngagedEventArgs?>> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_FocusEngagedImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_FocusEngagedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.isenabledchanged)
    public lazy var isEnabledChanged : Event<WinUI.DependencyPropertyChangedEventHandler> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_IsEnabledChangedImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_IsEnabledChangedImpl($0)
       }
      )
    }()

    private lazy var _IControlProtected: __ABI_Microsoft_UI_Xaml_Controls.IControlProtected! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.gettemplatechild)
    public fn getTemplateChild(_ childName: String) throws -> WinUI.DependencyObject! {
        try _IControlProtected.GetTemplateChildImpl(childName)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.defaultstylekey)
    public var defaultStyleKey : Any! {
        get { try! _IControlProtected.get_DefaultStyleKeyImpl() }
        set { try! _IControlProtected.put_DefaultStyleKeyImpl(newValue) }
    }

    private lazy var _IControlOverrides: __ABI_Microsoft_UI_Xaml_Controls.IControlOverrides! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.onpointerentered)
    open fn onPointerEntered(_ e: WinUI.PointerRoutedEventArgs!) throws {
        try _IControlOverrides.OnPointerEnteredImpl(e)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.onpointerpressed)
    open fn onPointerPressed(_ e: WinUI.PointerRoutedEventArgs!) throws {
        try _IControlOverrides.OnPointerPressedImpl(e)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.onpointermoved)
    open fn onPointerMoved(_ e: WinUI.PointerRoutedEventArgs!) throws {
        try _IControlOverrides.OnPointerMovedImpl(e)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.onpointerreleased)
    open fn onPointerReleased(_ e: WinUI.PointerRoutedEventArgs!) throws {
        try _IControlOverrides.OnPointerReleasedImpl(e)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.onpointerexited)
    open fn onPointerExited(_ e: WinUI.PointerRoutedEventArgs!) throws {
        try _IControlOverrides.OnPointerExitedImpl(e)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.onpointercapturelost)
    open fn onPointerCaptureLost(_ e: WinUI.PointerRoutedEventArgs!) throws {
        try _IControlOverrides.OnPointerCaptureLostImpl(e)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.onpointercanceled)
    open fn onPointerCanceled(_ e: WinUI.PointerRoutedEventArgs!) throws {
        try _IControlOverrides.OnPointerCanceledImpl(e)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.onpointerwheelchanged)
    open fn onPointerWheelChanged(_ e: WinUI.PointerRoutedEventArgs!) throws {
        try _IControlOverrides.OnPointerWheelChangedImpl(e)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.ontapped)
    open fn onTapped(_ e: WinUI.TappedRoutedEventArgs!) throws {
        try _IControlOverrides.OnTappedImpl(e)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.ondoubletapped)
    open fn onDoubleTapped(_ e: WinUI.DoubleTappedRoutedEventArgs!) throws {
        try _IControlOverrides.OnDoubleTappedImpl(e)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.onholding)
    open fn onHolding(_ e: WinUI.HoldingRoutedEventArgs!) throws {
        try _IControlOverrides.OnHoldingImpl(e)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.onrighttapped)
    open fn onRightTapped(_ e: WinUI.RightTappedRoutedEventArgs!) throws {
        try _IControlOverrides.OnRightTappedImpl(e)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.onmanipulationstarting)
    open fn onManipulationStarting(_ e: WinUI.ManipulationStartingRoutedEventArgs!) throws {
        try _IControlOverrides.OnManipulationStartingImpl(e)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.onmanipulationinertiastarting)
    open fn onManipulationInertiaStarting(_ e: WinUI.ManipulationInertiaStartingRoutedEventArgs!) throws {
        try _IControlOverrides.OnManipulationInertiaStartingImpl(e)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.onmanipulationstarted)
    open fn onManipulationStarted(_ e: WinUI.ManipulationStartedRoutedEventArgs!) throws {
        try _IControlOverrides.OnManipulationStartedImpl(e)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.onmanipulationdelta)
    open fn onManipulationDelta(_ e: WinUI.ManipulationDeltaRoutedEventArgs!) throws {
        try _IControlOverrides.OnManipulationDeltaImpl(e)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.onmanipulationcompleted)
    open fn onManipulationCompleted(_ e: WinUI.ManipulationCompletedRoutedEventArgs!) throws {
        try _IControlOverrides.OnManipulationCompletedImpl(e)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.onkeyup)
    open fn onKeyUp(_ e: WinUI.KeyRoutedEventArgs!) throws {
        try _IControlOverrides.OnKeyUpImpl(e)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.onkeydown)
    open fn onKeyDown(_ e: WinUI.KeyRoutedEventArgs!) throws {
        try _IControlOverrides.OnKeyDownImpl(e)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.onpreviewkeydown)
    open fn onPreviewKeyDown(_ e: WinUI.KeyRoutedEventArgs!) throws {
        try _IControlOverrides.OnPreviewKeyDownImpl(e)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.onpreviewkeyup)
    open fn onPreviewKeyUp(_ e: WinUI.KeyRoutedEventArgs!) throws {
        try _IControlOverrides.OnPreviewKeyUpImpl(e)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.ongotfocus)
    open fn onGotFocus(_ e: WinUI.RoutedEventArgs!) throws {
        try _IControlOverrides.OnGotFocusImpl(e)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.onlostfocus)
    open fn onLostFocus(_ e: WinUI.RoutedEventArgs!) throws {
        try _IControlOverrides.OnLostFocusImpl(e)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.oncharacterreceived)
    open fn onCharacterReceived(_ e: WinUI.CharacterReceivedRoutedEventArgs!) throws {
        try _IControlOverrides.OnCharacterReceivedImpl(e)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.ondragenter)
    open fn onDragEnter(_ e: WinUI.DragEventArgs!) throws {
        try _IControlOverrides.OnDragEnterImpl(e)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.ondragleave)
    open fn onDragLeave(_ e: WinUI.DragEventArgs!) throws {
        try _IControlOverrides.OnDragLeaveImpl(e)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.ondragover)
    open fn onDragOver(_ e: WinUI.DragEventArgs!) throws {
        try _IControlOverrides.OnDragOverImpl(e)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.control.ondrop)
    open fn onDrop(_ e: WinUI.DragEventArgs!) throws {
        try _IControlOverrides.OnDropImpl(e)
    }

    internal enum IControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides
        internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IControlOverrides
        internal typealias Class = Control
        internal typealias CodiraProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControl
            internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IControl
        }
    }
    internal typealias Composable = IControlOverrides
    deinit {
        _default = Nothing
        _IControlProtected = Nothing
        _IControlOverrides = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.controltemplate)
public final class ControlTemplate : WinUI.FrameworkTemplate {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IControlTemplate
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlTemplate
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlTemplate>?) -> ControlTemplate? {
        guard immutable abi = abi else { return Nothing }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Controls.ControlTemplate")))
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.controltemplate.targettype)
    public var targetType : WinUI.TypeName {
        get { try! _default.get_TargetTypeImpl() }
        set { try! _default.put_TargetTypeImpl(newValue) }
    }

    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.corewebview2initializedeventargs)
public final class CoreWebView2InitializedEventArgs : WinRTClass {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.ICoreWebView2InitializedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CICoreWebView2InitializedEventArgs
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CICoreWebView2InitializedEventArgs>?) -> CoreWebView2InitializedEventArgs? {
        guard immutable abi = abi else { return Nothing }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.corewebview2initializedeventargs.exception)
    public var exception : HRESULT {
        get { try! _default.get_ExceptionImpl() }
    }

    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.datatemplateselector)
open class DataTemplateSelector : WinRTClass, WinUI.IElementFactory {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IDataTemplateSelector
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIDataTemplateSelector
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIDataTemplateSelector>?) -> DataTemplateSelector? {
        guard immutable abi = abi else { return Nothing }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    @_spi(WinRTInternal)
    public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.CodiraABI)
    {
        super.init()
        MakeComposed(composing: composing, (this as! Composable.Class), createCallback)
    }
    override open fn queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_UI_Xaml_Controls.IDataTemplateSelectorOverridesWrapper.IID:
                immutable wrapper = __ABI_Microsoft_UI_Xaml_Controls.IDataTemplateSelectorOverridesWrapper(this)
                return wrapper!.queryInterface(iid)
            default: return super.queryInterface(iid)
        }
    }
    private static var _IDataTemplateSelectorFactory : __ABI_Microsoft_UI_Xaml_Controls.IDataTemplateSelectorFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.DataTemplateSelector"))

    override public init() {
        super.init()
        MakeComposed(composing: Self.Composable.this, this) { baseInterface, innerInterface in 
            try! Self._IDataTemplateSelectorFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.datatemplateselector.selecttemplate)
    public fn selectTemplate(_ item: Any!, _ container: WinUI.DependencyObject!) throws -> WinUI.DataTemplate! {
        try _default.SelectTemplateImpl(item, container)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.datatemplateselector.selecttemplate)
    public fn selectTemplate(_ item: Any!) throws -> WinUI.DataTemplate! {
        try _default.SelectTemplateForItemImpl(item)
    }

    private lazy var _IDataTemplateSelectorOverrides: __ABI_Microsoft_UI_Xaml_Controls.IDataTemplateSelectorOverrides! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.datatemplateselector.selecttemplatecore)
    open fn selectTemplateCore(_ item: Any!, _ container: WinUI.DependencyObject!) throws -> WinUI.DataTemplate! {
        try _IDataTemplateSelectorOverrides.SelectTemplateCoreImpl(item, container)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.datatemplateselector.selecttemplatecore)
    open fn selectTemplateCore(_ item: Any!) throws -> WinUI.DataTemplate! {
        try _IDataTemplateSelectorOverrides.SelectTemplateForItemCoreImpl(item)
    }

    internal enum IDataTemplateSelectorOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIDataTemplateSelectorOverrides
        internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IDataTemplateSelectorOverrides
        internal typealias Class = DataTemplateSelector
        internal typealias CodiraProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIDataTemplateSelector
            internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IDataTemplateSelector
        }
    }
    internal typealias Composable = IDataTemplateSelectorOverrides
    private lazy var _IElementFactory: __ABI_Microsoft_UI_Xaml.IElementFactory! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.datatemplateselector.getelement)
    public fn getElement(_ args: WinUI.ElementFactoryGetArgs!) throws -> WinUI.UIElement! {
        try _IElementFactory.GetElementImpl(args)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.datatemplateselector.recycleelement)
    public fn recycleElement(_ args: WinUI.ElementFactoryRecycleArgs!) throws {
        try _IElementFactory.RecycleElementImpl(args)
    }

    deinit {
        _default = Nothing
        _IDataTemplateSelectorOverrides = Nothing
        _IElementFactory = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.dragitemscompletedeventargs)
public final class DragItemsCompletedEventArgs : WinRTClass {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IDragItemsCompletedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIDragItemsCompletedEventArgs
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIDragItemsCompletedEventArgs>?) -> DragItemsCompletedEventArgs? {
        guard immutable abi = abi else { return Nothing }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.dragitemscompletedeventargs.dropresult)
    public var dropResult : UWP.DataPackageOperation {
        get { try! _default.get_DropResultImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.dragitemscompletedeventargs.items)
    public var items : WindowsFoundation.AnyIVectorView<Any?>! {
        get { try! _default.get_ItemsImpl() }
    }

    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.dragitemsstartingeventargs)
public final class DragItemsStartingEventArgs : WinRTClass {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IDragItemsStartingEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIDragItemsStartingEventArgs
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIDragItemsStartingEventArgs>?) -> DragItemsStartingEventArgs? {
        guard immutable abi = abi else { return Nothing }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public init() {
        super.init(try! RoActivateInstance(HString("Microsoft.UI.Xaml.Controls.DragItemsStartingEventArgs")))
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.dragitemsstartingeventargs.cancel)
    public var cancel : Boolean {
        get { try! _default.get_CancelImpl() }
        set { try! _default.put_CancelImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.dragitemsstartingeventargs.data)
    public var data : UWP.DataPackage! {
        get { try! _default.get_DataImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.dragitemsstartingeventargs.items)
    public var items : WindowsFoundation.AnyIVector<Any?>! {
        get { try! _default.get_ItemsImpl() }
    }

    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.flyout)
open class Flyout : WinUI.FlyoutBase {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IFlyout
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFlyout
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFlyout>?) -> Flyout? {
        guard immutable abi = abi else { return Nothing }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.CodiraABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open fn queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IFlyoutFactory : __ABI_Microsoft_UI_Xaml_Controls.IFlyoutFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.Flyout"))

    override public init() {
        super.init(composing: Self.Composable.this) { baseInterface, innerInterface in 
            try! Self._IFlyoutFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static immutable _IFlyoutStatics: __ABI_Microsoft_UI_Xaml_Controls.IFlyoutStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.Flyout"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.flyout.contentproperty)
    public class var contentProperty : WinUI.DependencyProperty! {
        get { try! _IFlyoutStatics.get_ContentPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.flyout.flyoutpresenterstyleproperty)
    public class var flyoutPresenterStyleProperty : WinUI.DependencyProperty! {
        get { try! _IFlyoutStatics.get_FlyoutPresenterStylePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.flyout.content)
    public var content : WinUI.UIElement! {
        get { try! _default.get_ContentImpl() }
        set { try! _default.put_ContentImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.flyout.flyoutpresenterstyle)
    public var flyoutPresenterStyle : WinUI.Style! {
        get { try! _default.get_FlyoutPresenterStyleImpl() }
        set { try! _default.put_FlyoutPresenterStyleImpl(newValue) }
    }

    internal enum IFlyoutBaseOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBaseOverrides
        internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls_Primitives.IFlyoutBaseOverrides
        internal typealias Class = Flyout
        internal typealias CodiraProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFlyout
            internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IFlyout
        }
    }
    internal typealias Composable = IFlyoutBaseOverrides
    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.flyoutpresenter)
open class FlyoutPresenter : WinUI.ContentControl {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IFlyoutPresenter
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFlyoutPresenter
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFlyoutPresenter>?) -> FlyoutPresenter? {
        guard immutable abi = abi else { return Nothing }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.CodiraABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open fn queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IFlyoutPresenterFactory : __ABI_Microsoft_UI_Xaml_Controls.IFlyoutPresenterFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.FlyoutPresenter"))

    override public init() {
        super.init(composing: Self.Composable.this) { baseInterface, innerInterface in 
            try! Self._IFlyoutPresenterFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static immutable _IFlyoutPresenterStatics: __ABI_Microsoft_UI_Xaml_Controls.IFlyoutPresenterStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.FlyoutPresenter"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.flyoutpresenter.isdefaultshadowenabledproperty)
    public class var isDefaultShadowEnabledProperty : WinUI.DependencyProperty! {
        get { try! _IFlyoutPresenterStatics.get_IsDefaultShadowEnabledPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.flyoutpresenter.isdefaultshadowenabled)
    public var isDefaultShadowEnabled : Boolean {
        get { try! _default.get_IsDefaultShadowEnabledImpl() }
        set { try! _default.put_IsDefaultShadowEnabledImpl(newValue) }
    }

    internal enum IContentControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControlOverrides
        internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IContentControlOverrides
        internal typealias Class = FlyoutPresenter
        internal typealias CodiraProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFlyoutPresenter
            internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IFlyoutPresenter
        }
    }
    internal typealias Composable = IContentControlOverrides
    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.focusdisengagedeventargs)
public final class FocusDisengagedEventArgs : WinUI.RoutedEventArgs {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IFocusDisengagedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFocusDisengagedEventArgs
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFocusDisengagedEventArgs>?) -> FocusDisengagedEventArgs? {
        guard immutable abi = abi else { return Nothing }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.focusengagedeventargs)
public final class FocusEngagedEventArgs : WinUI.RoutedEventArgs {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IFocusEngagedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFocusEngagedEventArgs
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIFocusEngagedEventArgs>?) -> FocusEngagedEventArgs? {
        guard immutable abi = abi else { return Nothing }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.focusengagedeventargs.handled)
    public var handled : Boolean {
        get { try! _default.get_HandledImpl() }
        set { try! _default.put_HandledImpl(newValue) }
    }

    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.grid)
open class Grid : WinUI.Panel {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IGrid
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGrid
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGrid>?) -> Grid? {
        guard immutable abi = abi else { return Nothing }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.CodiraABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open fn queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IGridFactory : __ABI_Microsoft_UI_Xaml_Controls.IGridFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.Grid"))

    override public init() {
        super.init(composing: Self.Composable.this) { baseInterface, innerInterface in 
            try! Self._IGridFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static immutable _IGridStatics: __ABI_Microsoft_UI_Xaml_Controls.IGridStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.Grid"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.grid.getrow)
    public class fn getRow(_ element: WinUI.FrameworkElement!) -> Int32 {
        return try! _IGridStatics.GetRowImpl(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.grid.setrow)
    public class fn setRow(_ element: WinUI.FrameworkElement!, _ value: Int32) {
        try! _IGridStatics.SetRowImpl(element, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.grid.getcolumn)
    public class fn getColumn(_ element: WinUI.FrameworkElement!) -> Int32 {
        return try! _IGridStatics.GetColumnImpl(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.grid.setcolumn)
    public class fn setColumn(_ element: WinUI.FrameworkElement!, _ value: Int32) {
        try! _IGridStatics.SetColumnImpl(element, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.grid.getrowspan)
    public class fn getRowSpan(_ element: WinUI.FrameworkElement!) -> Int32 {
        return try! _IGridStatics.GetRowSpanImpl(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.grid.setrowspan)
    public class fn setRowSpan(_ element: WinUI.FrameworkElement!, _ value: Int32) {
        try! _IGridStatics.SetRowSpanImpl(element, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.grid.getcolumnspan)
    public class fn getColumnSpan(_ element: WinUI.FrameworkElement!) -> Int32 {
        return try! _IGridStatics.GetColumnSpanImpl(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.grid.setcolumnspan)
    public class fn setColumnSpan(_ element: WinUI.FrameworkElement!, _ value: Int32) {
        try! _IGridStatics.SetColumnSpanImpl(element, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.grid.backgroundsizingproperty)
    public class var backgroundSizingProperty : WinUI.DependencyProperty! {
        get { try! _IGridStatics.get_BackgroundSizingPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.grid.borderbrushproperty)
    public class var borderBrushProperty : WinUI.DependencyProperty! {
        get { try! _IGridStatics.get_BorderBrushPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.grid.borderthicknessproperty)
    public class var borderThicknessProperty : WinUI.DependencyProperty! {
        get { try! _IGridStatics.get_BorderThicknessPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.grid.columnproperty)
    public class var columnProperty : WinUI.DependencyProperty! {
        get { try! _IGridStatics.get_ColumnPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.grid.columnspacingproperty)
    public class var columnSpacingProperty : WinUI.DependencyProperty! {
        get { try! _IGridStatics.get_ColumnSpacingPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.grid.columnspanproperty)
    public class var columnSpanProperty : WinUI.DependencyProperty! {
        get { try! _IGridStatics.get_ColumnSpanPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.grid.cornerradiusproperty)
    public class var cornerRadiusProperty : WinUI.DependencyProperty! {
        get { try! _IGridStatics.get_CornerRadiusPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.grid.paddingproperty)
    public class var paddingProperty : WinUI.DependencyProperty! {
        get { try! _IGridStatics.get_PaddingPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.grid.rowproperty)
    public class var rowProperty : WinUI.DependencyProperty! {
        get { try! _IGridStatics.get_RowPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.grid.rowspacingproperty)
    public class var rowSpacingProperty : WinUI.DependencyProperty! {
        get { try! _IGridStatics.get_RowSpacingPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.grid.rowspanproperty)
    public class var rowSpanProperty : WinUI.DependencyProperty! {
        get { try! _IGridStatics.get_RowSpanPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.grid.backgroundsizing)
    public var backgroundSizing : BackgroundSizing {
        get { try! _default.get_BackgroundSizingImpl() }
        set { try! _default.put_BackgroundSizingImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.grid.borderbrush)
    public var borderBrush : WinUI.Brush! {
        get { try! _default.get_BorderBrushImpl() }
        set { try! _default.put_BorderBrushImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.grid.borderthickness)
    public var borderThickness : WinUI.Thickness {
        get { try! _default.get_BorderThicknessImpl() }
        set { try! _default.put_BorderThicknessImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.grid.columndefinitions)
    public var columnDefinitions : ColumnDefinitionCollection! {
        get { try! _default.get_ColumnDefinitionsImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.grid.columnspacing)
    public var columnSpacing : Double {
        get { try! _default.get_ColumnSpacingImpl() }
        set { try! _default.put_ColumnSpacingImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.grid.cornerradius)
    public var cornerRadius : WinUI.CornerRadius {
        get { try! _default.get_CornerRadiusImpl() }
        set { try! _default.put_CornerRadiusImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.grid.padding)
    public var padding : WinUI.Thickness {
        get { try! _default.get_PaddingImpl() }
        set { try! _default.put_PaddingImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.grid.rowdefinitions)
    public var rowDefinitions : RowDefinitionCollection! {
        get { try! _default.get_RowDefinitionsImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.grid.rowspacing)
    public var rowSpacing : Double {
        get { try! _default.get_RowSpacingImpl() }
        set { try! _default.put_RowSpacingImpl(newValue) }
    }

    internal enum IFrameworkElementOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIFrameworkElementOverrides
        internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml.IFrameworkElementOverrides
        internal typealias Class = Grid
        internal typealias CodiraProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGrid
            internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IGrid
        }
    }
    internal typealias Composable = IFrameworkElementOverrides
    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.groupstyle)
open class GroupStyle : WinRTClass, WinUI.INotifyPropertyChanged {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IGroupStyle
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGroupStyle
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGroupStyle>?) -> GroupStyle? {
        guard immutable abi = abi else { return Nothing }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    @_spi(WinRTInternal)
    public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.CodiraABI)
    {
        super.init()
        MakeComposed(composing: composing, (this as! Composable.Class), createCallback)
    }
    override open fn queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IGroupStyleFactory : __ABI_Microsoft_UI_Xaml_Controls.IGroupStyleFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.GroupStyle"))

    override public init() {
        super.init()
        MakeComposed(composing: Self.Composable.this, this) { baseInterface, innerInterface in 
            try! Self._IGroupStyleFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.groupstyle.containerstyle)
    public var containerStyle : WinUI.Style! {
        get { try! _default.get_ContainerStyleImpl() }
        set { try! _default.put_ContainerStyleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.groupstyle.containerstyleselector)
    public var containerStyleSelector : StyleSelector! {
        get { try! _default.get_ContainerStyleSelectorImpl() }
        set { try! _default.put_ContainerStyleSelectorImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.groupstyle.headercontainerstyle)
    public var headerContainerStyle : WinUI.Style! {
        get { try! _default.get_HeaderContainerStyleImpl() }
        set { try! _default.put_HeaderContainerStyleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.groupstyle.headertemplate)
    public var headerTemplate : WinUI.DataTemplate! {
        get { try! _default.get_HeaderTemplateImpl() }
        set { try! _default.put_HeaderTemplateImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.groupstyle.headertemplateselector)
    public var headerTemplateSelector : DataTemplateSelector! {
        get { try! _default.get_HeaderTemplateSelectorImpl() }
        set { try! _default.put_HeaderTemplateSelectorImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.groupstyle.hidesifempty)
    public var hidesIfEmpty : Boolean {
        get { try! _default.get_HidesIfEmptyImpl() }
        set { try! _default.put_HidesIfEmptyImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.groupstyle.panel)
    public var panel : ItemsPanelTemplate! {
        get { try! _default.get_PanelImpl() }
        set { try! _default.put_PanelImpl(newValue) }
    }

    private lazy var _INotifyPropertyChanged: __ABI_Microsoft_UI_Xaml_Data.INotifyPropertyChanged! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.groupstyle.propertychanged)
    public lazy var propertyChanged : Event<WinUI.PropertyChangedEventHandler> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._INotifyPropertyChanged else { return .init() }
          return try! this.add_PropertyChangedImpl($0)
        },
        remove: { [weak this] in
         try? this?._INotifyPropertyChanged.remove_PropertyChangedImpl($0)
       }
      )
    }()

    internal enum IGroupStyle : ComposableImpl {
        internal typealias CABI = C_IInspectable
        internal typealias CodiraABI = WindowsFoundation.IInspectable
        internal typealias Class = GroupStyle
        internal typealias CodiraProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGroupStyle
            internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IGroupStyle
        }
    }
    internal typealias Composable = IGroupStyle
    deinit {
        _default = Nothing
        _INotifyPropertyChanged = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.groupstyleselector)
open class GroupStyleSelector : WinRTClass {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IGroupStyleSelector
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGroupStyleSelector
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGroupStyleSelector>?) -> GroupStyleSelector? {
        guard immutable abi = abi else { return Nothing }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    @_spi(WinRTInternal)
    public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.CodiraABI)
    {
        super.init()
        MakeComposed(composing: composing, (this as! Composable.Class), createCallback)
    }
    override open fn queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_UI_Xaml_Controls.IGroupStyleSelectorOverridesWrapper.IID:
                immutable wrapper = __ABI_Microsoft_UI_Xaml_Controls.IGroupStyleSelectorOverridesWrapper(this)
                return wrapper!.queryInterface(iid)
            default: return super.queryInterface(iid)
        }
    }
    private static var _IGroupStyleSelectorFactory : __ABI_Microsoft_UI_Xaml_Controls.IGroupStyleSelectorFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.GroupStyleSelector"))

    override public init() {
        super.init()
        MakeComposed(composing: Self.Composable.this, this) { baseInterface, innerInterface in 
            try! Self._IGroupStyleSelectorFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.groupstyleselector.selectgroupstyle)
    public fn selectGroupStyle(_ group: Any!, _ level: UInt32) throws -> GroupStyle! {
        try _default.SelectGroupStyleImpl(group, level)
    }

    private lazy var _IGroupStyleSelectorOverrides: __ABI_Microsoft_UI_Xaml_Controls.IGroupStyleSelectorOverrides! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.groupstyleselector.selectgroupstylecore)
    open fn selectGroupStyleCore(_ group: Any!, _ level: UInt32) throws -> GroupStyle! {
        try _IGroupStyleSelectorOverrides.SelectGroupStyleCoreImpl(group, level)
    }

    internal enum IGroupStyleSelectorOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGroupStyleSelectorOverrides
        internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IGroupStyleSelectorOverrides
        internal typealias Class = GroupStyleSelector
        internal typealias CodiraProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIGroupStyleSelector
            internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IGroupStyleSelector
        }
    }
    internal typealias Composable = IGroupStyleSelectorOverrides
    deinit {
        _default = Nothing
        _IGroupStyleSelectorOverrides = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.hyperlinkbutton)
open class HyperlinkButton : WinUI.ButtonBase {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IHyperlinkButton
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIHyperlinkButton
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIHyperlinkButton>?) -> HyperlinkButton? {
        guard immutable abi = abi else { return Nothing }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.CodiraABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open fn queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IHyperlinkButtonFactory : __ABI_Microsoft_UI_Xaml_Controls.IHyperlinkButtonFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.HyperlinkButton"))

    override public init() {
        super.init(composing: Self.Composable.this) { baseInterface, innerInterface in 
            try! Self._IHyperlinkButtonFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static immutable _IHyperlinkButtonStatics: __ABI_Microsoft_UI_Xaml_Controls.IHyperlinkButtonStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.HyperlinkButton"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.hyperlinkbutton.navigateuriproperty)
    public class var navigateUriProperty : WinUI.DependencyProperty! {
        get { try! _IHyperlinkButtonStatics.get_NavigateUriPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.hyperlinkbutton.navigateuri)
    public var navigateUri : WindowsFoundation.Uri! {
        get { try! _default.get_NavigateUriImpl() }
        set { try! _default.put_NavigateUriImpl(newValue) }
    }

    internal enum IContentControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControlOverrides
        internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IContentControlOverrides
        internal typealias Class = HyperlinkButton
        internal typealias CodiraProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIHyperlinkButton
            internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IHyperlinkButton
        }
    }
    internal typealias Composable = IContentControlOverrides
    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.iconelement)
open class IconElement : WinUI.FrameworkElement {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IIconElement
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIIconElement
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIIconElement>?) -> IconElement? {
        guard immutable abi = abi else { return Nothing }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.CodiraABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open fn queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IIconElementFactory : __ABI_Microsoft_UI_Xaml_Controls.IIconElementFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.IconElement"))

    private static immutable _IIconElementStatics: __ABI_Microsoft_UI_Xaml_Controls.IIconElementStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.IconElement"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.iconelement.foregroundproperty)
    public class var foregroundProperty : WinUI.DependencyProperty! {
        get { try! _IIconElementStatics.get_ForegroundPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.iconelement.foreground)
    public var foreground : WinUI.Brush! {
        get { try! _default.get_ForegroundImpl() }
        set { try! _default.put_ForegroundImpl(newValue) }
    }

    internal enum IFrameworkElementOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIFrameworkElementOverrides
        internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml.IFrameworkElementOverrides
        internal typealias Class = IconElement
        internal typealias CodiraProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIIconElement
            internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IIconElement
        }
    }
    internal typealias Composable = IFrameworkElementOverrides
    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.iconsource)
open class IconSource : WinUI.DependencyObject {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IIconSource
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIIconSource
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIIconSource>?) -> IconSource? {
        guard immutable abi = abi else { return Nothing }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.CodiraABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open fn queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_UI_Xaml_Controls.IIconSourceOverridesWrapper.IID:
                immutable wrapper = __ABI_Microsoft_UI_Xaml_Controls.IIconSourceOverridesWrapper(this)
                return wrapper!.queryInterface(iid)
            default: return super.queryInterface(iid)
        }
    }
    private static var _IIconSourceFactory : __ABI_Microsoft_UI_Xaml_Controls.IIconSourceFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.IconSource"))

    private static immutable _IIconSourceStatics: __ABI_Microsoft_UI_Xaml_Controls.IIconSourceStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.IconSource"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.iconsource.foregroundproperty)
    public class var foregroundProperty : WinUI.DependencyProperty! {
        get { try! _IIconSourceStatics.get_ForegroundPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.iconsource.createiconelement)
    public fn createIconElement() throws -> IconElement! {
        try _default.CreateIconElementImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.iconsource.foreground)
    public var foreground : WinUI.Brush! {
        get { try! _default.get_ForegroundImpl() }
        set { try! _default.put_ForegroundImpl(newValue) }
    }

    private lazy var _IIconSourceOverrides: __ABI_Microsoft_UI_Xaml_Controls.IIconSourceOverrides! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.iconsource.createiconelementcore)
    open fn createIconElementCore() throws -> IconElement! {
        try _IIconSourceOverrides.CreateIconElementCoreImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.iconsource.geticonelementpropertycore)
    open fn getIconElementPropertyCore(_ iconSourceProperty: WinUI.DependencyProperty!) throws -> WinUI.DependencyProperty! {
        try _IIconSourceOverrides.GetIconElementPropertyCoreImpl(iconSourceProperty)
    }

    internal enum IIconSourceOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIIconSourceOverrides
        internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IIconSourceOverrides
        internal typealias Class = IconSource
        internal typealias CodiraProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIIconSource
            internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IIconSource
        }
    }
    internal typealias Composable = IIconSourceOverrides
    deinit {
        _default = Nothing
        _IIconSourceOverrides = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.image)
public final class Image : WinUI.FrameworkElement {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IImage
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIImage
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIImage>?) -> Image? {
        guard immutable abi = abi else { return Nothing }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Controls.Image")))
    }

    private static immutable _IImageStatics: __ABI_Microsoft_UI_Xaml_Controls.IImageStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.Image"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.image.ninegridproperty)
    public static var nineGridProperty : WinUI.DependencyProperty! {
        get { try! _IImageStatics.get_NineGridPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.image.sourceproperty)
    public static var sourceProperty : WinUI.DependencyProperty! {
        get { try! _IImageStatics.get_SourcePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.image.stretchproperty)
    public static var stretchProperty : WinUI.DependencyProperty! {
        get { try! _IImageStatics.get_StretchPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.image.getascastingsource)
    public fn getAsCastingSource() throws -> UWP.CastingSource! {
        try _default.GetAsCastingSourceImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.image.getalphamask)
    public fn getAlphaMask() throws -> WinAppSDK.CompositionBrush! {
        try _default.GetAlphaMaskImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.image.ninegrid)
    public var nineGrid : WinUI.Thickness {
        get { try! _default.get_NineGridImpl() }
        set { try! _default.put_NineGridImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.image.source)
    public var source : WinUI.ImageSource! {
        get { try! _default.get_SourceImpl() }
        set { try! _default.put_SourceImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.image.stretch)
    public var stretch : WinUI.Stretch {
        get { try! _default.get_StretchImpl() }
        set { try! _default.put_StretchImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.image.imagefailed)
    public lazy var imageFailed : Event<WinUI.ExceptionRoutedEventHandler> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_ImageFailedImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_ImageFailedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.image.imageopened)
    public lazy var imageOpened : Event<WinUI.RoutedEventHandler> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_ImageOpenedImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_ImageOpenedImpl($0)
       }
      )
    }()

    internal enum IFrameworkElementOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIFrameworkElementOverrides
        internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml.IFrameworkElementOverrides
        internal typealias Class = Image
        internal typealias CodiraProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIImage
            internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IImage
        }
    }
    internal typealias Composable = IFrameworkElementOverrides
    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.infobadge)
open class InfoBadge : WinUI.Control {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IInfoBadge
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBadge
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBadge>?) -> InfoBadge? {
        guard immutable abi = abi else { return Nothing }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.CodiraABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open fn queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IInfoBadgeFactory : __ABI_Microsoft_UI_Xaml_Controls.IInfoBadgeFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.InfoBadge"))

    override public init() {
        super.init(composing: Self.Composable.this) { baseInterface, innerInterface in 
            try! Self._IInfoBadgeFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static immutable _IInfoBadgeStatics: __ABI_Microsoft_UI_Xaml_Controls.IInfoBadgeStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.InfoBadge"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.infobadge.iconsourceproperty)
    public class var iconSourceProperty : WinUI.DependencyProperty! {
        get { try! _IInfoBadgeStatics.get_IconSourcePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.infobadge.templatesettingsproperty)
    public class var templateSettingsProperty : WinUI.DependencyProperty! {
        get { try! _IInfoBadgeStatics.get_TemplateSettingsPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.infobadge.valueproperty)
    public class var valueProperty : WinUI.DependencyProperty! {
        get { try! _IInfoBadgeStatics.get_ValuePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.infobadge.iconsource)
    public var iconSource : IconSource! {
        get { try! _default.get_IconSourceImpl() }
        set { try! _default.put_IconSourceImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.infobadge.templatesettings)
    public var templateSettings : InfoBadgeTemplateSettings! {
        get { try! _default.get_TemplateSettingsImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.infobadge.value)
    public var value : Int32 {
        get { try! _default.get_ValueImpl() }
        set { try! _default.put_ValueImpl(newValue) }
    }

    internal enum IControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides
        internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IControlOverrides
        internal typealias Class = InfoBadge
        internal typealias CodiraProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBadge
            internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IInfoBadge
        }
    }
    internal typealias Composable = IControlOverrides
    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.infobadgetemplatesettings)
open class InfoBadgeTemplateSettings : WinUI.DependencyObject {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IInfoBadgeTemplateSettings
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBadgeTemplateSettings
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBadgeTemplateSettings>?) -> InfoBadgeTemplateSettings? {
        guard immutable abi = abi else { return Nothing }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.CodiraABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open fn queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IInfoBadgeTemplateSettingsFactory : __ABI_Microsoft_UI_Xaml_Controls.IInfoBadgeTemplateSettingsFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.InfoBadgeTemplateSettings"))

    override public init() {
        super.init(composing: Self.Composable.this) { baseInterface, innerInterface in 
            try! Self._IInfoBadgeTemplateSettingsFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static immutable _IInfoBadgeTemplateSettingsStatics: __ABI_Microsoft_UI_Xaml_Controls.IInfoBadgeTemplateSettingsStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.InfoBadgeTemplateSettings"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.infobadgetemplatesettings.iconelementproperty)
    public class var iconElementProperty : WinUI.DependencyProperty! {
        get { try! _IInfoBadgeTemplateSettingsStatics.get_IconElementPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.infobadgetemplatesettings.infobadgecornerradiusproperty)
    public class var infoBadgeCornerRadiusProperty : WinUI.DependencyProperty! {
        get { try! _IInfoBadgeTemplateSettingsStatics.get_InfoBadgeCornerRadiusPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.infobadgetemplatesettings.iconelement)
    public var iconElement : IconElement! {
        get { try! _default.get_IconElementImpl() }
        set { try! _default.put_IconElementImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.infobadgetemplatesettings.infobadgecornerradius)
    public var infoBadgeCornerRadius : WinUI.CornerRadius {
        get { try! _default.get_InfoBadgeCornerRadiusImpl() }
        set { try! _default.put_InfoBadgeCornerRadiusImpl(newValue) }
    }

    internal enum IInfoBadgeTemplateSettings : ComposableImpl {
        internal typealias CABI = C_IInspectable
        internal typealias CodiraABI = WindowsFoundation.IInspectable
        internal typealias Class = InfoBadgeTemplateSettings
        internal typealias CodiraProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIInfoBadgeTemplateSettings
            internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IInfoBadgeTemplateSettings
        }
    }
    internal typealias Composable = IInfoBadgeTemplateSettings
    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.istexttrimmedchangedeventargs)
public final class IsTextTrimmedChangedEventArgs : WinRTClass {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IIsTextTrimmedChangedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIIsTextTrimmedChangedEventArgs
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIIsTextTrimmedChangedEventArgs>?) -> IsTextTrimmedChangedEventArgs? {
        guard immutable abi = abi else { return Nothing }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemclickeventargs)
public final class ItemClickEventArgs : WinUI.RoutedEventArgs {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IItemClickEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemClickEventArgs
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemClickEventArgs>?) -> ItemClickEventArgs? {
        guard immutable abi = abi else { return Nothing }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Controls.ItemClickEventArgs")))
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemclickeventargs.clickeditem)
    public var clickedItem : Any! {
        get { try! _default.get_ClickedItemImpl() }
    }

    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcollection)
public final class ItemCollection : WinRTClass, IObservableVector, IVector, IIterable {
    public typealias T = Any?
    private typealias CodiraABI = WinUI.IObservableVectorAny
    private typealias CABI = __x_ABI_C__FIObservableVector_1_IInspectable
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_C__FIObservableVector_1_IInspectable>?) -> ItemCollection? {
        guard immutable abi = abi else { return Nothing }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public fn queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    // MARK: Collection
    public typealias Element = T
    public var startIndex: Integer { 0 }
    public var endIndex: Integer { Integer(size) }
    public fn index(after i: Integer) -> Integer {
        i+1
    }

    public fn index(of: Element) -> Integer? {
        var index: UInt32 = 0
        immutable result = indexOf(of, &index)
        guard result else { return Nothing }
        return Integer(index)
    }
    public var count: Integer { Integer(size) }


    public subscript(position: Integer) -> Element {
        get {
            getAt(UInt32(position))
        }
        set(newValue) {
            setAt(UInt32(position), newValue)
        }
    }

    public fn removeLast() {
        removeAtEnd()
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcollection.vectorchanged)
    public lazy var vectorChanged : Event<VectorChangedEventHandler<Any?>> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_VectorChangedImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_VectorChangedImpl($0)
       }
      )
    }()

    private lazy var _IVector: IVectorAny! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcollection.getat)
    public fn getAt(_ index: UInt32) -> Any? {
        try! _IVector.GetAtImpl(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcollection.getview)
    public fn getView() -> WindowsFoundation.AnyIVectorView<Any?>? {
        try! _IVector.GetViewImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcollection.indexof)
    public fn indexOf(_ value: Any?, _ index: inout UInt32) -> Boolean {
        try! _IVector.IndexOfImpl(value, &index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcollection.setat)
    public fn setAt(_ index: UInt32, _ value: Any?) {
        try! _IVector.SetAtImpl(index, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcollection.insertat)
    public fn insertAt(_ index: UInt32, _ value: Any?) {
        try! _IVector.InsertAtImpl(index, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcollection.removeat)
    public fn removeAt(_ index: UInt32) {
        try! _IVector.RemoveAtImpl(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcollection.append)
    public fn append(_ value: Any?) {
        try! _IVector.AppendImpl(value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcollection.removeatend)
    public fn removeAtEnd() {
        try! _IVector.RemoveAtEndImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcollection.clear)
    public fn clear() {
        try! _IVector.ClearImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcollection.size)
    public var size : UInt32 {
        get { try! _IVector.get_SizeImpl() }
    }

    private lazy var _IIterable: IIterableAny! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcollection.first)
    public fn first() -> WindowsFoundation.AnyIIterator<Any?>? {
        try! _IIterable.FirstImpl()
    }

    deinit {
        _default = Nothing
        _IVector = Nothing
        _IIterable = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcontainergenerator)
public final class ItemContainerGenerator : WinRTClass {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IItemContainerGenerator
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemContainerGenerator
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemContainerGenerator>?) -> ItemContainerGenerator? {
        guard immutable abi = abi else { return Nothing }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcontainergenerator.itemfromcontainer)
    public fn itemFromContainer(_ container: WinUI.DependencyObject!) throws -> Any! {
        try _default.ItemFromContainerImpl(container)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcontainergenerator.containerfromitem)
    public fn containerFromItem(_ item: Any!) throws -> WinUI.DependencyObject! {
        try _default.ContainerFromItemImpl(item)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcontainergenerator.indexfromcontainer)
    public fn indexFromContainer(_ container: WinUI.DependencyObject!) throws -> Int32 {
        try _default.IndexFromContainerImpl(container)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcontainergenerator.containerfromindex)
    public fn containerFromIndex(_ index: Int32) throws -> WinUI.DependencyObject! {
        try _default.ContainerFromIndexImpl(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcontainergenerator.getitemcontainergeneratorforpanel)
    public fn getItemContainerGeneratorForPanel(_ panel: Panel!) throws -> ItemContainerGenerator! {
        try _default.GetItemContainerGeneratorForPanelImpl(panel)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcontainergenerator.startat)
    public fn startAt(_ position: WinUI.GeneratorPosition, _ direction: WinUI.GeneratorDirection, _ allowStartAtRealizedItem: Boolean) throws {
        try _default.StartAtImpl(position, direction, allowStartAtRealizedItem)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcontainergenerator.stop)
    public fn stop() throws {
        try _default.StopImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcontainergenerator.generatenext)
    public fn generateNext(_ isNewlyRealized: inout Boolean) throws -> WinUI.DependencyObject! {
        try _default.GenerateNextImpl(&isNewlyRealized)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcontainergenerator.prepareitemcontainer)
    public fn prepareItemContainer(_ container: WinUI.DependencyObject!) throws {
        try _default.PrepareItemContainerImpl(container)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcontainergenerator.removeall)
    public fn removeAll() throws {
        try _default.RemoveAllImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcontainergenerator.remove)
    public fn remove(_ position: WinUI.GeneratorPosition, _ count: Int32) throws {
        try _default.RemoveImpl(position, count)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcontainergenerator.generatorpositionfromindex)
    public fn generatorPositionFromIndex(_ itemIndex: Int32) throws -> WinUI.GeneratorPosition {
        try _default.GeneratorPositionFromIndexImpl(itemIndex)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcontainergenerator.indexfromgeneratorposition)
    public fn indexFromGeneratorPosition(_ position: WinUI.GeneratorPosition) throws -> Int32 {
        try _default.IndexFromGeneratorPositionImpl(position)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcontainergenerator.recycle)
    public fn recycle(_ position: WinUI.GeneratorPosition, _ count: Int32) throws {
        try _default.RecycleImpl(position, count)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemcontainergenerator.itemschanged)
    public lazy var itemsChanged : Event<WinUI.ItemsChangedEventHandler> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_ItemsChangedImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_ItemsChangedImpl($0)
       }
      )
    }()

    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemscontrol)
open class ItemsControl : WinUI.Control, IItemContainerMapping {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IItemsControl
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControl
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControl>?) -> ItemsControl? {
        guard immutable abi = abi else { return Nothing }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.CodiraABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open fn queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_UI_Xaml_Controls.IItemsControlOverridesWrapper.IID:
                immutable wrapper = __ABI_Microsoft_UI_Xaml_Controls.IItemsControlOverridesWrapper(this)
                return wrapper!.queryInterface(iid)
            default: return super.queryInterface(iid)
        }
    }
    private static var _IItemsControlFactory : __ABI_Microsoft_UI_Xaml_Controls.IItemsControlFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.ItemsControl"))

    override public init() {
        super.init(composing: Self.Composable.this) { baseInterface, innerInterface in 
            try! Self._IItemsControlFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static immutable _IItemsControlStatics: __ABI_Microsoft_UI_Xaml_Controls.IItemsControlStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.ItemsControl"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemscontrol.getitemsowner)
    public class fn getItemsOwner(_ element: WinUI.DependencyObject!) -> ItemsControl! {
        return try! _IItemsControlStatics.GetItemsOwnerImpl(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemscontrol.itemscontrolfromitemcontainer)
    public class fn itemsControlFromItemContainer(_ container: WinUI.DependencyObject!) -> ItemsControl! {
        return try! _IItemsControlStatics.ItemsControlFromItemContainerImpl(container)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemscontrol.displaymemberpathproperty)
    public class var displayMemberPathProperty : WinUI.DependencyProperty! {
        get { try! _IItemsControlStatics.get_DisplayMemberPathPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemscontrol.groupstyleselectorproperty)
    public class var groupStyleSelectorProperty : WinUI.DependencyProperty! {
        get { try! _IItemsControlStatics.get_GroupStyleSelectorPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemscontrol.isgroupingproperty)
    public class var isGroupingProperty : WinUI.DependencyProperty! {
        get { try! _IItemsControlStatics.get_IsGroupingPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemscontrol.itemcontainerstyleproperty)
    public class var itemContainerStyleProperty : WinUI.DependencyProperty! {
        get { try! _IItemsControlStatics.get_ItemContainerStylePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemscontrol.itemcontainerstyleselectorproperty)
    public class var itemContainerStyleSelectorProperty : WinUI.DependencyProperty! {
        get { try! _IItemsControlStatics.get_ItemContainerStyleSelectorPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemscontrol.itemcontainertransitionsproperty)
    public class var itemContainerTransitionsProperty : WinUI.DependencyProperty! {
        get { try! _IItemsControlStatics.get_ItemContainerTransitionsPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemscontrol.itemtemplateproperty)
    public class var itemTemplateProperty : WinUI.DependencyProperty! {
        get { try! _IItemsControlStatics.get_ItemTemplatePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemscontrol.itemtemplateselectorproperty)
    public class var itemTemplateSelectorProperty : WinUI.DependencyProperty! {
        get { try! _IItemsControlStatics.get_ItemTemplateSelectorPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemscontrol.itemspanelproperty)
    public class var itemsPanelProperty : WinUI.DependencyProperty! {
        get { try! _IItemsControlStatics.get_ItemsPanelPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemscontrol.itemssourceproperty)
    public class var itemsSourceProperty : WinUI.DependencyProperty! {
        get { try! _IItemsControlStatics.get_ItemsSourcePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemscontrol.groupheadercontainerfromitemcontainer)
    public fn groupHeaderContainerFromItemContainer(_ itemContainer: WinUI.DependencyObject!) throws -> WinUI.DependencyObject! {
        try _default.GroupHeaderContainerFromItemContainerImpl(itemContainer)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemscontrol.displaymemberpath)
    public var displayMemberPath : String {
        get { try! _default.get_DisplayMemberPathImpl() }
        set { try! _default.put_DisplayMemberPathImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemscontrol.groupstyle)
    public var groupStyle : WindowsFoundation.AnyIObservableVector<GroupStyle?>! {
        get { try! _default.get_GroupStyleImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemscontrol.groupstyleselector)
    public var groupStyleSelector : GroupStyleSelector! {
        get { try! _default.get_GroupStyleSelectorImpl() }
        set { try! _default.put_GroupStyleSelectorImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemscontrol.isgrouping)
    public var isGrouping : Boolean {
        get { try! _default.get_IsGroupingImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemscontrol.itemcontainergenerator)
    public var itemContainerGenerator : ItemContainerGenerator! {
        get { try! _default.get_ItemContainerGeneratorImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemscontrol.itemcontainerstyle)
    public var itemContainerStyle : WinUI.Style! {
        get { try! _default.get_ItemContainerStyleImpl() }
        set { try! _default.put_ItemContainerStyleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemscontrol.itemcontainerstyleselector)
    public var itemContainerStyleSelector : StyleSelector! {
        get { try! _default.get_ItemContainerStyleSelectorImpl() }
        set { try! _default.put_ItemContainerStyleSelectorImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemscontrol.itemcontainertransitions)
    public var itemContainerTransitions : WinUI.TransitionCollection! {
        get { try! _default.get_ItemContainerTransitionsImpl() }
        set { try! _default.put_ItemContainerTransitionsImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemscontrol.itemtemplate)
    public var itemTemplate : WinUI.DataTemplate! {
        get { try! _default.get_ItemTemplateImpl() }
        set { try! _default.put_ItemTemplateImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemscontrol.itemtemplateselector)
    public var itemTemplateSelector : DataTemplateSelector! {
        get { try! _default.get_ItemTemplateSelectorImpl() }
        set { try! _default.put_ItemTemplateSelectorImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemscontrol.items)
    public var items : ItemCollection! {
        get { try! _default.get_ItemsImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemscontrol.itemspanel)
    public var itemsPanel : ItemsPanelTemplate! {
        get { try! _default.get_ItemsPanelImpl() }
        set { try! _default.put_ItemsPanelImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemscontrol.itemspanelroot)
    public var itemsPanelRoot : Panel! {
        get { try! _default.get_ItemsPanelRootImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemscontrol.itemssource)
    public var itemsSource : Any! {
        get { try! _default.get_ItemsSourceImpl() }
        set { try! _default.put_ItemsSourceImpl(newValue) }
    }

    private lazy var _IItemsControlOverrides: __ABI_Microsoft_UI_Xaml_Controls.IItemsControlOverrides! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemscontrol.isitemitsowncontaineroverride)
    open fn isItemItsOwnContainerOverride(_ item: Any!) throws -> Boolean {
        try _IItemsControlOverrides.IsItemItsOwnContainerOverrideImpl(item)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemscontrol.getcontainerforitemoverride)
    open fn getContainerForItemOverride() throws -> WinUI.DependencyObject! {
        try _IItemsControlOverrides.GetContainerForItemOverrideImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemscontrol.clearcontainerforitemoverride)
    open fn clearContainerForItemOverride(_ element: WinUI.DependencyObject!, _ item: Any!) throws {
        try _IItemsControlOverrides.ClearContainerForItemOverrideImpl(element, item)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemscontrol.preparecontainerforitemoverride)
    open fn prepareContainerForItemOverride(_ element: WinUI.DependencyObject!, _ item: Any!) throws {
        try _IItemsControlOverrides.PrepareContainerForItemOverrideImpl(element, item)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemscontrol.onitemschanged)
    open fn onItemsChanged(_ e: Any!) throws {
        try _IItemsControlOverrides.OnItemsChangedImpl(e)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemscontrol.onitemcontainerstylechanged)
    open fn onItemContainerStyleChanged(_ oldItemContainerStyle: WinUI.Style!, _ newItemContainerStyle: WinUI.Style!) throws {
        try _IItemsControlOverrides.OnItemContainerStyleChangedImpl(oldItemContainerStyle, newItemContainerStyle)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemscontrol.onitemcontainerstyleselectorchanged)
    open fn onItemContainerStyleSelectorChanged(_ oldItemContainerStyleSelector: StyleSelector!, _ newItemContainerStyleSelector: StyleSelector!) throws {
        try _IItemsControlOverrides.OnItemContainerStyleSelectorChangedImpl(oldItemContainerStyleSelector, newItemContainerStyleSelector)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemscontrol.onitemtemplatechanged)
    open fn onItemTemplateChanged(_ oldItemTemplate: WinUI.DataTemplate!, _ newItemTemplate: WinUI.DataTemplate!) throws {
        try _IItemsControlOverrides.OnItemTemplateChangedImpl(oldItemTemplate, newItemTemplate)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemscontrol.onitemtemplateselectorchanged)
    open fn onItemTemplateSelectorChanged(_ oldItemTemplateSelector: DataTemplateSelector!, _ newItemTemplateSelector: DataTemplateSelector!) throws {
        try _IItemsControlOverrides.OnItemTemplateSelectorChangedImpl(oldItemTemplateSelector, newItemTemplateSelector)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemscontrol.ongroupstyleselectorchanged)
    open fn onGroupStyleSelectorChanged(_ oldGroupStyleSelector: GroupStyleSelector!, _ newGroupStyleSelector: GroupStyleSelector!) throws {
        try _IItemsControlOverrides.OnGroupStyleSelectorChangedImpl(oldGroupStyleSelector, newGroupStyleSelector)
    }

    internal enum IItemsControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControlOverrides
        internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IItemsControlOverrides
        internal typealias Class = ItemsControl
        internal typealias CodiraProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControl
            internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IItemsControl
        }
    }
    internal typealias Composable = IItemsControlOverrides
    private lazy var _IItemContainerMapping: __ABI_Microsoft_UI_Xaml_Controls.IItemContainerMapping! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemscontrol.itemfromcontainer)
    public fn itemFromContainer(_ container: WinUI.DependencyObject!) throws -> Any! {
        try _IItemContainerMapping.ItemFromContainerImpl(container)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemscontrol.containerfromitem)
    public fn containerFromItem(_ item: Any!) throws -> WinUI.DependencyObject! {
        try _IItemContainerMapping.ContainerFromItemImpl(item)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemscontrol.indexfromcontainer)
    public fn indexFromContainer(_ container: WinUI.DependencyObject!) throws -> Int32 {
        try _IItemContainerMapping.IndexFromContainerImpl(container)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemscontrol.containerfromindex)
    public fn containerFromIndex(_ index: Int32) throws -> WinUI.DependencyObject! {
        try _IItemContainerMapping.ContainerFromIndexImpl(index)
    }

    deinit {
        _default = Nothing
        _IItemsControlOverrides = Nothing
        _IItemContainerMapping = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.itemspaneltemplate)
public final class ItemsPanelTemplate : WinUI.FrameworkTemplate {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IItemsPanelTemplate
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsPanelTemplate
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsPanelTemplate>?) -> ItemsPanelTemplate? {
        guard immutable abi = abi else { return Nothing }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Controls.ItemsPanelTemplate")))
    }

    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listview)
open class ListView : WinUI.ListViewBase {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IListView
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListView
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListView>?) -> ListView? {
        guard immutable abi = abi else { return Nothing }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.CodiraABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open fn queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IListViewFactory : __ABI_Microsoft_UI_Xaml_Controls.IListViewFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.ListView"))

    override public init() {
        super.init(composing: Self.Composable.this) { baseInterface, innerInterface in 
            try! Self._IListViewFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    internal enum IItemsControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControlOverrides
        internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IItemsControlOverrides
        internal typealias Class = ListView
        internal typealias CodiraProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListView
            internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IListView
        }
    }
    internal typealias Composable = IItemsControlOverrides
    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase)
open class ListViewBase : WinUI.Selector, ISemanticZoomInformation {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IListViewBase
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase>?) -> ListViewBase? {
        guard immutable abi = abi else { return Nothing }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.CodiraABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open fn queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IListViewBaseFactory : __ABI_Microsoft_UI_Xaml_Controls.IListViewBaseFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.ListViewBase"))

    public init() {
        super.init(composing: Self.Composable.this) { baseInterface, innerInterface in 
            try! Self._IListViewBaseFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static immutable _IListViewBaseStatics: __ABI_Microsoft_UI_Xaml_Controls.IListViewBaseStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.ListViewBase"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.candragitemsproperty)
    public class var canDragItemsProperty : WinUI.DependencyProperty! {
        get { try! _IListViewBaseStatics.get_CanDragItemsPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.canreorderitemsproperty)
    public class var canReorderItemsProperty : WinUI.DependencyProperty! {
        get { try! _IListViewBaseStatics.get_CanReorderItemsPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.datafetchsizeproperty)
    public class var dataFetchSizeProperty : WinUI.DependencyProperty! {
        get { try! _IListViewBaseStatics.get_DataFetchSizePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.footerproperty)
    public class var footerProperty : WinUI.DependencyProperty! {
        get { try! _IListViewBaseStatics.get_FooterPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.footertemplateproperty)
    public class var footerTemplateProperty : WinUI.DependencyProperty! {
        get { try! _IListViewBaseStatics.get_FooterTemplatePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.footertransitionsproperty)
    public class var footerTransitionsProperty : WinUI.DependencyProperty! {
        get { try! _IListViewBaseStatics.get_FooterTransitionsPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.headerproperty)
    public class var headerProperty : WinUI.DependencyProperty! {
        get { try! _IListViewBaseStatics.get_HeaderPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.headertemplateproperty)
    public class var headerTemplateProperty : WinUI.DependencyProperty! {
        get { try! _IListViewBaseStatics.get_HeaderTemplatePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.headertransitionsproperty)
    public class var headerTransitionsProperty : WinUI.DependencyProperty! {
        get { try! _IListViewBaseStatics.get_HeaderTransitionsPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.incrementalloadingthresholdproperty)
    public class var incrementalLoadingThresholdProperty : WinUI.DependencyProperty! {
        get { try! _IListViewBaseStatics.get_IncrementalLoadingThresholdPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.incrementalloadingtriggerproperty)
    public class var incrementalLoadingTriggerProperty : WinUI.DependencyProperty! {
        get { try! _IListViewBaseStatics.get_IncrementalLoadingTriggerPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.isactiveviewproperty)
    public class var isActiveViewProperty : WinUI.DependencyProperty! {
        get { try! _IListViewBaseStatics.get_IsActiveViewPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.isitemclickenabledproperty)
    public class var isItemClickEnabledProperty : WinUI.DependencyProperty! {
        get { try! _IListViewBaseStatics.get_IsItemClickEnabledPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.ismultiselectcheckboxenabledproperty)
    public class var isMultiSelectCheckBoxEnabledProperty : WinUI.DependencyProperty! {
        get { try! _IListViewBaseStatics.get_IsMultiSelectCheckBoxEnabledPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.isswipeenabledproperty)
    public class var isSwipeEnabledProperty : WinUI.DependencyProperty! {
        get { try! _IListViewBaseStatics.get_IsSwipeEnabledPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.iszoomedinviewproperty)
    public class var isZoomedInViewProperty : WinUI.DependencyProperty! {
        get { try! _IListViewBaseStatics.get_IsZoomedInViewPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.reordermodeproperty)
    public class var reorderModeProperty : WinUI.DependencyProperty! {
        get { try! _IListViewBaseStatics.get_ReorderModePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.selectionmodeproperty)
    public class var selectionModeProperty : WinUI.DependencyProperty! {
        get { try! _IListViewBaseStatics.get_SelectionModePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.semanticzoomownerproperty)
    public class var semanticZoomOwnerProperty : WinUI.DependencyProperty! {
        get { try! _IListViewBaseStatics.get_SemanticZoomOwnerPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.showsscrollingplaceholdersproperty)
    public class var showsScrollingPlaceholdersProperty : WinUI.DependencyProperty! {
        get { try! _IListViewBaseStatics.get_ShowsScrollingPlaceholdersPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.singleselectionfollowsfocusproperty)
    public class var singleSelectionFollowsFocusProperty : WinUI.DependencyProperty! {
        get { try! _IListViewBaseStatics.get_SingleSelectionFollowsFocusPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.scrollintoview)
    public fn scrollIntoView(_ item: Any!) throws {
        try _default.ScrollIntoViewImpl(item)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.selectall)
    public fn selectAll() throws {
        try _default.SelectAllImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.loadmoreitemsasync)
    public fn loadMoreItemsAsync() throws -> WindowsFoundation.AnyIAsyncOperation<WinUI.LoadMoreItemsResult>! {
        try _default.LoadMoreItemsAsyncImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.scrollintoview)
    public fn scrollIntoView(_ item: Any!, _ alignment: ScrollIntoViewAlignment) throws {
        try _default.ScrollIntoViewWithAlignmentImpl(item, alignment)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.setdesiredcontainerupdateduration)
    public fn setDesiredContainerUpdateDuration(_ duration: WindowsFoundation.TimeSpan) throws {
        try _default.SetDesiredContainerUpdateDurationImpl(duration)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.selectrange)
    public fn selectRange(_ itemIndexRange: WinUI.ItemIndexRange!) throws {
        try _default.SelectRangeImpl(itemIndexRange)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.deselectrange)
    public fn deselectRange(_ itemIndexRange: WinUI.ItemIndexRange!) throws {
        try _default.DeselectRangeImpl(itemIndexRange)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.isdragsource)
    public fn isDragSource() throws -> Boolean {
        try _default.IsDragSourceImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.trystartconnectedanimationasync)
    public fn tryStartConnectedAnimationAsync(_ animation: WinUI.ConnectedAnimation!, _ item: Any!, _ elementName: String) throws -> WindowsFoundation.AnyIAsyncOperation<Boolean>! {
        try _default.TryStartConnectedAnimationAsyncImpl(animation, item, elementName)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.prepareconnectedanimation)
    public fn prepareConnectedAnimation(_ key: String, _ item: Any!, _ elementName: String) throws -> WinUI.ConnectedAnimation! {
        try _default.PrepareConnectedAnimationImpl(key, item, elementName)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.candragitems)
    public var canDragItems : Boolean {
        get { try! _default.get_CanDragItemsImpl() }
        set { try! _default.put_CanDragItemsImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.canreorderitems)
    public var canReorderItems : Boolean {
        get { try! _default.get_CanReorderItemsImpl() }
        set { try! _default.put_CanReorderItemsImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.datafetchsize)
    public var dataFetchSize : Double {
        get { try! _default.get_DataFetchSizeImpl() }
        set { try! _default.put_DataFetchSizeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.footer)
    public var footer : Any! {
        get { try! _default.get_FooterImpl() }
        set { try! _default.put_FooterImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.footertemplate)
    public var footerTemplate : WinUI.DataTemplate! {
        get { try! _default.get_FooterTemplateImpl() }
        set { try! _default.put_FooterTemplateImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.footertransitions)
    public var footerTransitions : WinUI.TransitionCollection! {
        get { try! _default.get_FooterTransitionsImpl() }
        set { try! _default.put_FooterTransitionsImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.header)
    public var header : Any! {
        get { try! _default.get_HeaderImpl() }
        set { try! _default.put_HeaderImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.headertemplate)
    public var headerTemplate : WinUI.DataTemplate! {
        get { try! _default.get_HeaderTemplateImpl() }
        set { try! _default.put_HeaderTemplateImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.headertransitions)
    public var headerTransitions : WinUI.TransitionCollection! {
        get { try! _default.get_HeaderTransitionsImpl() }
        set { try! _default.put_HeaderTransitionsImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.incrementalloadingthreshold)
    public var incrementalLoadingThreshold : Double {
        get { try! _default.get_IncrementalLoadingThresholdImpl() }
        set { try! _default.put_IncrementalLoadingThresholdImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.incrementalloadingtrigger)
    public var incrementalLoadingTrigger : IncrementalLoadingTrigger {
        get { try! _default.get_IncrementalLoadingTriggerImpl() }
        set { try! _default.put_IncrementalLoadingTriggerImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.isitemclickenabled)
    public var isItemClickEnabled : Boolean {
        get { try! _default.get_IsItemClickEnabledImpl() }
        set { try! _default.put_IsItemClickEnabledImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.ismultiselectcheckboxenabled)
    public var isMultiSelectCheckBoxEnabled : Boolean {
        get { try! _default.get_IsMultiSelectCheckBoxEnabledImpl() }
        set { try! _default.put_IsMultiSelectCheckBoxEnabledImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.isswipeenabled)
    public var isSwipeEnabled : Boolean {
        get { try! _default.get_IsSwipeEnabledImpl() }
        set { try! _default.put_IsSwipeEnabledImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.reordermode)
    public var reorderMode : ListViewReorderMode {
        get { try! _default.get_ReorderModeImpl() }
        set { try! _default.put_ReorderModeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.selecteditems)
    public var selectedItems : WindowsFoundation.AnyIVector<Any?>! {
        get { try! _default.get_SelectedItemsImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.selectedranges)
    public var selectedRanges : WindowsFoundation.AnyIVectorView<WinUI.ItemIndexRange?>! {
        get { try! _default.get_SelectedRangesImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.selectionmode)
    public var selectionMode : ListViewSelectionMode {
        get { try! _default.get_SelectionModeImpl() }
        set { try! _default.put_SelectionModeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.showsscrollingplaceholders)
    public var showsScrollingPlaceholders : Boolean {
        get { try! _default.get_ShowsScrollingPlaceholdersImpl() }
        set { try! _default.put_ShowsScrollingPlaceholdersImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.singleselectionfollowsfocus)
    public var singleSelectionFollowsFocus : Boolean {
        get { try! _default.get_SingleSelectionFollowsFocusImpl() }
        set { try! _default.put_SingleSelectionFollowsFocusImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.choosinggroupheadercontainer)
    public lazy var choosingGroupHeaderContainer : Event<TypedEventHandler<ListViewBase?, ChoosingGroupHeaderContainerEventArgs?>> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_ChoosingGroupHeaderContainerImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_ChoosingGroupHeaderContainerImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.choosingitemcontainer)
    public lazy var choosingItemContainer : Event<TypedEventHandler<ListViewBase?, ChoosingItemContainerEventArgs?>> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_ChoosingItemContainerImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_ChoosingItemContainerImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.containercontentchanging)
    public lazy var containerContentChanging : Event<TypedEventHandler<ListViewBase?, ContainerContentChangingEventArgs?>> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_ContainerContentChangingImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_ContainerContentChangingImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.dragitemscompleted)
    public lazy var dragItemsCompleted : Event<TypedEventHandler<ListViewBase?, DragItemsCompletedEventArgs?>> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_DragItemsCompletedImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_DragItemsCompletedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.dragitemsstarting)
    public lazy var dragItemsStarting : Event<DragItemsStartingEventHandler> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_DragItemsStartingImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_DragItemsStartingImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.itemclick)
    public lazy var itemClick : Event<ItemClickEventHandler> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_ItemClickImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_ItemClickImpl($0)
       }
      )
    }()

    private lazy var _ISemanticZoomInformation: __ABI_Microsoft_UI_Xaml_Controls.ISemanticZoomInformation! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.initializeviewchange)
    public fn initializeViewChange() throws {
        try _ISemanticZoomInformation.InitializeViewChangeImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.completeviewchange)
    public fn completeViewChange() throws {
        try _ISemanticZoomInformation.CompleteViewChangeImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.makevisible)
    public fn makeVisible(_ item: SemanticZoomLocation!) throws {
        try _ISemanticZoomInformation.MakeVisibleImpl(item)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.startviewchangefrom)
    public fn startViewChangeFrom(_ source: SemanticZoomLocation!, _ destination: SemanticZoomLocation!) throws {
        try _ISemanticZoomInformation.StartViewChangeFromImpl(source, destination)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.startviewchangeto)
    public fn startViewChangeTo(_ source: SemanticZoomLocation!, _ destination: SemanticZoomLocation!) throws {
        try _ISemanticZoomInformation.StartViewChangeToImpl(source, destination)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.completeviewchangefrom)
    public fn completeViewChangeFrom(_ source: SemanticZoomLocation!, _ destination: SemanticZoomLocation!) throws {
        try _ISemanticZoomInformation.CompleteViewChangeFromImpl(source, destination)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.completeviewchangeto)
    public fn completeViewChangeTo(_ source: SemanticZoomLocation!, _ destination: SemanticZoomLocation!) throws {
        try _ISemanticZoomInformation.CompleteViewChangeToImpl(source, destination)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.isactiveview)
    public var isActiveView : Boolean {
        get { try! _ISemanticZoomInformation.get_IsActiveViewImpl() }
        set { try! _ISemanticZoomInformation.put_IsActiveViewImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.iszoomedinview)
    public var isZoomedInView : Boolean {
        get { try! _ISemanticZoomInformation.get_IsZoomedInViewImpl() }
        set { try! _ISemanticZoomInformation.put_IsZoomedInViewImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbase.semanticzoomowner)
    public var semanticZoomOwner : SemanticZoom! {
        get { try! _ISemanticZoomInformation.get_SemanticZoomOwnerImpl() }
        set { try! _ISemanticZoomInformation.put_SemanticZoomOwnerImpl(newValue) }
    }

    internal enum IItemsControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIItemsControlOverrides
        internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IItemsControlOverrides
        internal typealias Class = ListViewBase
        internal typealias CodiraProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBase
            internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IListViewBase
        }
    }
    internal typealias Composable = IItemsControlOverrides
    deinit {
        _default = Nothing
        _ISemanticZoomInformation = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewbaseheaderitem)
open class ListViewBaseHeaderItem : WinUI.ContentControl {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IListViewBaseHeaderItem
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBaseHeaderItem
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBaseHeaderItem>?) -> ListViewBaseHeaderItem? {
        guard immutable abi = abi else { return Nothing }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.CodiraABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open fn queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IListViewBaseHeaderItemFactory : __ABI_Microsoft_UI_Xaml_Controls.IListViewBaseHeaderItemFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.ListViewBaseHeaderItem"))

    internal enum IContentControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControlOverrides
        internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IContentControlOverrides
        internal typealias Class = ListViewBaseHeaderItem
        internal typealias CodiraProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewBaseHeaderItem
            internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IListViewBaseHeaderItem
        }
    }
    internal typealias Composable = IContentControlOverrides
    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewitem)
open class ListViewItem : WinUI.SelectorItem {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IListViewItem
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewItem
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewItem>?) -> ListViewItem? {
        guard immutable abi = abi else { return Nothing }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.CodiraABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open fn queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IListViewItemFactory : __ABI_Microsoft_UI_Xaml_Controls.IListViewItemFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.ListViewItem"))

    override public init() {
        super.init(composing: Self.Composable.this) { baseInterface, innerInterface in 
            try! Self._IListViewItemFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.listviewitem.templatesettings)
    public var templateSettings : WinUI.ListViewItemTemplateSettings! {
        get { try! _default.get_TemplateSettingsImpl() }
    }

    internal enum IContentControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControlOverrides
        internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IContentControlOverrides
        internal typealias Class = ListViewItem
        internal typealias CodiraProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIListViewItem
            internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IListViewItem
        }
    }
    internal typealias Composable = IContentControlOverrides
    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.menubar)
open class MenuBar : WinUI.Control {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IMenuBar
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuBar
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuBar>?) -> MenuBar? {
        guard immutable abi = abi else { return Nothing }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.CodiraABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open fn queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IMenuBarFactory : __ABI_Microsoft_UI_Xaml_Controls.IMenuBarFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.MenuBar"))

    override public init() {
        super.init(composing: Self.Composable.this) { baseInterface, innerInterface in 
            try! Self._IMenuBarFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static immutable _IMenuBarStatics: __ABI_Microsoft_UI_Xaml_Controls.IMenuBarStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.MenuBar"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.menubar.itemsproperty)
    public class var itemsProperty : WinUI.DependencyProperty! {
        get { try! _IMenuBarStatics.get_ItemsPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.menubar.items)
    public var items : WindowsFoundation.AnyIVector<MenuBarItem?>! {
        get { try! _default.get_ItemsImpl() }
    }

    internal enum IControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides
        internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IControlOverrides
        internal typealias Class = MenuBar
        internal typealias CodiraProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuBar
            internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IMenuBar
        }
    }
    internal typealias Composable = IControlOverrides
    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.menubaritem)
open class MenuBarItem : WinUI.Control {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IMenuBarItem
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuBarItem
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuBarItem>?) -> MenuBarItem? {
        guard immutable abi = abi else { return Nothing }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.CodiraABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open fn queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IMenuBarItemFactory : __ABI_Microsoft_UI_Xaml_Controls.IMenuBarItemFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.MenuBarItem"))

    override public init() {
        super.init(composing: Self.Composable.this) { baseInterface, innerInterface in 
            try! Self._IMenuBarItemFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static immutable _IMenuBarItemStatics: __ABI_Microsoft_UI_Xaml_Controls.IMenuBarItemStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.MenuBarItem"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.menubaritem.itemsproperty)
    public class var itemsProperty : WinUI.DependencyProperty! {
        get { try! _IMenuBarItemStatics.get_ItemsPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.menubaritem.titleproperty)
    public class var titleProperty : WinUI.DependencyProperty! {
        get { try! _IMenuBarItemStatics.get_TitlePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.menubaritem.items)
    public var items : WindowsFoundation.AnyIVector<MenuFlyoutItemBase?>! {
        get { try! _default.get_ItemsImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.menubaritem.title)
    public var title : String {
        get { try! _default.get_TitleImpl() }
        set { try! _default.put_TitleImpl(newValue) }
    }

    internal enum IControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides
        internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IControlOverrides
        internal typealias Class = MenuBarItem
        internal typealias CodiraProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuBarItem
            internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IMenuBarItem
        }
    }
    internal typealias Composable = IControlOverrides
    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.menuflyout)
open class MenuFlyout : WinUI.FlyoutBase {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IMenuFlyout
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyout
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyout>?) -> MenuFlyout? {
        guard immutable abi = abi else { return Nothing }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.CodiraABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open fn queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IMenuFlyoutFactory : __ABI_Microsoft_UI_Xaml_Controls.IMenuFlyoutFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.MenuFlyout"))

    override public init() {
        super.init(composing: Self.Composable.this) { baseInterface, innerInterface in 
            try! Self._IMenuFlyoutFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static immutable _IMenuFlyoutStatics: __ABI_Microsoft_UI_Xaml_Controls.IMenuFlyoutStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.MenuFlyout"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.menuflyout.menuflyoutpresenterstyleproperty)
    public class var menuFlyoutPresenterStyleProperty : WinUI.DependencyProperty! {
        get { try! _IMenuFlyoutStatics.get_MenuFlyoutPresenterStylePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.menuflyout.showat)
    public fn showAt(_ targetElement: WinUI.UIElement!, _ point: WindowsFoundation.Point) throws {
        try _default.ShowAtImpl(targetElement, point)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.menuflyout.items)
    public var items : WindowsFoundation.AnyIVector<MenuFlyoutItemBase?>! {
        get { try! _default.get_ItemsImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.menuflyout.menuflyoutpresenterstyle)
    public var menuFlyoutPresenterStyle : WinUI.Style! {
        get { try! _default.get_MenuFlyoutPresenterStyleImpl() }
        set { try! _default.put_MenuFlyoutPresenterStyleImpl(newValue) }
    }

    internal enum IFlyoutBaseOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBaseOverrides
        internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls_Primitives.IFlyoutBaseOverrides
        internal typealias Class = MenuFlyout
        internal typealias CodiraProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyout
            internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IMenuFlyout
        }
    }
    internal typealias Composable = IFlyoutBaseOverrides
    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.menuflyoutitem)
open class MenuFlyoutItem : WinUI.MenuFlyoutItemBase {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IMenuFlyoutItem
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutItem
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutItem>?) -> MenuFlyoutItem? {
        guard immutable abi = abi else { return Nothing }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.CodiraABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open fn queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IMenuFlyoutItemFactory : __ABI_Microsoft_UI_Xaml_Controls.IMenuFlyoutItemFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.MenuFlyoutItem"))

    public init() {
        super.init(composing: Self.Composable.this) { baseInterface, innerInterface in 
            try! Self._IMenuFlyoutItemFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static immutable _IMenuFlyoutItemStatics: __ABI_Microsoft_UI_Xaml_Controls.IMenuFlyoutItemStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.MenuFlyoutItem"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.menuflyoutitem.commandparameterproperty)
    public class var commandParameterProperty : WinUI.DependencyProperty! {
        get { try! _IMenuFlyoutItemStatics.get_CommandParameterPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.menuflyoutitem.commandproperty)
    public class var commandProperty : WinUI.DependencyProperty! {
        get { try! _IMenuFlyoutItemStatics.get_CommandPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.menuflyoutitem.iconproperty)
    public class var iconProperty : WinUI.DependencyProperty! {
        get { try! _IMenuFlyoutItemStatics.get_IconPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.menuflyoutitem.keyboardacceleratortextoverrideproperty)
    public class var keyboardAcceleratorTextOverrideProperty : WinUI.DependencyProperty! {
        get { try! _IMenuFlyoutItemStatics.get_KeyboardAcceleratorTextOverridePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.menuflyoutitem.textproperty)
    public class var textProperty : WinUI.DependencyProperty! {
        get { try! _IMenuFlyoutItemStatics.get_TextPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.menuflyoutitem.command)
    public var command : WinUI.AnyICommand! {
        get { try! _default.get_CommandImpl() }
        set { try! _default.put_CommandImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.menuflyoutitem.commandparameter)
    public var commandParameter : Any! {
        get { try! _default.get_CommandParameterImpl() }
        set { try! _default.put_CommandParameterImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.menuflyoutitem.icon)
    public var icon : IconElement! {
        get { try! _default.get_IconImpl() }
        set { try! _default.put_IconImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.menuflyoutitem.keyboardacceleratortextoverride)
    public var keyboardAcceleratorTextOverride : String {
        get { try! _default.get_KeyboardAcceleratorTextOverrideImpl() }
        set { try! _default.put_KeyboardAcceleratorTextOverrideImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.menuflyoutitem.templatesettings)
    public var templateSettings : WinUI.MenuFlyoutItemTemplateSettings! {
        get { try! _default.get_TemplateSettingsImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.menuflyoutitem.text)
    public var text : String {
        get { try! _default.get_TextImpl() }
        set { try! _default.put_TextImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.menuflyoutitem.click)
    public lazy var click : Event<WinUI.RoutedEventHandler> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_ClickImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_ClickImpl($0)
       }
      )
    }()

    internal enum IControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides
        internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IControlOverrides
        internal typealias Class = MenuFlyoutItem
        internal typealias CodiraProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutItem
            internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IMenuFlyoutItem
        }
    }
    internal typealias Composable = IControlOverrides
    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.menuflyoutitembase)
open class MenuFlyoutItemBase : WinUI.Control {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IMenuFlyoutItemBase
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutItemBase
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutItemBase>?) -> MenuFlyoutItemBase? {
        guard immutable abi = abi else { return Nothing }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.CodiraABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open fn queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IMenuFlyoutItemBaseFactory : __ABI_Microsoft_UI_Xaml_Controls.IMenuFlyoutItemBaseFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.MenuFlyoutItemBase"))

    internal enum IControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides
        internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IControlOverrides
        internal typealias Class = MenuFlyoutItemBase
        internal typealias CodiraProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutItemBase
            internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IMenuFlyoutItemBase
        }
    }
    internal typealias Composable = IControlOverrides
    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.menuflyoutseparator)
open class MenuFlyoutSeparator : WinUI.MenuFlyoutItemBase {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IMenuFlyoutSeparator
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutSeparator
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutSeparator>?) -> MenuFlyoutSeparator? {
        guard immutable abi = abi else { return Nothing }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.CodiraABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open fn queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IMenuFlyoutSeparatorFactory : __ABI_Microsoft_UI_Xaml_Controls.IMenuFlyoutSeparatorFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.MenuFlyoutSeparator"))

    public init() {
        super.init(composing: Self.Composable.this) { baseInterface, innerInterface in 
            try! Self._IMenuFlyoutSeparatorFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    internal enum IControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides
        internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IControlOverrides
        internal typealias Class = MenuFlyoutSeparator
        internal typealias CodiraProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutSeparator
            internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IMenuFlyoutSeparator
        }
    }
    internal typealias Composable = IControlOverrides
    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.menuflyoutsubitem)
public final class MenuFlyoutSubItem : WinUI.MenuFlyoutItemBase {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IMenuFlyoutSubItem
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutSubItem
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutSubItem>?) -> MenuFlyoutSubItem? {
        guard immutable abi = abi else { return Nothing }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Controls.MenuFlyoutSubItem")))
    }

    private static immutable _IMenuFlyoutSubItemStatics: __ABI_Microsoft_UI_Xaml_Controls.IMenuFlyoutSubItemStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.MenuFlyoutSubItem"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.menuflyoutsubitem.iconproperty)
    public static var iconProperty : WinUI.DependencyProperty! {
        get { try! _IMenuFlyoutSubItemStatics.get_IconPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.menuflyoutsubitem.textproperty)
    public static var textProperty : WinUI.DependencyProperty! {
        get { try! _IMenuFlyoutSubItemStatics.get_TextPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.menuflyoutsubitem.icon)
    public var icon : IconElement! {
        get { try! _default.get_IconImpl() }
        set { try! _default.put_IconImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.menuflyoutsubitem.items)
    public var items : WindowsFoundation.AnyIVector<MenuFlyoutItemBase?>! {
        get { try! _default.get_ItemsImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.menuflyoutsubitem.text)
    public var text : String {
        get { try! _default.get_TextImpl() }
        set { try! _default.put_TextImpl(newValue) }
    }

    internal enum IControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides
        internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IControlOverrides
        internal typealias Class = MenuFlyoutSubItem
        internal typealias CodiraProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIMenuFlyoutSubItem
            internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IMenuFlyoutSubItem
        }
    }
    internal typealias Composable = IControlOverrides
    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview)
open class NavigationView : WinUI.ContentControl {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.INavigationView
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationView
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationView>?) -> NavigationView? {
        guard immutable abi = abi else { return Nothing }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.CodiraABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open fn queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _INavigationViewFactory : __ABI_Microsoft_UI_Xaml_Controls.INavigationViewFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.NavigationView"))

    override public init() {
        super.init(composing: Self.Composable.this) { baseInterface, innerInterface in 
            try! Self._INavigationViewFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static immutable _INavigationViewStatics: __ABI_Microsoft_UI_Xaml_Controls.INavigationViewStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.NavigationView"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.alwaysshowheaderproperty)
    public class var alwaysShowHeaderProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewStatics.get_AlwaysShowHeaderPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.autosuggestboxproperty)
    public class var autoSuggestBoxProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewStatics.get_AutoSuggestBoxPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.compactmodethresholdwidthproperty)
    public class var compactModeThresholdWidthProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewStatics.get_CompactModeThresholdWidthPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.compactpanelengthproperty)
    public class var compactPaneLengthProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewStatics.get_CompactPaneLengthPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.displaymodeproperty)
    public class var displayModeProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewStatics.get_DisplayModePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.expandedmodethresholdwidthproperty)
    public class var expandedModeThresholdWidthProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewStatics.get_ExpandedModeThresholdWidthPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.footermenuitemsproperty)
    public class var footerMenuItemsProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewStatics.get_FooterMenuItemsPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.footermenuitemssourceproperty)
    public class var footerMenuItemsSourceProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewStatics.get_FooterMenuItemsSourcePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.headerproperty)
    public class var headerProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewStatics.get_HeaderPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.headertemplateproperty)
    public class var headerTemplateProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewStatics.get_HeaderTemplatePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.ispaneopenproperty)
    public class var isPaneOpenProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewStatics.get_IsPaneOpenPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.ispanetogglebuttonvisibleproperty)
    public class var isPaneToggleButtonVisibleProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewStatics.get_IsPaneToggleButtonVisiblePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.issettingsvisibleproperty)
    public class var isSettingsVisibleProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewStatics.get_IsSettingsVisiblePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.istitlebarautopaddingenabledproperty)
    public class var isTitleBarAutoPaddingEnabledProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewStatics.get_IsTitleBarAutoPaddingEnabledPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.menuitemcontainerstyleproperty)
    public class var menuItemContainerStyleProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewStatics.get_MenuItemContainerStylePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.menuitemcontainerstyleselectorproperty)
    public class var menuItemContainerStyleSelectorProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewStatics.get_MenuItemContainerStyleSelectorPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.menuitemtemplateproperty)
    public class var menuItemTemplateProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewStatics.get_MenuItemTemplatePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.menuitemtemplateselectorproperty)
    public class var menuItemTemplateSelectorProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewStatics.get_MenuItemTemplateSelectorPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.menuitemsproperty)
    public class var menuItemsProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewStatics.get_MenuItemsPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.menuitemssourceproperty)
    public class var menuItemsSourceProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewStatics.get_MenuItemsSourcePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.openpanelengthproperty)
    public class var openPaneLengthProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewStatics.get_OpenPaneLengthPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.panefooterproperty)
    public class var paneFooterProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewStatics.get_PaneFooterPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.panetogglebuttonstyleproperty)
    public class var paneToggleButtonStyleProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewStatics.get_PaneToggleButtonStylePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.selecteditemproperty)
    public class var selectedItemProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewStatics.get_SelectedItemPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.settingsitemproperty)
    public class var settingsItemProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewStatics.get_SettingsItemPropertyImpl() }
    }

    private static immutable _INavigationViewStatics2: __ABI_Microsoft_UI_Xaml_Controls.INavigationViewStatics2 = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.NavigationView"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.contentoverlayproperty)
    public class var contentOverlayProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewStatics2.get_ContentOverlayPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.isbackbuttonvisibleproperty)
    public class var isBackButtonVisibleProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewStatics2.get_IsBackButtonVisiblePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.isbackenabledproperty)
    public class var isBackEnabledProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewStatics2.get_IsBackEnabledPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.ispanevisibleproperty)
    public class var isPaneVisibleProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewStatics2.get_IsPaneVisiblePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.overflowlabelmodeproperty)
    public class var overflowLabelModeProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewStatics2.get_OverflowLabelModePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.panecustomcontentproperty)
    public class var paneCustomContentProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewStatics2.get_PaneCustomContentPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.panedisplaymodeproperty)
    public class var paneDisplayModeProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewStatics2.get_PaneDisplayModePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.paneheaderproperty)
    public class var paneHeaderProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewStatics2.get_PaneHeaderPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.panetitleproperty)
    public class var paneTitleProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewStatics2.get_PaneTitlePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.selectionfollowsfocusproperty)
    public class var selectionFollowsFocusProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewStatics2.get_SelectionFollowsFocusPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.shouldernavigationenabledproperty)
    public class var shoulderNavigationEnabledProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewStatics2.get_ShoulderNavigationEnabledPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.templatesettingsproperty)
    public class var templateSettingsProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewStatics2.get_TemplateSettingsPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.menuitemfromcontainer)
    public fn menuItemFromContainer(_ container: WinUI.DependencyObject!) throws -> Any! {
        try _default.MenuItemFromContainerImpl(container)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.containerfrommenuitem)
    public fn containerFromMenuItem(_ item: Any!) throws -> WinUI.DependencyObject! {
        try _default.ContainerFromMenuItemImpl(item)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.alwaysshowheader)
    public var alwaysShowHeader : Boolean {
        get { try! _default.get_AlwaysShowHeaderImpl() }
        set { try! _default.put_AlwaysShowHeaderImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.autosuggestbox)
    public var autoSuggestBox : AutoSuggestBox! {
        get { try! _default.get_AutoSuggestBoxImpl() }
        set { try! _default.put_AutoSuggestBoxImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.compactmodethresholdwidth)
    public var compactModeThresholdWidth : Double {
        get { try! _default.get_CompactModeThresholdWidthImpl() }
        set { try! _default.put_CompactModeThresholdWidthImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.compactpanelength)
    public var compactPaneLength : Double {
        get { try! _default.get_CompactPaneLengthImpl() }
        set { try! _default.put_CompactPaneLengthImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.displaymode)
    public var displayMode : NavigationViewDisplayMode {
        get { try! _default.get_DisplayModeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.expandedmodethresholdwidth)
    public var expandedModeThresholdWidth : Double {
        get { try! _default.get_ExpandedModeThresholdWidthImpl() }
        set { try! _default.put_ExpandedModeThresholdWidthImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.footermenuitems)
    public var footerMenuItems : WindowsFoundation.AnyIVector<Any?>! {
        get { try! _default.get_FooterMenuItemsImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.footermenuitemssource)
    public var footerMenuItemsSource : Any! {
        get { try! _default.get_FooterMenuItemsSourceImpl() }
        set { try! _default.put_FooterMenuItemsSourceImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.header)
    public var header : Any! {
        get { try! _default.get_HeaderImpl() }
        set { try! _default.put_HeaderImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.headertemplate)
    public var headerTemplate : WinUI.DataTemplate! {
        get { try! _default.get_HeaderTemplateImpl() }
        set { try! _default.put_HeaderTemplateImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.ispaneopen)
    public var isPaneOpen : Boolean {
        get { try! _default.get_IsPaneOpenImpl() }
        set { try! _default.put_IsPaneOpenImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.ispanetogglebuttonvisible)
    public var isPaneToggleButtonVisible : Boolean {
        get { try! _default.get_IsPaneToggleButtonVisibleImpl() }
        set { try! _default.put_IsPaneToggleButtonVisibleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.issettingsvisible)
    public var isSettingsVisible : Boolean {
        get { try! _default.get_IsSettingsVisibleImpl() }
        set { try! _default.put_IsSettingsVisibleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.istitlebarautopaddingenabled)
    public var isTitleBarAutoPaddingEnabled : Boolean {
        get { try! _default.get_IsTitleBarAutoPaddingEnabledImpl() }
        set { try! _default.put_IsTitleBarAutoPaddingEnabledImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.menuitemcontainerstyle)
    public var menuItemContainerStyle : WinUI.Style! {
        get { try! _default.get_MenuItemContainerStyleImpl() }
        set { try! _default.put_MenuItemContainerStyleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.menuitemcontainerstyleselector)
    public var menuItemContainerStyleSelector : StyleSelector! {
        get { try! _default.get_MenuItemContainerStyleSelectorImpl() }
        set { try! _default.put_MenuItemContainerStyleSelectorImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.menuitemtemplate)
    public var menuItemTemplate : WinUI.DataTemplate! {
        get { try! _default.get_MenuItemTemplateImpl() }
        set { try! _default.put_MenuItemTemplateImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.menuitemtemplateselector)
    public var menuItemTemplateSelector : DataTemplateSelector! {
        get { try! _default.get_MenuItemTemplateSelectorImpl() }
        set { try! _default.put_MenuItemTemplateSelectorImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.menuitems)
    public var menuItems : WindowsFoundation.AnyIVector<Any?>! {
        get { try! _default.get_MenuItemsImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.menuitemssource)
    public var menuItemsSource : Any! {
        get { try! _default.get_MenuItemsSourceImpl() }
        set { try! _default.put_MenuItemsSourceImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.openpanelength)
    public var openPaneLength : Double {
        get { try! _default.get_OpenPaneLengthImpl() }
        set { try! _default.put_OpenPaneLengthImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.panefooter)
    public var paneFooter : WinUI.UIElement! {
        get { try! _default.get_PaneFooterImpl() }
        set { try! _default.put_PaneFooterImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.panetogglebuttonstyle)
    public var paneToggleButtonStyle : WinUI.Style! {
        get { try! _default.get_PaneToggleButtonStyleImpl() }
        set { try! _default.put_PaneToggleButtonStyleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.selecteditem)
    public var selectedItem : Any! {
        get { try! _default.get_SelectedItemImpl() }
        set { try! _default.put_SelectedItemImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.settingsitem)
    public var settingsItem : Any! {
        get { try! _default.get_SettingsItemImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.displaymodechanged)
    public lazy var displayModeChanged : Event<TypedEventHandler<NavigationView?, NavigationViewDisplayModeChangedEventArgs?>> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_DisplayModeChangedImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_DisplayModeChangedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.iteminvoked)
    public lazy var itemInvoked : Event<TypedEventHandler<NavigationView?, NavigationViewItemInvokedEventArgs?>> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_ItemInvokedImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_ItemInvokedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.selectionchanged)
    public lazy var selectionChanged : Event<TypedEventHandler<NavigationView?, NavigationViewSelectionChangedEventArgs?>> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_SelectionChangedImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_SelectionChangedImpl($0)
       }
      )
    }()

    private lazy var _INavigationView2: __ABI_Microsoft_UI_Xaml_Controls.INavigationView2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.expand)
    public fn expand(_ item: NavigationViewItem!) throws {
        try _INavigationView2.ExpandImpl(item)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.collapse)
    public fn collapse(_ item: NavigationViewItem!) throws {
        try _INavigationView2.CollapseImpl(item)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.contentoverlay)
    public var contentOverlay : WinUI.UIElement! {
        get { try! _INavigationView2.get_ContentOverlayImpl() }
        set { try! _INavigationView2.put_ContentOverlayImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.isbackbuttonvisible)
    public var isBackButtonVisible : NavigationViewBackButtonVisible {
        get { try! _INavigationView2.get_IsBackButtonVisibleImpl() }
        set { try! _INavigationView2.put_IsBackButtonVisibleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.isbackenabled)
    public var isBackEnabled : Boolean {
        get { try! _INavigationView2.get_IsBackEnabledImpl() }
        set { try! _INavigationView2.put_IsBackEnabledImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.ispanevisible)
    public var isPaneVisible : Boolean {
        get { try! _INavigationView2.get_IsPaneVisibleImpl() }
        set { try! _INavigationView2.put_IsPaneVisibleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.overflowlabelmode)
    public var overflowLabelMode : NavigationViewOverflowLabelMode {
        get { try! _INavigationView2.get_OverflowLabelModeImpl() }
        set { try! _INavigationView2.put_OverflowLabelModeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.panecustomcontent)
    public var paneCustomContent : WinUI.UIElement! {
        get { try! _INavigationView2.get_PaneCustomContentImpl() }
        set { try! _INavigationView2.put_PaneCustomContentImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.panedisplaymode)
    public var paneDisplayMode : NavigationViewPaneDisplayMode {
        get { try! _INavigationView2.get_PaneDisplayModeImpl() }
        set { try! _INavigationView2.put_PaneDisplayModeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.paneheader)
    public var paneHeader : WinUI.UIElement! {
        get { try! _INavigationView2.get_PaneHeaderImpl() }
        set { try! _INavigationView2.put_PaneHeaderImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.panetitle)
    public var paneTitle : String {
        get { try! _INavigationView2.get_PaneTitleImpl() }
        set { try! _INavigationView2.put_PaneTitleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.selectionfollowsfocus)
    public var selectionFollowsFocus : NavigationViewSelectionFollowsFocus {
        get { try! _INavigationView2.get_SelectionFollowsFocusImpl() }
        set { try! _INavigationView2.put_SelectionFollowsFocusImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.shouldernavigationenabled)
    public var shoulderNavigationEnabled : NavigationViewShoulderNavigationEnabled {
        get { try! _INavigationView2.get_ShoulderNavigationEnabledImpl() }
        set { try! _INavigationView2.put_ShoulderNavigationEnabledImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.templatesettings)
    public var templateSettings : NavigationViewTemplateSettings! {
        get { try! _INavigationView2.get_TemplateSettingsImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.backrequested)
    public lazy var backRequested : Event<TypedEventHandler<NavigationView?, NavigationViewBackRequestedEventArgs?>> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._INavigationView2 else { return .init() }
          return try! this.add_BackRequestedImpl($0)
        },
        remove: { [weak this] in
         try? this?._INavigationView2.remove_BackRequestedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.collapsed)
    public lazy var collapsed : Event<TypedEventHandler<NavigationView?, NavigationViewItemCollapsedEventArgs?>> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._INavigationView2 else { return .init() }
          return try! this.add_CollapsedImpl($0)
        },
        remove: { [weak this] in
         try? this?._INavigationView2.remove_CollapsedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.expanding)
    public lazy var expanding : Event<TypedEventHandler<NavigationView?, NavigationViewItemExpandingEventArgs?>> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._INavigationView2 else { return .init() }
          return try! this.add_ExpandingImpl($0)
        },
        remove: { [weak this] in
         try? this?._INavigationView2.remove_ExpandingImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.paneclosed)
    public lazy var paneClosed : Event<TypedEventHandler<NavigationView?, Any?>> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._INavigationView2 else { return .init() }
          return try! this.add_PaneClosedImpl($0)
        },
        remove: { [weak this] in
         try? this?._INavigationView2.remove_PaneClosedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.paneclosing)
    public lazy var paneClosing : Event<TypedEventHandler<NavigationView?, NavigationViewPaneClosingEventArgs?>> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._INavigationView2 else { return .init() }
          return try! this.add_PaneClosingImpl($0)
        },
        remove: { [weak this] in
         try? this?._INavigationView2.remove_PaneClosingImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.paneopened)
    public lazy var paneOpened : Event<TypedEventHandler<NavigationView?, Any?>> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._INavigationView2 else { return .init() }
          return try! this.add_PaneOpenedImpl($0)
        },
        remove: { [weak this] in
         try? this?._INavigationView2.remove_PaneOpenedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationview.paneopening)
    public lazy var paneOpening : Event<TypedEventHandler<NavigationView?, Any?>> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._INavigationView2 else { return .init() }
          return try! this.add_PaneOpeningImpl($0)
        },
        remove: { [weak this] in
         try? this?._INavigationView2.remove_PaneOpeningImpl($0)
       }
      )
    }()

    internal enum IContentControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControlOverrides
        internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IContentControlOverrides
        internal typealias Class = NavigationView
        internal typealias CodiraProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationView
            internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.INavigationView
        }
    }
    internal typealias Composable = IContentControlOverrides
    deinit {
        _default = Nothing
        _INavigationView2 = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewbackrequestedeventargs)
public final class NavigationViewBackRequestedEventArgs : WinRTClass {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.INavigationViewBackRequestedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewBackRequestedEventArgs
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewBackRequestedEventArgs>?) -> NavigationViewBackRequestedEventArgs? {
        guard immutable abi = abi else { return Nothing }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewdisplaymodechangedeventargs)
public final class NavigationViewDisplayModeChangedEventArgs : WinRTClass {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.INavigationViewDisplayModeChangedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewDisplayModeChangedEventArgs
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewDisplayModeChangedEventArgs>?) -> NavigationViewDisplayModeChangedEventArgs? {
        guard immutable abi = abi else { return Nothing }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewdisplaymodechangedeventargs.displaymode)
    public var displayMode : NavigationViewDisplayMode {
        get { try! _default.get_DisplayModeImpl() }
    }

    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewitem)
open class NavigationViewItem : WinUI.NavigationViewItemBase {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.INavigationViewItem
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewItem
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewItem>?) -> NavigationViewItem? {
        guard immutable abi = abi else { return Nothing }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.CodiraABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open fn queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _INavigationViewItemFactory : __ABI_Microsoft_UI_Xaml_Controls.INavigationViewItemFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.NavigationViewItem"))

    public init() {
        super.init(composing: Self.Composable.this) { baseInterface, innerInterface in 
            try! Self._INavigationViewItemFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static immutable _INavigationViewItemStatics: __ABI_Microsoft_UI_Xaml_Controls.INavigationViewItemStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.NavigationViewItem"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewitem.compactpanelengthproperty)
    public class var compactPaneLengthProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewItemStatics.get_CompactPaneLengthPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewitem.iconproperty)
    public class var iconProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewItemStatics.get_IconPropertyImpl() }
    }

    private static immutable _INavigationViewItemStatics2: __ABI_Microsoft_UI_Xaml_Controls.INavigationViewItemStatics2 = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.NavigationViewItem"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewitem.hasunrealizedchildrenproperty)
    public class var hasUnrealizedChildrenProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewItemStatics2.get_HasUnrealizedChildrenPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewitem.ischildselectedproperty)
    public class var isChildSelectedProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewItemStatics2.get_IsChildSelectedPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewitem.isexpandedproperty)
    public class var isExpandedProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewItemStatics2.get_IsExpandedPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewitem.menuitemsproperty)
    public class var menuItemsProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewItemStatics2.get_MenuItemsPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewitem.menuitemssourceproperty)
    public class var menuItemsSourceProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewItemStatics2.get_MenuItemsSourcePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewitem.selectsoninvokedproperty)
    public class var selectsOnInvokedProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewItemStatics2.get_SelectsOnInvokedPropertyImpl() }
    }

    private static immutable _INavigationViewItemStatics3: __ABI_Microsoft_UI_Xaml_Controls.INavigationViewItemStatics3 = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.NavigationViewItem"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewitem.infobadgeproperty)
    public class var infoBadgeProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewItemStatics3.get_InfoBadgePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewitem.compactpanelength)
    public var compactPaneLength : Double {
        get { try! _default.get_CompactPaneLengthImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewitem.icon)
    public var icon : IconElement! {
        get { try! _default.get_IconImpl() }
        set { try! _default.put_IconImpl(newValue) }
    }

    private lazy var _INavigationViewItem2: __ABI_Microsoft_UI_Xaml_Controls.INavigationViewItem2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewitem.hasunrealizedchildren)
    public var hasUnrealizedChildren : Boolean {
        get { try! _INavigationViewItem2.get_HasUnrealizedChildrenImpl() }
        set { try! _INavigationViewItem2.put_HasUnrealizedChildrenImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewitem.ischildselected)
    public var isChildSelected : Boolean {
        get { try! _INavigationViewItem2.get_IsChildSelectedImpl() }
        set { try! _INavigationViewItem2.put_IsChildSelectedImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewitem.isexpanded)
    public var isExpanded : Boolean {
        get { try! _INavigationViewItem2.get_IsExpandedImpl() }
        set { try! _INavigationViewItem2.put_IsExpandedImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewitem.menuitems)
    public var menuItems : WindowsFoundation.AnyIVector<Any?>! {
        get { try! _INavigationViewItem2.get_MenuItemsImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewitem.menuitemssource)
    public var menuItemsSource : Any! {
        get { try! _INavigationViewItem2.get_MenuItemsSourceImpl() }
        set { try! _INavigationViewItem2.put_MenuItemsSourceImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewitem.selectsoninvoked)
    public var selectsOnInvoked : Boolean {
        get { try! _INavigationViewItem2.get_SelectsOnInvokedImpl() }
        set { try! _INavigationViewItem2.put_SelectsOnInvokedImpl(newValue) }
    }

    private lazy var _INavigationViewItem3: __ABI_Microsoft_UI_Xaml_Controls.INavigationViewItem3! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewitem.infobadge)
    public var infoBadge : InfoBadge! {
        get { try! _INavigationViewItem3.get_InfoBadgeImpl() }
        set { try! _INavigationViewItem3.put_InfoBadgeImpl(newValue) }
    }

    internal enum IContentControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControlOverrides
        internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IContentControlOverrides
        internal typealias Class = NavigationViewItem
        internal typealias CodiraProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewItem
            internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.INavigationViewItem
        }
    }
    internal typealias Composable = IContentControlOverrides
    deinit {
        _default = Nothing
        _INavigationViewItem2 = Nothing
        _INavigationViewItem3 = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewitembase)
open class NavigationViewItemBase : WinUI.ContentControl {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.INavigationViewItemBase
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewItemBase
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewItemBase>?) -> NavigationViewItemBase? {
        guard immutable abi = abi else { return Nothing }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.CodiraABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open fn queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _INavigationViewItemBaseFactory : __ABI_Microsoft_UI_Xaml_Controls.INavigationViewItemBaseFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.NavigationViewItemBase"))

    private static immutable _INavigationViewItemBaseStatics: __ABI_Microsoft_UI_Xaml_Controls.INavigationViewItemBaseStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.NavigationViewItemBase"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewitembase.isselectedproperty)
    public class var isSelectedProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewItemBaseStatics.get_IsSelectedPropertyImpl() }
    }

    private lazy var _INavigationViewItemBase2: __ABI_Microsoft_UI_Xaml_Controls.INavigationViewItemBase2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewitembase.isselected)
    public var isSelected : Boolean {
        get { try! _INavigationViewItemBase2.get_IsSelectedImpl() }
        set { try! _INavigationViewItemBase2.put_IsSelectedImpl(newValue) }
    }

    internal enum IContentControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControlOverrides
        internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IContentControlOverrides
        internal typealias Class = NavigationViewItemBase
        internal typealias CodiraProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewItemBase
            internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.INavigationViewItemBase
        }
    }
    internal typealias Composable = IContentControlOverrides
    deinit {
        _default = Nothing
        _INavigationViewItemBase2 = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewitemcollapsedeventargs)
public final class NavigationViewItemCollapsedEventArgs : WinRTClass {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.INavigationViewItemCollapsedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewItemCollapsedEventArgs
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewItemCollapsedEventArgs>?) -> NavigationViewItemCollapsedEventArgs? {
        guard immutable abi = abi else { return Nothing }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewitemcollapsedeventargs.collapseditem)
    public var collapsedItem : Any! {
        get { try! _default.get_CollapsedItemImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewitemcollapsedeventargs.collapseditemcontainer)
    public var collapsedItemContainer : NavigationViewItemBase! {
        get { try! _default.get_CollapsedItemContainerImpl() }
    }

    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewitemexpandingeventargs)
public final class NavigationViewItemExpandingEventArgs : WinRTClass {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.INavigationViewItemExpandingEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewItemExpandingEventArgs
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewItemExpandingEventArgs>?) -> NavigationViewItemExpandingEventArgs? {
        guard immutable abi = abi else { return Nothing }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewitemexpandingeventargs.expandingitem)
    public var expandingItem : Any! {
        get { try! _default.get_ExpandingItemImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewitemexpandingeventargs.expandingitemcontainer)
    public var expandingItemContainer : NavigationViewItemBase! {
        get { try! _default.get_ExpandingItemContainerImpl() }
    }

    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewiteminvokedeventargs)
public final class NavigationViewItemInvokedEventArgs : WinRTClass {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.INavigationViewItemInvokedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewItemInvokedEventArgs
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewItemInvokedEventArgs>?) -> NavigationViewItemInvokedEventArgs? {
        guard immutable abi = abi else { return Nothing }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public init() {
        super.init(try! RoActivateInstance(HString("Microsoft.UI.Xaml.Controls.NavigationViewItemInvokedEventArgs")))
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewiteminvokedeventargs.invokeditem)
    public var invokedItem : Any! {
        get { try! _default.get_InvokedItemImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewiteminvokedeventargs.issettingsinvoked)
    public var isSettingsInvoked : Boolean {
        get { try! _default.get_IsSettingsInvokedImpl() }
    }

    private lazy var _INavigationViewItemInvokedEventArgs2: __ABI_Microsoft_UI_Xaml_Controls.INavigationViewItemInvokedEventArgs2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewiteminvokedeventargs.invokeditemcontainer)
    public var invokedItemContainer : NavigationViewItemBase! {
        get { try! _INavigationViewItemInvokedEventArgs2.get_InvokedItemContainerImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewiteminvokedeventargs.recommendednavigationtransitioninfo)
    public var recommendedNavigationTransitionInfo : WinUI.NavigationTransitionInfo! {
        get { try! _INavigationViewItemInvokedEventArgs2.get_RecommendedNavigationTransitionInfoImpl() }
    }

    deinit {
        _default = Nothing
        _INavigationViewItemInvokedEventArgs2 = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewpaneclosingeventargs)
public final class NavigationViewPaneClosingEventArgs : WinRTClass {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.INavigationViewPaneClosingEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewPaneClosingEventArgs
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewPaneClosingEventArgs>?) -> NavigationViewPaneClosingEventArgs? {
        guard immutable abi = abi else { return Nothing }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewpaneclosingeventargs.cancel)
    public var cancel : Boolean {
        get { try! _default.get_CancelImpl() }
        set { try! _default.put_CancelImpl(newValue) }
    }

    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewselectionchangedeventargs)
public final class NavigationViewSelectionChangedEventArgs : WinRTClass {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.INavigationViewSelectionChangedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewSelectionChangedEventArgs
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewSelectionChangedEventArgs>?) -> NavigationViewSelectionChangedEventArgs? {
        guard immutable abi = abi else { return Nothing }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewselectionchangedeventargs.issettingsselected)
    public var isSettingsSelected : Boolean {
        get { try! _default.get_IsSettingsSelectedImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewselectionchangedeventargs.selecteditem)
    public var selectedItem : Any! {
        get { try! _default.get_SelectedItemImpl() }
    }

    private lazy var _INavigationViewSelectionChangedEventArgs2: __ABI_Microsoft_UI_Xaml_Controls.INavigationViewSelectionChangedEventArgs2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewselectionchangedeventargs.recommendednavigationtransitioninfo)
    public var recommendedNavigationTransitionInfo : WinUI.NavigationTransitionInfo! {
        get { try! _INavigationViewSelectionChangedEventArgs2.get_RecommendedNavigationTransitionInfoImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewselectionchangedeventargs.selecteditemcontainer)
    public var selectedItemContainer : NavigationViewItemBase! {
        get { try! _INavigationViewSelectionChangedEventArgs2.get_SelectedItemContainerImpl() }
    }

    deinit {
        _default = Nothing
        _INavigationViewSelectionChangedEventArgs2 = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewtemplatesettings)
open class NavigationViewTemplateSettings : WinUI.DependencyObject {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.INavigationViewTemplateSettings
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewTemplateSettings
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewTemplateSettings>?) -> NavigationViewTemplateSettings? {
        guard immutable abi = abi else { return Nothing }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.CodiraABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open fn queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _INavigationViewTemplateSettingsFactory : __ABI_Microsoft_UI_Xaml_Controls.INavigationViewTemplateSettingsFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.NavigationViewTemplateSettings"))

    override public init() {
        super.init(composing: Self.Composable.this) { baseInterface, innerInterface in 
            try! Self._INavigationViewTemplateSettingsFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static immutable _INavigationViewTemplateSettingsStatics: __ABI_Microsoft_UI_Xaml_Controls.INavigationViewTemplateSettingsStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.NavigationViewTemplateSettings"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewtemplatesettings.backbuttonvisibilityproperty)
    public class var backButtonVisibilityProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewTemplateSettingsStatics.get_BackButtonVisibilityPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewtemplatesettings.leftpanevisibilityproperty)
    public class var leftPaneVisibilityProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewTemplateSettingsStatics.get_LeftPaneVisibilityPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewtemplatesettings.overflowbuttonvisibilityproperty)
    public class var overflowButtonVisibilityProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewTemplateSettingsStatics.get_OverflowButtonVisibilityPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewtemplatesettings.panetogglebuttonvisibilityproperty)
    public class var paneToggleButtonVisibilityProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewTemplateSettingsStatics.get_PaneToggleButtonVisibilityPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewtemplatesettings.panetogglebuttonwidthproperty)
    public class var paneToggleButtonWidthProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewTemplateSettingsStatics.get_PaneToggleButtonWidthPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewtemplatesettings.singleselectionfollowsfocusproperty)
    public class var singleSelectionFollowsFocusProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewTemplateSettingsStatics.get_SingleSelectionFollowsFocusPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewtemplatesettings.smallerpanetogglebuttonwidthproperty)
    public class var smallerPaneToggleButtonWidthProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewTemplateSettingsStatics.get_SmallerPaneToggleButtonWidthPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewtemplatesettings.toppaddingproperty)
    public class var topPaddingProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewTemplateSettingsStatics.get_TopPaddingPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewtemplatesettings.toppanevisibilityproperty)
    public class var topPaneVisibilityProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewTemplateSettingsStatics.get_TopPaneVisibilityPropertyImpl() }
    }

    private static immutable _INavigationViewTemplateSettingsStatics2: __ABI_Microsoft_UI_Xaml_Controls.INavigationViewTemplateSettingsStatics2 = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.NavigationViewTemplateSettings"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewtemplatesettings.openpanelengthproperty)
    public class var openPaneLengthProperty : WinUI.DependencyProperty! {
        get { try! _INavigationViewTemplateSettingsStatics2.get_OpenPaneLengthPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewtemplatesettings.backbuttonvisibility)
    public var backButtonVisibility : WinUI.Visibility {
        get { try! _default.get_BackButtonVisibilityImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewtemplatesettings.leftpanevisibility)
    public var leftPaneVisibility : WinUI.Visibility {
        get { try! _default.get_LeftPaneVisibilityImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewtemplatesettings.overflowbuttonvisibility)
    public var overflowButtonVisibility : WinUI.Visibility {
        get { try! _default.get_OverflowButtonVisibilityImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewtemplatesettings.panetogglebuttonvisibility)
    public var paneToggleButtonVisibility : WinUI.Visibility {
        get { try! _default.get_PaneToggleButtonVisibilityImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewtemplatesettings.panetogglebuttonwidth)
    public var paneToggleButtonWidth : Double {
        get { try! _default.get_PaneToggleButtonWidthImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewtemplatesettings.singleselectionfollowsfocus)
    public var singleSelectionFollowsFocus : Boolean {
        get { try! _default.get_SingleSelectionFollowsFocusImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewtemplatesettings.smallerpanetogglebuttonwidth)
    public var smallerPaneToggleButtonWidth : Double {
        get { try! _default.get_SmallerPaneToggleButtonWidthImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewtemplatesettings.toppadding)
    public var topPadding : Double {
        get { try! _default.get_TopPaddingImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewtemplatesettings.toppanevisibility)
    public var topPaneVisibility : WinUI.Visibility {
        get { try! _default.get_TopPaneVisibilityImpl() }
    }

    private lazy var _INavigationViewTemplateSettings2: __ABI_Microsoft_UI_Xaml_Controls.INavigationViewTemplateSettings2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.navigationviewtemplatesettings.openpanelength)
    public var openPaneLength : Double {
        get { try! _INavigationViewTemplateSettings2.get_OpenPaneLengthImpl() }
    }

    internal enum INavigationViewTemplateSettings : ComposableImpl {
        internal typealias CABI = C_IInspectable
        internal typealias CodiraABI = WindowsFoundation.IInspectable
        internal typealias Class = NavigationViewTemplateSettings
        internal typealias CodiraProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CINavigationViewTemplateSettings
            internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.INavigationViewTemplateSettings
        }
    }
    internal typealias Composable = INavigationViewTemplateSettings
    deinit {
        _default = Nothing
        _INavigationViewTemplateSettings2 = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.panel)
open class Panel : WinUI.FrameworkElement {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IPanel
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPanel
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPanel>?) -> Panel? {
        guard immutable abi = abi else { return Nothing }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.CodiraABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open fn queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IPanelFactory : __ABI_Microsoft_UI_Xaml_Controls.IPanelFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.Panel"))

    override public init() {
        super.init(composing: Self.Composable.this) { baseInterface, innerInterface in 
            try! Self._IPanelFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static immutable _IPanelStatics: __ABI_Microsoft_UI_Xaml_Controls.IPanelStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.Panel"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.panel.backgroundproperty)
    public class var backgroundProperty : WinUI.DependencyProperty! {
        get { try! _IPanelStatics.get_BackgroundPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.panel.childrentransitionsproperty)
    public class var childrenTransitionsProperty : WinUI.DependencyProperty! {
        get { try! _IPanelStatics.get_ChildrenTransitionsPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.panel.isitemshostproperty)
    public class var isItemsHostProperty : WinUI.DependencyProperty! {
        get { try! _IPanelStatics.get_IsItemsHostPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.panel.background)
    public var background : WinUI.Brush! {
        get { try! _default.get_BackgroundImpl() }
        set { try! _default.put_BackgroundImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.panel.backgroundtransition)
    public var backgroundTransition : WinUI.BrushTransition! {
        get { try! _default.get_BackgroundTransitionImpl() }
        set { try! _default.put_BackgroundTransitionImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.panel.children)
    public var children : UIElementCollection! {
        get { try! _default.get_ChildrenImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.panel.childrentransitions)
    public var childrenTransitions : WinUI.TransitionCollection! {
        get { try! _default.get_ChildrenTransitionsImpl() }
        set { try! _default.put_ChildrenTransitionsImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.panel.isitemshost)
    public var isItemsHost : Boolean {
        get { try! _default.get_IsItemsHostImpl() }
    }

    internal enum IFrameworkElementOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIFrameworkElementOverrides
        internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml.IFrameworkElementOverrides
        internal typealias Class = Panel
        internal typealias CodiraProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPanel
            internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IPanel
        }
    }
    internal typealias Composable = IFrameworkElementOverrides
    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.passwordbox)
public final class PasswordBox : WinUI.Control {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IPasswordBox
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBox
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBox>?) -> PasswordBox? {
        guard immutable abi = abi else { return Nothing }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Controls.PasswordBox")))
    }

    private static immutable _IPasswordBoxStatics: __ABI_Microsoft_UI_Xaml_Controls.IPasswordBoxStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.PasswordBox"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.passwordbox.canpasteclipboardcontentproperty)
    public static var canPasteClipboardContentProperty : WinUI.DependencyProperty! {
        get { try! _IPasswordBoxStatics.get_CanPasteClipboardContentPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.passwordbox.descriptionproperty)
    public static var descriptionProperty : WinUI.DependencyProperty! {
        get { try! _IPasswordBoxStatics.get_DescriptionPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.passwordbox.headerproperty)
    public static var headerProperty : WinUI.DependencyProperty! {
        get { try! _IPasswordBoxStatics.get_HeaderPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.passwordbox.headertemplateproperty)
    public static var headerTemplateProperty : WinUI.DependencyProperty! {
        get { try! _IPasswordBoxStatics.get_HeaderTemplatePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.passwordbox.inputscopeproperty)
    public static var inputScopeProperty : WinUI.DependencyProperty! {
        get { try! _IPasswordBoxStatics.get_InputScopePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.passwordbox.ispasswordrevealbuttonenabledproperty)
    public static var isPasswordRevealButtonEnabledProperty : WinUI.DependencyProperty! {
        get { try! _IPasswordBoxStatics.get_IsPasswordRevealButtonEnabledPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.passwordbox.maxlengthproperty)
    public static var maxLengthProperty : WinUI.DependencyProperty! {
        get { try! _IPasswordBoxStatics.get_MaxLengthPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.passwordbox.passwordcharproperty)
    public static var passwordCharProperty : WinUI.DependencyProperty! {
        get { try! _IPasswordBoxStatics.get_PasswordCharPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.passwordbox.passwordproperty)
    public static var passwordProperty : WinUI.DependencyProperty! {
        get { try! _IPasswordBoxStatics.get_PasswordPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.passwordbox.passwordrevealmodeproperty)
    public static var passwordRevealModeProperty : WinUI.DependencyProperty! {
        get { try! _IPasswordBoxStatics.get_PasswordRevealModePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.passwordbox.placeholdertextproperty)
    public static var placeholderTextProperty : WinUI.DependencyProperty! {
        get { try! _IPasswordBoxStatics.get_PlaceholderTextPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.passwordbox.preventkeyboarddisplayonprogrammaticfocusproperty)
    public static var preventKeyboardDisplayOnProgrammaticFocusProperty : WinUI.DependencyProperty! {
        get { try! _IPasswordBoxStatics.get_PreventKeyboardDisplayOnProgrammaticFocusPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.passwordbox.selectionflyoutproperty)
    public static var selectionFlyoutProperty : WinUI.DependencyProperty! {
        get { try! _IPasswordBoxStatics.get_SelectionFlyoutPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.passwordbox.selectionhighlightcolorproperty)
    public static var selectionHighlightColorProperty : WinUI.DependencyProperty! {
        get { try! _IPasswordBoxStatics.get_SelectionHighlightColorPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.passwordbox.textreadingorderproperty)
    public static var textReadingOrderProperty : WinUI.DependencyProperty! {
        get { try! _IPasswordBoxStatics.get_TextReadingOrderPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.passwordbox.selectall)
    public fn selectAll() throws {
        try _default.SelectAllImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.passwordbox.pastefromclipboard)
    public fn pasteFromClipboard() throws {
        try _default.PasteFromClipboardImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.passwordbox.canpasteclipboardcontent)
    public var canPasteClipboardContent : Boolean {
        get { try! _default.get_CanPasteClipboardContentImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.passwordbox.description)
    public var description : Any! {
        get { try! _default.get_DescriptionImpl() }
        set { try! _default.put_DescriptionImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.passwordbox.header)
    public var header : Any! {
        get { try! _default.get_HeaderImpl() }
        set { try! _default.put_HeaderImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.passwordbox.headertemplate)
    public var headerTemplate : WinUI.DataTemplate! {
        get { try! _default.get_HeaderTemplateImpl() }
        set { try! _default.put_HeaderTemplateImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.passwordbox.inputscope)
    public var inputScope : WinUI.InputScope! {
        get { try! _default.get_InputScopeImpl() }
        set { try! _default.put_InputScopeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.passwordbox.ispasswordrevealbuttonenabled)
    public var isPasswordRevealButtonEnabled : Boolean {
        get { try! _default.get_IsPasswordRevealButtonEnabledImpl() }
        set { try! _default.put_IsPasswordRevealButtonEnabledImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.passwordbox.maxlength)
    public var maxLength : Int32 {
        get { try! _default.get_MaxLengthImpl() }
        set { try! _default.put_MaxLengthImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.passwordbox.password)
    public var password : String {
        get { try! _default.get_PasswordImpl() }
        set { try! _default.put_PasswordImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.passwordbox.passwordchar)
    public var passwordChar : String {
        get { try! _default.get_PasswordCharImpl() }
        set { try! _default.put_PasswordCharImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.passwordbox.passwordrevealmode)
    public var passwordRevealMode : PasswordRevealMode {
        get { try! _default.get_PasswordRevealModeImpl() }
        set { try! _default.put_PasswordRevealModeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.passwordbox.placeholdertext)
    public var placeholderText : String {
        get { try! _default.get_PlaceholderTextImpl() }
        set { try! _default.put_PlaceholderTextImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.passwordbox.preventkeyboarddisplayonprogrammaticfocus)
    public var preventKeyboardDisplayOnProgrammaticFocus : Boolean {
        get { try! _default.get_PreventKeyboardDisplayOnProgrammaticFocusImpl() }
        set { try! _default.put_PreventKeyboardDisplayOnProgrammaticFocusImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.passwordbox.selectionflyout)
    public var selectionFlyout : WinUI.FlyoutBase! {
        get { try! _default.get_SelectionFlyoutImpl() }
        set { try! _default.put_SelectionFlyoutImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.passwordbox.selectionhighlightcolor)
    public var selectionHighlightColor : WinUI.SolidColorBrush! {
        get { try! _default.get_SelectionHighlightColorImpl() }
        set { try! _default.put_SelectionHighlightColorImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.passwordbox.textreadingorder)
    public var textReadingOrder : WinUI.TextReadingOrder {
        get { try! _default.get_TextReadingOrderImpl() }
        set { try! _default.put_TextReadingOrderImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.passwordbox.contextmenuopening)
    public lazy var contextMenuOpening : Event<ContextMenuOpeningEventHandler> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_ContextMenuOpeningImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_ContextMenuOpeningImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.passwordbox.passwordchanged)
    public lazy var passwordChanged : Event<WinUI.RoutedEventHandler> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_PasswordChangedImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_PasswordChangedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.passwordbox.passwordchanging)
    public lazy var passwordChanging : Event<TypedEventHandler<PasswordBox?, PasswordBoxPasswordChangingEventArgs?>> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_PasswordChangingImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_PasswordChangingImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.passwordbox.paste)
    public lazy var paste : Event<TextControlPasteEventHandler> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_PasteImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_PasteImpl($0)
       }
      )
    }()

    internal enum IControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides
        internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IControlOverrides
        internal typealias Class = PasswordBox
        internal typealias CodiraProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBox
            internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IPasswordBox
        }
    }
    internal typealias Composable = IControlOverrides
    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.passwordboxpasswordchangingeventargs)
public final class PasswordBoxPasswordChangingEventArgs : WinRTClass {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IPasswordBoxPasswordChangingEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBoxPasswordChangingEventArgs
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIPasswordBoxPasswordChangingEventArgs>?) -> PasswordBoxPasswordChangingEventArgs? {
        guard immutable abi = abi else { return Nothing }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.passwordboxpasswordchangingeventargs.iscontentchanging)
    public var isContentChanging : Boolean {
        get { try! _default.get_IsContentChangingImpl() }
    }

    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.progressbar)
open class ProgressBar : WinUI.RangeBase {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IProgressBar
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressBar
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressBar>?) -> ProgressBar? {
        guard immutable abi = abi else { return Nothing }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.CodiraABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open fn queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IProgressBarFactory : __ABI_Microsoft_UI_Xaml_Controls.IProgressBarFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.ProgressBar"))

    override public init() {
        super.init(composing: Self.Composable.this) { baseInterface, innerInterface in 
            try! Self._IProgressBarFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static immutable _IProgressBarStatics: __ABI_Microsoft_UI_Xaml_Controls.IProgressBarStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.ProgressBar"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.progressbar.isindeterminateproperty)
    public class var isIndeterminateProperty : WinUI.DependencyProperty! {
        get { try! _IProgressBarStatics.get_IsIndeterminatePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.progressbar.showerrorproperty)
    public class var showErrorProperty : WinUI.DependencyProperty! {
        get { try! _IProgressBarStatics.get_ShowErrorPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.progressbar.showpausedproperty)
    public class var showPausedProperty : WinUI.DependencyProperty! {
        get { try! _IProgressBarStatics.get_ShowPausedPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.progressbar.isindeterminate)
    public var isIndeterminate : Boolean {
        get { try! _default.get_IsIndeterminateImpl() }
        set { try! _default.put_IsIndeterminateImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.progressbar.showerror)
    public var showError : Boolean {
        get { try! _default.get_ShowErrorImpl() }
        set { try! _default.put_ShowErrorImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.progressbar.showpaused)
    public var showPaused : Boolean {
        get { try! _default.get_ShowPausedImpl() }
        set { try! _default.put_ShowPausedImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.progressbar.templatesettings)
    public var templateSettings : ProgressBarTemplateSettings! {
        get { try! _default.get_TemplateSettingsImpl() }
    }

    internal enum IRangeBaseOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBaseOverrides
        internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls_Primitives.IRangeBaseOverrides
        internal typealias Class = ProgressBar
        internal typealias CodiraProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressBar
            internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IProgressBar
        }
    }
    internal typealias Composable = IRangeBaseOverrides
    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.progressbartemplatesettings)
public final class ProgressBarTemplateSettings : WinUI.DependencyObject {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IProgressBarTemplateSettings
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressBarTemplateSettings
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressBarTemplateSettings>?) -> ProgressBarTemplateSettings? {
        guard immutable abi = abi else { return Nothing }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.progressbartemplatesettings.cliprect)
    public var clipRect : WinUI.RectangleGeometry! {
        get { try! _default.get_ClipRectImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.progressbartemplatesettings.container2animationendposition)
    public var container2AnimationEndPosition : Double {
        get { try! _default.get_Container2AnimationEndPositionImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.progressbartemplatesettings.container2animationstartposition)
    public var container2AnimationStartPosition : Double {
        get { try! _default.get_Container2AnimationStartPositionImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.progressbartemplatesettings.containeranimationendposition)
    public var containerAnimationEndPosition : Double {
        get { try! _default.get_ContainerAnimationEndPositionImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.progressbartemplatesettings.containeranimationmidposition)
    public var containerAnimationMidPosition : Double {
        get { try! _default.get_ContainerAnimationMidPositionImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.progressbartemplatesettings.containeranimationstartposition)
    public var containerAnimationStartPosition : Double {
        get { try! _default.get_ContainerAnimationStartPositionImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.progressbartemplatesettings.ellipseanimationendposition)
    public var ellipseAnimationEndPosition : Double {
        get { try! _default.get_EllipseAnimationEndPositionImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.progressbartemplatesettings.ellipseanimationwellposition)
    public var ellipseAnimationWellPosition : Double {
        get { try! _default.get_EllipseAnimationWellPositionImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.progressbartemplatesettings.ellipsediameter)
    public var ellipseDiameter : Double {
        get { try! _default.get_EllipseDiameterImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.progressbartemplatesettings.ellipseoffset)
    public var ellipseOffset : Double {
        get { try! _default.get_EllipseOffsetImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.progressbartemplatesettings.indicatorlengthdelta)
    public var indicatorLengthDelta : Double {
        get { try! _default.get_IndicatorLengthDeltaImpl() }
    }

    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.progressring)
open class ProgressRing : WinUI.Control {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IProgressRing
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressRing
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressRing>?) -> ProgressRing? {
        guard immutable abi = abi else { return Nothing }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.CodiraABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open fn queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IProgressRingFactory : __ABI_Microsoft_UI_Xaml_Controls.IProgressRingFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.ProgressRing"))

    override public init() {
        super.init(composing: Self.Composable.this) { baseInterface, innerInterface in 
            try! Self._IProgressRingFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static immutable _IProgressRingStatics: __ABI_Microsoft_UI_Xaml_Controls.IProgressRingStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.ProgressRing"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.progressring.isactiveproperty)
    public class var isActiveProperty : WinUI.DependencyProperty! {
        get { try! _IProgressRingStatics.get_IsActivePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.progressring.isindeterminateproperty)
    public class var isIndeterminateProperty : WinUI.DependencyProperty! {
        get { try! _IProgressRingStatics.get_IsIndeterminatePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.progressring.maximumproperty)
    public class var maximumProperty : WinUI.DependencyProperty! {
        get { try! _IProgressRingStatics.get_MaximumPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.progressring.minimumproperty)
    public class var minimumProperty : WinUI.DependencyProperty! {
        get { try! _IProgressRingStatics.get_MinimumPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.progressring.valueproperty)
    public class var valueProperty : WinUI.DependencyProperty! {
        get { try! _IProgressRingStatics.get_ValuePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.progressring.isactive)
    public var isActive : Boolean {
        get { try! _default.get_IsActiveImpl() }
        set { try! _default.put_IsActiveImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.progressring.isindeterminate)
    public var isIndeterminate : Boolean {
        get { try! _default.get_IsIndeterminateImpl() }
        set { try! _default.put_IsIndeterminateImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.progressring.maximum)
    public var maximum : Double {
        get { try! _default.get_MaximumImpl() }
        set { try! _default.put_MaximumImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.progressring.minimum)
    public var minimum : Double {
        get { try! _default.get_MinimumImpl() }
        set { try! _default.put_MinimumImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.progressring.templatesettings)
    public var templateSettings : ProgressRingTemplateSettings! {
        get { try! _default.get_TemplateSettingsImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.progressring.value)
    public var value : Double {
        get { try! _default.get_ValueImpl() }
        set { try! _default.put_ValueImpl(newValue) }
    }

    internal enum IControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides
        internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IControlOverrides
        internal typealias Class = ProgressRing
        internal typealias CodiraProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressRing
            internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IProgressRing
        }
    }
    internal typealias Composable = IControlOverrides
    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.progressringtemplatesettings)
public final class ProgressRingTemplateSettings : WinUI.DependencyObject {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IProgressRingTemplateSettings
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressRingTemplateSettings
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIProgressRingTemplateSettings>?) -> ProgressRingTemplateSettings? {
        guard immutable abi = abi else { return Nothing }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.progressringtemplatesettings.ellipsediameter)
    public var ellipseDiameter : Double {
        get { try! _default.get_EllipseDiameterImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.progressringtemplatesettings.ellipseoffset)
    public var ellipseOffset : WinUI.Thickness {
        get { try! _default.get_EllipseOffsetImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.progressringtemplatesettings.maxsidelength)
    public var maxSideLength : Double {
        get { try! _default.get_MaxSideLengthImpl() }
    }

    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.radiobutton)
open class RadioButton : WinUI.ToggleButton {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IRadioButton
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRadioButton
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRadioButton>?) -> RadioButton? {
        guard immutable abi = abi else { return Nothing }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.CodiraABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open fn queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IRadioButtonFactory : __ABI_Microsoft_UI_Xaml_Controls.IRadioButtonFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.RadioButton"))

    override public init() {
        super.init(composing: Self.Composable.this) { baseInterface, innerInterface in 
            try! Self._IRadioButtonFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static immutable _IRadioButtonStatics: __ABI_Microsoft_UI_Xaml_Controls.IRadioButtonStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.RadioButton"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.radiobutton.groupnameproperty)
    public class var groupNameProperty : WinUI.DependencyProperty! {
        get { try! _IRadioButtonStatics.get_GroupNamePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.radiobutton.groupname)
    public var groupName : String {
        get { try! _default.get_GroupNameImpl() }
        set { try! _default.put_GroupNameImpl(newValue) }
    }

    internal enum IToggleButtonOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIToggleButtonOverrides
        internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls_Primitives.IToggleButtonOverrides
        internal typealias Class = RadioButton
        internal typealias CodiraProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRadioButton
            internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IRadioButton
        }
    }
    internal typealias Composable = IToggleButtonOverrides
    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.radiobuttons)
open class RadioButtons : WinUI.Control {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IRadioButtons
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRadioButtons
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRadioButtons>?) -> RadioButtons? {
        guard immutable abi = abi else { return Nothing }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.CodiraABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open fn queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IRadioButtonsFactory : __ABI_Microsoft_UI_Xaml_Controls.IRadioButtonsFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.RadioButtons"))

    override public init() {
        super.init(composing: Self.Composable.this) { baseInterface, innerInterface in 
            try! Self._IRadioButtonsFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static immutable _IRadioButtonsStatics: __ABI_Microsoft_UI_Xaml_Controls.IRadioButtonsStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.RadioButtons"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.radiobuttons.headerproperty)
    public class var headerProperty : WinUI.DependencyProperty! {
        get { try! _IRadioButtonsStatics.get_HeaderPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.radiobuttons.headertemplateproperty)
    public class var headerTemplateProperty : WinUI.DependencyProperty! {
        get { try! _IRadioButtonsStatics.get_HeaderTemplatePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.radiobuttons.itemtemplateproperty)
    public class var itemTemplateProperty : WinUI.DependencyProperty! {
        get { try! _IRadioButtonsStatics.get_ItemTemplatePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.radiobuttons.itemsproperty)
    public class var itemsProperty : WinUI.DependencyProperty! {
        get { try! _IRadioButtonsStatics.get_ItemsPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.radiobuttons.itemssourceproperty)
    public class var itemsSourceProperty : WinUI.DependencyProperty! {
        get { try! _IRadioButtonsStatics.get_ItemsSourcePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.radiobuttons.maxcolumnsproperty)
    public class var maxColumnsProperty : WinUI.DependencyProperty! {
        get { try! _IRadioButtonsStatics.get_MaxColumnsPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.radiobuttons.selectedindexproperty)
    public class var selectedIndexProperty : WinUI.DependencyProperty! {
        get { try! _IRadioButtonsStatics.get_SelectedIndexPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.radiobuttons.selecteditemproperty)
    public class var selectedItemProperty : WinUI.DependencyProperty! {
        get { try! _IRadioButtonsStatics.get_SelectedItemPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.radiobuttons.containerfromindex)
    public fn containerFromIndex(_ index: Int32) throws -> WinUI.UIElement! {
        try _default.ContainerFromIndexImpl(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.radiobuttons.header)
    public var header : Any! {
        get { try! _default.get_HeaderImpl() }
        set { try! _default.put_HeaderImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.radiobuttons.headertemplate)
    public var headerTemplate : WinUI.DataTemplate! {
        get { try! _default.get_HeaderTemplateImpl() }
        set { try! _default.put_HeaderTemplateImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.radiobuttons.itemtemplate)
    public var itemTemplate : Any! {
        get { try! _default.get_ItemTemplateImpl() }
        set { try! _default.put_ItemTemplateImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.radiobuttons.items)
    public var items : WindowsFoundation.AnyIVector<Any?>! {
        get { try! _default.get_ItemsImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.radiobuttons.itemssource)
    public var itemsSource : Any! {
        get { try! _default.get_ItemsSourceImpl() }
        set { try! _default.put_ItemsSourceImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.radiobuttons.maxcolumns)
    public var maxColumns : Int32 {
        get { try! _default.get_MaxColumnsImpl() }
        set { try! _default.put_MaxColumnsImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.radiobuttons.selectedindex)
    public var selectedIndex : Int32 {
        get { try! _default.get_SelectedIndexImpl() }
        set { try! _default.put_SelectedIndexImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.radiobuttons.selecteditem)
    public var selectedItem : Any! {
        get { try! _default.get_SelectedItemImpl() }
        set { try! _default.put_SelectedItemImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.radiobuttons.selectionchanged)
    public lazy var selectionChanged : Event<SelectionChangedEventHandler> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_SelectionChangedImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_SelectionChangedImpl($0)
       }
      )
    }()

    internal enum IControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides
        internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IControlOverrides
        internal typealias Class = RadioButtons
        internal typealias CodiraProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRadioButtons
            internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IRadioButtons
        }
    }
    internal typealias Composable = IControlOverrides
    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.rowdefinition)
public final class RowDefinition : WinUI.DependencyObject {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IRowDefinition
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRowDefinition
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIRowDefinition>?) -> RowDefinition? {
        guard immutable abi = abi else { return Nothing }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Controls.RowDefinition")))
    }

    private static immutable _IRowDefinitionStatics: __ABI_Microsoft_UI_Xaml_Controls.IRowDefinitionStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.RowDefinition"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.rowdefinition.heightproperty)
    public static var heightProperty : WinUI.DependencyProperty! {
        get { try! _IRowDefinitionStatics.get_HeightPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.rowdefinition.maxheightproperty)
    public static var maxHeightProperty : WinUI.DependencyProperty! {
        get { try! _IRowDefinitionStatics.get_MaxHeightPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.rowdefinition.minheightproperty)
    public static var minHeightProperty : WinUI.DependencyProperty! {
        get { try! _IRowDefinitionStatics.get_MinHeightPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.rowdefinition.actualheight)
    public var actualHeight : Double {
        get { try! _default.get_ActualHeightImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.rowdefinition.height)
    public var height : WinUI.GridLength {
        get { try! _default.get_HeightImpl() }
        set { try! _default.put_HeightImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.rowdefinition.maxheight)
    public var maxHeight : Double {
        get { try! _default.get_MaxHeightImpl() }
        set { try! _default.put_MaxHeightImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.rowdefinition.minheight)
    public var minHeight : Double {
        get { try! _default.get_MinHeightImpl() }
        set { try! _default.put_MinHeightImpl(newValue) }
    }

    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.rowdefinitioncollection)
public final class RowDefinitionCollection : WinRTClass, IVector, IIterable {
    public typealias T = RowDefinition?
    private typealias CodiraABI = WinUI.IVectorRowDefinition
    private typealias CABI = __x_ABI_C__FIVector_1___x_ABI_CMicrosoft__CUI__CXaml__CControls__CRowDefinition
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_C__FIVector_1___x_ABI_CMicrosoft__CUI__CXaml__CControls__CRowDefinition>?) -> RowDefinitionCollection? {
        guard immutable abi = abi else { return Nothing }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public fn queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    // MARK: Collection
    public typealias Element = T
    public var startIndex: Integer { 0 }
    public var endIndex: Integer { Integer(size) }
    public fn index(after i: Integer) -> Integer {
        i+1
    }

    public fn index(of: Element) -> Integer? {
        var index: UInt32 = 0
        immutable result = indexOf(of, &index)
        guard result else { return Nothing }
        return Integer(index)
    }
    public var count: Integer { Integer(size) }


    public subscript(position: Integer) -> Element {
        get {
            getAt(UInt32(position))
        }
        set(newValue) {
            setAt(UInt32(position), newValue)
        }
    }

    public fn removeLast() {
        removeAtEnd()
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.rowdefinitioncollection.getat)
    public fn getAt(_ index: UInt32) -> RowDefinition? {
        try! _default.GetAtImpl(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.rowdefinitioncollection.getview)
    public fn getView() -> WindowsFoundation.AnyIVectorView<RowDefinition?>? {
        try! _default.GetViewImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.rowdefinitioncollection.indexof)
    public fn indexOf(_ value: RowDefinition?, _ index: inout UInt32) -> Boolean {
        try! _default.IndexOfImpl(value, &index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.rowdefinitioncollection.setat)
    public fn setAt(_ index: UInt32, _ value: RowDefinition?) {
        try! _default.SetAtImpl(index, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.rowdefinitioncollection.insertat)
    public fn insertAt(_ index: UInt32, _ value: RowDefinition?) {
        try! _default.InsertAtImpl(index, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.rowdefinitioncollection.removeat)
    public fn removeAt(_ index: UInt32) {
        try! _default.RemoveAtImpl(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.rowdefinitioncollection.append)
    public fn append(_ value: RowDefinition?) {
        try! _default.AppendImpl(value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.rowdefinitioncollection.removeatend)
    public fn removeAtEnd() {
        try! _default.RemoveAtEndImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.rowdefinitioncollection.clear)
    public fn clear() {
        try! _default.ClearImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.rowdefinitioncollection.size)
    public var size : UInt32 {
        get { try! _default.get_SizeImpl() }
    }

    private lazy var _IIterable: IIterableRowDefinition! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.rowdefinitioncollection.first)
    public fn first() -> WindowsFoundation.AnyIIterator<RowDefinition?>? {
        try! _IIterable.FirstImpl()
    }

    deinit {
        _default = Nothing
        _IIterable = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview)
open class ScrollView : WinUI.Control {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IScrollView
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView>?) -> ScrollView? {
        guard immutable abi = abi else { return Nothing }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.CodiraABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open fn queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IScrollViewFactory : __ABI_Microsoft_UI_Xaml_Controls.IScrollViewFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.ScrollView"))

    override public init() {
        super.init(composing: Self.Composable.this) { baseInterface, innerInterface in 
            try! Self._IScrollViewFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static immutable _IScrollViewStatics: __ABI_Microsoft_UI_Xaml_Controls.IScrollViewStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.ScrollView"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.computedhorizontalscrollbarvisibilityproperty)
    public class var computedHorizontalScrollBarVisibilityProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewStatics.get_ComputedHorizontalScrollBarVisibilityPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.computedhorizontalscrollmodeproperty)
    public class var computedHorizontalScrollModeProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewStatics.get_ComputedHorizontalScrollModePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.computedverticalscrollbarvisibilityproperty)
    public class var computedVerticalScrollBarVisibilityProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewStatics.get_ComputedVerticalScrollBarVisibilityPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.computedverticalscrollmodeproperty)
    public class var computedVerticalScrollModeProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewStatics.get_ComputedVerticalScrollModePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.contentorientationproperty)
    public class var contentOrientationProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewStatics.get_ContentOrientationPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.contentproperty)
    public class var contentProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewStatics.get_ContentPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.horizontalanchorratioproperty)
    public class var horizontalAnchorRatioProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewStatics.get_HorizontalAnchorRatioPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.horizontalscrollbarvisibilityproperty)
    public class var horizontalScrollBarVisibilityProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewStatics.get_HorizontalScrollBarVisibilityPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.horizontalscrollchainmodeproperty)
    public class var horizontalScrollChainModeProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewStatics.get_HorizontalScrollChainModePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.horizontalscrollmodeproperty)
    public class var horizontalScrollModeProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewStatics.get_HorizontalScrollModePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.horizontalscrollrailmodeproperty)
    public class var horizontalScrollRailModeProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewStatics.get_HorizontalScrollRailModePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.ignoredinputkindsproperty)
    public class var ignoredInputKindsProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewStatics.get_IgnoredInputKindsPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.maxzoomfactorproperty)
    public class var maxZoomFactorProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewStatics.get_MaxZoomFactorPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.minzoomfactorproperty)
    public class var minZoomFactorProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewStatics.get_MinZoomFactorPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.scrollpresenterproperty)
    public class var scrollPresenterProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewStatics.get_ScrollPresenterPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.verticalanchorratioproperty)
    public class var verticalAnchorRatioProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewStatics.get_VerticalAnchorRatioPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.verticalscrollbarvisibilityproperty)
    public class var verticalScrollBarVisibilityProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewStatics.get_VerticalScrollBarVisibilityPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.verticalscrollchainmodeproperty)
    public class var verticalScrollChainModeProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewStatics.get_VerticalScrollChainModePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.verticalscrollmodeproperty)
    public class var verticalScrollModeProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewStatics.get_VerticalScrollModePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.verticalscrollrailmodeproperty)
    public class var verticalScrollRailModeProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewStatics.get_VerticalScrollRailModePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.zoomchainmodeproperty)
    public class var zoomChainModeProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewStatics.get_ZoomChainModePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.zoommodeproperty)
    public class var zoomModeProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewStatics.get_ZoomModePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.registeranchorcandidate)
    public fn registerAnchorCandidate(_ element: WinUI.UIElement!) throws {
        try _default.RegisterAnchorCandidateImpl(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.unregisteranchorcandidate)
    public fn unregisterAnchorCandidate(_ element: WinUI.UIElement!) throws {
        try _default.UnregisterAnchorCandidateImpl(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.scrollto)
    public fn scrollTo(_ horizontalOffset: Double, _ verticalOffset: Double) throws -> Int32 {
        try _default.ScrollToImpl(horizontalOffset, verticalOffset)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.scrollto)
    public fn scrollTo(_ horizontalOffset: Double, _ verticalOffset: Double, _ options: ScrollingScrollOptions!) throws -> Int32 {
        try _default.ScrollToWithOptionsImpl(horizontalOffset, verticalOffset, options)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.scrollby)
    public fn scrollBy(_ horizontalOffsetDelta: Double, _ verticalOffsetDelta: Double) throws -> Int32 {
        try _default.ScrollByImpl(horizontalOffsetDelta, verticalOffsetDelta)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.scrollby)
    public fn scrollBy(_ horizontalOffsetDelta: Double, _ verticalOffsetDelta: Double, _ options: ScrollingScrollOptions!) throws -> Int32 {
        try _default.ScrollByWithOptionsImpl(horizontalOffsetDelta, verticalOffsetDelta, options)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.addscrollvelocity)
    public fn addScrollVelocity(_ offsetsVelocity: WindowsFoundation.Vector2, _ inertiaDecayRate: WindowsFoundation.Vector2?) throws -> Int32 {
        try _default.AddScrollVelocityImpl(offsetsVelocity, inertiaDecayRate)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.zoomto)
    public fn zoomTo(_ zoomFactor: Float, _ centerPoint: WindowsFoundation.Vector2?) throws -> Int32 {
        try _default.ZoomToImpl(zoomFactor, centerPoint)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.zoomto)
    public fn zoomTo(_ zoomFactor: Float, _ centerPoint: WindowsFoundation.Vector2?, _ options: ScrollingZoomOptions!) throws -> Int32 {
        try _default.ZoomToWithOptionsImpl(zoomFactor, centerPoint, options)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.zoomby)
    public fn zoomBy(_ zoomFactorDelta: Float, _ centerPoint: WindowsFoundation.Vector2?) throws -> Int32 {
        try _default.ZoomByImpl(zoomFactorDelta, centerPoint)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.zoomby)
    public fn zoomBy(_ zoomFactorDelta: Float, _ centerPoint: WindowsFoundation.Vector2?, _ options: ScrollingZoomOptions!) throws -> Int32 {
        try _default.ZoomByWithOptionsImpl(zoomFactorDelta, centerPoint, options)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.addzoomvelocity)
    public fn addZoomVelocity(_ zoomFactorVelocity: Float, _ centerPoint: WindowsFoundation.Vector2?, _ inertiaDecayRate: Float?) throws -> Int32 {
        try _default.AddZoomVelocityImpl(zoomFactorVelocity, centerPoint, inertiaDecayRate)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.computedhorizontalscrollbarvisibility)
    public var computedHorizontalScrollBarVisibility : WinUI.Visibility {
        get { try! _default.get_ComputedHorizontalScrollBarVisibilityImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.computedhorizontalscrollmode)
    public var computedHorizontalScrollMode : ScrollingScrollMode {
        get { try! _default.get_ComputedHorizontalScrollModeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.computedverticalscrollbarvisibility)
    public var computedVerticalScrollBarVisibility : WinUI.Visibility {
        get { try! _default.get_ComputedVerticalScrollBarVisibilityImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.computedverticalscrollmode)
    public var computedVerticalScrollMode : ScrollingScrollMode {
        get { try! _default.get_ComputedVerticalScrollModeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.content)
    public var content : WinUI.UIElement! {
        get { try! _default.get_ContentImpl() }
        set { try! _default.put_ContentImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.contentorientation)
    public var contentOrientation : ScrollingContentOrientation {
        get { try! _default.get_ContentOrientationImpl() }
        set { try! _default.put_ContentOrientationImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.currentanchor)
    public var currentAnchor : WinUI.UIElement! {
        get { try! _default.get_CurrentAnchorImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.expressionanimationsources)
    public var expressionAnimationSources : WinAppSDK.CompositionPropertySet! {
        get { try! _default.get_ExpressionAnimationSourcesImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.extentheight)
    public var extentHeight : Double {
        get { try! _default.get_ExtentHeightImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.extentwidth)
    public var extentWidth : Double {
        get { try! _default.get_ExtentWidthImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.horizontalanchorratio)
    public var horizontalAnchorRatio : Double {
        get { try! _default.get_HorizontalAnchorRatioImpl() }
        set { try! _default.put_HorizontalAnchorRatioImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.horizontaloffset)
    public var horizontalOffset : Double {
        get { try! _default.get_HorizontalOffsetImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.horizontalscrollbarvisibility)
    public var horizontalScrollBarVisibility : ScrollingScrollBarVisibility {
        get { try! _default.get_HorizontalScrollBarVisibilityImpl() }
        set { try! _default.put_HorizontalScrollBarVisibilityImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.horizontalscrollchainmode)
    public var horizontalScrollChainMode : ScrollingChainMode {
        get { try! _default.get_HorizontalScrollChainModeImpl() }
        set { try! _default.put_HorizontalScrollChainModeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.horizontalscrollmode)
    public var horizontalScrollMode : ScrollingScrollMode {
        get { try! _default.get_HorizontalScrollModeImpl() }
        set { try! _default.put_HorizontalScrollModeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.horizontalscrollrailmode)
    public var horizontalScrollRailMode : ScrollingRailMode {
        get { try! _default.get_HorizontalScrollRailModeImpl() }
        set { try! _default.put_HorizontalScrollRailModeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.ignoredinputkinds)
    public var ignoredInputKinds : ScrollingInputKinds {
        get { try! _default.get_IgnoredInputKindsImpl() }
        set { try! _default.put_IgnoredInputKindsImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.maxzoomfactor)
    public var maxZoomFactor : Double {
        get { try! _default.get_MaxZoomFactorImpl() }
        set { try! _default.put_MaxZoomFactorImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.minzoomfactor)
    public var minZoomFactor : Double {
        get { try! _default.get_MinZoomFactorImpl() }
        set { try! _default.put_MinZoomFactorImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.scrollpresenter)
    public var scrollPresenter : WinUI.ScrollPresenter! {
        get { try! _default.get_ScrollPresenterImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.scrollableheight)
    public var scrollableHeight : Double {
        get { try! _default.get_ScrollableHeightImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.scrollablewidth)
    public var scrollableWidth : Double {
        get { try! _default.get_ScrollableWidthImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.state)
    public var state : ScrollingInteractionState {
        get { try! _default.get_StateImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.verticalanchorratio)
    public var verticalAnchorRatio : Double {
        get { try! _default.get_VerticalAnchorRatioImpl() }
        set { try! _default.put_VerticalAnchorRatioImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.verticaloffset)
    public var verticalOffset : Double {
        get { try! _default.get_VerticalOffsetImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.verticalscrollbarvisibility)
    public var verticalScrollBarVisibility : ScrollingScrollBarVisibility {
        get { try! _default.get_VerticalScrollBarVisibilityImpl() }
        set { try! _default.put_VerticalScrollBarVisibilityImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.verticalscrollchainmode)
    public var verticalScrollChainMode : ScrollingChainMode {
        get { try! _default.get_VerticalScrollChainModeImpl() }
        set { try! _default.put_VerticalScrollChainModeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.verticalscrollmode)
    public var verticalScrollMode : ScrollingScrollMode {
        get { try! _default.get_VerticalScrollModeImpl() }
        set { try! _default.put_VerticalScrollModeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.verticalscrollrailmode)
    public var verticalScrollRailMode : ScrollingRailMode {
        get { try! _default.get_VerticalScrollRailModeImpl() }
        set { try! _default.put_VerticalScrollRailModeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.viewportheight)
    public var viewportHeight : Double {
        get { try! _default.get_ViewportHeightImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.viewportwidth)
    public var viewportWidth : Double {
        get { try! _default.get_ViewportWidthImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.zoomchainmode)
    public var zoomChainMode : ScrollingChainMode {
        get { try! _default.get_ZoomChainModeImpl() }
        set { try! _default.put_ZoomChainModeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.zoomfactor)
    public var zoomFactor : Float {
        get { try! _default.get_ZoomFactorImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.zoommode)
    public var zoomMode : ScrollingZoomMode {
        get { try! _default.get_ZoomModeImpl() }
        set { try! _default.put_ZoomModeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.anchorrequested)
    public lazy var anchorRequested : Event<TypedEventHandler<ScrollView?, ScrollingAnchorRequestedEventArgs?>> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_AnchorRequestedImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_AnchorRequestedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.bringingintoview)
    public lazy var bringingIntoView : Event<TypedEventHandler<ScrollView?, ScrollingBringingIntoViewEventArgs?>> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_BringingIntoViewImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_BringingIntoViewImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.extentchanged)
    public lazy var extentChanged : Event<TypedEventHandler<ScrollView?, Any?>> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_ExtentChangedImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_ExtentChangedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.scrollanimationstarting)
    public lazy var scrollAnimationStarting : Event<TypedEventHandler<ScrollView?, ScrollingScrollAnimationStartingEventArgs?>> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_ScrollAnimationStartingImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_ScrollAnimationStartingImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.scrollcompleted)
    public lazy var scrollCompleted : Event<TypedEventHandler<ScrollView?, ScrollingScrollCompletedEventArgs?>> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_ScrollCompletedImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_ScrollCompletedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.statechanged)
    public lazy var stateChanged : Event<TypedEventHandler<ScrollView?, Any?>> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_StateChangedImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_StateChangedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.viewchanged)
    public lazy var viewChanged : Event<TypedEventHandler<ScrollView?, Any?>> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_ViewChangedImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_ViewChangedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.zoomanimationstarting)
    public lazy var zoomAnimationStarting : Event<TypedEventHandler<ScrollView?, ScrollingZoomAnimationStartingEventArgs?>> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_ZoomAnimationStartingImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_ZoomAnimationStartingImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollview.zoomcompleted)
    public lazy var zoomCompleted : Event<TypedEventHandler<ScrollView?, ScrollingZoomCompletedEventArgs?>> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_ZoomCompletedImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_ZoomCompletedImpl($0)
       }
      )
    }()

    internal enum IControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides
        internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IControlOverrides
        internal typealias Class = ScrollView
        internal typealias CodiraProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollView
            internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IScrollView
        }
    }
    internal typealias Composable = IControlOverrides
    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer)
public final class ScrollViewer : WinUI.ContentControl, IScrollAnchorProvider {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IScrollViewer
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer>?) -> ScrollViewer? {
        guard immutable abi = abi else { return Nothing }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public fn queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    override public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Controls.ScrollViewer")))
    }

    private static immutable _IScrollViewerStatics: __ABI_Microsoft_UI_Xaml_Controls.IScrollViewerStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.ScrollViewer"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.gethorizontalscrollbarvisibility)
    public static fn getHorizontalScrollBarVisibility(_ element: WinUI.DependencyObject!) -> ScrollBarVisibility {
        return try! _IScrollViewerStatics.GetHorizontalScrollBarVisibilityImpl(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.sethorizontalscrollbarvisibility)
    public static fn setHorizontalScrollBarVisibility(_ element: WinUI.DependencyObject!, _ horizontalScrollBarVisibility: ScrollBarVisibility) {
        try! _IScrollViewerStatics.SetHorizontalScrollBarVisibilityImpl(element, horizontalScrollBarVisibility)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.getverticalscrollbarvisibility)
    public static fn getVerticalScrollBarVisibility(_ element: WinUI.DependencyObject!) -> ScrollBarVisibility {
        return try! _IScrollViewerStatics.GetVerticalScrollBarVisibilityImpl(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.setverticalscrollbarvisibility)
    public static fn setVerticalScrollBarVisibility(_ element: WinUI.DependencyObject!, _ verticalScrollBarVisibility: ScrollBarVisibility) {
        try! _IScrollViewerStatics.SetVerticalScrollBarVisibilityImpl(element, verticalScrollBarVisibility)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.getishorizontalrailenabled)
    public static fn getIsHorizontalRailEnabled(_ element: WinUI.DependencyObject!) -> Boolean {
        return try! _IScrollViewerStatics.GetIsHorizontalRailEnabledImpl(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.setishorizontalrailenabled)
    public static fn setIsHorizontalRailEnabled(_ element: WinUI.DependencyObject!, _ isHorizontalRailEnabled: Boolean) {
        try! _IScrollViewerStatics.SetIsHorizontalRailEnabledImpl(element, isHorizontalRailEnabled)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.getisverticalrailenabled)
    public static fn getIsVerticalRailEnabled(_ element: WinUI.DependencyObject!) -> Boolean {
        return try! _IScrollViewerStatics.GetIsVerticalRailEnabledImpl(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.setisverticalrailenabled)
    public static fn setIsVerticalRailEnabled(_ element: WinUI.DependencyObject!, _ isVerticalRailEnabled: Boolean) {
        try! _IScrollViewerStatics.SetIsVerticalRailEnabledImpl(element, isVerticalRailEnabled)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.getishorizontalscrollchainingenabled)
    public static fn getIsHorizontalScrollChainingEnabled(_ element: WinUI.DependencyObject!) -> Boolean {
        return try! _IScrollViewerStatics.GetIsHorizontalScrollChainingEnabledImpl(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.setishorizontalscrollchainingenabled)
    public static fn setIsHorizontalScrollChainingEnabled(_ element: WinUI.DependencyObject!, _ isHorizontalScrollChainingEnabled: Boolean) {
        try! _IScrollViewerStatics.SetIsHorizontalScrollChainingEnabledImpl(element, isHorizontalScrollChainingEnabled)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.getisverticalscrollchainingenabled)
    public static fn getIsVerticalScrollChainingEnabled(_ element: WinUI.DependencyObject!) -> Boolean {
        return try! _IScrollViewerStatics.GetIsVerticalScrollChainingEnabledImpl(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.setisverticalscrollchainingenabled)
    public static fn setIsVerticalScrollChainingEnabled(_ element: WinUI.DependencyObject!, _ isVerticalScrollChainingEnabled: Boolean) {
        try! _IScrollViewerStatics.SetIsVerticalScrollChainingEnabledImpl(element, isVerticalScrollChainingEnabled)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.getiszoomchainingenabled)
    public static fn getIsZoomChainingEnabled(_ element: WinUI.DependencyObject!) -> Boolean {
        return try! _IScrollViewerStatics.GetIsZoomChainingEnabledImpl(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.setiszoomchainingenabled)
    public static fn setIsZoomChainingEnabled(_ element: WinUI.DependencyObject!, _ isZoomChainingEnabled: Boolean) {
        try! _IScrollViewerStatics.SetIsZoomChainingEnabledImpl(element, isZoomChainingEnabled)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.getisscrollinertiaenabled)
    public static fn getIsScrollInertiaEnabled(_ element: WinUI.DependencyObject!) -> Boolean {
        return try! _IScrollViewerStatics.GetIsScrollInertiaEnabledImpl(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.setisscrollinertiaenabled)
    public static fn setIsScrollInertiaEnabled(_ element: WinUI.DependencyObject!, _ isScrollInertiaEnabled: Boolean) {
        try! _IScrollViewerStatics.SetIsScrollInertiaEnabledImpl(element, isScrollInertiaEnabled)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.getiszoominertiaenabled)
    public static fn getIsZoomInertiaEnabled(_ element: WinUI.DependencyObject!) -> Boolean {
        return try! _IScrollViewerStatics.GetIsZoomInertiaEnabledImpl(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.setiszoominertiaenabled)
    public static fn setIsZoomInertiaEnabled(_ element: WinUI.DependencyObject!, _ isZoomInertiaEnabled: Boolean) {
        try! _IScrollViewerStatics.SetIsZoomInertiaEnabledImpl(element, isZoomInertiaEnabled)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.gethorizontalscrollmode)
    public static fn getHorizontalScrollMode(_ element: WinUI.DependencyObject!) -> ScrollMode {
        return try! _IScrollViewerStatics.GetHorizontalScrollModeImpl(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.sethorizontalscrollmode)
    public static fn setHorizontalScrollMode(_ element: WinUI.DependencyObject!, _ horizontalScrollMode: ScrollMode) {
        try! _IScrollViewerStatics.SetHorizontalScrollModeImpl(element, horizontalScrollMode)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.getverticalscrollmode)
    public static fn getVerticalScrollMode(_ element: WinUI.DependencyObject!) -> ScrollMode {
        return try! _IScrollViewerStatics.GetVerticalScrollModeImpl(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.setverticalscrollmode)
    public static fn setVerticalScrollMode(_ element: WinUI.DependencyObject!, _ verticalScrollMode: ScrollMode) {
        try! _IScrollViewerStatics.SetVerticalScrollModeImpl(element, verticalScrollMode)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.getzoommode)
    public static fn getZoomMode(_ element: WinUI.DependencyObject!) -> ZoomMode {
        return try! _IScrollViewerStatics.GetZoomModeImpl(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.setzoommode)
    public static fn setZoomMode(_ element: WinUI.DependencyObject!, _ zoomMode: ZoomMode) {
        try! _IScrollViewerStatics.SetZoomModeImpl(element, zoomMode)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.getcancontentrenderoutsidebounds)
    public static fn getCanContentRenderOutsideBounds(_ element: WinUI.DependencyObject!) -> Boolean {
        return try! _IScrollViewerStatics.GetCanContentRenderOutsideBoundsImpl(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.setcancontentrenderoutsidebounds)
    public static fn setCanContentRenderOutsideBounds(_ element: WinUI.DependencyObject!, _ canContentRenderOutsideBounds: Boolean) {
        try! _IScrollViewerStatics.SetCanContentRenderOutsideBoundsImpl(element, canContentRenderOutsideBounds)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.getisdeferredscrollingenabled)
    public static fn getIsDeferredScrollingEnabled(_ element: WinUI.DependencyObject!) -> Boolean {
        return try! _IScrollViewerStatics.GetIsDeferredScrollingEnabledImpl(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.setisdeferredscrollingenabled)
    public static fn setIsDeferredScrollingEnabled(_ element: WinUI.DependencyObject!, _ isDeferredScrollingEnabled: Boolean) {
        try! _IScrollViewerStatics.SetIsDeferredScrollingEnabledImpl(element, isDeferredScrollingEnabled)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.getbringintoviewonfocuschange)
    public static fn getBringIntoViewOnFocusChange(_ element: WinUI.DependencyObject!) -> Boolean {
        return try! _IScrollViewerStatics.GetBringIntoViewOnFocusChangeImpl(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.setbringintoviewonfocuschange)
    public static fn setBringIntoViewOnFocusChange(_ element: WinUI.DependencyObject!, _ bringIntoViewOnFocusChange: Boolean) {
        try! _IScrollViewerStatics.SetBringIntoViewOnFocusChangeImpl(element, bringIntoViewOnFocusChange)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.bringintoviewonfocuschangeproperty)
    public static var bringIntoViewOnFocusChangeProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewerStatics.get_BringIntoViewOnFocusChangePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.cancontentrenderoutsideboundsproperty)
    public static var canContentRenderOutsideBoundsProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewerStatics.get_CanContentRenderOutsideBoundsPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.computedhorizontalscrollbarvisibilityproperty)
    public static var computedHorizontalScrollBarVisibilityProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewerStatics.get_ComputedHorizontalScrollBarVisibilityPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.computedverticalscrollbarvisibilityproperty)
    public static var computedVerticalScrollBarVisibilityProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewerStatics.get_ComputedVerticalScrollBarVisibilityPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.extentheightproperty)
    public static var extentHeightProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewerStatics.get_ExtentHeightPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.extentwidthproperty)
    public static var extentWidthProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewerStatics.get_ExtentWidthPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.horizontalanchorratioproperty)
    public static var horizontalAnchorRatioProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewerStatics.get_HorizontalAnchorRatioPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.horizontaloffsetproperty)
    public static var horizontalOffsetProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewerStatics.get_HorizontalOffsetPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.horizontalscrollbarvisibilityproperty)
    public static var horizontalScrollBarVisibilityProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewerStatics.get_HorizontalScrollBarVisibilityPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.horizontalscrollmodeproperty)
    public static var horizontalScrollModeProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewerStatics.get_HorizontalScrollModePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.horizontalsnappointsalignmentproperty)
    public static var horizontalSnapPointsAlignmentProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewerStatics.get_HorizontalSnapPointsAlignmentPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.horizontalsnappointstypeproperty)
    public static var horizontalSnapPointsTypeProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewerStatics.get_HorizontalSnapPointsTypePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.isdeferredscrollingenabledproperty)
    public static var isDeferredScrollingEnabledProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewerStatics.get_IsDeferredScrollingEnabledPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.ishorizontalrailenabledproperty)
    public static var isHorizontalRailEnabledProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewerStatics.get_IsHorizontalRailEnabledPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.ishorizontalscrollchainingenabledproperty)
    public static var isHorizontalScrollChainingEnabledProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewerStatics.get_IsHorizontalScrollChainingEnabledPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.isscrollinertiaenabledproperty)
    public static var isScrollInertiaEnabledProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewerStatics.get_IsScrollInertiaEnabledPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.isverticalrailenabledproperty)
    public static var isVerticalRailEnabledProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewerStatics.get_IsVerticalRailEnabledPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.isverticalscrollchainingenabledproperty)
    public static var isVerticalScrollChainingEnabledProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewerStatics.get_IsVerticalScrollChainingEnabledPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.iszoomchainingenabledproperty)
    public static var isZoomChainingEnabledProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewerStatics.get_IsZoomChainingEnabledPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.iszoominertiaenabledproperty)
    public static var isZoomInertiaEnabledProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewerStatics.get_IsZoomInertiaEnabledPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.leftheaderproperty)
    public static var leftHeaderProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewerStatics.get_LeftHeaderPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.maxzoomfactorproperty)
    public static var maxZoomFactorProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewerStatics.get_MaxZoomFactorPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.minzoomfactorproperty)
    public static var minZoomFactorProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewerStatics.get_MinZoomFactorPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.reduceviewportforcoreinputviewocclusionsproperty)
    public static var reduceViewportForCoreInputViewOcclusionsProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewerStatics.get_ReduceViewportForCoreInputViewOcclusionsPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.scrollableheightproperty)
    public static var scrollableHeightProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewerStatics.get_ScrollableHeightPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.scrollablewidthproperty)
    public static var scrollableWidthProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewerStatics.get_ScrollableWidthPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.topheaderproperty)
    public static var topHeaderProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewerStatics.get_TopHeaderPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.topleftheaderproperty)
    public static var topLeftHeaderProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewerStatics.get_TopLeftHeaderPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.verticalanchorratioproperty)
    public static var verticalAnchorRatioProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewerStatics.get_VerticalAnchorRatioPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.verticaloffsetproperty)
    public static var verticalOffsetProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewerStatics.get_VerticalOffsetPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.verticalscrollbarvisibilityproperty)
    public static var verticalScrollBarVisibilityProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewerStatics.get_VerticalScrollBarVisibilityPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.verticalscrollmodeproperty)
    public static var verticalScrollModeProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewerStatics.get_VerticalScrollModePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.verticalsnappointsalignmentproperty)
    public static var verticalSnapPointsAlignmentProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewerStatics.get_VerticalSnapPointsAlignmentPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.verticalsnappointstypeproperty)
    public static var verticalSnapPointsTypeProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewerStatics.get_VerticalSnapPointsTypePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.viewportheightproperty)
    public static var viewportHeightProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewerStatics.get_ViewportHeightPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.viewportwidthproperty)
    public static var viewportWidthProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewerStatics.get_ViewportWidthPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.zoomfactorproperty)
    public static var zoomFactorProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewerStatics.get_ZoomFactorPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.zoommodeproperty)
    public static var zoomModeProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewerStatics.get_ZoomModePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.zoomsnappointsproperty)
    public static var zoomSnapPointsProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewerStatics.get_ZoomSnapPointsPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.zoomsnappointstypeproperty)
    public static var zoomSnapPointsTypeProperty : WinUI.DependencyProperty! {
        get { try! _IScrollViewerStatics.get_ZoomSnapPointsTypePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.scrolltohorizontaloffset)
    public fn scrollToHorizontalOffset(_ offset: Double) throws {
        try _default.ScrollToHorizontalOffsetImpl(offset)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.scrolltoverticaloffset)
    public fn scrollToVerticalOffset(_ offset: Double) throws {
        try _default.ScrollToVerticalOffsetImpl(offset)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.zoomtofactor)
    public fn zoomToFactor(_ factor: Float) throws {
        try _default.ZoomToFactorImpl(factor)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.changeview)
    public fn changeView(_ horizontalOffset: Double?, _ verticalOffset: Double?, _ zoomFactor: Float?) throws -> Boolean {
        try _default.ChangeViewImpl(horizontalOffset, verticalOffset, zoomFactor)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.changeview)
    public fn changeView(_ horizontalOffset: Double?, _ verticalOffset: Double?, _ zoomFactor: Float?, _ disableAnimation: Boolean) throws -> Boolean {
        try _default.ChangeViewWithOptionalAnimationImpl(horizontalOffset, verticalOffset, zoomFactor, disableAnimation)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.invalidatescrollinfo)
    public fn invalidateScrollInfo() throws {
        try _default.InvalidateScrollInfoImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.bringintoviewonfocuschange)
    public var bringIntoViewOnFocusChange : Boolean {
        get { try! _default.get_BringIntoViewOnFocusChangeImpl() }
        set { try! _default.put_BringIntoViewOnFocusChangeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.cancontentrenderoutsidebounds)
    public var canContentRenderOutsideBounds : Boolean {
        get { try! _default.get_CanContentRenderOutsideBoundsImpl() }
        set { try! _default.put_CanContentRenderOutsideBoundsImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.computedhorizontalscrollbarvisibility)
    public var computedHorizontalScrollBarVisibility : WinUI.Visibility {
        get { try! _default.get_ComputedHorizontalScrollBarVisibilityImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.computedverticalscrollbarvisibility)
    public var computedVerticalScrollBarVisibility : WinUI.Visibility {
        get { try! _default.get_ComputedVerticalScrollBarVisibilityImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.extentheight)
    public var extentHeight : Double {
        get { try! _default.get_ExtentHeightImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.extentwidth)
    public var extentWidth : Double {
        get { try! _default.get_ExtentWidthImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.horizontalanchorratio)
    public var horizontalAnchorRatio : Double {
        get { try! _default.get_HorizontalAnchorRatioImpl() }
        set { try! _default.put_HorizontalAnchorRatioImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.horizontaloffset)
    public var horizontalOffset : Double {
        get { try! _default.get_HorizontalOffsetImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.horizontalscrollbarvisibility)
    public var horizontalScrollBarVisibility : ScrollBarVisibility {
        get { try! _default.get_HorizontalScrollBarVisibilityImpl() }
        set { try! _default.put_HorizontalScrollBarVisibilityImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.horizontalscrollmode)
    public var horizontalScrollMode : ScrollMode {
        get { try! _default.get_HorizontalScrollModeImpl() }
        set { try! _default.put_HorizontalScrollModeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.horizontalsnappointsalignment)
    public var horizontalSnapPointsAlignment : WinUI.SnapPointsAlignment {
        get { try! _default.get_HorizontalSnapPointsAlignmentImpl() }
        set { try! _default.put_HorizontalSnapPointsAlignmentImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.horizontalsnappointstype)
    public var horizontalSnapPointsType : SnapPointsType {
        get { try! _default.get_HorizontalSnapPointsTypeImpl() }
        set { try! _default.put_HorizontalSnapPointsTypeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.isdeferredscrollingenabled)
    public var isDeferredScrollingEnabled : Boolean {
        get { try! _default.get_IsDeferredScrollingEnabledImpl() }
        set { try! _default.put_IsDeferredScrollingEnabledImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.ishorizontalrailenabled)
    public var isHorizontalRailEnabled : Boolean {
        get { try! _default.get_IsHorizontalRailEnabledImpl() }
        set { try! _default.put_IsHorizontalRailEnabledImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.ishorizontalscrollchainingenabled)
    public var isHorizontalScrollChainingEnabled : Boolean {
        get { try! _default.get_IsHorizontalScrollChainingEnabledImpl() }
        set { try! _default.put_IsHorizontalScrollChainingEnabledImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.isscrollinertiaenabled)
    public var isScrollInertiaEnabled : Boolean {
        get { try! _default.get_IsScrollInertiaEnabledImpl() }
        set { try! _default.put_IsScrollInertiaEnabledImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.isverticalrailenabled)
    public var isVerticalRailEnabled : Boolean {
        get { try! _default.get_IsVerticalRailEnabledImpl() }
        set { try! _default.put_IsVerticalRailEnabledImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.isverticalscrollchainingenabled)
    public var isVerticalScrollChainingEnabled : Boolean {
        get { try! _default.get_IsVerticalScrollChainingEnabledImpl() }
        set { try! _default.put_IsVerticalScrollChainingEnabledImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.iszoomchainingenabled)
    public var isZoomChainingEnabled : Boolean {
        get { try! _default.get_IsZoomChainingEnabledImpl() }
        set { try! _default.put_IsZoomChainingEnabledImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.iszoominertiaenabled)
    public var isZoomInertiaEnabled : Boolean {
        get { try! _default.get_IsZoomInertiaEnabledImpl() }
        set { try! _default.put_IsZoomInertiaEnabledImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.leftheader)
    public var leftHeader : WinUI.UIElement! {
        get { try! _default.get_LeftHeaderImpl() }
        set { try! _default.put_LeftHeaderImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.maxzoomfactor)
    public var maxZoomFactor : Float {
        get { try! _default.get_MaxZoomFactorImpl() }
        set { try! _default.put_MaxZoomFactorImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.minzoomfactor)
    public var minZoomFactor : Float {
        get { try! _default.get_MinZoomFactorImpl() }
        set { try! _default.put_MinZoomFactorImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.reduceviewportforcoreinputviewocclusions)
    public var reduceViewportForCoreInputViewOcclusions : Boolean {
        get { try! _default.get_ReduceViewportForCoreInputViewOcclusionsImpl() }
        set { try! _default.put_ReduceViewportForCoreInputViewOcclusionsImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.scrollableheight)
    public var scrollableHeight : Double {
        get { try! _default.get_ScrollableHeightImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.scrollablewidth)
    public var scrollableWidth : Double {
        get { try! _default.get_ScrollableWidthImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.topheader)
    public var topHeader : WinUI.UIElement! {
        get { try! _default.get_TopHeaderImpl() }
        set { try! _default.put_TopHeaderImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.topleftheader)
    public var topLeftHeader : WinUI.UIElement! {
        get { try! _default.get_TopLeftHeaderImpl() }
        set { try! _default.put_TopLeftHeaderImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.verticalanchorratio)
    public var verticalAnchorRatio : Double {
        get { try! _default.get_VerticalAnchorRatioImpl() }
        set { try! _default.put_VerticalAnchorRatioImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.verticaloffset)
    public var verticalOffset : Double {
        get { try! _default.get_VerticalOffsetImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.verticalscrollbarvisibility)
    public var verticalScrollBarVisibility : ScrollBarVisibility {
        get { try! _default.get_VerticalScrollBarVisibilityImpl() }
        set { try! _default.put_VerticalScrollBarVisibilityImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.verticalscrollmode)
    public var verticalScrollMode : ScrollMode {
        get { try! _default.get_VerticalScrollModeImpl() }
        set { try! _default.put_VerticalScrollModeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.verticalsnappointsalignment)
    public var verticalSnapPointsAlignment : WinUI.SnapPointsAlignment {
        get { try! _default.get_VerticalSnapPointsAlignmentImpl() }
        set { try! _default.put_VerticalSnapPointsAlignmentImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.verticalsnappointstype)
    public var verticalSnapPointsType : SnapPointsType {
        get { try! _default.get_VerticalSnapPointsTypeImpl() }
        set { try! _default.put_VerticalSnapPointsTypeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.viewportheight)
    public var viewportHeight : Double {
        get { try! _default.get_ViewportHeightImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.viewportwidth)
    public var viewportWidth : Double {
        get { try! _default.get_ViewportWidthImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.zoomfactor)
    public var zoomFactor : Float {
        get { try! _default.get_ZoomFactorImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.zoommode)
    public var zoomMode : ZoomMode {
        get { try! _default.get_ZoomModeImpl() }
        set { try! _default.put_ZoomModeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.zoomsnappoints)
    public var zoomSnapPoints : WindowsFoundation.AnyIVector<Float>! {
        get { try! _default.get_ZoomSnapPointsImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.zoomsnappointstype)
    public var zoomSnapPointsType : SnapPointsType {
        get { try! _default.get_ZoomSnapPointsTypeImpl() }
        set { try! _default.put_ZoomSnapPointsTypeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.anchorrequested)
    public lazy var anchorRequested : Event<TypedEventHandler<ScrollViewer?, AnchorRequestedEventArgs?>> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_AnchorRequestedImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_AnchorRequestedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.directmanipulationcompleted)
    public lazy var directManipulationCompleted : Event<EventHandler<Any?>> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_DirectManipulationCompletedImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_DirectManipulationCompletedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.directmanipulationstarted)
    public lazy var directManipulationStarted : Event<EventHandler<Any?>> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_DirectManipulationStartedImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_DirectManipulationStartedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.viewchanged)
    public lazy var viewChanged : Event<EventHandler<ScrollViewerViewChangedEventArgs?>> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_ViewChangedImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_ViewChangedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.viewchanging)
    public lazy var viewChanging : Event<EventHandler<ScrollViewerViewChangingEventArgs?>> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_ViewChangingImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_ViewChangingImpl($0)
       }
      )
    }()

    private lazy var _IScrollAnchorProvider: __ABI_Microsoft_UI_Xaml_Controls.IScrollAnchorProvider! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.registeranchorcandidate)
    public fn registerAnchorCandidate(_ element: WinUI.UIElement!) throws {
        try _IScrollAnchorProvider.RegisterAnchorCandidateImpl(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.unregisteranchorcandidate)
    public fn unregisterAnchorCandidate(_ element: WinUI.UIElement!) throws {
        try _IScrollAnchorProvider.UnregisterAnchorCandidateImpl(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewer.currentanchor)
    public var currentAnchor : WinUI.UIElement! {
        get { try! _IScrollAnchorProvider.get_CurrentAnchorImpl() }
    }

    internal enum IContentControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIContentControlOverrides
        internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IContentControlOverrides
        internal typealias Class = ScrollViewer
        internal typealias CodiraProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewer
            internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IScrollViewer
        }
    }
    internal typealias Composable = IContentControlOverrides
    deinit {
        _default = Nothing
        _IScrollAnchorProvider = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewerview)
public final class ScrollViewerView : WinRTClass {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IScrollViewerView
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerView
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerView>?) -> ScrollViewerView? {
        guard immutable abi = abi else { return Nothing }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewerview.horizontaloffset)
    public var horizontalOffset : Double {
        get { try! _default.get_HorizontalOffsetImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewerview.verticaloffset)
    public var verticalOffset : Double {
        get { try! _default.get_VerticalOffsetImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewerview.zoomfactor)
    public var zoomFactor : Float {
        get { try! _default.get_ZoomFactorImpl() }
    }

    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewerviewchangedeventargs)
public final class ScrollViewerViewChangedEventArgs : WinRTClass {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IScrollViewerViewChangedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerViewChangedEventArgs
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerViewChangedEventArgs>?) -> ScrollViewerViewChangedEventArgs? {
        guard immutable abi = abi else { return Nothing }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public init() {
        super.init(try! RoActivateInstance(HString("Microsoft.UI.Xaml.Controls.ScrollViewerViewChangedEventArgs")))
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewerviewchangedeventargs.isintermediate)
    public var isIntermediate : Boolean {
        get { try! _default.get_IsIntermediateImpl() }
    }

    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewerviewchangingeventargs)
public final class ScrollViewerViewChangingEventArgs : WinRTClass {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IScrollViewerViewChangingEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerViewChangingEventArgs
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollViewerViewChangingEventArgs>?) -> ScrollViewerViewChangingEventArgs? {
        guard immutable abi = abi else { return Nothing }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewerviewchangingeventargs.finalview)
    public var finalView : ScrollViewerView! {
        get { try! _default.get_FinalViewImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewerviewchangingeventargs.isinertial)
    public var isInertial : Boolean {
        get { try! _default.get_IsInertialImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollviewerviewchangingeventargs.nextview)
    public var nextView : ScrollViewerView! {
        get { try! _default.get_NextViewImpl() }
    }

    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollinganchorrequestedeventargs)
public final class ScrollingAnchorRequestedEventArgs : WinRTClass {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IScrollingAnchorRequestedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingAnchorRequestedEventArgs
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingAnchorRequestedEventArgs>?) -> ScrollingAnchorRequestedEventArgs? {
        guard immutable abi = abi else { return Nothing }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollinganchorrequestedeventargs.anchorcandidates)
    public var anchorCandidates : WindowsFoundation.AnyIVector<WinUI.UIElement?>! {
        get { try! _default.get_AnchorCandidatesImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollinganchorrequestedeventargs.anchorelement)
    public var anchorElement : WinUI.UIElement! {
        get { try! _default.get_AnchorElementImpl() }
        set { try! _default.put_AnchorElementImpl(newValue) }
    }

    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollingbringingintovieweventargs)
public final class ScrollingBringingIntoViewEventArgs : WinRTClass {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IScrollingBringingIntoViewEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingBringingIntoViewEventArgs
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingBringingIntoViewEventArgs>?) -> ScrollingBringingIntoViewEventArgs? {
        guard immutable abi = abi else { return Nothing }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollingbringingintovieweventargs.cancel)
    public var cancel : Boolean {
        get { try! _default.get_CancelImpl() }
        set { try! _default.put_CancelImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollingbringingintovieweventargs.correlationid)
    public var correlationId : Int32 {
        get { try! _default.get_CorrelationIdImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollingbringingintovieweventargs.requesteventargs)
    public var requestEventArgs : WinUI.BringIntoViewRequestedEventArgs! {
        get { try! _default.get_RequestEventArgsImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollingbringingintovieweventargs.snappointsmode)
    public var snapPointsMode : ScrollingSnapPointsMode {
        get { try! _default.get_SnapPointsModeImpl() }
        set { try! _default.put_SnapPointsModeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollingbringingintovieweventargs.targethorizontaloffset)
    public var targetHorizontalOffset : Double {
        get { try! _default.get_TargetHorizontalOffsetImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollingbringingintovieweventargs.targetverticaloffset)
    public var targetVerticalOffset : Double {
        get { try! _default.get_TargetVerticalOffsetImpl() }
    }

    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollingscrollanimationstartingeventargs)
public final class ScrollingScrollAnimationStartingEventArgs : WinRTClass {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IScrollingScrollAnimationStartingEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingScrollAnimationStartingEventArgs
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingScrollAnimationStartingEventArgs>?) -> ScrollingScrollAnimationStartingEventArgs? {
        guard immutable abi = abi else { return Nothing }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollingscrollanimationstartingeventargs.animation)
    public var animation : WinAppSDK.CompositionAnimation! {
        get { try! _default.get_AnimationImpl() }
        set { try! _default.put_AnimationImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollingscrollanimationstartingeventargs.correlationid)
    public var correlationId : Int32 {
        get { try! _default.get_CorrelationIdImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollingscrollanimationstartingeventargs.endposition)
    public var endPosition : WindowsFoundation.Vector2 {
        get { try! _default.get_EndPositionImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollingscrollanimationstartingeventargs.startposition)
    public var startPosition : WindowsFoundation.Vector2 {
        get { try! _default.get_StartPositionImpl() }
    }

    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollingscrollcompletedeventargs)
public final class ScrollingScrollCompletedEventArgs : WinRTClass {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IScrollingScrollCompletedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingScrollCompletedEventArgs
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingScrollCompletedEventArgs>?) -> ScrollingScrollCompletedEventArgs? {
        guard immutable abi = abi else { return Nothing }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollingscrollcompletedeventargs.correlationid)
    public var correlationId : Int32 {
        get { try! _default.get_CorrelationIdImpl() }
    }

    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollingscrolloptions)
open class ScrollingScrollOptions : WinRTClass {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IScrollingScrollOptions
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingScrollOptions
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingScrollOptions>?) -> ScrollingScrollOptions? {
        guard immutable abi = abi else { return Nothing }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    @_spi(WinRTInternal)
    public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.CodiraABI)
    {
        super.init()
        MakeComposed(composing: composing, (this as! Composable.Class), createCallback)
    }
    override open fn queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IScrollingScrollOptionsFactory : __ABI_Microsoft_UI_Xaml_Controls.IScrollingScrollOptionsFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.ScrollingScrollOptions"))

    public init(_ animationMode: ScrollingAnimationMode) {
        super.init()
        MakeComposed(composing: Self.Composable.this, this) { baseInterface, innerInterface in 
            try! Self._IScrollingScrollOptionsFactory.CreateInstanceImpl(animationMode, baseInterface, &innerInterface)
        }
    }

    public init(_ animationMode: ScrollingAnimationMode, _ snapPointsMode: ScrollingSnapPointsMode) {
        super.init()
        MakeComposed(composing: Self.Composable.this, this) { baseInterface, innerInterface in 
            try! Self._IScrollingScrollOptionsFactory.CreateInstance2Impl(animationMode, snapPointsMode, baseInterface, &innerInterface)
        }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollingscrolloptions.animationmode)
    public var animationMode : ScrollingAnimationMode {
        get { try! _default.get_AnimationModeImpl() }
        set { try! _default.put_AnimationModeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollingscrolloptions.snappointsmode)
    public var snapPointsMode : ScrollingSnapPointsMode {
        get { try! _default.get_SnapPointsModeImpl() }
        set { try! _default.put_SnapPointsModeImpl(newValue) }
    }

    internal enum IScrollingScrollOptions : ComposableImpl {
        internal typealias CABI = C_IInspectable
        internal typealias CodiraABI = WindowsFoundation.IInspectable
        internal typealias Class = ScrollingScrollOptions
        internal typealias CodiraProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingScrollOptions
            internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IScrollingScrollOptions
        }
    }
    internal typealias Composable = IScrollingScrollOptions
    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollingzoomanimationstartingeventargs)
public final class ScrollingZoomAnimationStartingEventArgs : WinRTClass {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IScrollingZoomAnimationStartingEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingZoomAnimationStartingEventArgs
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingZoomAnimationStartingEventArgs>?) -> ScrollingZoomAnimationStartingEventArgs? {
        guard immutable abi = abi else { return Nothing }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollingzoomanimationstartingeventargs.animation)
    public var animation : WinAppSDK.CompositionAnimation! {
        get { try! _default.get_AnimationImpl() }
        set { try! _default.put_AnimationImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollingzoomanimationstartingeventargs.centerpoint)
    public var centerPoint : WindowsFoundation.Vector2 {
        get { try! _default.get_CenterPointImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollingzoomanimationstartingeventargs.correlationid)
    public var correlationId : Int32 {
        get { try! _default.get_CorrelationIdImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollingzoomanimationstartingeventargs.endzoomfactor)
    public var endZoomFactor : Float {
        get { try! _default.get_EndZoomFactorImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollingzoomanimationstartingeventargs.startzoomfactor)
    public var startZoomFactor : Float {
        get { try! _default.get_StartZoomFactorImpl() }
    }

    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollingzoomcompletedeventargs)
public final class ScrollingZoomCompletedEventArgs : WinRTClass {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IScrollingZoomCompletedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingZoomCompletedEventArgs
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingZoomCompletedEventArgs>?) -> ScrollingZoomCompletedEventArgs? {
        guard immutable abi = abi else { return Nothing }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollingzoomcompletedeventargs.correlationid)
    public var correlationId : Int32 {
        get { try! _default.get_CorrelationIdImpl() }
    }

    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollingzoomoptions)
open class ScrollingZoomOptions : WinRTClass {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IScrollingZoomOptions
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingZoomOptions
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingZoomOptions>?) -> ScrollingZoomOptions? {
        guard immutable abi = abi else { return Nothing }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    @_spi(WinRTInternal)
    public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.CodiraABI)
    {
        super.init()
        MakeComposed(composing: composing, (this as! Composable.Class), createCallback)
    }
    override open fn queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IScrollingZoomOptionsFactory : __ABI_Microsoft_UI_Xaml_Controls.IScrollingZoomOptionsFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.ScrollingZoomOptions"))

    public init(_ animationMode: ScrollingAnimationMode) {
        super.init()
        MakeComposed(composing: Self.Composable.this, this) { baseInterface, innerInterface in 
            try! Self._IScrollingZoomOptionsFactory.CreateInstanceImpl(animationMode, baseInterface, &innerInterface)
        }
    }

    public init(_ animationMode: ScrollingAnimationMode, _ snapPointsMode: ScrollingSnapPointsMode) {
        super.init()
        MakeComposed(composing: Self.Composable.this, this) { baseInterface, innerInterface in 
            try! Self._IScrollingZoomOptionsFactory.CreateInstance2Impl(animationMode, snapPointsMode, baseInterface, &innerInterface)
        }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollingzoomoptions.animationmode)
    public var animationMode : ScrollingAnimationMode {
        get { try! _default.get_AnimationModeImpl() }
        set { try! _default.put_AnimationModeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.scrollingzoomoptions.snappointsmode)
    public var snapPointsMode : ScrollingSnapPointsMode {
        get { try! _default.get_SnapPointsModeImpl() }
        set { try! _default.put_SnapPointsModeImpl(newValue) }
    }

    internal enum IScrollingZoomOptions : ComposableImpl {
        internal typealias CABI = C_IInspectable
        internal typealias CodiraABI = WindowsFoundation.IInspectable
        internal typealias Class = ScrollingZoomOptions
        internal typealias CodiraProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIScrollingZoomOptions
            internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IScrollingZoomOptions
        }
    }
    internal typealias Composable = IScrollingZoomOptions
    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.selectionchangedeventargs)
open class SelectionChangedEventArgs : WinUI.RoutedEventArgs {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.ISelectionChangedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISelectionChangedEventArgs
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CISelectionChangedEventArgs>?) -> SelectionChangedEventArgs? {
        guard immutable abi = abi else { return Nothing }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.CodiraABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open fn queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _ISelectionChangedEventArgsFactory : __ABI_Microsoft_UI_Xaml_Controls.ISelectionChangedEventArgsFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.SelectionChangedEventArgs"))

    public init(_ removedItems: WindowsFoundation.AnyIVector<Any?>!, _ addedItems: WindowsFoundation.AnyIVector<Any?>!) {
        super.init(composing: Self.Composable.this) { baseInterface, innerInterface in 
            try! Self._ISelectionChangedEventArgsFactory.CreateInstanceWithRemovedItemsAndAddedItemsImpl(removedItems, addedItems, baseInterface, &innerInterface)
        }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.selectionchangedeventargs.addeditems)
    public var addedItems : WindowsFoundation.AnyIVector<Any?>! {
        get { try! _default.get_AddedItemsImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.selectionchangedeventargs.removeditems)
    public var removedItems : WindowsFoundation.AnyIVector<Any?>! {
        get { try! _default.get_RemovedItemsImpl() }
    }

    internal enum ISelectionChangedEventArgs : ComposableImpl {
        internal typealias CABI = C_IInspectable
        internal typealias CodiraABI = WindowsFoundation.IInspectable
        internal typealias Class = SelectionChangedEventArgs
        internal typealias CodiraProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISelectionChangedEventArgs
            internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.ISelectionChangedEventArgs
        }
    }
    internal typealias Composable = ISelectionChangedEventArgs
    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.semanticzoom)
public final class SemanticZoom : WinUI.Control {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.ISemanticZoom
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoom
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoom>?) -> SemanticZoom? {
        guard immutable abi = abi else { return Nothing }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Controls.SemanticZoom")))
    }

    private static immutable _ISemanticZoomStatics: __ABI_Microsoft_UI_Xaml_Controls.ISemanticZoomStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.SemanticZoom"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.semanticzoom.canchangeviewsproperty)
    public static var canChangeViewsProperty : WinUI.DependencyProperty! {
        get { try! _ISemanticZoomStatics.get_CanChangeViewsPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.semanticzoom.iszoomoutbuttonenabledproperty)
    public static var isZoomOutButtonEnabledProperty : WinUI.DependencyProperty! {
        get { try! _ISemanticZoomStatics.get_IsZoomOutButtonEnabledPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.semanticzoom.iszoomedinviewactiveproperty)
    public static var isZoomedInViewActiveProperty : WinUI.DependencyProperty! {
        get { try! _ISemanticZoomStatics.get_IsZoomedInViewActivePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.semanticzoom.zoomedinviewproperty)
    public static var zoomedInViewProperty : WinUI.DependencyProperty! {
        get { try! _ISemanticZoomStatics.get_ZoomedInViewPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.semanticzoom.zoomedoutviewproperty)
    public static var zoomedOutViewProperty : WinUI.DependencyProperty! {
        get { try! _ISemanticZoomStatics.get_ZoomedOutViewPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.semanticzoom.toggleactiveview)
    public fn toggleActiveView() throws {
        try _default.ToggleActiveViewImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.semanticzoom.canchangeviews)
    public var canChangeViews : Boolean {
        get { try! _default.get_CanChangeViewsImpl() }
        set { try! _default.put_CanChangeViewsImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.semanticzoom.iszoomoutbuttonenabled)
    public var isZoomOutButtonEnabled : Boolean {
        get { try! _default.get_IsZoomOutButtonEnabledImpl() }
        set { try! _default.put_IsZoomOutButtonEnabledImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.semanticzoom.iszoomedinviewactive)
    public var isZoomedInViewActive : Boolean {
        get { try! _default.get_IsZoomedInViewActiveImpl() }
        set { try! _default.put_IsZoomedInViewActiveImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.semanticzoom.zoomedinview)
    public var zoomedInView : AnyISemanticZoomInformation! {
        get { try! _default.get_ZoomedInViewImpl() }
        set { try! _default.put_ZoomedInViewImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.semanticzoom.zoomedoutview)
    public var zoomedOutView : AnyISemanticZoomInformation! {
        get { try! _default.get_ZoomedOutViewImpl() }
        set { try! _default.put_ZoomedOutViewImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.semanticzoom.viewchangecompleted)
    public lazy var viewChangeCompleted : Event<SemanticZoomViewChangedEventHandler> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_ViewChangeCompletedImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_ViewChangeCompletedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.semanticzoom.viewchangestarted)
    public lazy var viewChangeStarted : Event<SemanticZoomViewChangedEventHandler> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_ViewChangeStartedImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_ViewChangeStartedImpl($0)
       }
      )
    }()

    internal enum IControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides
        internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IControlOverrides
        internal typealias Class = SemanticZoom
        internal typealias CodiraProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoom
            internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.ISemanticZoom
        }
    }
    internal typealias Composable = IControlOverrides
    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.semanticzoomlocation)
public final class SemanticZoomLocation : WinRTClass {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.ISemanticZoomLocation
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoomLocation
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoomLocation>?) -> SemanticZoomLocation? {
        guard immutable abi = abi else { return Nothing }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public init() {
        super.init(try! RoActivateInstance(HString("Microsoft.UI.Xaml.Controls.SemanticZoomLocation")))
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.semanticzoomlocation.bounds)
    public var bounds : WindowsFoundation.Rect {
        get { try! _default.get_BoundsImpl() }
        set { try! _default.put_BoundsImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.semanticzoomlocation.item)
    public var item : Any! {
        get { try! _default.get_ItemImpl() }
        set { try! _default.put_ItemImpl(newValue) }
    }

    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.semanticzoomviewchangedeventargs)
public final class SemanticZoomViewChangedEventArgs : WinRTClass {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.ISemanticZoomViewChangedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoomViewChangedEventArgs
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CISemanticZoomViewChangedEventArgs>?) -> SemanticZoomViewChangedEventArgs? {
        guard immutable abi = abi else { return Nothing }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public init() {
        super.init(try! RoActivateInstance(HString("Microsoft.UI.Xaml.Controls.SemanticZoomViewChangedEventArgs")))
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.semanticzoomviewchangedeventargs.destinationitem)
    public var destinationItem : SemanticZoomLocation! {
        get { try! _default.get_DestinationItemImpl() }
        set { try! _default.put_DestinationItemImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.semanticzoomviewchangedeventargs.issourcezoomedinview)
    public var isSourceZoomedInView : Boolean {
        get { try! _default.get_IsSourceZoomedInViewImpl() }
        set { try! _default.put_IsSourceZoomedInViewImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.semanticzoomviewchangedeventargs.sourceitem)
    public var sourceItem : SemanticZoomLocation! {
        get { try! _default.get_SourceItemImpl() }
        set { try! _default.put_SourceItemImpl(newValue) }
    }

    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.slider)
open class Slider : WinUI.RangeBase {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.ISlider
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISlider
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CISlider>?) -> Slider? {
        guard immutable abi = abi else { return Nothing }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.CodiraABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open fn queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _ISliderFactory : __ABI_Microsoft_UI_Xaml_Controls.ISliderFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.Slider"))

    override public init() {
        super.init(composing: Self.Composable.this) { baseInterface, innerInterface in 
            try! Self._ISliderFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static immutable _ISliderStatics: __ABI_Microsoft_UI_Xaml_Controls.ISliderStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.Slider"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.slider.headerproperty)
    public class var headerProperty : WinUI.DependencyProperty! {
        get { try! _ISliderStatics.get_HeaderPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.slider.headertemplateproperty)
    public class var headerTemplateProperty : WinUI.DependencyProperty! {
        get { try! _ISliderStatics.get_HeaderTemplatePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.slider.intermediatevalueproperty)
    public class var intermediateValueProperty : WinUI.DependencyProperty! {
        get { try! _ISliderStatics.get_IntermediateValuePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.slider.isdirectionreversedproperty)
    public class var isDirectionReversedProperty : WinUI.DependencyProperty! {
        get { try! _ISliderStatics.get_IsDirectionReversedPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.slider.isthumbtooltipenabledproperty)
    public class var isThumbToolTipEnabledProperty : WinUI.DependencyProperty! {
        get { try! _ISliderStatics.get_IsThumbToolTipEnabledPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.slider.orientationproperty)
    public class var orientationProperty : WinUI.DependencyProperty! {
        get { try! _ISliderStatics.get_OrientationPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.slider.snapstoproperty)
    public class var snapsToProperty : WinUI.DependencyProperty! {
        get { try! _ISliderStatics.get_SnapsToPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.slider.stepfrequencyproperty)
    public class var stepFrequencyProperty : WinUI.DependencyProperty! {
        get { try! _ISliderStatics.get_StepFrequencyPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.slider.thumbtooltipvalueconverterproperty)
    public class var thumbToolTipValueConverterProperty : WinUI.DependencyProperty! {
        get { try! _ISliderStatics.get_ThumbToolTipValueConverterPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.slider.tickfrequencyproperty)
    public class var tickFrequencyProperty : WinUI.DependencyProperty! {
        get { try! _ISliderStatics.get_TickFrequencyPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.slider.tickplacementproperty)
    public class var tickPlacementProperty : WinUI.DependencyProperty! {
        get { try! _ISliderStatics.get_TickPlacementPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.slider.header)
    public var header : Any! {
        get { try! _default.get_HeaderImpl() }
        set { try! _default.put_HeaderImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.slider.headertemplate)
    public var headerTemplate : WinUI.DataTemplate! {
        get { try! _default.get_HeaderTemplateImpl() }
        set { try! _default.put_HeaderTemplateImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.slider.intermediatevalue)
    public var intermediateValue : Double {
        get { try! _default.get_IntermediateValueImpl() }
        set { try! _default.put_IntermediateValueImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.slider.isdirectionreversed)
    public var isDirectionReversed : Boolean {
        get { try! _default.get_IsDirectionReversedImpl() }
        set { try! _default.put_IsDirectionReversedImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.slider.isthumbtooltipenabled)
    public var isThumbToolTipEnabled : Boolean {
        get { try! _default.get_IsThumbToolTipEnabledImpl() }
        set { try! _default.put_IsThumbToolTipEnabledImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.slider.orientation)
    public var orientation : Orientation {
        get { try! _default.get_OrientationImpl() }
        set { try! _default.put_OrientationImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.slider.snapsto)
    public var snapsTo : WinUI.SliderSnapsTo {
        get { try! _default.get_SnapsToImpl() }
        set { try! _default.put_SnapsToImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.slider.stepfrequency)
    public var stepFrequency : Double {
        get { try! _default.get_StepFrequencyImpl() }
        set { try! _default.put_StepFrequencyImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.slider.thumbtooltipvalueconverter)
    public var thumbToolTipValueConverter : WinUI.AnyIValueConverter! {
        get { try! _default.get_ThumbToolTipValueConverterImpl() }
        set { try! _default.put_ThumbToolTipValueConverterImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.slider.tickfrequency)
    public var tickFrequency : Double {
        get { try! _default.get_TickFrequencyImpl() }
        set { try! _default.put_TickFrequencyImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.slider.tickplacement)
    public var tickPlacement : WinUI.TickPlacement {
        get { try! _default.get_TickPlacementImpl() }
        set { try! _default.put_TickPlacementImpl(newValue) }
    }

    internal enum IRangeBaseOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBaseOverrides
        internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls_Primitives.IRangeBaseOverrides
        internal typealias Class = Slider
        internal typealias CodiraProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISlider
            internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.ISlider
        }
    }
    internal typealias Composable = IRangeBaseOverrides
    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.splitview)
open class SplitView : WinUI.Control {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.ISplitView
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISplitView
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CISplitView>?) -> SplitView? {
        guard immutable abi = abi else { return Nothing }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.CodiraABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open fn queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _ISplitViewFactory : __ABI_Microsoft_UI_Xaml_Controls.ISplitViewFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.SplitView"))

    override public init() {
        super.init(composing: Self.Composable.this) { baseInterface, innerInterface in 
            try! Self._ISplitViewFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static immutable _ISplitViewStatics: __ABI_Microsoft_UI_Xaml_Controls.ISplitViewStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.SplitView"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.splitview.compactpanelengthproperty)
    public class var compactPaneLengthProperty : WinUI.DependencyProperty! {
        get { try! _ISplitViewStatics.get_CompactPaneLengthPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.splitview.contentproperty)
    public class var contentProperty : WinUI.DependencyProperty! {
        get { try! _ISplitViewStatics.get_ContentPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.splitview.displaymodeproperty)
    public class var displayModeProperty : WinUI.DependencyProperty! {
        get { try! _ISplitViewStatics.get_DisplayModePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.splitview.ispaneopenproperty)
    public class var isPaneOpenProperty : WinUI.DependencyProperty! {
        get { try! _ISplitViewStatics.get_IsPaneOpenPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.splitview.lightdismissoverlaymodeproperty)
    public class var lightDismissOverlayModeProperty : WinUI.DependencyProperty! {
        get { try! _ISplitViewStatics.get_LightDismissOverlayModePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.splitview.openpanelengthproperty)
    public class var openPaneLengthProperty : WinUI.DependencyProperty! {
        get { try! _ISplitViewStatics.get_OpenPaneLengthPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.splitview.panebackgroundproperty)
    public class var paneBackgroundProperty : WinUI.DependencyProperty! {
        get { try! _ISplitViewStatics.get_PaneBackgroundPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.splitview.paneplacementproperty)
    public class var panePlacementProperty : WinUI.DependencyProperty! {
        get { try! _ISplitViewStatics.get_PanePlacementPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.splitview.paneproperty)
    public class var paneProperty : WinUI.DependencyProperty! {
        get { try! _ISplitViewStatics.get_PanePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.splitview.templatesettingsproperty)
    public class var templateSettingsProperty : WinUI.DependencyProperty! {
        get { try! _ISplitViewStatics.get_TemplateSettingsPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.splitview.compactpanelength)
    public var compactPaneLength : Double {
        get { try! _default.get_CompactPaneLengthImpl() }
        set { try! _default.put_CompactPaneLengthImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.splitview.content)
    public var content : WinUI.UIElement! {
        get { try! _default.get_ContentImpl() }
        set { try! _default.put_ContentImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.splitview.displaymode)
    public var displayMode : SplitViewDisplayMode {
        get { try! _default.get_DisplayModeImpl() }
        set { try! _default.put_DisplayModeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.splitview.ispaneopen)
    public var isPaneOpen : Boolean {
        get { try! _default.get_IsPaneOpenImpl() }
        set { try! _default.put_IsPaneOpenImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.splitview.lightdismissoverlaymode)
    public var lightDismissOverlayMode : LightDismissOverlayMode {
        get { try! _default.get_LightDismissOverlayModeImpl() }
        set { try! _default.put_LightDismissOverlayModeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.splitview.openpanelength)
    public var openPaneLength : Double {
        get { try! _default.get_OpenPaneLengthImpl() }
        set { try! _default.put_OpenPaneLengthImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.splitview.pane)
    public var pane : WinUI.UIElement! {
        get { try! _default.get_PaneImpl() }
        set { try! _default.put_PaneImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.splitview.panebackground)
    public var paneBackground : WinUI.Brush! {
        get { try! _default.get_PaneBackgroundImpl() }
        set { try! _default.put_PaneBackgroundImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.splitview.paneplacement)
    public var panePlacement : SplitViewPanePlacement {
        get { try! _default.get_PanePlacementImpl() }
        set { try! _default.put_PanePlacementImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.splitview.templatesettings)
    public var templateSettings : WinUI.SplitViewTemplateSettings! {
        get { try! _default.get_TemplateSettingsImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.splitview.paneclosed)
    public lazy var paneClosed : Event<TypedEventHandler<SplitView?, Any?>> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_PaneClosedImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_PaneClosedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.splitview.paneclosing)
    public lazy var paneClosing : Event<TypedEventHandler<SplitView?, SplitViewPaneClosingEventArgs?>> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_PaneClosingImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_PaneClosingImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.splitview.paneopened)
    public lazy var paneOpened : Event<TypedEventHandler<SplitView?, Any?>> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_PaneOpenedImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_PaneOpenedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.splitview.paneopening)
    public lazy var paneOpening : Event<TypedEventHandler<SplitView?, Any?>> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_PaneOpeningImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_PaneOpeningImpl($0)
       }
      )
    }()

    internal enum IControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides
        internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IControlOverrides
        internal typealias Class = SplitView
        internal typealias CodiraProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISplitView
            internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.ISplitView
        }
    }
    internal typealias Composable = IControlOverrides
    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.splitviewpaneclosingeventargs)
public final class SplitViewPaneClosingEventArgs : WinRTClass {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.ISplitViewPaneClosingEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CISplitViewPaneClosingEventArgs
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CISplitViewPaneClosingEventArgs>?) -> SplitViewPaneClosingEventArgs? {
        guard immutable abi = abi else { return Nothing }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.splitviewpaneclosingeventargs.cancel)
    public var cancel : Boolean {
        get { try! _default.get_CancelImpl() }
        set { try! _default.put_CancelImpl(newValue) }
    }

    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.styleselector)
open class StyleSelector : WinRTClass {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IStyleSelector
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIStyleSelector
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIStyleSelector>?) -> StyleSelector? {
        guard immutable abi = abi else { return Nothing }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    @_spi(WinRTInternal)
    public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.CodiraABI)
    {
        super.init()
        MakeComposed(composing: composing, (this as! Composable.Class), createCallback)
    }
    override open fn queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_UI_Xaml_Controls.IStyleSelectorOverridesWrapper.IID:
                immutable wrapper = __ABI_Microsoft_UI_Xaml_Controls.IStyleSelectorOverridesWrapper(this)
                return wrapper!.queryInterface(iid)
            default: return super.queryInterface(iid)
        }
    }
    private static var _IStyleSelectorFactory : __ABI_Microsoft_UI_Xaml_Controls.IStyleSelectorFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.StyleSelector"))

    override public init() {
        super.init()
        MakeComposed(composing: Self.Composable.this, this) { baseInterface, innerInterface in 
            try! Self._IStyleSelectorFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.styleselector.selectstyle)
    public fn selectStyle(_ item: Any!, _ container: WinUI.DependencyObject!) throws -> WinUI.Style! {
        try _default.SelectStyleImpl(item, container)
    }

    private lazy var _IStyleSelectorOverrides: __ABI_Microsoft_UI_Xaml_Controls.IStyleSelectorOverrides! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.styleselector.selectstylecore)
    open fn selectStyleCore(_ item: Any!, _ container: WinUI.DependencyObject!) throws -> WinUI.Style! {
        try _IStyleSelectorOverrides.SelectStyleCoreImpl(item, container)
    }

    internal enum IStyleSelectorOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIStyleSelectorOverrides
        internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IStyleSelectorOverrides
        internal typealias Class = StyleSelector
        internal typealias CodiraProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIStyleSelector
            internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IStyleSelector
        }
    }
    internal typealias Composable = IStyleSelectorOverrides
    deinit {
        _default = Nothing
        _IStyleSelectorOverrides = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock)
public final class TextBlock : WinUI.FrameworkElement {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.ITextBlock
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock>?) -> TextBlock? {
        guard immutable abi = abi else { return Nothing }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Controls.TextBlock")))
    }

    private static immutable _ITextBlockStatics: __ABI_Microsoft_UI_Xaml_Controls.ITextBlockStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.TextBlock"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.characterspacingproperty)
    public static var characterSpacingProperty : WinUI.DependencyProperty! {
        get { try! _ITextBlockStatics.get_CharacterSpacingPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.fontfamilyproperty)
    public static var fontFamilyProperty : WinUI.DependencyProperty! {
        get { try! _ITextBlockStatics.get_FontFamilyPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.fontsizeproperty)
    public static var fontSizeProperty : WinUI.DependencyProperty! {
        get { try! _ITextBlockStatics.get_FontSizePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.fontstretchproperty)
    public static var fontStretchProperty : WinUI.DependencyProperty! {
        get { try! _ITextBlockStatics.get_FontStretchPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.fontstyleproperty)
    public static var fontStyleProperty : WinUI.DependencyProperty! {
        get { try! _ITextBlockStatics.get_FontStylePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.fontweightproperty)
    public static var fontWeightProperty : WinUI.DependencyProperty! {
        get { try! _ITextBlockStatics.get_FontWeightPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.foregroundproperty)
    public static var foregroundProperty : WinUI.DependencyProperty! {
        get { try! _ITextBlockStatics.get_ForegroundPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.horizontaltextalignmentproperty)
    public static var horizontalTextAlignmentProperty : WinUI.DependencyProperty! {
        get { try! _ITextBlockStatics.get_HorizontalTextAlignmentPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.iscolorfontenabledproperty)
    public static var isColorFontEnabledProperty : WinUI.DependencyProperty! {
        get { try! _ITextBlockStatics.get_IsColorFontEnabledPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.istextscalefactorenabledproperty)
    public static var isTextScaleFactorEnabledProperty : WinUI.DependencyProperty! {
        get { try! _ITextBlockStatics.get_IsTextScaleFactorEnabledPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.istextselectionenabledproperty)
    public static var isTextSelectionEnabledProperty : WinUI.DependencyProperty! {
        get { try! _ITextBlockStatics.get_IsTextSelectionEnabledPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.istexttrimmedproperty)
    public static var isTextTrimmedProperty : WinUI.DependencyProperty! {
        get { try! _ITextBlockStatics.get_IsTextTrimmedPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.lineheightproperty)
    public static var lineHeightProperty : WinUI.DependencyProperty! {
        get { try! _ITextBlockStatics.get_LineHeightPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.linestackingstrategyproperty)
    public static var lineStackingStrategyProperty : WinUI.DependencyProperty! {
        get { try! _ITextBlockStatics.get_LineStackingStrategyPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.maxlinesproperty)
    public static var maxLinesProperty : WinUI.DependencyProperty! {
        get { try! _ITextBlockStatics.get_MaxLinesPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.opticalmarginalignmentproperty)
    public static var opticalMarginAlignmentProperty : WinUI.DependencyProperty! {
        get { try! _ITextBlockStatics.get_OpticalMarginAlignmentPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.paddingproperty)
    public static var paddingProperty : WinUI.DependencyProperty! {
        get { try! _ITextBlockStatics.get_PaddingPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.selectedtextproperty)
    public static var selectedTextProperty : WinUI.DependencyProperty! {
        get { try! _ITextBlockStatics.get_SelectedTextPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.selectionflyoutproperty)
    public static var selectionFlyoutProperty : WinUI.DependencyProperty! {
        get { try! _ITextBlockStatics.get_SelectionFlyoutPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.selectionhighlightcolorproperty)
    public static var selectionHighlightColorProperty : WinUI.DependencyProperty! {
        get { try! _ITextBlockStatics.get_SelectionHighlightColorPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.textalignmentproperty)
    public static var textAlignmentProperty : WinUI.DependencyProperty! {
        get { try! _ITextBlockStatics.get_TextAlignmentPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.textdecorationsproperty)
    public static var textDecorationsProperty : WinUI.DependencyProperty! {
        get { try! _ITextBlockStatics.get_TextDecorationsPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.textlineboundsproperty)
    public static var textLineBoundsProperty : WinUI.DependencyProperty! {
        get { try! _ITextBlockStatics.get_TextLineBoundsPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.textproperty)
    public static var textProperty : WinUI.DependencyProperty! {
        get { try! _ITextBlockStatics.get_TextPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.textreadingorderproperty)
    public static var textReadingOrderProperty : WinUI.DependencyProperty! {
        get { try! _ITextBlockStatics.get_TextReadingOrderPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.texttrimmingproperty)
    public static var textTrimmingProperty : WinUI.DependencyProperty! {
        get { try! _ITextBlockStatics.get_TextTrimmingPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.textwrappingproperty)
    public static var textWrappingProperty : WinUI.DependencyProperty! {
        get { try! _ITextBlockStatics.get_TextWrappingPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.selectall)
    public fn selectAll() throws {
        try _default.SelectAllImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.select)
    public fn select(_ start: WinUI.TextPointer!, _ end: WinUI.TextPointer!) throws {
        try _default.SelectImpl(start, end)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.getalphamask)
    public fn getAlphaMask() throws -> WinAppSDK.CompositionBrush! {
        try _default.GetAlphaMaskImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.copyselectiontoclipboard)
    public fn copySelectionToClipboard() throws {
        try _default.CopySelectionToClipboardImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.baselineoffset)
    public var baselineOffset : Double {
        get { try! _default.get_BaselineOffsetImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.characterspacing)
    public var characterSpacing : Int32 {
        get { try! _default.get_CharacterSpacingImpl() }
        set { try! _default.put_CharacterSpacingImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.contentend)
    public var contentEnd : WinUI.TextPointer! {
        get { try! _default.get_ContentEndImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.contentstart)
    public var contentStart : WinUI.TextPointer! {
        get { try! _default.get_ContentStartImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.fontfamily)
    public var fontFamily : WinUI.FontFamily! {
        get { try! _default.get_FontFamilyImpl() }
        set { try! _default.put_FontFamilyImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.fontsize)
    public var fontSize : Double {
        get { try! _default.get_FontSizeImpl() }
        set { try! _default.put_FontSizeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.fontstretch)
    public var fontStretch : UWP.FontStretch {
        get { try! _default.get_FontStretchImpl() }
        set { try! _default.put_FontStretchImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.fontstyle)
    public var fontStyle : UWP.FontStyle {
        get { try! _default.get_FontStyleImpl() }
        set { try! _default.put_FontStyleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.fontweight)
    public var fontWeight : UWP.FontWeight {
        get { try! _default.get_FontWeightImpl() }
        set { try! _default.put_FontWeightImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.foreground)
    public var foreground : WinUI.Brush! {
        get { try! _default.get_ForegroundImpl() }
        set { try! _default.put_ForegroundImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.horizontaltextalignment)
    public var horizontalTextAlignment : WinUI.TextAlignment {
        get { try! _default.get_HorizontalTextAlignmentImpl() }
        set { try! _default.put_HorizontalTextAlignmentImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.inlines)
    public var inlines : WinUI.InlineCollection! {
        get { try! _default.get_InlinesImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.iscolorfontenabled)
    public var isColorFontEnabled : Boolean {
        get { try! _default.get_IsColorFontEnabledImpl() }
        set { try! _default.put_IsColorFontEnabledImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.istextscalefactorenabled)
    public var isTextScaleFactorEnabled : Boolean {
        get { try! _default.get_IsTextScaleFactorEnabledImpl() }
        set { try! _default.put_IsTextScaleFactorEnabledImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.istextselectionenabled)
    public var isTextSelectionEnabled : Boolean {
        get { try! _default.get_IsTextSelectionEnabledImpl() }
        set { try! _default.put_IsTextSelectionEnabledImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.istexttrimmed)
    public var isTextTrimmed : Boolean {
        get { try! _default.get_IsTextTrimmedImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.lineheight)
    public var lineHeight : Double {
        get { try! _default.get_LineHeightImpl() }
        set { try! _default.put_LineHeightImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.linestackingstrategy)
    public var lineStackingStrategy : WinUI.LineStackingStrategy {
        get { try! _default.get_LineStackingStrategyImpl() }
        set { try! _default.put_LineStackingStrategyImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.maxlines)
    public var maxLines : Int32 {
        get { try! _default.get_MaxLinesImpl() }
        set { try! _default.put_MaxLinesImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.opticalmarginalignment)
    public var opticalMarginAlignment : WinUI.OpticalMarginAlignment {
        get { try! _default.get_OpticalMarginAlignmentImpl() }
        set { try! _default.put_OpticalMarginAlignmentImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.padding)
    public var padding : WinUI.Thickness {
        get { try! _default.get_PaddingImpl() }
        set { try! _default.put_PaddingImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.selectedtext)
    public var selectedText : String {
        get { try! _default.get_SelectedTextImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.selectionend)
    public var selectionEnd : WinUI.TextPointer! {
        get { try! _default.get_SelectionEndImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.selectionflyout)
    public var selectionFlyout : WinUI.FlyoutBase! {
        get { try! _default.get_SelectionFlyoutImpl() }
        set { try! _default.put_SelectionFlyoutImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.selectionhighlightcolor)
    public var selectionHighlightColor : WinUI.SolidColorBrush! {
        get { try! _default.get_SelectionHighlightColorImpl() }
        set { try! _default.put_SelectionHighlightColorImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.selectionstart)
    public var selectionStart : WinUI.TextPointer! {
        get { try! _default.get_SelectionStartImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.text)
    public var text : String {
        get { try! _default.get_TextImpl() }
        set { try! _default.put_TextImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.textalignment)
    public var textAlignment : WinUI.TextAlignment {
        get { try! _default.get_TextAlignmentImpl() }
        set { try! _default.put_TextAlignmentImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.textdecorations)
    public var textDecorations : UWP.TextDecorations {
        get { try! _default.get_TextDecorationsImpl() }
        set { try! _default.put_TextDecorationsImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.texthighlighters)
    public var textHighlighters : WindowsFoundation.AnyIVector<WinUI.TextHighlighter?>! {
        get { try! _default.get_TextHighlightersImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.textlinebounds)
    public var textLineBounds : WinUI.TextLineBounds {
        get { try! _default.get_TextLineBoundsImpl() }
        set { try! _default.put_TextLineBoundsImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.textreadingorder)
    public var textReadingOrder : WinUI.TextReadingOrder {
        get { try! _default.get_TextReadingOrderImpl() }
        set { try! _default.put_TextReadingOrderImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.texttrimming)
    public var textTrimming : WinUI.TextTrimming {
        get { try! _default.get_TextTrimmingImpl() }
        set { try! _default.put_TextTrimmingImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.textwrapping)
    public var textWrapping : WinUI.TextWrapping {
        get { try! _default.get_TextWrappingImpl() }
        set { try! _default.put_TextWrappingImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.contextmenuopening)
    public lazy var contextMenuOpening : Event<ContextMenuOpeningEventHandler> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_ContextMenuOpeningImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_ContextMenuOpeningImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.istexttrimmedchanged)
    public lazy var isTextTrimmedChanged : Event<TypedEventHandler<TextBlock?, IsTextTrimmedChangedEventArgs?>> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_IsTextTrimmedChangedImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_IsTextTrimmedChangedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textblock.selectionchanged)
    public lazy var selectionChanged : Event<WinUI.RoutedEventHandler> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_SelectionChangedImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_SelectionChangedImpl($0)
       }
      )
    }()

    internal enum IFrameworkElementOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIFrameworkElementOverrides
        internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml.IFrameworkElementOverrides
        internal typealias Class = TextBlock
        internal typealias CodiraProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBlock
            internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.ITextBlock
        }
    }
    internal typealias Composable = IFrameworkElementOverrides
    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox)
open class TextBox : WinUI.Control {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.ITextBox
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox>?) -> TextBox? {
        guard immutable abi = abi else { return Nothing }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.CodiraABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open fn queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _ITextBoxFactory : __ABI_Microsoft_UI_Xaml_Controls.ITextBoxFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.TextBox"))

    override public init() {
        super.init(composing: Self.Composable.this) { baseInterface, innerInterface in 
            try! Self._ITextBoxFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static immutable _ITextBoxStatics: __ABI_Microsoft_UI_Xaml_Controls.ITextBoxStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.TextBox"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.acceptsreturnproperty)
    public class var acceptsReturnProperty : WinUI.DependencyProperty! {
        get { try! _ITextBoxStatics.get_AcceptsReturnPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.canpasteclipboardcontentproperty)
    public class var canPasteClipboardContentProperty : WinUI.DependencyProperty! {
        get { try! _ITextBoxStatics.get_CanPasteClipboardContentPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.canredoproperty)
    public class var canRedoProperty : WinUI.DependencyProperty! {
        get { try! _ITextBoxStatics.get_CanRedoPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.canundoproperty)
    public class var canUndoProperty : WinUI.DependencyProperty! {
        get { try! _ITextBoxStatics.get_CanUndoPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.charactercasingproperty)
    public class var characterCasingProperty : WinUI.DependencyProperty! {
        get { try! _ITextBoxStatics.get_CharacterCasingPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.descriptionproperty)
    public class var descriptionProperty : WinUI.DependencyProperty! {
        get { try! _ITextBoxStatics.get_DescriptionPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.desiredcandidatewindowalignmentproperty)
    public class var desiredCandidateWindowAlignmentProperty : WinUI.DependencyProperty! {
        get { try! _ITextBoxStatics.get_DesiredCandidateWindowAlignmentPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.headerproperty)
    public class var headerProperty : WinUI.DependencyProperty! {
        get { try! _ITextBoxStatics.get_HeaderPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.headertemplateproperty)
    public class var headerTemplateProperty : WinUI.DependencyProperty! {
        get { try! _ITextBoxStatics.get_HeaderTemplatePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.horizontaltextalignmentproperty)
    public class var horizontalTextAlignmentProperty : WinUI.DependencyProperty! {
        get { try! _ITextBoxStatics.get_HorizontalTextAlignmentPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.inputscopeproperty)
    public class var inputScopeProperty : WinUI.DependencyProperty! {
        get { try! _ITextBoxStatics.get_InputScopePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.iscolorfontenabledproperty)
    public class var isColorFontEnabledProperty : WinUI.DependencyProperty! {
        get { try! _ITextBoxStatics.get_IsColorFontEnabledPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.isreadonlyproperty)
    public class var isReadOnlyProperty : WinUI.DependencyProperty! {
        get { try! _ITextBoxStatics.get_IsReadOnlyPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.isspellcheckenabledproperty)
    public class var isSpellCheckEnabledProperty : WinUI.DependencyProperty! {
        get { try! _ITextBoxStatics.get_IsSpellCheckEnabledPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.istextpredictionenabledproperty)
    public class var isTextPredictionEnabledProperty : WinUI.DependencyProperty! {
        get { try! _ITextBoxStatics.get_IsTextPredictionEnabledPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.maxlengthproperty)
    public class var maxLengthProperty : WinUI.DependencyProperty! {
        get { try! _ITextBoxStatics.get_MaxLengthPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.placeholderforegroundproperty)
    public class var placeholderForegroundProperty : WinUI.DependencyProperty! {
        get { try! _ITextBoxStatics.get_PlaceholderForegroundPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.placeholdertextproperty)
    public class var placeholderTextProperty : WinUI.DependencyProperty! {
        get { try! _ITextBoxStatics.get_PlaceholderTextPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.preventkeyboarddisplayonprogrammaticfocusproperty)
    public class var preventKeyboardDisplayOnProgrammaticFocusProperty : WinUI.DependencyProperty! {
        get { try! _ITextBoxStatics.get_PreventKeyboardDisplayOnProgrammaticFocusPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.proofingmenuflyoutproperty)
    public class var proofingMenuFlyoutProperty : WinUI.DependencyProperty! {
        get { try! _ITextBoxStatics.get_ProofingMenuFlyoutPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.selectionflyoutproperty)
    public class var selectionFlyoutProperty : WinUI.DependencyProperty! {
        get { try! _ITextBoxStatics.get_SelectionFlyoutPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.selectionhighlightcolorproperty)
    public class var selectionHighlightColorProperty : WinUI.DependencyProperty! {
        get { try! _ITextBoxStatics.get_SelectionHighlightColorPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.selectionhighlightcolorwhennotfocusedproperty)
    public class var selectionHighlightColorWhenNotFocusedProperty : WinUI.DependencyProperty! {
        get { try! _ITextBoxStatics.get_SelectionHighlightColorWhenNotFocusedPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.textalignmentproperty)
    public class var textAlignmentProperty : WinUI.DependencyProperty! {
        get { try! _ITextBoxStatics.get_TextAlignmentPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.textproperty)
    public class var textProperty : WinUI.DependencyProperty! {
        get { try! _ITextBoxStatics.get_TextPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.textreadingorderproperty)
    public class var textReadingOrderProperty : WinUI.DependencyProperty! {
        get { try! _ITextBoxStatics.get_TextReadingOrderPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.textwrappingproperty)
    public class var textWrappingProperty : WinUI.DependencyProperty! {
        get { try! _ITextBoxStatics.get_TextWrappingPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.select)
    public fn select(_ start: Int32, _ length: Int32) throws {
        try _default.SelectImpl(start, length)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.selectall)
    public fn selectAll() throws {
        try _default.SelectAllImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.getrectfromcharacterindex)
    public fn getRectFromCharacterIndex(_ charIndex: Int32, _ trailingEdge: Boolean) throws -> WindowsFoundation.Rect {
        try _default.GetRectFromCharacterIndexImpl(charIndex, trailingEdge)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.getlinguisticalternativesasync)
    public fn getLinguisticAlternativesAsync() throws -> WindowsFoundation.AnyIAsyncOperation<WindowsFoundation.AnyIVectorView<String>?>! {
        try _default.GetLinguisticAlternativesAsyncImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.undo)
    public fn undo() throws {
        try _default.UndoImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.redo)
    public fn redo() throws {
        try _default.RedoImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.pastefromclipboard)
    public fn pasteFromClipboard() throws {
        try _default.PasteFromClipboardImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.copyselectiontoclipboard)
    public fn copySelectionToClipboard() throws {
        try _default.CopySelectionToClipboardImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.cutselectiontoclipboard)
    public fn cutSelectionToClipboard() throws {
        try _default.CutSelectionToClipboardImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.clearundoredohistory)
    public fn clearUndoRedoHistory() throws {
        try _default.ClearUndoRedoHistoryImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.acceptsreturn)
    public var acceptsReturn : Boolean {
        get { try! _default.get_AcceptsReturnImpl() }
        set { try! _default.put_AcceptsReturnImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.canpasteclipboardcontent)
    public var canPasteClipboardContent : Boolean {
        get { try! _default.get_CanPasteClipboardContentImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.canredo)
    public var canRedo : Boolean {
        get { try! _default.get_CanRedoImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.canundo)
    public var canUndo : Boolean {
        get { try! _default.get_CanUndoImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.charactercasing)
    public var characterCasing : CharacterCasing {
        get { try! _default.get_CharacterCasingImpl() }
        set { try! _default.put_CharacterCasingImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.description)
    public var description : Any! {
        get { try! _default.get_DescriptionImpl() }
        set { try! _default.put_DescriptionImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.desiredcandidatewindowalignment)
    public var desiredCandidateWindowAlignment : CandidateWindowAlignment {
        get { try! _default.get_DesiredCandidateWindowAlignmentImpl() }
        set { try! _default.put_DesiredCandidateWindowAlignmentImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.header)
    public var header : Any! {
        get { try! _default.get_HeaderImpl() }
        set { try! _default.put_HeaderImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.headertemplate)
    public var headerTemplate : WinUI.DataTemplate! {
        get { try! _default.get_HeaderTemplateImpl() }
        set { try! _default.put_HeaderTemplateImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.horizontaltextalignment)
    public var horizontalTextAlignment : WinUI.TextAlignment {
        get { try! _default.get_HorizontalTextAlignmentImpl() }
        set { try! _default.put_HorizontalTextAlignmentImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.inputscope)
    public var inputScope : WinUI.InputScope! {
        get { try! _default.get_InputScopeImpl() }
        set { try! _default.put_InputScopeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.iscolorfontenabled)
    public var isColorFontEnabled : Boolean {
        get { try! _default.get_IsColorFontEnabledImpl() }
        set { try! _default.put_IsColorFontEnabledImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.isreadonly)
    public var isReadOnly : Boolean {
        get { try! _default.get_IsReadOnlyImpl() }
        set { try! _default.put_IsReadOnlyImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.isspellcheckenabled)
    public var isSpellCheckEnabled : Boolean {
        get { try! _default.get_IsSpellCheckEnabledImpl() }
        set { try! _default.put_IsSpellCheckEnabledImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.istextpredictionenabled)
    public var isTextPredictionEnabled : Boolean {
        get { try! _default.get_IsTextPredictionEnabledImpl() }
        set { try! _default.put_IsTextPredictionEnabledImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.maxlength)
    public var maxLength : Int32 {
        get { try! _default.get_MaxLengthImpl() }
        set { try! _default.put_MaxLengthImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.placeholderforeground)
    public var placeholderForeground : WinUI.Brush! {
        get { try! _default.get_PlaceholderForegroundImpl() }
        set { try! _default.put_PlaceholderForegroundImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.placeholdertext)
    public var placeholderText : String {
        get { try! _default.get_PlaceholderTextImpl() }
        set { try! _default.put_PlaceholderTextImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.preventkeyboarddisplayonprogrammaticfocus)
    public var preventKeyboardDisplayOnProgrammaticFocus : Boolean {
        get { try! _default.get_PreventKeyboardDisplayOnProgrammaticFocusImpl() }
        set { try! _default.put_PreventKeyboardDisplayOnProgrammaticFocusImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.proofingmenuflyout)
    public var proofingMenuFlyout : WinUI.FlyoutBase! {
        get { try! _default.get_ProofingMenuFlyoutImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.selectedtext)
    public var selectedText : String {
        get { try! _default.get_SelectedTextImpl() }
        set { try! _default.put_SelectedTextImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.selectionflyout)
    public var selectionFlyout : WinUI.FlyoutBase! {
        get { try! _default.get_SelectionFlyoutImpl() }
        set { try! _default.put_SelectionFlyoutImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.selectionhighlightcolor)
    public var selectionHighlightColor : WinUI.SolidColorBrush! {
        get { try! _default.get_SelectionHighlightColorImpl() }
        set { try! _default.put_SelectionHighlightColorImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.selectionhighlightcolorwhennotfocused)
    public var selectionHighlightColorWhenNotFocused : WinUI.SolidColorBrush! {
        get { try! _default.get_SelectionHighlightColorWhenNotFocusedImpl() }
        set { try! _default.put_SelectionHighlightColorWhenNotFocusedImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.selectionlength)
    public var selectionLength : Int32 {
        get { try! _default.get_SelectionLengthImpl() }
        set { try! _default.put_SelectionLengthImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.selectionstart)
    public var selectionStart : Int32 {
        get { try! _default.get_SelectionStartImpl() }
        set { try! _default.put_SelectionStartImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.text)
    public var text : String {
        get { try! _default.get_TextImpl() }
        set { try! _default.put_TextImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.textalignment)
    public var textAlignment : WinUI.TextAlignment {
        get { try! _default.get_TextAlignmentImpl() }
        set { try! _default.put_TextAlignmentImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.textreadingorder)
    public var textReadingOrder : WinUI.TextReadingOrder {
        get { try! _default.get_TextReadingOrderImpl() }
        set { try! _default.put_TextReadingOrderImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.textwrapping)
    public var textWrapping : WinUI.TextWrapping {
        get { try! _default.get_TextWrappingImpl() }
        set { try! _default.put_TextWrappingImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.beforetextchanging)
    public lazy var beforeTextChanging : Event<TypedEventHandler<TextBox?, TextBoxBeforeTextChangingEventArgs?>> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_BeforeTextChangingImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_BeforeTextChangingImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.candidatewindowboundschanged)
    public lazy var candidateWindowBoundsChanged : Event<TypedEventHandler<TextBox?, CandidateWindowBoundsChangedEventArgs?>> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_CandidateWindowBoundsChangedImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_CandidateWindowBoundsChangedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.contextmenuopening)
    public lazy var contextMenuOpening : Event<ContextMenuOpeningEventHandler> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_ContextMenuOpeningImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_ContextMenuOpeningImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.copyingtoclipboard)
    public lazy var copyingToClipboard : Event<TypedEventHandler<TextBox?, TextControlCopyingToClipboardEventArgs?>> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_CopyingToClipboardImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_CopyingToClipboardImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.cuttingtoclipboard)
    public lazy var cuttingToClipboard : Event<TypedEventHandler<TextBox?, TextControlCuttingToClipboardEventArgs?>> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_CuttingToClipboardImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_CuttingToClipboardImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.paste)
    public lazy var paste : Event<TextControlPasteEventHandler> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_PasteImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_PasteImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.selectionchanged)
    public lazy var selectionChanged : Event<WinUI.RoutedEventHandler> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_SelectionChangedImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_SelectionChangedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.selectionchanging)
    public lazy var selectionChanging : Event<TypedEventHandler<TextBox?, TextBoxSelectionChangingEventArgs?>> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_SelectionChangingImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_SelectionChangingImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.textchanged)
    public lazy var textChanged : Event<TextChangedEventHandler> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_TextChangedImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_TextChangedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.textchanging)
    public lazy var textChanging : Event<TypedEventHandler<TextBox?, TextBoxTextChangingEventArgs?>> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_TextChangingImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_TextChangingImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.textcompositionchanged)
    public lazy var textCompositionChanged : Event<TypedEventHandler<TextBox?, TextCompositionChangedEventArgs?>> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_TextCompositionChangedImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_TextCompositionChangedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.textcompositionended)
    public lazy var textCompositionEnded : Event<TypedEventHandler<TextBox?, TextCompositionEndedEventArgs?>> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_TextCompositionEndedImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_TextCompositionEndedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textbox.textcompositionstarted)
    public lazy var textCompositionStarted : Event<TypedEventHandler<TextBox?, TextCompositionStartedEventArgs?>> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_TextCompositionStartedImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_TextCompositionStartedImpl($0)
       }
      )
    }()

    internal enum IControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides
        internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IControlOverrides
        internal typealias Class = TextBox
        internal typealias CodiraProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBox
            internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.ITextBox
        }
    }
    internal typealias Composable = IControlOverrides
    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textboxbeforetextchangingeventargs)
public final class TextBoxBeforeTextChangingEventArgs : WinRTClass {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.ITextBoxBeforeTextChangingEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBoxBeforeTextChangingEventArgs
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBoxBeforeTextChangingEventArgs>?) -> TextBoxBeforeTextChangingEventArgs? {
        guard immutable abi = abi else { return Nothing }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textboxbeforetextchangingeventargs.cancel)
    public var cancel : Boolean {
        get { try! _default.get_CancelImpl() }
        set { try! _default.put_CancelImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textboxbeforetextchangingeventargs.newtext)
    public var newText : String {
        get { try! _default.get_NewTextImpl() }
    }

    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textboxselectionchangingeventargs)
public final class TextBoxSelectionChangingEventArgs : WinRTClass {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.ITextBoxSelectionChangingEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBoxSelectionChangingEventArgs
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBoxSelectionChangingEventArgs>?) -> TextBoxSelectionChangingEventArgs? {
        guard immutable abi = abi else { return Nothing }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textboxselectionchangingeventargs.cancel)
    public var cancel : Boolean {
        get { try! _default.get_CancelImpl() }
        set { try! _default.put_CancelImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textboxselectionchangingeventargs.selectionlength)
    public var selectionLength : Int32 {
        get { try! _default.get_SelectionLengthImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textboxselectionchangingeventargs.selectionstart)
    public var selectionStart : Int32 {
        get { try! _default.get_SelectionStartImpl() }
    }

    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textboxtextchangingeventargs)
public final class TextBoxTextChangingEventArgs : WinRTClass {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.ITextBoxTextChangingEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBoxTextChangingEventArgs
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextBoxTextChangingEventArgs>?) -> TextBoxTextChangingEventArgs? {
        guard immutable abi = abi else { return Nothing }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textboxtextchangingeventargs.iscontentchanging)
    public var isContentChanging : Boolean {
        get { try! _default.get_IsContentChangingImpl() }
    }

    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textchangedeventargs)
public final class TextChangedEventArgs : WinUI.RoutedEventArgs {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.ITextChangedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextChangedEventArgs
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextChangedEventArgs>?) -> TextChangedEventArgs? {
        guard immutable abi = abi else { return Nothing }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textcompositionchangedeventargs)
public final class TextCompositionChangedEventArgs : WinRTClass {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.ITextCompositionChangedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextCompositionChangedEventArgs
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextCompositionChangedEventArgs>?) -> TextCompositionChangedEventArgs? {
        guard immutable abi = abi else { return Nothing }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textcompositionchangedeventargs.length)
    public var length : Int32 {
        get { try! _default.get_LengthImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textcompositionchangedeventargs.startindex)
    public var startIndex : Int32 {
        get { try! _default.get_StartIndexImpl() }
    }

    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textcompositionendedeventargs)
public final class TextCompositionEndedEventArgs : WinRTClass {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.ITextCompositionEndedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextCompositionEndedEventArgs
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextCompositionEndedEventArgs>?) -> TextCompositionEndedEventArgs? {
        guard immutable abi = abi else { return Nothing }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textcompositionendedeventargs.length)
    public var length : Int32 {
        get { try! _default.get_LengthImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textcompositionendedeventargs.startindex)
    public var startIndex : Int32 {
        get { try! _default.get_StartIndexImpl() }
    }

    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textcompositionstartedeventargs)
public final class TextCompositionStartedEventArgs : WinRTClass {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.ITextCompositionStartedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextCompositionStartedEventArgs
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextCompositionStartedEventArgs>?) -> TextCompositionStartedEventArgs? {
        guard immutable abi = abi else { return Nothing }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textcompositionstartedeventargs.length)
    public var length : Int32 {
        get { try! _default.get_LengthImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textcompositionstartedeventargs.startindex)
    public var startIndex : Int32 {
        get { try! _default.get_StartIndexImpl() }
    }

    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textcontrolcopyingtoclipboardeventargs)
public final class TextControlCopyingToClipboardEventArgs : WinRTClass {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.ITextControlCopyingToClipboardEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextControlCopyingToClipboardEventArgs
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextControlCopyingToClipboardEventArgs>?) -> TextControlCopyingToClipboardEventArgs? {
        guard immutable abi = abi else { return Nothing }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textcontrolcopyingtoclipboardeventargs.handled)
    public var handled : Boolean {
        get { try! _default.get_HandledImpl() }
        set { try! _default.put_HandledImpl(newValue) }
    }

    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textcontrolcuttingtoclipboardeventargs)
public final class TextControlCuttingToClipboardEventArgs : WinRTClass {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.ITextControlCuttingToClipboardEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextControlCuttingToClipboardEventArgs
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextControlCuttingToClipboardEventArgs>?) -> TextControlCuttingToClipboardEventArgs? {
        guard immutable abi = abi else { return Nothing }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textcontrolcuttingtoclipboardeventargs.handled)
    public var handled : Boolean {
        get { try! _default.get_HandledImpl() }
        set { try! _default.put_HandledImpl(newValue) }
    }

    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textcontrolpasteeventargs)
public final class TextControlPasteEventArgs : WinRTClass {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.ITextControlPasteEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextControlPasteEventArgs
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CITextControlPasteEventArgs>?) -> TextControlPasteEventArgs? {
        guard immutable abi = abi else { return Nothing }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.textcontrolpasteeventargs.handled)
    public var handled : Boolean {
        get { try! _default.get_HandledImpl() }
        set { try! _default.put_HandledImpl(newValue) }
    }

    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.togglemenuflyoutitem)
open class ToggleMenuFlyoutItem : WinUI.MenuFlyoutItem {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IToggleMenuFlyoutItem
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToggleMenuFlyoutItem
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToggleMenuFlyoutItem>?) -> ToggleMenuFlyoutItem? {
        guard immutable abi = abi else { return Nothing }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.CodiraABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open fn queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IToggleMenuFlyoutItemFactory : __ABI_Microsoft_UI_Xaml_Controls.IToggleMenuFlyoutItemFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.ToggleMenuFlyoutItem"))

    override public init() {
        super.init(composing: Self.Composable.this) { baseInterface, innerInterface in 
            try! Self._IToggleMenuFlyoutItemFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static immutable _IToggleMenuFlyoutItemStatics: __ABI_Microsoft_UI_Xaml_Controls.IToggleMenuFlyoutItemStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.ToggleMenuFlyoutItem"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.togglemenuflyoutitem.ischeckedproperty)
    public class var isCheckedProperty : WinUI.DependencyProperty! {
        get { try! _IToggleMenuFlyoutItemStatics.get_IsCheckedPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.togglemenuflyoutitem.ischecked)
    public var isChecked : Boolean {
        get { try! _default.get_IsCheckedImpl() }
        set { try! _default.put_IsCheckedImpl(newValue) }
    }

    internal enum IControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides
        internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IControlOverrides
        internal typealias Class = ToggleMenuFlyoutItem
        internal typealias CodiraProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToggleMenuFlyoutItem
            internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IToggleMenuFlyoutItem
        }
    }
    internal typealias Composable = IControlOverrides
    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.toggleswitch)
public final class ToggleSwitch : WinUI.Control {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IToggleSwitch
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToggleSwitch
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToggleSwitch>?) -> ToggleSwitch? {
        guard immutable abi = abi else { return Nothing }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Controls.ToggleSwitch")))
    }

    private static immutable _IToggleSwitchStatics: __ABI_Microsoft_UI_Xaml_Controls.IToggleSwitchStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.ToggleSwitch"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.toggleswitch.headerproperty)
    public static var headerProperty : WinUI.DependencyProperty! {
        get { try! _IToggleSwitchStatics.get_HeaderPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.toggleswitch.headertemplateproperty)
    public static var headerTemplateProperty : WinUI.DependencyProperty! {
        get { try! _IToggleSwitchStatics.get_HeaderTemplatePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.toggleswitch.isonproperty)
    public static var isOnProperty : WinUI.DependencyProperty! {
        get { try! _IToggleSwitchStatics.get_IsOnPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.toggleswitch.offcontentproperty)
    public static var offContentProperty : WinUI.DependencyProperty! {
        get { try! _IToggleSwitchStatics.get_OffContentPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.toggleswitch.offcontenttemplateproperty)
    public static var offContentTemplateProperty : WinUI.DependencyProperty! {
        get { try! _IToggleSwitchStatics.get_OffContentTemplatePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.toggleswitch.oncontentproperty)
    public static var onContentProperty : WinUI.DependencyProperty! {
        get { try! _IToggleSwitchStatics.get_OnContentPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.toggleswitch.oncontenttemplateproperty)
    public static var onContentTemplateProperty : WinUI.DependencyProperty! {
        get { try! _IToggleSwitchStatics.get_OnContentTemplatePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.toggleswitch.header)
    public var header : Any! {
        get { try! _default.get_HeaderImpl() }
        set { try! _default.put_HeaderImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.toggleswitch.headertemplate)
    public var headerTemplate : WinUI.DataTemplate! {
        get { try! _default.get_HeaderTemplateImpl() }
        set { try! _default.put_HeaderTemplateImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.toggleswitch.ison)
    public var isOn : Boolean {
        get { try! _default.get_IsOnImpl() }
        set { try! _default.put_IsOnImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.toggleswitch.offcontent)
    public var offContent : Any! {
        get { try! _default.get_OffContentImpl() }
        set { try! _default.put_OffContentImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.toggleswitch.offcontenttemplate)
    public var offContentTemplate : WinUI.DataTemplate! {
        get { try! _default.get_OffContentTemplateImpl() }
        set { try! _default.put_OffContentTemplateImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.toggleswitch.oncontent)
    public var onContent : Any! {
        get { try! _default.get_OnContentImpl() }
        set { try! _default.put_OnContentImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.toggleswitch.oncontenttemplate)
    public var onContentTemplate : WinUI.DataTemplate! {
        get { try! _default.get_OnContentTemplateImpl() }
        set { try! _default.put_OnContentTemplateImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.toggleswitch.templatesettings)
    public var templateSettings : WinUI.ToggleSwitchTemplateSettings! {
        get { try! _default.get_TemplateSettingsImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.toggleswitch.toggled)
    public lazy var toggled : Event<WinUI.RoutedEventHandler> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_ToggledImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_ToggledImpl($0)
       }
      )
    }()

    internal enum IControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides
        internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IControlOverrides
        internal typealias Class = ToggleSwitch
        internal typealias CodiraProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIToggleSwitch
            internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IToggleSwitch
        }
    }
    internal typealias Composable = IControlOverrides
    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.uielementcollection)
public final class UIElementCollection : WinRTClass, IVector, IIterable {
    public typealias T = WinUI.UIElement?
    private typealias CodiraABI = WinUI.IVectorUIElement
    private typealias CABI = __x_ABI_C__FIVector_1___x_ABI_CMicrosoft__CUI__CXaml__CUIElement
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_C__FIVector_1___x_ABI_CMicrosoft__CUI__CXaml__CUIElement>?) -> UIElementCollection? {
        guard immutable abi = abi else { return Nothing }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public fn queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private lazy var _IUIElementCollection: __ABI_Microsoft_UI_Xaml_Controls.IUIElementCollection! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.uielementcollection.move)
    public fn move(_ oldIndex: UInt32, _ newIndex: UInt32) throws {
        try _IUIElementCollection.MoveImpl(oldIndex, newIndex)
    }

    // MARK: Collection
    public typealias Element = T
    public var startIndex: Integer { 0 }
    public var endIndex: Integer { Integer(size) }
    public fn index(after i: Integer) -> Integer {
        i+1
    }

    public fn index(of: Element) -> Integer? {
        var index: UInt32 = 0
        immutable result = indexOf(of, &index)
        guard result else { return Nothing }
        return Integer(index)
    }
    public var count: Integer { Integer(size) }


    public subscript(position: Integer) -> Element {
        get {
            getAt(UInt32(position))
        }
        set(newValue) {
            setAt(UInt32(position), newValue)
        }
    }

    public fn removeLast() {
        removeAtEnd()
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.uielementcollection.getat)
    public fn getAt(_ index: UInt32) -> WinUI.UIElement? {
        try! _default.GetAtImpl(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.uielementcollection.getview)
    public fn getView() -> WindowsFoundation.AnyIVectorView<WinUI.UIElement?>? {
        try! _default.GetViewImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.uielementcollection.indexof)
    public fn indexOf(_ value: WinUI.UIElement?, _ index: inout UInt32) -> Boolean {
        try! _default.IndexOfImpl(value, &index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.uielementcollection.setat)
    public fn setAt(_ index: UInt32, _ value: WinUI.UIElement?) {
        try! _default.SetAtImpl(index, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.uielementcollection.insertat)
    public fn insertAt(_ index: UInt32, _ value: WinUI.UIElement?) {
        try! _default.InsertAtImpl(index, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.uielementcollection.removeat)
    public fn removeAt(_ index: UInt32) {
        try! _default.RemoveAtImpl(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.uielementcollection.append)
    public fn append(_ value: WinUI.UIElement?) {
        try! _default.AppendImpl(value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.uielementcollection.removeatend)
    public fn removeAtEnd() {
        try! _default.RemoveAtEndImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.uielementcollection.clear)
    public fn clear() {
        try! _default.ClearImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.uielementcollection.size)
    public var size : UInt32 {
        get { try! _default.get_SizeImpl() }
    }

    private lazy var _IIterable: IIterableUIElement! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.uielementcollection.first)
    public fn first() -> WindowsFoundation.AnyIIterator<WinUI.UIElement?>? {
        try! _IIterable.FirstImpl()
    }

    deinit {
        _IUIElementCollection = Nothing
        _default = Nothing
        _IIterable = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.webview2)
open class WebView2 : WinUI.FrameworkElement {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IWebView2
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIWebView2
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIWebView2>?) -> WebView2? {
        guard immutable abi = abi else { return Nothing }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.CodiraABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open fn queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IWebView2Factory : __ABI_Microsoft_UI_Xaml_Controls.IWebView2Factory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.WebView2"))

    override public init() {
        super.init(composing: Self.Composable.this) { baseInterface, innerInterface in 
            try! Self._IWebView2Factory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static immutable _IWebView2Statics: __ABI_Microsoft_UI_Xaml_Controls.IWebView2Statics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.WebView2"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.webview2.cangobackproperty)
    public class var canGoBackProperty : WinUI.DependencyProperty! {
        get { try! _IWebView2Statics.get_CanGoBackPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.webview2.cangoforwardproperty)
    public class var canGoForwardProperty : WinUI.DependencyProperty! {
        get { try! _IWebView2Statics.get_CanGoForwardPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.webview2.defaultbackgroundcolorproperty)
    public class var defaultBackgroundColorProperty : WinUI.DependencyProperty! {
        get { try! _IWebView2Statics.get_DefaultBackgroundColorPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.webview2.sourceproperty)
    public class var sourceProperty : WinUI.DependencyProperty! {
        get { try! _IWebView2Statics.get_SourcePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.webview2.ensurecorewebview2async)
    public fn ensureCoreWebView2Async() throws -> WindowsFoundation.AnyIAsyncAction! {
        try _default.EnsureCoreWebView2AsyncImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.webview2.executescriptasync)
    public fn executeScriptAsync(_ javascriptCode: String) throws -> WindowsFoundation.AnyIAsyncOperation<String>! {
        try _default.ExecuteScriptAsyncImpl(javascriptCode)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.webview2.reload)
    public fn reload() throws {
        try _default.ReloadImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.webview2.goforward)
    public fn goForward() throws {
        try _default.GoForwardImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.webview2.goback)
    public fn goBack() throws {
        try _default.GoBackImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.webview2.navigatetostring)
    public fn navigateToString(_ htmlContent: String) throws {
        try _default.NavigateToStringImpl(htmlContent)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.webview2.close)
    public fn close() throws {
        try _default.CloseImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.webview2.cangoback)
    public var canGoBack : Boolean {
        get { try! _default.get_CanGoBackImpl() }
        set { try! _default.put_CanGoBackImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.webview2.cangoforward)
    public var canGoForward : Boolean {
        get { try! _default.get_CanGoForwardImpl() }
        set { try! _default.put_CanGoForwardImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.webview2.corewebview2)
    public var coreWebView2 : WebView2Core.CoreWebView2! {
        get { try! _default.get_CoreWebView2Impl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.webview2.defaultbackgroundcolor)
    public var defaultBackgroundColor : UWP.Color {
        get { try! _default.get_DefaultBackgroundColorImpl() }
        set { try! _default.put_DefaultBackgroundColorImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.webview2.source)
    public var source : WindowsFoundation.Uri! {
        get { try! _default.get_SourceImpl() }
        set { try! _default.put_SourceImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.webview2.coreprocessfailed)
    public lazy var coreProcessFailed : Event<TypedEventHandler<WebView2?, CoreWebView2ProcessFailedEventArgs?>> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_CoreProcessFailedImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_CoreProcessFailedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.webview2.corewebview2initialized)
    public lazy var coreWebView2Initialized : Event<TypedEventHandler<WebView2?, CoreWebView2InitializedEventArgs?>> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_CoreWebView2InitializedImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_CoreWebView2InitializedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.webview2.navigationcompleted)
    public lazy var navigationCompleted : Event<TypedEventHandler<WebView2?, CoreWebView2NavigationCompletedEventArgs?>> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_NavigationCompletedImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_NavigationCompletedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.webview2.navigationstarting)
    public lazy var navigationStarting : Event<TypedEventHandler<WebView2?, CoreWebView2NavigationStartingEventArgs?>> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_NavigationStartingImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_NavigationStartingImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.webview2.webmessagereceived)
    public lazy var webMessageReceived : Event<TypedEventHandler<WebView2?, CoreWebView2WebMessageReceivedEventArgs?>> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_WebMessageReceivedImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_WebMessageReceivedImpl($0)
       }
      )
    }()

    private lazy var _IWebView22: __ABI_Microsoft_UI_Xaml_Controls.IWebView22! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.webview2.ensurecorewebview2async)
    public fn ensureCoreWebView2Async(_ environment: WebView2Core.CoreWebView2Environment!) throws -> WindowsFoundation.AnyIAsyncAction! {
        try _IWebView22.EnsureCoreWebView2WithEnvironmentAsyncImpl(environment)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.webview2.ensurecorewebview2async)
    public fn ensureCoreWebView2Async(_ environment: WebView2Core.CoreWebView2Environment!, _ controllerOptions: WebView2Core.CoreWebView2ControllerOptions!) throws -> WindowsFoundation.AnyIAsyncAction! {
        try _IWebView22.EnsureCoreWebView2WithEnvironmentAndOptionsAsyncImpl(environment, controllerOptions)
    }

    internal enum IFrameworkElementOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIFrameworkElementOverrides
        internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml.IFrameworkElementOverrides
        internal typealias Class = WebView2
        internal typealias CodiraProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIWebView2
            internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IWebView2
        }
    }
    internal typealias Composable = IFrameworkElementOverrides
    deinit {
        _default = Nothing
        _IWebView22 = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.xamlcontrolsresources)
public final class XamlControlsResources : WinUI.ResourceDictionary {
    public typealias K = Any?
    public typealias V = Any?
    public typealias T = WindowsFoundation.AnyIKeyValuePair<Any?, Any?>?
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Controls.IXamlControlsResources
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIXamlControlsResources
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CControls_CIXamlControlsResources>?) -> XamlControlsResources? {
        guard immutable abi = abi else { return Nothing }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Controls.XamlControlsResources")))
    }

    private static immutable _IXamlControlsResourcesStatics: __ABI_Microsoft_UI_Xaml_Controls.IXamlControlsResourcesStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Controls.XamlControlsResources"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.xamlcontrolsresources.ensurereveallights)
    public static fn ensureRevealLights(_ element: WinUI.UIElement!) {
        try! _IXamlControlsResourcesStatics.EnsureRevealLightsImpl(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.xamlcontrolsresources.usecompactresourcesproperty)
    public static var useCompactResourcesProperty : WinUI.DependencyProperty! {
        get { try! _IXamlControlsResourcesStatics.get_UseCompactResourcesPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.xamlcontrolsresources.usecompactresources)
    public var useCompactResources : Boolean {
        get { try! _default.get_UseCompactResourcesImpl() }
        set { try! _default.put_UseCompactResourcesImpl(newValue) }
    }

    deinit {
        _default = Nothing
    }
}

public typealias ContextMenuOpeningEventHandler = (Any?, ContextMenuEventArgs?) -> ()
public typealias DragItemsStartingEventHandler = (Any?, DragItemsStartingEventArgs?) -> ()
public typealias ItemClickEventHandler = (Any?, ItemClickEventArgs?) -> ()
public typealias SelectionChangedEventHandler = (Any?, SelectionChangedEventArgs?) -> ()
public typealias SemanticZoomViewChangedEventHandler = (Any?, SemanticZoomViewChangedEventArgs?) -> ()
public typealias TextChangedEventHandler = (Any?, TextChangedEventArgs?) -> ()
public typealias TextControlPasteEventHandler = (Any?, TextControlPasteEventArgs?) -> ()
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.iitemcontainermapping)
public protocol IItemContainerMapping : WinRTInterface {
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.iitemcontainermapping.itemfromcontainer)
    fn itemFromContainer(_ container: WinUI.DependencyObject!) throws -> Any!
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.iitemcontainermapping.containerfromitem)
    fn containerFromItem(_ item: Any!) throws -> WinUI.DependencyObject!
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.iitemcontainermapping.indexfromcontainer)
    fn indexFromContainer(_ container: WinUI.DependencyObject!) throws -> Int32
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.iitemcontainermapping.containerfromindex)
    fn containerFromIndex(_ index: Int32) throws -> WinUI.DependencyObject!
}

extension IItemContainerMapping {
    public fn queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_UI_Xaml_Controls.IItemContainerMappingWrapper.IID:
                immutable wrapper = __ABI_Microsoft_UI_Xaml_Controls.IItemContainerMappingWrapper(this)
                return wrapper!.queryInterface(iid)
            default: return Nothing
        }
    }
}
public typealias AnyIItemContainerMapping = any IItemContainerMapping

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.ikeyindexmapping)
public protocol IKeyIndexMapping : WinRTInterface {
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.ikeyindexmapping.keyfromindex)
    fn keyFromIndex(_ index: Int32) throws -> String
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.ikeyindexmapping.indexfromkey)
    fn indexFromKey(_ key: String) throws -> Int32
}

extension IKeyIndexMapping {
    public fn queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_UI_Xaml_Controls.IKeyIndexMappingWrapper.IID:
                immutable wrapper = __ABI_Microsoft_UI_Xaml_Controls.IKeyIndexMappingWrapper(this)
                return wrapper!.queryInterface(iid)
            default: return Nothing
        }
    }
}
public typealias AnyIKeyIndexMapping = any IKeyIndexMapping

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.iscrollanchorprovider)
public protocol IScrollAnchorProvider : WinRTInterface {
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.iscrollanchorprovider.registeranchorcandidate)
    fn registerAnchorCandidate(_ element: WinUI.UIElement!) throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.iscrollanchorprovider.unregisteranchorcandidate)
    fn unregisterAnchorCandidate(_ element: WinUI.UIElement!) throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.iscrollanchorprovider.currentanchor)
    var currentAnchor: WinUI.UIElement! { get }
}

extension IScrollAnchorProvider {
    public fn queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_UI_Xaml_Controls.IScrollAnchorProviderWrapper.IID:
                immutable wrapper = __ABI_Microsoft_UI_Xaml_Controls.IScrollAnchorProviderWrapper(this)
                return wrapper!.queryInterface(iid)
            default: return Nothing
        }
    }
}
public typealias AnyIScrollAnchorProvider = any IScrollAnchorProvider

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.isemanticzoominformation)
public protocol ISemanticZoomInformation : WinRTInterface {
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.isemanticzoominformation.initializeviewchange)
    fn initializeViewChange() throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.isemanticzoominformation.completeviewchange)
    fn completeViewChange() throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.isemanticzoominformation.makevisible)
    fn makeVisible(_ item: WinUI.SemanticZoomLocation!) throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.isemanticzoominformation.startviewchangefrom)
    fn startViewChangeFrom(_ source: WinUI.SemanticZoomLocation!, _ destination: WinUI.SemanticZoomLocation!) throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.isemanticzoominformation.startviewchangeto)
    fn startViewChangeTo(_ source: WinUI.SemanticZoomLocation!, _ destination: WinUI.SemanticZoomLocation!) throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.isemanticzoominformation.completeviewchangefrom)
    fn completeViewChangeFrom(_ source: WinUI.SemanticZoomLocation!, _ destination: WinUI.SemanticZoomLocation!) throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.isemanticzoominformation.completeviewchangeto)
    fn completeViewChangeTo(_ source: WinUI.SemanticZoomLocation!, _ destination: WinUI.SemanticZoomLocation!) throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.isemanticzoominformation.isactiveview)
    var isActiveView: Boolean { get set }
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.isemanticzoominformation.iszoomedinview)
    var isZoomedInView: Boolean { get set }
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.controls.isemanticzoominformation.semanticzoomowner)
    var semanticZoomOwner: WinUI.SemanticZoom! { get set }
}

extension ISemanticZoomInformation {
    public fn queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_UI_Xaml_Controls.ISemanticZoomInformationWrapper.IID:
                immutable wrapper = __ABI_Microsoft_UI_Xaml_Controls.ISemanticZoomInformationWrapper(this)
                return wrapper!.queryInterface(iid)
            default: return Nothing
        }
    }
}
public typealias AnyISemanticZoomInformation = any ISemanticZoomInformation

extension WinUI.AutoSuggestionBoxTextChangeReason {
    public static var userInput : WinUI.AutoSuggestionBoxTextChangeReason {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CAutoSuggestionBoxTextChangeReason_UserInput
    }
    public static var programmaticChange : WinUI.AutoSuggestionBoxTextChangeReason {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CAutoSuggestionBoxTextChangeReason_ProgrammaticChange
    }
    public static var suggestionChosen : WinUI.AutoSuggestionBoxTextChangeReason {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CAutoSuggestionBoxTextChangeReason_SuggestionChosen
    }
}
extension WinUI.AutoSuggestionBoxTextChangeReason: @retroactive Hashable, @retroactive Codable {}

extension WinUI.BackgroundSizing {
    public static var innerBorderEdge : WinUI.BackgroundSizing {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CBackgroundSizing_InnerBorderEdge
    }
    public static var outerBorderEdge : WinUI.BackgroundSizing {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CBackgroundSizing_OuterBorderEdge
    }
}
extension WinUI.BackgroundSizing: @retroactive Hashable, @retroactive Codable {}

extension WinUI.CandidateWindowAlignment {
    public static var `default` : WinUI.CandidateWindowAlignment {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CCandidateWindowAlignment_Default
    }
    public static var bottomEdge : WinUI.CandidateWindowAlignment {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CCandidateWindowAlignment_BottomEdge
    }
}
extension WinUI.CandidateWindowAlignment: @retroactive Hashable, @retroactive Codable {}

extension WinUI.CharacterCasing {
    public static var normal : WinUI.CharacterCasing {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CCharacterCasing_Normal
    }
    public static var lower : WinUI.CharacterCasing {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CCharacterCasing_Lower
    }
    public static var upper : WinUI.CharacterCasing {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CCharacterCasing_Upper
    }
}
extension WinUI.CharacterCasing: @retroactive Hashable, @retroactive Codable {}

extension WinUI.ClickMode {
    public static var release : WinUI.ClickMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CClickMode_Release
    }
    public static var press : WinUI.ClickMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CClickMode_Press
    }
    public static var hover : WinUI.ClickMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CClickMode_Hover
    }
}
extension WinUI.ClickMode: @retroactive Hashable, @retroactive Codable {}

extension WinUI.ComboBoxSelectionChangedTrigger {
    public static var committed : WinUI.ComboBoxSelectionChangedTrigger {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CComboBoxSelectionChangedTrigger_Committed
    }
    public static var always : WinUI.ComboBoxSelectionChangedTrigger {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CComboBoxSelectionChangedTrigger_Always
    }
}
extension WinUI.ComboBoxSelectionChangedTrigger: @retroactive Hashable, @retroactive Codable {}

extension WinUI.ContentDialogButton {
    public static var none : WinUI.ContentDialogButton {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CContentDialogButton_None
    }
    public static var primary : WinUI.ContentDialogButton {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CContentDialogButton_Primary
    }
    public static var secondary : WinUI.ContentDialogButton {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CContentDialogButton_Secondary
    }
    public static var close : WinUI.ContentDialogButton {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CContentDialogButton_Close
    }
}
extension WinUI.ContentDialogButton: @retroactive Hashable, @retroactive Codable {}

extension WinUI.ContentDialogPlacement {
    public static var popup : WinUI.ContentDialogPlacement {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CContentDialogPlacement_Popup
    }
    public static var inPlace : WinUI.ContentDialogPlacement {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CContentDialogPlacement_InPlace
    }
}
extension WinUI.ContentDialogPlacement: @retroactive Hashable, @retroactive Codable {}

extension WinUI.ContentDialogResult {
    public static var none : WinUI.ContentDialogResult {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CContentDialogResult_None
    }
    public static var primary : WinUI.ContentDialogResult {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CContentDialogResult_Primary
    }
    public static var secondary : WinUI.ContentDialogResult {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CContentDialogResult_Secondary
    }
}
extension WinUI.ContentDialogResult: @retroactive Hashable, @retroactive Codable {}

extension WinUI.IncrementalLoadingTrigger {
    public static var none : WinUI.IncrementalLoadingTrigger {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIncrementalLoadingTrigger_None
    }
    public static var edge : WinUI.IncrementalLoadingTrigger {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIncrementalLoadingTrigger_Edge
    }
}
extension WinUI.IncrementalLoadingTrigger: @retroactive Hashable, @retroactive Codable {}

extension WinUI.LightDismissOverlayMode {
    public static var auto : WinUI.LightDismissOverlayMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CLightDismissOverlayMode_Auto
    }
    public static var on : WinUI.LightDismissOverlayMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CLightDismissOverlayMode_On
    }
    public static var off : WinUI.LightDismissOverlayMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CLightDismissOverlayMode_Off
    }
}
extension WinUI.LightDismissOverlayMode: @retroactive Hashable, @retroactive Codable {}

extension WinUI.ListViewReorderMode {
    public static var disabled : WinUI.ListViewReorderMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CListViewReorderMode_Disabled
    }
    public static var enabled : WinUI.ListViewReorderMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CListViewReorderMode_Enabled
    }
}
extension WinUI.ListViewReorderMode: @retroactive Hashable, @retroactive Codable {}

extension WinUI.ListViewSelectionMode {
    public static var none : WinUI.ListViewSelectionMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CListViewSelectionMode_None
    }
    public static var single : WinUI.ListViewSelectionMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CListViewSelectionMode_Single
    }
    public static var multiple : WinUI.ListViewSelectionMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CListViewSelectionMode_Multiple
    }
    public static var extended : WinUI.ListViewSelectionMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CListViewSelectionMode_Extended
    }
}
extension WinUI.ListViewSelectionMode: @retroactive Hashable, @retroactive Codable {}

extension WinUI.NavigationViewBackButtonVisible {
    public static var collapsed : WinUI.NavigationViewBackButtonVisible {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CNavigationViewBackButtonVisible_Collapsed
    }
    public static var visible : WinUI.NavigationViewBackButtonVisible {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CNavigationViewBackButtonVisible_Visible
    }
    public static var auto : WinUI.NavigationViewBackButtonVisible {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CNavigationViewBackButtonVisible_Auto
    }
}
extension WinUI.NavigationViewBackButtonVisible: @retroactive Hashable, @retroactive Codable {}

extension WinUI.NavigationViewDisplayMode {
    public static var minimal : WinUI.NavigationViewDisplayMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CNavigationViewDisplayMode_Minimal
    }
    public static var compact : WinUI.NavigationViewDisplayMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CNavigationViewDisplayMode_Compact
    }
    public static var expanded : WinUI.NavigationViewDisplayMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CNavigationViewDisplayMode_Expanded
    }
}
extension WinUI.NavigationViewDisplayMode: @retroactive Hashable, @retroactive Codable {}

extension WinUI.NavigationViewOverflowLabelMode {
    public static var moreLabel : WinUI.NavigationViewOverflowLabelMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CNavigationViewOverflowLabelMode_MoreLabel
    }
    public static var noLabel : WinUI.NavigationViewOverflowLabelMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CNavigationViewOverflowLabelMode_NoLabel
    }
}
extension WinUI.NavigationViewOverflowLabelMode: @retroactive Hashable, @retroactive Codable {}

extension WinUI.NavigationViewPaneDisplayMode {
    public static var auto : WinUI.NavigationViewPaneDisplayMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CNavigationViewPaneDisplayMode_Auto
    }
    public static var left : WinUI.NavigationViewPaneDisplayMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CNavigationViewPaneDisplayMode_Left
    }
    public static var top : WinUI.NavigationViewPaneDisplayMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CNavigationViewPaneDisplayMode_Top
    }
    public static var leftCompact : WinUI.NavigationViewPaneDisplayMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CNavigationViewPaneDisplayMode_LeftCompact
    }
    public static var leftMinimal : WinUI.NavigationViewPaneDisplayMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CNavigationViewPaneDisplayMode_LeftMinimal
    }
}
extension WinUI.NavigationViewPaneDisplayMode: @retroactive Hashable, @retroactive Codable {}

extension WinUI.NavigationViewSelectionFollowsFocus {
    public static var disabled : WinUI.NavigationViewSelectionFollowsFocus {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CNavigationViewSelectionFollowsFocus_Disabled
    }
    public static var enabled : WinUI.NavigationViewSelectionFollowsFocus {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CNavigationViewSelectionFollowsFocus_Enabled
    }
}
extension WinUI.NavigationViewSelectionFollowsFocus: @retroactive Hashable, @retroactive Codable {}

extension WinUI.NavigationViewShoulderNavigationEnabled {
    public static var whenSelectionFollowsFocus : WinUI.NavigationViewShoulderNavigationEnabled {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CNavigationViewShoulderNavigationEnabled_WhenSelectionFollowsFocus
    }
    public static var always : WinUI.NavigationViewShoulderNavigationEnabled {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CNavigationViewShoulderNavigationEnabled_Always
    }
    public static var never : WinUI.NavigationViewShoulderNavigationEnabled {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CNavigationViewShoulderNavigationEnabled_Never
    }
}
extension WinUI.NavigationViewShoulderNavigationEnabled: @retroactive Hashable, @retroactive Codable {}

extension WinUI.Orientation {
    public static var vertical : WinUI.Orientation {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_COrientation_Vertical
    }
    public static var horizontal : WinUI.Orientation {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_COrientation_Horizontal
    }
}
extension WinUI.Orientation: @retroactive Hashable, @retroactive Codable {}

extension WinUI.PasswordRevealMode {
    public static var peek : WinUI.PasswordRevealMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPasswordRevealMode_Peek
    }
    public static var hidden : WinUI.PasswordRevealMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPasswordRevealMode_Hidden
    }
    public static var visible : WinUI.PasswordRevealMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CPasswordRevealMode_Visible
    }
}
extension WinUI.PasswordRevealMode: @retroactive Hashable, @retroactive Codable {}

extension WinUI.RequiresPointer {
    public static var never : WinUI.RequiresPointer {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CRequiresPointer_Never
    }
    public static var whenEngaged : WinUI.RequiresPointer {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CRequiresPointer_WhenEngaged
    }
    public static var whenFocused : WinUI.RequiresPointer {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CRequiresPointer_WhenFocused
    }
}
extension WinUI.RequiresPointer: @retroactive Hashable, @retroactive Codable {}

extension WinUI.ScrollBarVisibility {
    public static var disabled : WinUI.ScrollBarVisibility {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollBarVisibility_Disabled
    }
    public static var auto : WinUI.ScrollBarVisibility {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollBarVisibility_Auto
    }
    public static var hidden : WinUI.ScrollBarVisibility {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollBarVisibility_Hidden
    }
    public static var visible : WinUI.ScrollBarVisibility {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollBarVisibility_Visible
    }
}
extension WinUI.ScrollBarVisibility: @retroactive Hashable, @retroactive Codable {}

extension WinUI.ScrollIntoViewAlignment {
    public static var `default` : WinUI.ScrollIntoViewAlignment {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollIntoViewAlignment_Default
    }
    public static var leading : WinUI.ScrollIntoViewAlignment {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollIntoViewAlignment_Leading
    }
}
extension WinUI.ScrollIntoViewAlignment: @retroactive Hashable, @retroactive Codable {}

extension WinUI.ScrollMode {
    public static var disabled : WinUI.ScrollMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollMode_Disabled
    }
    public static var enabled : WinUI.ScrollMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollMode_Enabled
    }
    public static var auto : WinUI.ScrollMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollMode_Auto
    }
}
extension WinUI.ScrollMode: @retroactive Hashable, @retroactive Codable {}

extension WinUI.ScrollingAnimationMode {
    public static var disabled : WinUI.ScrollingAnimationMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingAnimationMode_Disabled
    }
    public static var enabled : WinUI.ScrollingAnimationMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingAnimationMode_Enabled
    }
    public static var auto : WinUI.ScrollingAnimationMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingAnimationMode_Auto
    }
}
extension WinUI.ScrollingAnimationMode: @retroactive Hashable, @retroactive Codable {}

extension WinUI.ScrollingChainMode {
    public static var auto : WinUI.ScrollingChainMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingChainMode_Auto
    }
    public static var always : WinUI.ScrollingChainMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingChainMode_Always
    }
    public static var never : WinUI.ScrollingChainMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingChainMode_Never
    }
}
extension WinUI.ScrollingChainMode: @retroactive Hashable, @retroactive Codable {}

extension WinUI.ScrollingContentOrientation {
    public static var vertical : WinUI.ScrollingContentOrientation {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingContentOrientation_Vertical
    }
    public static var horizontal : WinUI.ScrollingContentOrientation {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingContentOrientation_Horizontal
    }
    public static var none : WinUI.ScrollingContentOrientation {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingContentOrientation_None
    }
    public static var both : WinUI.ScrollingContentOrientation {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingContentOrientation_Both
    }
}
extension WinUI.ScrollingContentOrientation: @retroactive Hashable, @retroactive Codable {}

extension WinUI.ScrollingInputKinds {
    public static var none : WinUI.ScrollingInputKinds {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingInputKinds_None
    }
    public static var touch : WinUI.ScrollingInputKinds {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingInputKinds_Touch
    }
    public static var pen : WinUI.ScrollingInputKinds {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingInputKinds_Pen
    }
    public static var mouseWheel : WinUI.ScrollingInputKinds {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingInputKinds_MouseWheel
    }
    public static var keyboard : WinUI.ScrollingInputKinds {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingInputKinds_Keyboard
    }
    public static var gamepad : WinUI.ScrollingInputKinds {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingInputKinds_Gamepad
    }
    public static var all : WinUI.ScrollingInputKinds {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingInputKinds_All
    }
}
extension WinUI.ScrollingInputKinds: @retroactive Hashable, @retroactive Codable {}

extension WinUI.ScrollingInteractionState {
    public static var idle : WinUI.ScrollingInteractionState {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingInteractionState_Idle
    }
    public static var interaction : WinUI.ScrollingInteractionState {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingInteractionState_Interaction
    }
    public static var inertia : WinUI.ScrollingInteractionState {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingInteractionState_Inertia
    }
    public static var animation : WinUI.ScrollingInteractionState {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingInteractionState_Animation
    }
}
extension WinUI.ScrollingInteractionState: @retroactive Hashable, @retroactive Codable {}

extension WinUI.ScrollingRailMode {
    public static var enabled : WinUI.ScrollingRailMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingRailMode_Enabled
    }
    public static var disabled : WinUI.ScrollingRailMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingRailMode_Disabled
    }
}
extension WinUI.ScrollingRailMode: @retroactive Hashable, @retroactive Codable {}

extension WinUI.ScrollingScrollBarVisibility {
    public static var auto : WinUI.ScrollingScrollBarVisibility {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingScrollBarVisibility_Auto
    }
    public static var visible : WinUI.ScrollingScrollBarVisibility {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingScrollBarVisibility_Visible
    }
    public static var hidden : WinUI.ScrollingScrollBarVisibility {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingScrollBarVisibility_Hidden
    }
}
extension WinUI.ScrollingScrollBarVisibility: @retroactive Hashable, @retroactive Codable {}

extension WinUI.ScrollingScrollMode {
    public static var enabled : WinUI.ScrollingScrollMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingScrollMode_Enabled
    }
    public static var disabled : WinUI.ScrollingScrollMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingScrollMode_Disabled
    }
    public static var auto : WinUI.ScrollingScrollMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingScrollMode_Auto
    }
}
extension WinUI.ScrollingScrollMode: @retroactive Hashable, @retroactive Codable {}

extension WinUI.ScrollingSnapPointsMode {
    public static var `default` : WinUI.ScrollingSnapPointsMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingSnapPointsMode_Default
    }
    public static var ignore : WinUI.ScrollingSnapPointsMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingSnapPointsMode_Ignore
    }
}
extension WinUI.ScrollingSnapPointsMode: @retroactive Hashable, @retroactive Codable {}

extension WinUI.ScrollingZoomMode {
    public static var enabled : WinUI.ScrollingZoomMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingZoomMode_Enabled
    }
    public static var disabled : WinUI.ScrollingZoomMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CScrollingZoomMode_Disabled
    }
}
extension WinUI.ScrollingZoomMode: @retroactive Hashable, @retroactive Codable {}

extension WinUI.SnapPointsType {
    public static var none : WinUI.SnapPointsType {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSnapPointsType_None
    }
    public static var optional : WinUI.SnapPointsType {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSnapPointsType_Optional
    }
    public static var mandatory : WinUI.SnapPointsType {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSnapPointsType_Mandatory
    }
    public static var optionalSingle : WinUI.SnapPointsType {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSnapPointsType_OptionalSingle
    }
    public static var mandatorySingle : WinUI.SnapPointsType {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSnapPointsType_MandatorySingle
    }
}
extension WinUI.SnapPointsType: @retroactive Hashable, @retroactive Codable {}

extension WinUI.SplitViewDisplayMode {
    public static var overlay : WinUI.SplitViewDisplayMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSplitViewDisplayMode_Overlay
    }
    public static var inline : WinUI.SplitViewDisplayMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSplitViewDisplayMode_Inline
    }
    public static var compactOverlay : WinUI.SplitViewDisplayMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSplitViewDisplayMode_CompactOverlay
    }
    public static var compactInline : WinUI.SplitViewDisplayMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSplitViewDisplayMode_CompactInline
    }
}
extension WinUI.SplitViewDisplayMode: @retroactive Hashable, @retroactive Codable {}

extension WinUI.SplitViewPanePlacement {
    public static var left : WinUI.SplitViewPanePlacement {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSplitViewPanePlacement_Left
    }
    public static var right : WinUI.SplitViewPanePlacement {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CSplitViewPanePlacement_Right
    }
}
extension WinUI.SplitViewPanePlacement: @retroactive Hashable, @retroactive Codable {}

extension WinUI.ZoomMode {
    public static var disabled : WinUI.ZoomMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CZoomMode_Disabled
    }
    public static var enabled : WinUI.ZoomMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CControls_CZoomMode_Enabled
    }
}
extension WinUI.ZoomMode: @retroactive Hashable, @retroactive Codable {}

