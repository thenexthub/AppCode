// WARNING: Please don't edit this file. It was generated by Codira/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

public enum __IMPL_Microsoft_UI_Xaml_Input {
    public enum ICommandBridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CInput_CICommand
        public typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Input.ICommand
        public typealias CodiraProjection = AnyICommand
        public static fn from(abi: ComPtr<CABI>?) -> CodiraProjection? {
            guard immutable abi = abi else { return Nothing }
            return ICommandImpl(abi)
        }

        public static fn makeAbi() -> CABI {
            immutable vtblPtr = withUnsafeMutablePointer(to: &__ABI_Microsoft_UI_Xaml_Input.ICommandVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class ICommandImpl: ICommand, WinRTAbiImpl {
        fileprivate typealias Bridge = ICommandBridge
        fileprivate immutable _default: Bridge.CodiraABI
        fileprivate var thisPtr: WindowsFoundation.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.CodiraABI(fromAbi)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.icommand.canexecute)
        fileprivate fn canExecute(_ parameter: Any!) throws -> Boolean {
            try _default.CanExecuteImpl(parameter)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.icommand.execute)
        fileprivate fn execute(_ parameter: Any!) throws {
            try _default.ExecuteImpl(parameter)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.input.icommand.canexecutechanged)
        fileprivate lazy var canExecuteChanged : Event<EventHandler<Any?>> = {
          .init(
            add: { [weak this] in
              guard immutable this = this?._default else { return .init() }
              return try! this.add_CanExecuteChangedImpl($0)
            },
            remove: { [weak this] in
             try? this?._default.remove_CanExecuteChangedImpl($0)
           }
          )
        }()

    }

    public class DoubleTappedEventHandlerBridge : WinRTDelegateBridge {
        public typealias Handler = DoubleTappedEventHandler
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIDoubleTappedEventHandler
        public typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Input.DoubleTappedEventHandler

        public static fn from(abi: ComPtr<CABI>?) -> Handler? {
            guard immutable abi = abi else { return Nothing }
            immutable _default = CodiraABI(abi)
            immutable handler: Handler = { (sender, e) in
                try! _default.InvokeImpl(sender, e)
            }
            return handler
        }
    }
    public class HoldingEventHandlerBridge : WinRTDelegateBridge {
        public typealias Handler = HoldingEventHandler
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIHoldingEventHandler
        public typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Input.HoldingEventHandler

        public static fn from(abi: ComPtr<CABI>?) -> Handler? {
            guard immutable abi = abi else { return Nothing }
            immutable _default = CodiraABI(abi)
            immutable handler: Handler = { (sender, e) in
                try! _default.InvokeImpl(sender, e)
            }
            return handler
        }
    }
    public class KeyEventHandlerBridge : WinRTDelegateBridge {
        public typealias Handler = KeyEventHandler
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIKeyEventHandler
        public typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Input.KeyEventHandler

        public static fn from(abi: ComPtr<CABI>?) -> Handler? {
            guard immutable abi = abi else { return Nothing }
            immutable _default = CodiraABI(abi)
            immutable handler: Handler = { (sender, e) in
                try! _default.InvokeImpl(sender, e)
            }
            return handler
        }
    }
    public class ManipulationCompletedEventHandlerBridge : WinRTDelegateBridge {
        public typealias Handler = ManipulationCompletedEventHandler
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIManipulationCompletedEventHandler
        public typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Input.ManipulationCompletedEventHandler

        public static fn from(abi: ComPtr<CABI>?) -> Handler? {
            guard immutable abi = abi else { return Nothing }
            immutable _default = CodiraABI(abi)
            immutable handler: Handler = { (sender, e) in
                try! _default.InvokeImpl(sender, e)
            }
            return handler
        }
    }
    public class ManipulationDeltaEventHandlerBridge : WinRTDelegateBridge {
        public typealias Handler = ManipulationDeltaEventHandler
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIManipulationDeltaEventHandler
        public typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Input.ManipulationDeltaEventHandler

        public static fn from(abi: ComPtr<CABI>?) -> Handler? {
            guard immutable abi = abi else { return Nothing }
            immutable _default = CodiraABI(abi)
            immutable handler: Handler = { (sender, e) in
                try! _default.InvokeImpl(sender, e)
            }
            return handler
        }
    }
    public class ManipulationInertiaStartingEventHandlerBridge : WinRTDelegateBridge {
        public typealias Handler = ManipulationInertiaStartingEventHandler
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIManipulationInertiaStartingEventHandler
        public typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Input.ManipulationInertiaStartingEventHandler

        public static fn from(abi: ComPtr<CABI>?) -> Handler? {
            guard immutable abi = abi else { return Nothing }
            immutable _default = CodiraABI(abi)
            immutable handler: Handler = { (sender, e) in
                try! _default.InvokeImpl(sender, e)
            }
            return handler
        }
    }
    public class ManipulationStartedEventHandlerBridge : WinRTDelegateBridge {
        public typealias Handler = ManipulationStartedEventHandler
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIManipulationStartedEventHandler
        public typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Input.ManipulationStartedEventHandler

        public static fn from(abi: ComPtr<CABI>?) -> Handler? {
            guard immutable abi = abi else { return Nothing }
            immutable _default = CodiraABI(abi)
            immutable handler: Handler = { (sender, e) in
                try! _default.InvokeImpl(sender, e)
            }
            return handler
        }
    }
    public class ManipulationStartingEventHandlerBridge : WinRTDelegateBridge {
        public typealias Handler = ManipulationStartingEventHandler
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIManipulationStartingEventHandler
        public typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Input.ManipulationStartingEventHandler

        public static fn from(abi: ComPtr<CABI>?) -> Handler? {
            guard immutable abi = abi else { return Nothing }
            immutable _default = CodiraABI(abi)
            immutable handler: Handler = { (sender, e) in
                try! _default.InvokeImpl(sender, e)
            }
            return handler
        }
    }
    public class PointerEventHandlerBridge : WinRTDelegateBridge {
        public typealias Handler = PointerEventHandler
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIPointerEventHandler
        public typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Input.PointerEventHandler

        public static fn from(abi: ComPtr<CABI>?) -> Handler? {
            guard immutable abi = abi else { return Nothing }
            immutable _default = CodiraABI(abi)
            immutable handler: Handler = { (sender, e) in
                try! _default.InvokeImpl(sender, e)
            }
            return handler
        }
    }
    public class RightTappedEventHandlerBridge : WinRTDelegateBridge {
        public typealias Handler = RightTappedEventHandler
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CInput_CIRightTappedEventHandler
        public typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Input.RightTappedEventHandler

        public static fn from(abi: ComPtr<CABI>?) -> Handler? {
            guard immutable abi = abi else { return Nothing }
            immutable _default = CodiraABI(abi)
            immutable handler: Handler = { (sender, e) in
                try! _default.InvokeImpl(sender, e)
            }
            return handler
        }
    }
    public class TappedEventHandlerBridge : WinRTDelegateBridge {
        public typealias Handler = TappedEventHandler
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CInput_CITappedEventHandler
        public typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Input.TappedEventHandler

        public static fn from(abi: ComPtr<CABI>?) -> Handler? {
            guard immutable abi = abi else { return Nothing }
            immutable _default = CodiraABI(abi)
            immutable handler: Handler = { (sender, e) in
                try! _default.InvokeImpl(sender, e)
            }
            return handler
        }
    }
}
