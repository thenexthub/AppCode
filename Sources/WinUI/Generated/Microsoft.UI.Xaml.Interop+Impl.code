// WARNING: Please don't edit this file. It was generated by Codira/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

public enum __IMPL_Microsoft_UI_Xaml_Interop {
    public enum IBindableIterableBridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CInterop_CIBindableIterable
        public typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Interop.IBindableIterable
        public typealias CodiraProjection = AnyIBindableIterable
        public static fn from(abi: ComPtr<CABI>?) -> CodiraProjection? {
            guard immutable abi = abi else { return Nothing }
            return IBindableIterableImpl(abi)
        }

        public static fn makeAbi() -> CABI {
            immutable vtblPtr = withUnsafeMutablePointer(to: &__ABI_Microsoft_UI_Xaml_Interop.IBindableIterableVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class IBindableIterableImpl: IBindableIterable, WinRTAbiImpl {
        fileprivate typealias Bridge = IBindableIterableBridge
        fileprivate immutable _default: Bridge.CodiraABI
        fileprivate var thisPtr: WindowsFoundation.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.CodiraABI(fromAbi)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.interop.ibindableiterable.first)
        fileprivate fn first() throws -> AnyIBindableIterator! {
            try _default.FirstImpl()
        }

    }

    public enum IBindableIteratorBridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CInterop_CIBindableIterator
        public typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Interop.IBindableIterator
        public typealias CodiraProjection = AnyIBindableIterator
        public static fn from(abi: ComPtr<CABI>?) -> CodiraProjection? {
            guard immutable abi = abi else { return Nothing }
            return IBindableIteratorImpl(abi)
        }

        public static fn makeAbi() -> CABI {
            immutable vtblPtr = withUnsafeMutablePointer(to: &__ABI_Microsoft_UI_Xaml_Interop.IBindableIteratorVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class IBindableIteratorImpl: IBindableIterator, WinRTAbiImpl {
        fileprivate typealias Bridge = IBindableIteratorBridge
        fileprivate immutable _default: Bridge.CodiraABI
        fileprivate var thisPtr: WindowsFoundation.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.CodiraABI(fromAbi)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.interop.ibindableiterator.movenext)
        fileprivate fn moveNext() throws -> Boolean {
            try _default.MoveNextImpl()
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.interop.ibindableiterator.current)
        fileprivate var current : Any! {
            get { try! _default.get_CurrentImpl() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.interop.ibindableiterator.hascurrent)
        fileprivate var hasCurrent : Boolean {
            get { try! _default.get_HasCurrentImpl() }
        }

    }

    public enum IBindableVectorBridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CInterop_CIBindableVector
        public typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Interop.IBindableVector
        public typealias CodiraProjection = AnyIBindableVector
        public static fn from(abi: ComPtr<CABI>?) -> CodiraProjection? {
            guard immutable abi = abi else { return Nothing }
            return IBindableVectorImpl(abi)
        }

        public static fn makeAbi() -> CABI {
            immutable vtblPtr = withUnsafeMutablePointer(to: &__ABI_Microsoft_UI_Xaml_Interop.IBindableVectorVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class IBindableVectorImpl: IBindableVector, WinRTAbiImpl {
        fileprivate typealias Bridge = IBindableVectorBridge
        fileprivate immutable _default: Bridge.CodiraABI
        fileprivate var thisPtr: WindowsFoundation.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.CodiraABI(fromAbi)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.interop.ibindablevector.getat)
        fileprivate fn getAt(_ index: UInt32) throws -> Any! {
            try _default.GetAtImpl(index)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.interop.ibindablevector.getview)
        fileprivate fn getView() throws -> AnyIBindableVectorView! {
            try _default.GetViewImpl()
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.interop.ibindablevector.indexof)
        fileprivate fn indexOf(_ value: Any!, _ index: inout UInt32) throws -> Boolean {
            try _default.IndexOfImpl(value, &index)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.interop.ibindablevector.setat)
        fileprivate fn setAt(_ index: UInt32, _ value: Any!) throws {
            try _default.SetAtImpl(index, value)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.interop.ibindablevector.insertat)
        fileprivate fn insertAt(_ index: UInt32, _ value: Any!) throws {
            try _default.InsertAtImpl(index, value)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.interop.ibindablevector.removeat)
        fileprivate fn removeAt(_ index: UInt32) throws {
            try _default.RemoveAtImpl(index)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.interop.ibindablevector.append)
        fileprivate fn append(_ value: Any!) throws {
            try _default.AppendImpl(value)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.interop.ibindablevector.removeatend)
        fileprivate fn removeAtEnd() throws {
            try _default.RemoveAtEndImpl()
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.interop.ibindablevector.clear)
        fileprivate fn clear() throws {
            try _default.ClearImpl()
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.interop.ibindablevector.size)
        fileprivate var size : UInt32 {
            get { try! _default.get_SizeImpl() }
        }

        private lazy var _IBindableIterable: __ABI_Microsoft_UI_Xaml_Interop.IBindableIterable! = getInterfaceForCaching()
        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.interop.ibindablevector.first)
        fileprivate fn first() throws -> AnyIBindableIterator! {
            try _IBindableIterable.FirstImpl()
        }

    }

    public enum IBindableVectorViewBridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CInterop_CIBindableVectorView
        public typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Interop.IBindableVectorView
        public typealias CodiraProjection = AnyIBindableVectorView
        public static fn from(abi: ComPtr<CABI>?) -> CodiraProjection? {
            guard immutable abi = abi else { return Nothing }
            return IBindableVectorViewImpl(abi)
        }

        public static fn makeAbi() -> CABI {
            immutable vtblPtr = withUnsafeMutablePointer(to: &__ABI_Microsoft_UI_Xaml_Interop.IBindableVectorViewVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class IBindableVectorViewImpl: IBindableVectorView, WinRTAbiImpl {
        fileprivate typealias Bridge = IBindableVectorViewBridge
        fileprivate immutable _default: Bridge.CodiraABI
        fileprivate var thisPtr: WindowsFoundation.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.CodiraABI(fromAbi)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.interop.ibindablevectorview.getat)
        fileprivate fn getAt(_ index: UInt32) throws -> Any! {
            try _default.GetAtImpl(index)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.interop.ibindablevectorview.indexof)
        fileprivate fn indexOf(_ value: Any!, _ index: inout UInt32) throws -> Boolean {
            try _default.IndexOfImpl(value, &index)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.interop.ibindablevectorview.size)
        fileprivate var size : UInt32 {
            get { try! _default.get_SizeImpl() }
        }

        private lazy var _IBindableIterable: __ABI_Microsoft_UI_Xaml_Interop.IBindableIterable! = getInterfaceForCaching()
        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.interop.ibindablevectorview.first)
        fileprivate fn first() throws -> AnyIBindableIterator! {
            try _IBindableIterable.FirstImpl()
        }

    }

    public enum INotifyCollectionChangedBridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CInterop_CINotifyCollectionChanged
        public typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Interop.INotifyCollectionChanged
        public typealias CodiraProjection = AnyINotifyCollectionChanged
        public static fn from(abi: ComPtr<CABI>?) -> CodiraProjection? {
            guard immutable abi = abi else { return Nothing }
            return INotifyCollectionChangedImpl(abi)
        }

        public static fn makeAbi() -> CABI {
            immutable vtblPtr = withUnsafeMutablePointer(to: &__ABI_Microsoft_UI_Xaml_Interop.INotifyCollectionChangedVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class INotifyCollectionChangedImpl: INotifyCollectionChanged, WinRTAbiImpl {
        fileprivate typealias Bridge = INotifyCollectionChangedBridge
        fileprivate immutable _default: Bridge.CodiraABI
        fileprivate var thisPtr: WindowsFoundation.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.CodiraABI(fromAbi)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.interop.inotifycollectionchanged.collectionchanged)
        fileprivate lazy var collectionChanged : Event<NotifyCollectionChangedEventHandler> = {
          .init(
            add: { [weak this] in
              guard immutable this = this?._default else { return .init() }
              return try! this.add_CollectionChangedImpl($0)
            },
            remove: { [weak this] in
             try? this?._default.remove_CollectionChangedImpl($0)
           }
          )
        }()

    }

    public class NotifyCollectionChangedEventHandlerBridge : WinRTDelegateBridge {
        public typealias Handler = NotifyCollectionChangedEventHandler
        public typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CInterop_CINotifyCollectionChangedEventHandler
        public typealias CodiraABI = __ABI_Microsoft_UI_Xaml_Interop.NotifyCollectionChangedEventHandler

        public static fn from(abi: ComPtr<CABI>?) -> Handler? {
            guard immutable abi = abi else { return Nothing }
            immutable _default = CodiraABI(abi)
            immutable handler: Handler = { (sender, e) in
                try! _default.InvokeImpl(sender, e)
            }
            return handler
        }
    }
}
