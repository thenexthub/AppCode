// WARNING: Please don't edit this file. It was generated by Codira/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import UWP
@_spi(WinRTInternal) @_spi(WinRTImplements) import WinAppSDK
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.applicationhighcontrastadjustment)
public typealias ApplicationHighContrastAdjustment = __x_ABI_CMicrosoft_CUI_CXaml_CApplicationHighContrastAdjustment
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.applicationtheme)
public typealias ApplicationTheme = __x_ABI_CMicrosoft_CUI_CXaml_CApplicationTheme
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.dispatchershutdownmode)
public typealias DispatcherShutdownMode = __x_ABI_CMicrosoft_CUI_CXaml_CDispatcherShutdownMode
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.durationtype)
public typealias DurationType = __x_ABI_CMicrosoft_CUI_CXaml_CDurationType
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.elementhighcontrastadjustment)
public typealias ElementHighContrastAdjustment = __x_ABI_CMicrosoft_CUI_CXaml_CElementHighContrastAdjustment
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.elementsoundmode)
public typealias ElementSoundMode = __x_ABI_CMicrosoft_CUI_CXaml_CElementSoundMode
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.elementtheme)
public typealias ElementTheme = __x_ABI_CMicrosoft_CUI_CXaml_CElementTheme
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.flowdirection)
public typealias FlowDirection = __x_ABI_CMicrosoft_CUI_CXaml_CFlowDirection
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.focusstate)
public typealias FocusState = __x_ABI_CMicrosoft_CUI_CXaml_CFocusState
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.focusvisualkind)
public typealias FocusVisualKind = __x_ABI_CMicrosoft_CUI_CXaml_CFocusVisualKind
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.gridunittype)
public typealias GridUnitType = __x_ABI_CMicrosoft_CUI_CXaml_CGridUnitType
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.horizontalalignment)
public typealias HorizontalAlignment = __x_ABI_CMicrosoft_CUI_CXaml_CHorizontalAlignment
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.layoutcycledebugbreaklevel)
public typealias LayoutCycleDebugBreakLevel = __x_ABI_CMicrosoft_CUI_CXaml_CLayoutCycleDebugBreakLevel
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.layoutcycletracinglevel)
public typealias LayoutCycleTracingLevel = __x_ABI_CMicrosoft_CUI_CXaml_CLayoutCycleTracingLevel
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.linestackingstrategy)
public typealias LineStackingStrategy = __x_ABI_CMicrosoft_CUI_CXaml_CLineStackingStrategy
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.opticalmarginalignment)
public typealias OpticalMarginAlignment = __x_ABI_CMicrosoft_CUI_CXaml_COpticalMarginAlignment
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.textalignment)
public typealias TextAlignment = __x_ABI_CMicrosoft_CUI_CXaml_CTextAlignment
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.textlinebounds)
public typealias TextLineBounds = __x_ABI_CMicrosoft_CUI_CXaml_CTextLineBounds
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.textreadingorder)
public typealias TextReadingOrder = __x_ABI_CMicrosoft_CUI_CXaml_CTextReadingOrder
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.texttrimming)
public typealias TextTrimming = __x_ABI_CMicrosoft_CUI_CXaml_CTextTrimming
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.textwrapping)
public typealias TextWrapping = __x_ABI_CMicrosoft_CUI_CXaml_CTextWrapping
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.vector3transitioncomponents)
public typealias Vector3TransitionComponents = __x_ABI_CMicrosoft_CUI_CXaml_CVector3TransitionComponents
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.verticalalignment)
public typealias VerticalAlignment = __x_ABI_CMicrosoft_CUI_CXaml_CVerticalAlignment
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.visibility)
public typealias Visibility = __x_ABI_CMicrosoft_CUI_CXaml_CVisibility
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.windowactivationstate)
public typealias WindowActivationState = __x_ABI_CMicrosoft_CUI_CXaml_CWindowActivationState
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.application)
open class Application : WinRTClass {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml.IApplication
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIApplication
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CIApplication>?) -> Application? {
        guard immutable abi = abi else { return Nothing }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    @_spi(WinRTInternal)
    public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.CodiraABI)
    {
        super.init()
        MakeComposed(composing: composing, (this as! Composable.Class), createCallback)
    }
    override open fn queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_UI_Xaml.IApplicationOverridesWrapper.IID:
                immutable wrapper = __ABI_Microsoft_UI_Xaml.IApplicationOverridesWrapper(this)
                return wrapper!.queryInterface(iid)
            default: return super.queryInterface(iid)
        }
    }
    private static var _IApplicationFactory : __ABI_Microsoft_UI_Xaml.IApplicationFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Application"))

    override public init() {
        super.init()
        MakeComposed(composing: Self.Composable.this, this) { baseInterface, innerInterface in 
            try! Self._IApplicationFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static immutable _IApplicationStatics: __ABI_Microsoft_UI_Xaml.IApplicationStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Application"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.application.start)
    public class fn start(_ callback: ApplicationInitializationCallback!) {
        try! _IApplicationStatics.StartImpl(callback)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.application.loadcomponent)
    public class fn loadComponent(_ component: Any!, _ resourceLocator: WindowsFoundation.Uri!) {
        try! _IApplicationStatics.LoadComponentImpl(component, resourceLocator)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.application.loadcomponent)
    public class fn loadComponent(_ component: Any!, _ resourceLocator: WindowsFoundation.Uri!, _ componentResourceLocation: WinUI.ComponentResourceLocation) {
        try! _IApplicationStatics.LoadComponentWithResourceLocationImpl(component, resourceLocator, componentResourceLocation)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.application.current)
    public class var current : Application! {
        get { try! _IApplicationStatics.get_CurrentImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.application.exit)
    public fn exit() throws {
        try _default.ExitImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.application.debugsettings)
    public var debugSettings : DebugSettings! {
        get { try! _default.get_DebugSettingsImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.application.focusvisualkind)
    public var focusVisualKind : FocusVisualKind {
        get { try! _default.get_FocusVisualKindImpl() }
        set { try! _default.put_FocusVisualKindImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.application.highcontrastadjustment)
    public var highContrastAdjustment : ApplicationHighContrastAdjustment {
        get { try! _default.get_HighContrastAdjustmentImpl() }
        set { try! _default.put_HighContrastAdjustmentImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.application.requestedtheme)
    public var requestedTheme : ApplicationTheme {
        get { try! _default.get_RequestedThemeImpl() }
        set { try! _default.put_RequestedThemeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.application.resources)
    public var resources : ResourceDictionary! {
        get { try! _default.get_ResourcesImpl() }
        set { try! _default.put_ResourcesImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.application.unhandledexception)
    public lazy var unhandledException : Event<UnhandledExceptionEventHandler> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_UnhandledExceptionImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_UnhandledExceptionImpl($0)
       }
      )
    }()

    private lazy var _IApplication2: __ABI_Microsoft_UI_Xaml.IApplication2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.application.resourcemanagerrequested)
    public lazy var resourceManagerRequested : Event<TypedEventHandler<Any?, ResourceManagerRequestedEventArgs?>> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._IApplication2 else { return .init() }
          return try! this.add_ResourceManagerRequestedImpl($0)
        },
        remove: { [weak this] in
         try? this?._IApplication2.remove_ResourceManagerRequestedImpl($0)
       }
      )
    }()

    private lazy var _IApplication3: __ABI_Microsoft_UI_Xaml.IApplication3! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.application.dispatchershutdownmode)
    public var dispatcherShutdownMode : DispatcherShutdownMode {
        get { try! _IApplication3.get_DispatcherShutdownModeImpl() }
        set { try! _IApplication3.put_DispatcherShutdownModeImpl(newValue) }
    }

    private lazy var _IApplicationOverrides: __ABI_Microsoft_UI_Xaml.IApplicationOverrides! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.application.onlaunched)
    open fn onLaunched(_ args: LaunchActivatedEventArgs!) throws {
        try _IApplicationOverrides.OnLaunchedImpl(args)
    }

    internal enum IApplicationOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIApplicationOverrides
        internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml.IApplicationOverrides
        internal typealias Class = Application
        internal typealias CodiraProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIApplication
            internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml.IApplication
        }
    }
    internal typealias Composable = IApplicationOverrides
    deinit {
        _default = Nothing
        _IApplication2 = Nothing
        _IApplication3 = Nothing
        _IApplicationOverrides = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.applicationinitializationcallbackparams)
public final class ApplicationInitializationCallbackParams : WinRTClass {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml.IApplicationInitializationCallbackParams
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIApplicationInitializationCallbackParams
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CIApplicationInitializationCallbackParams>?) -> ApplicationInitializationCallbackParams? {
        guard immutable abi = abi else { return Nothing }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.bindingfailedeventargs)
public final class BindingFailedEventArgs : WinRTClass {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml.IBindingFailedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIBindingFailedEventArgs
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CIBindingFailedEventArgs>?) -> BindingFailedEventArgs? {
        guard immutable abi = abi else { return Nothing }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.bindingfailedeventargs.message)
    public var message : String {
        get { try! _default.get_MessageImpl() }
    }

    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.bringintoviewoptions)
public final class BringIntoViewOptions : WinRTClass {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml.IBringIntoViewOptions
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIBringIntoViewOptions
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CIBringIntoViewOptions>?) -> BringIntoViewOptions? {
        guard immutable abi = abi else { return Nothing }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public init() {
        super.init(try! RoActivateInstance(HString("Microsoft.UI.Xaml.BringIntoViewOptions")))
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.bringintoviewoptions.animationdesired)
    public var animationDesired : Boolean {
        get { try! _default.get_AnimationDesiredImpl() }
        set { try! _default.put_AnimationDesiredImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.bringintoviewoptions.horizontalalignmentratio)
    public var horizontalAlignmentRatio : Double {
        get { try! _default.get_HorizontalAlignmentRatioImpl() }
        set { try! _default.put_HorizontalAlignmentRatioImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.bringintoviewoptions.horizontaloffset)
    public var horizontalOffset : Double {
        get { try! _default.get_HorizontalOffsetImpl() }
        set { try! _default.put_HorizontalOffsetImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.bringintoviewoptions.targetrect)
    public var targetRect : WindowsFoundation.Rect? {
        get { try! _default.get_TargetRectImpl() }
        set { try! _default.put_TargetRectImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.bringintoviewoptions.verticalalignmentratio)
    public var verticalAlignmentRatio : Double {
        get { try! _default.get_VerticalAlignmentRatioImpl() }
        set { try! _default.put_VerticalAlignmentRatioImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.bringintoviewoptions.verticaloffset)
    public var verticalOffset : Double {
        get { try! _default.get_VerticalOffsetImpl() }
        set { try! _default.put_VerticalOffsetImpl(newValue) }
    }

    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.bringintoviewrequestedeventargs)
public final class BringIntoViewRequestedEventArgs : WinUI.RoutedEventArgs {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml.IBringIntoViewRequestedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIBringIntoViewRequestedEventArgs
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CIBringIntoViewRequestedEventArgs>?) -> BringIntoViewRequestedEventArgs? {
        guard immutable abi = abi else { return Nothing }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.bringintoviewrequestedeventargs.animationdesired)
    public var animationDesired : Boolean {
        get { try! _default.get_AnimationDesiredImpl() }
        set { try! _default.put_AnimationDesiredImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.bringintoviewrequestedeventargs.handled)
    public var handled : Boolean {
        get { try! _default.get_HandledImpl() }
        set { try! _default.put_HandledImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.bringintoviewrequestedeventargs.horizontalalignmentratio)
    public var horizontalAlignmentRatio : Double {
        get { try! _default.get_HorizontalAlignmentRatioImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.bringintoviewrequestedeventargs.horizontaloffset)
    public var horizontalOffset : Double {
        get { try! _default.get_HorizontalOffsetImpl() }
        set { try! _default.put_HorizontalOffsetImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.bringintoviewrequestedeventargs.targetelement)
    public var targetElement : UIElement! {
        get { try! _default.get_TargetElementImpl() }
        set { try! _default.put_TargetElementImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.bringintoviewrequestedeventargs.targetrect)
    public var targetRect : WindowsFoundation.Rect {
        get { try! _default.get_TargetRectImpl() }
        set { try! _default.put_TargetRectImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.bringintoviewrequestedeventargs.verticalalignmentratio)
    public var verticalAlignmentRatio : Double {
        get { try! _default.get_VerticalAlignmentRatioImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.bringintoviewrequestedeventargs.verticaloffset)
    public var verticalOffset : Double {
        get { try! _default.get_VerticalOffsetImpl() }
        set { try! _default.put_VerticalOffsetImpl(newValue) }
    }

    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.brushtransition)
open class BrushTransition : WinRTClass {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml.IBrushTransition
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIBrushTransition
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CIBrushTransition>?) -> BrushTransition? {
        guard immutable abi = abi else { return Nothing }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    @_spi(WinRTInternal)
    public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.CodiraABI)
    {
        super.init()
        MakeComposed(composing: composing, (this as! Composable.Class), createCallback)
    }
    override open fn queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IBrushTransitionFactory : __ABI_Microsoft_UI_Xaml.IBrushTransitionFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.BrushTransition"))

    override public init() {
        super.init()
        MakeComposed(composing: Self.Composable.this, this) { baseInterface, innerInterface in 
            try! Self._IBrushTransitionFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.brushtransition.duration)
    public var duration : WindowsFoundation.TimeSpan {
        get { try! _default.get_DurationImpl() }
        set { try! _default.put_DurationImpl(newValue) }
    }

    internal enum IBrushTransition : ComposableImpl {
        internal typealias CABI = C_IInspectable
        internal typealias CodiraABI = WindowsFoundation.IInspectable
        internal typealias Class = BrushTransition
        internal typealias CodiraProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIBrushTransition
            internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml.IBrushTransition
        }
    }
    internal typealias Composable = IBrushTransition
    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.datacontextchangedeventargs)
public final class DataContextChangedEventArgs : WinRTClass {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml.IDataContextChangedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIDataContextChangedEventArgs
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CIDataContextChangedEventArgs>?) -> DataContextChangedEventArgs? {
        guard immutable abi = abi else { return Nothing }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.datacontextchangedeventargs.handled)
    public var handled : Boolean {
        get { try! _default.get_HandledImpl() }
        set { try! _default.put_HandledImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.datacontextchangedeventargs.newvalue)
    public var newValue : Any! {
        get { try! _default.get_NewValueImpl() }
    }

    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.datatemplate)
open class DataTemplate : WinUI.FrameworkTemplate, IElementFactory {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml.IDataTemplate
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIDataTemplate
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CIDataTemplate>?) -> DataTemplate? {
        guard immutable abi = abi else { return Nothing }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.CodiraABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open fn queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IDataTemplateFactory : __ABI_Microsoft_UI_Xaml.IDataTemplateFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.DataTemplate"))

    override public init() {
        super.init(composing: Self.Composable.this) { baseInterface, innerInterface in 
            try! Self._IDataTemplateFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static immutable _IDataTemplateStatics: __ABI_Microsoft_UI_Xaml.IDataTemplateStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.DataTemplate"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.datatemplate.getextensioninstance)
    public class fn getExtensionInstance(_ element: FrameworkElement!) -> AnyIDataTemplateExtension! {
        return try! _IDataTemplateStatics.GetExtensionInstanceImpl(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.datatemplate.setextensioninstance)
    public class fn setExtensionInstance(_ element: FrameworkElement!, _ value: AnyIDataTemplateExtension!) {
        try! _IDataTemplateStatics.SetExtensionInstanceImpl(element, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.datatemplate.extensioninstanceproperty)
    public class var extensionInstanceProperty : DependencyProperty! {
        get { try! _IDataTemplateStatics.get_ExtensionInstancePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.datatemplate.loadcontent)
    public fn loadContent() throws -> DependencyObject! {
        try _default.LoadContentImpl()
    }

    private lazy var _IElementFactory: __ABI_Microsoft_UI_Xaml.IElementFactory! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.datatemplate.getelement)
    public fn getElement(_ args: ElementFactoryGetArgs!) throws -> UIElement! {
        try _IElementFactory.GetElementImpl(args)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.datatemplate.recycleelement)
    public fn recycleElement(_ args: ElementFactoryRecycleArgs!) throws {
        try _IElementFactory.RecycleElementImpl(args)
    }

    internal enum IDataTemplate : ComposableImpl {
        internal typealias CABI = C_IInspectable
        internal typealias CodiraABI = WindowsFoundation.IInspectable
        internal typealias Class = DataTemplate
        internal typealias CodiraProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIDataTemplate
            internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml.IDataTemplate
        }
    }
    internal typealias Composable = IDataTemplate
    deinit {
        _default = Nothing
        _IElementFactory = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.debugsettings)
public final class DebugSettings : WinRTClass {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml.IDebugSettings
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIDebugSettings
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CIDebugSettings>?) -> DebugSettings? {
        guard immutable abi = abi else { return Nothing }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.debugsettings.enableframeratecounter)
    public var enableFrameRateCounter : Boolean {
        get { try! _default.get_EnableFrameRateCounterImpl() }
        set { try! _default.put_EnableFrameRateCounterImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.debugsettings.failfastonerrors)
    public var failFastOnErrors : Boolean {
        get { try! _default.get_FailFastOnErrorsImpl() }
        set { try! _default.put_FailFastOnErrorsImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.debugsettings.isbindingtracingenabled)
    public var isBindingTracingEnabled : Boolean {
        get { try! _default.get_IsBindingTracingEnabledImpl() }
        set { try! _default.put_IsBindingTracingEnabledImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.debugsettings.istextperformancevisualizationenabled)
    public var isTextPerformanceVisualizationEnabled : Boolean {
        get { try! _default.get_IsTextPerformanceVisualizationEnabledImpl() }
        set { try! _default.put_IsTextPerformanceVisualizationEnabledImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.debugsettings.bindingfailed)
    public lazy var bindingFailed : Event<BindingFailedEventHandler> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_BindingFailedImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_BindingFailedImpl($0)
       }
      )
    }()

    private lazy var _IDebugSettings2: __ABI_Microsoft_UI_Xaml.IDebugSettings2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.debugsettings.isxamlresourcereferencetracingenabled)
    public var isXamlResourceReferenceTracingEnabled : Boolean {
        get { try! _IDebugSettings2.get_IsXamlResourceReferenceTracingEnabledImpl() }
        set { try! _IDebugSettings2.put_IsXamlResourceReferenceTracingEnabledImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.debugsettings.xamlresourcereferencefailed)
    public lazy var xamlResourceReferenceFailed : Event<TypedEventHandler<DebugSettings?, XamlResourceReferenceFailedEventArgs?>> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._IDebugSettings2 else { return .init() }
          return try! this.add_XamlResourceReferenceFailedImpl($0)
        },
        remove: { [weak this] in
         try? this?._IDebugSettings2.remove_XamlResourceReferenceFailedImpl($0)
       }
      )
    }()

    private lazy var _IDebugSettings3: __ABI_Microsoft_UI_Xaml.IDebugSettings3! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.debugsettings.layoutcycledebugbreaklevel)
    public var layoutCycleDebugBreakLevel : LayoutCycleDebugBreakLevel {
        get { try! _IDebugSettings3.get_LayoutCycleDebugBreakLevelImpl() }
        set { try! _IDebugSettings3.put_LayoutCycleDebugBreakLevelImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.debugsettings.layoutcycletracinglevel)
    public var layoutCycleTracingLevel : LayoutCycleTracingLevel {
        get { try! _IDebugSettings3.get_LayoutCycleTracingLevelImpl() }
        set { try! _IDebugSettings3.put_LayoutCycleTracingLevelImpl(newValue) }
    }

    deinit {
        _default = Nothing
        _IDebugSettings2 = Nothing
        _IDebugSettings3 = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.dependencyobject)
open class DependencyObject : WinRTClass {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml.IDependencyObject
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIDependencyObject
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CIDependencyObject>?) -> DependencyObject? {
        guard immutable abi = abi else { return Nothing }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    @_spi(WinRTInternal)
    public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.CodiraABI)
    {
        super.init()
        MakeComposed(composing: composing, (this as! Composable.Class), createCallback)
    }
    override open fn queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IDependencyObjectFactory : __ABI_Microsoft_UI_Xaml.IDependencyObjectFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.DependencyObject"))

    override public init() {
        super.init()
        MakeComposed(composing: Self.Composable.this, this) { baseInterface, innerInterface in 
            try! Self._IDependencyObjectFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.dependencyobject.getvalue)
    public fn getValue(_ dp: DependencyProperty!) throws -> Any! {
        try _default.GetValueImpl(dp)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.dependencyobject.setvalue)
    public fn setValue(_ dp: DependencyProperty!, _ value: Any!) throws {
        try _default.SetValueImpl(dp, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.dependencyobject.clearvalue)
    public fn clearValue(_ dp: DependencyProperty!) throws {
        try _default.ClearValueImpl(dp)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.dependencyobject.readlocalvalue)
    public fn readLocalValue(_ dp: DependencyProperty!) throws -> Any! {
        try _default.ReadLocalValueImpl(dp)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.dependencyobject.getanimationbasevalue)
    public fn getAnimationBaseValue(_ dp: DependencyProperty!) throws -> Any! {
        try _default.GetAnimationBaseValueImpl(dp)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.dependencyobject.registerpropertychangedcallback)
    public fn registerPropertyChangedCallback(_ dp: DependencyProperty!, _ callback: DependencyPropertyChangedCallback!) throws -> Int64 {
        try _default.RegisterPropertyChangedCallbackImpl(dp, callback)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.dependencyobject.unregisterpropertychangedcallback)
    public fn unregisterPropertyChangedCallback(_ dp: DependencyProperty!, _ token: Int64) throws {
        try _default.UnregisterPropertyChangedCallbackImpl(dp, token)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.dependencyobject.dispatcher)
    public var dispatcher : UWP.CoreDispatcher! {
        get { try! _default.get_DispatcherImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.dependencyobject.dispatcherqueue)
    public var dispatcherQueue : WinAppSDK.DispatcherQueue! {
        get { try! _default.get_DispatcherQueueImpl() }
    }

    internal enum IDependencyObject : ComposableImpl {
        internal typealias CABI = C_IInspectable
        internal typealias CodiraABI = WindowsFoundation.IInspectable
        internal typealias Class = DependencyObject
        internal typealias CodiraProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIDependencyObject
            internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml.IDependencyObject
        }
    }
    internal typealias Composable = IDependencyObject
    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.dependencyproperty)
public final class DependencyProperty : WinRTClass {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml.IDependencyProperty
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIDependencyProperty
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CIDependencyProperty>?) -> DependencyProperty? {
        guard immutable abi = abi else { return Nothing }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    private static immutable _IDependencyPropertyStatics: __ABI_Microsoft_UI_Xaml.IDependencyPropertyStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.DependencyProperty"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.dependencyproperty.register)
    public static fn register(_ name: String, _ propertyType: WinUI.TypeName, _ ownerType: WinUI.TypeName, _ typeMetadata: PropertyMetadata!) -> DependencyProperty! {
        return try! _IDependencyPropertyStatics.RegisterImpl(name, propertyType, ownerType, typeMetadata)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.dependencyproperty.registerattached)
    public static fn registerAttached(_ name: String, _ propertyType: WinUI.TypeName, _ ownerType: WinUI.TypeName, _ defaultMetadata: PropertyMetadata!) -> DependencyProperty! {
        return try! _IDependencyPropertyStatics.RegisterAttachedImpl(name, propertyType, ownerType, defaultMetadata)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.dependencyproperty.unsetvalue)
    public static var unsetValue : Any! {
        get { try! _IDependencyPropertyStatics.get_UnsetValueImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.dependencyproperty.getmetadata)
    public fn getMetadata(_ forType: WinUI.TypeName) throws -> PropertyMetadata! {
        try _default.GetMetadataImpl(forType)
    }

    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.dependencypropertychangedeventargs)
public final class DependencyPropertyChangedEventArgs : WinRTClass {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml.IDependencyPropertyChangedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIDependencyPropertyChangedEventArgs
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CIDependencyPropertyChangedEventArgs>?) -> DependencyPropertyChangedEventArgs? {
        guard immutable abi = abi else { return Nothing }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.dependencypropertychangedeventargs.newvalue)
    public var newValue : Any! {
        get { try! _default.get_NewValueImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.dependencypropertychangedeventargs.oldvalue)
    public var oldValue : Any! {
        get { try! _default.get_OldValueImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.dependencypropertychangedeventargs.property)
    public var property : DependencyProperty! {
        get { try! _default.get_PropertyImpl() }
    }

    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.drageventargs)
public final class DragEventArgs : WinUI.RoutedEventArgs {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml.IDragEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIDragEventArgs
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CIDragEventArgs>?) -> DragEventArgs? {
        guard immutable abi = abi else { return Nothing }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.drageventargs.getdeferral)
    public fn getDeferral() throws -> DragOperationDeferral! {
        try _default.GetDeferralImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.drageventargs.getposition)
    public fn getPosition(_ relativeTo: UIElement!) throws -> WindowsFoundation.Point {
        try _default.GetPositionImpl(relativeTo)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.drageventargs.acceptedoperation)
    public var acceptedOperation : UWP.DataPackageOperation {
        get { try! _default.get_AcceptedOperationImpl() }
        set { try! _default.put_AcceptedOperationImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.drageventargs.allowedoperations)
    public var allowedOperations : UWP.DataPackageOperation {
        get { try! _default.get_AllowedOperationsImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.drageventargs.data)
    public var data : UWP.DataPackage! {
        get { try! _default.get_DataImpl() }
        set { try! _default.put_DataImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.drageventargs.dataview)
    public var dataView : UWP.DataPackageView! {
        get { try! _default.get_DataViewImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.drageventargs.draguioverride)
    public var dragUIOverride : DragUIOverride! {
        get { try! _default.get_DragUIOverrideImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.drageventargs.handled)
    public var handled : Boolean {
        get { try! _default.get_HandledImpl() }
        set { try! _default.put_HandledImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.drageventargs.modifiers)
    public var modifiers : UWP.DragDropModifiers {
        get { try! _default.get_ModifiersImpl() }
    }

    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.dragoperationdeferral)
public final class DragOperationDeferral : WinRTClass {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml.IDragOperationDeferral
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIDragOperationDeferral
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CIDragOperationDeferral>?) -> DragOperationDeferral? {
        guard immutable abi = abi else { return Nothing }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.dragoperationdeferral.complete)
    public fn complete() throws {
        try _default.CompleteImpl()
    }

    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.dragstartingeventargs)
public final class DragStartingEventArgs : WinUI.RoutedEventArgs {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml.IDragStartingEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIDragStartingEventArgs
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CIDragStartingEventArgs>?) -> DragStartingEventArgs? {
        guard immutable abi = abi else { return Nothing }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.dragstartingeventargs.getdeferral)
    public fn getDeferral() throws -> DragOperationDeferral! {
        try _default.GetDeferralImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.dragstartingeventargs.getposition)
    public fn getPosition(_ relativeTo: UIElement!) throws -> WindowsFoundation.Point {
        try _default.GetPositionImpl(relativeTo)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.dragstartingeventargs.allowedoperations)
    public var allowedOperations : UWP.DataPackageOperation {
        get { try! _default.get_AllowedOperationsImpl() }
        set { try! _default.put_AllowedOperationsImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.dragstartingeventargs.cancel)
    public var cancel : Boolean {
        get { try! _default.get_CancelImpl() }
        set { try! _default.put_CancelImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.dragstartingeventargs.data)
    public var data : UWP.DataPackage! {
        get { try! _default.get_DataImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.dragstartingeventargs.dragui)
    public var dragUI : DragUI! {
        get { try! _default.get_DragUIImpl() }
    }

    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.dragui)
public final class DragUI : WinRTClass {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml.IDragUI
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIDragUI
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CIDragUI>?) -> DragUI? {
        guard immutable abi = abi else { return Nothing }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.dragui.setcontentfrombitmapimage)
    public fn setContentFromBitmapImage(_ bitmapImage: WinUI.BitmapImage!) throws {
        try _default.SetContentFromBitmapImageImpl(bitmapImage)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.dragui.setcontentfrombitmapimage)
    public fn setContentFromBitmapImage(_ bitmapImage: WinUI.BitmapImage!, _ anchorPoint: WindowsFoundation.Point) throws {
        try _default.SetContentFromBitmapImageWithAnchorPointImpl(bitmapImage, anchorPoint)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.dragui.setcontentfromsoftwarebitmap)
    public fn setContentFromSoftwareBitmap(_ softwareBitmap: UWP.SoftwareBitmap!) throws {
        try _default.SetContentFromSoftwareBitmapImpl(softwareBitmap)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.dragui.setcontentfromsoftwarebitmap)
    public fn setContentFromSoftwareBitmap(_ softwareBitmap: UWP.SoftwareBitmap!, _ anchorPoint: WindowsFoundation.Point) throws {
        try _default.SetContentFromSoftwareBitmapWithAnchorPointImpl(softwareBitmap, anchorPoint)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.dragui.setcontentfromdatapackage)
    public fn setContentFromDataPackage() throws {
        try _default.SetContentFromDataPackageImpl()
    }

    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.draguioverride)
public final class DragUIOverride : WinRTClass {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml.IDragUIOverride
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIDragUIOverride
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CIDragUIOverride>?) -> DragUIOverride? {
        guard immutable abi = abi else { return Nothing }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.draguioverride.clear)
    public fn clear() throws {
        try _default.ClearImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.draguioverride.setcontentfrombitmapimage)
    public fn setContentFromBitmapImage(_ bitmapImage: WinUI.BitmapImage!) throws {
        try _default.SetContentFromBitmapImageImpl(bitmapImage)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.draguioverride.setcontentfrombitmapimage)
    public fn setContentFromBitmapImage(_ bitmapImage: WinUI.BitmapImage!, _ anchorPoint: WindowsFoundation.Point) throws {
        try _default.SetContentFromBitmapImageWithAnchorPointImpl(bitmapImage, anchorPoint)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.draguioverride.setcontentfromsoftwarebitmap)
    public fn setContentFromSoftwareBitmap(_ softwareBitmap: UWP.SoftwareBitmap!) throws {
        try _default.SetContentFromSoftwareBitmapImpl(softwareBitmap)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.draguioverride.setcontentfromsoftwarebitmap)
    public fn setContentFromSoftwareBitmap(_ softwareBitmap: UWP.SoftwareBitmap!, _ anchorPoint: WindowsFoundation.Point) throws {
        try _default.SetContentFromSoftwareBitmapWithAnchorPointImpl(softwareBitmap, anchorPoint)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.draguioverride.caption)
    public var caption : String {
        get { try! _default.get_CaptionImpl() }
        set { try! _default.put_CaptionImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.draguioverride.iscaptionvisible)
    public var isCaptionVisible : Boolean {
        get { try! _default.get_IsCaptionVisibleImpl() }
        set { try! _default.put_IsCaptionVisibleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.draguioverride.iscontentvisible)
    public var isContentVisible : Boolean {
        get { try! _default.get_IsContentVisibleImpl() }
        set { try! _default.put_IsContentVisibleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.draguioverride.isglyphvisible)
    public var isGlyphVisible : Boolean {
        get { try! _default.get_IsGlyphVisibleImpl() }
        set { try! _default.put_IsGlyphVisibleImpl(newValue) }
    }

    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.dropcompletedeventargs)
public final class DropCompletedEventArgs : WinUI.RoutedEventArgs {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml.IDropCompletedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIDropCompletedEventArgs
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CIDropCompletedEventArgs>?) -> DropCompletedEventArgs? {
        guard immutable abi = abi else { return Nothing }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.dropcompletedeventargs.dropresult)
    public var dropResult : UWP.DataPackageOperation {
        get { try! _default.get_DropResultImpl() }
    }

    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.effectiveviewportchangedeventargs)
public final class EffectiveViewportChangedEventArgs : WinRTClass {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml.IEffectiveViewportChangedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIEffectiveViewportChangedEventArgs
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CIEffectiveViewportChangedEventArgs>?) -> EffectiveViewportChangedEventArgs? {
        guard immutable abi = abi else { return Nothing }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.effectiveviewportchangedeventargs.bringintoviewdistancex)
    public var bringIntoViewDistanceX : Double {
        get { try! _default.get_BringIntoViewDistanceXImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.effectiveviewportchangedeventargs.bringintoviewdistancey)
    public var bringIntoViewDistanceY : Double {
        get { try! _default.get_BringIntoViewDistanceYImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.effectiveviewportchangedeventargs.effectiveviewport)
    public var effectiveViewport : WindowsFoundation.Rect {
        get { try! _default.get_EffectiveViewportImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.effectiveviewportchangedeventargs.maxviewport)
    public var maxViewport : WindowsFoundation.Rect {
        get { try! _default.get_MaxViewportImpl() }
    }

    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.elementfactorygetargs)
open class ElementFactoryGetArgs : WinRTClass {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml.IElementFactoryGetArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIElementFactoryGetArgs
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CIElementFactoryGetArgs>?) -> ElementFactoryGetArgs? {
        guard immutable abi = abi else { return Nothing }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    @_spi(WinRTInternal)
    public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.CodiraABI)
    {
        super.init()
        MakeComposed(composing: composing, (this as! Composable.Class), createCallback)
    }
    override open fn queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IElementFactoryGetArgsFactory : __ABI_Microsoft_UI_Xaml.IElementFactoryGetArgsFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.ElementFactoryGetArgs"))

    override public init() {
        super.init()
        MakeComposed(composing: Self.Composable.this, this) { baseInterface, innerInterface in 
            try! Self._IElementFactoryGetArgsFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.elementfactorygetargs.data)
    public var data : Any! {
        get { try! _default.get_DataImpl() }
        set { try! _default.put_DataImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.elementfactorygetargs.parent)
    public var parent : UIElement! {
        get { try! _default.get_ParentImpl() }
        set { try! _default.put_ParentImpl(newValue) }
    }

    internal enum IElementFactoryGetArgs : ComposableImpl {
        internal typealias CABI = C_IInspectable
        internal typealias CodiraABI = WindowsFoundation.IInspectable
        internal typealias Class = ElementFactoryGetArgs
        internal typealias CodiraProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIElementFactoryGetArgs
            internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml.IElementFactoryGetArgs
        }
    }
    internal typealias Composable = IElementFactoryGetArgs
    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.elementfactoryrecycleargs)
open class ElementFactoryRecycleArgs : WinRTClass {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml.IElementFactoryRecycleArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIElementFactoryRecycleArgs
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CIElementFactoryRecycleArgs>?) -> ElementFactoryRecycleArgs? {
        guard immutable abi = abi else { return Nothing }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    @_spi(WinRTInternal)
    public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.CodiraABI)
    {
        super.init()
        MakeComposed(composing: composing, (this as! Composable.Class), createCallback)
    }
    override open fn queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IElementFactoryRecycleArgsFactory : __ABI_Microsoft_UI_Xaml.IElementFactoryRecycleArgsFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.ElementFactoryRecycleArgs"))

    override public init() {
        super.init()
        MakeComposed(composing: Self.Composable.this, this) { baseInterface, innerInterface in 
            try! Self._IElementFactoryRecycleArgsFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.elementfactoryrecycleargs.element)
    public var element : UIElement! {
        get { try! _default.get_ElementImpl() }
        set { try! _default.put_ElementImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.elementfactoryrecycleargs.parent)
    public var parent : UIElement! {
        get { try! _default.get_ParentImpl() }
        set { try! _default.put_ParentImpl(newValue) }
    }

    internal enum IElementFactoryRecycleArgs : ComposableImpl {
        internal typealias CABI = C_IInspectable
        internal typealias CodiraABI = WindowsFoundation.IInspectable
        internal typealias Class = ElementFactoryRecycleArgs
        internal typealias CodiraProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIElementFactoryRecycleArgs
            internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml.IElementFactoryRecycleArgs
        }
    }
    internal typealias Composable = IElementFactoryRecycleArgs
    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.exceptionroutedeventargs)
open class ExceptionRoutedEventArgs : WinUI.RoutedEventArgs {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml.IExceptionRoutedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIExceptionRoutedEventArgs
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CIExceptionRoutedEventArgs>?) -> ExceptionRoutedEventArgs? {
        guard immutable abi = abi else { return Nothing }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.CodiraABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open fn queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IExceptionRoutedEventArgsFactory : __ABI_Microsoft_UI_Xaml.IExceptionRoutedEventArgsFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.ExceptionRoutedEventArgs"))

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.exceptionroutedeventargs.errormessage)
    public var errorMessage : String {
        get { try! _default.get_ErrorMessageImpl() }
    }

    internal enum IExceptionRoutedEventArgs : ComposableImpl {
        internal typealias CABI = C_IInspectable
        internal typealias CodiraABI = WindowsFoundation.IInspectable
        internal typealias Class = ExceptionRoutedEventArgs
        internal typealias CodiraProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIExceptionRoutedEventArgs
            internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml.IExceptionRoutedEventArgs
        }
    }
    internal typealias Composable = IExceptionRoutedEventArgs
    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement)
open class FrameworkElement : WinUI.UIElement {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml.IFrameworkElement
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIFrameworkElement
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CIFrameworkElement>?) -> FrameworkElement? {
        guard immutable abi = abi else { return Nothing }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.CodiraABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open fn queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_UI_Xaml.IFrameworkElementOverridesWrapper.IID:
                immutable wrapper = __ABI_Microsoft_UI_Xaml.IFrameworkElementOverridesWrapper(this)
                return wrapper!.queryInterface(iid)
            default: return super.queryInterface(iid)
        }
    }
    private static var _IFrameworkElementFactory : __ABI_Microsoft_UI_Xaml.IFrameworkElementFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.FrameworkElement"))

    public init() {
        super.init(composing: Self.Composable.this) { baseInterface, innerInterface in 
            try! Self._IFrameworkElementFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static immutable _IFrameworkElementStatics: __ABI_Microsoft_UI_Xaml.IFrameworkElementStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.FrameworkElement"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.defertree)
    public class fn deferTree(_ element: DependencyObject!) {
        try! _IFrameworkElementStatics.DeferTreeImpl(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.actualheightproperty)
    public class var actualHeightProperty : DependencyProperty! {
        get { try! _IFrameworkElementStatics.get_ActualHeightPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.actualthemeproperty)
    public class var actualThemeProperty : DependencyProperty! {
        get { try! _IFrameworkElementStatics.get_ActualThemePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.actualwidthproperty)
    public class var actualWidthProperty : DependencyProperty! {
        get { try! _IFrameworkElementStatics.get_ActualWidthPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.allowfocusoninteractionproperty)
    public class var allowFocusOnInteractionProperty : DependencyProperty! {
        get { try! _IFrameworkElementStatics.get_AllowFocusOnInteractionPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.allowfocuswhendisabledproperty)
    public class var allowFocusWhenDisabledProperty : DependencyProperty! {
        get { try! _IFrameworkElementStatics.get_AllowFocusWhenDisabledPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.datacontextproperty)
    public class var dataContextProperty : DependencyProperty! {
        get { try! _IFrameworkElementStatics.get_DataContextPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.flowdirectionproperty)
    public class var flowDirectionProperty : DependencyProperty! {
        get { try! _IFrameworkElementStatics.get_FlowDirectionPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.focusvisualmarginproperty)
    public class var focusVisualMarginProperty : DependencyProperty! {
        get { try! _IFrameworkElementStatics.get_FocusVisualMarginPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.focusvisualprimarybrushproperty)
    public class var focusVisualPrimaryBrushProperty : DependencyProperty! {
        get { try! _IFrameworkElementStatics.get_FocusVisualPrimaryBrushPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.focusvisualprimarythicknessproperty)
    public class var focusVisualPrimaryThicknessProperty : DependencyProperty! {
        get { try! _IFrameworkElementStatics.get_FocusVisualPrimaryThicknessPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.focusvisualsecondarybrushproperty)
    public class var focusVisualSecondaryBrushProperty : DependencyProperty! {
        get { try! _IFrameworkElementStatics.get_FocusVisualSecondaryBrushPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.focusvisualsecondarythicknessproperty)
    public class var focusVisualSecondaryThicknessProperty : DependencyProperty! {
        get { try! _IFrameworkElementStatics.get_FocusVisualSecondaryThicknessPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.heightproperty)
    public class var heightProperty : DependencyProperty! {
        get { try! _IFrameworkElementStatics.get_HeightPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.horizontalalignmentproperty)
    public class var horizontalAlignmentProperty : DependencyProperty! {
        get { try! _IFrameworkElementStatics.get_HorizontalAlignmentPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.languageproperty)
    public class var languageProperty : DependencyProperty! {
        get { try! _IFrameworkElementStatics.get_LanguagePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.marginproperty)
    public class var marginProperty : DependencyProperty! {
        get { try! _IFrameworkElementStatics.get_MarginPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.maxheightproperty)
    public class var maxHeightProperty : DependencyProperty! {
        get { try! _IFrameworkElementStatics.get_MaxHeightPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.maxwidthproperty)
    public class var maxWidthProperty : DependencyProperty! {
        get { try! _IFrameworkElementStatics.get_MaxWidthPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.minheightproperty)
    public class var minHeightProperty : DependencyProperty! {
        get { try! _IFrameworkElementStatics.get_MinHeightPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.minwidthproperty)
    public class var minWidthProperty : DependencyProperty! {
        get { try! _IFrameworkElementStatics.get_MinWidthPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.nameproperty)
    public class var nameProperty : DependencyProperty! {
        get { try! _IFrameworkElementStatics.get_NamePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.requestedthemeproperty)
    public class var requestedThemeProperty : DependencyProperty! {
        get { try! _IFrameworkElementStatics.get_RequestedThemePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.styleproperty)
    public class var styleProperty : DependencyProperty! {
        get { try! _IFrameworkElementStatics.get_StylePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.tagproperty)
    public class var tagProperty : DependencyProperty! {
        get { try! _IFrameworkElementStatics.get_TagPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.verticalalignmentproperty)
    public class var verticalAlignmentProperty : DependencyProperty! {
        get { try! _IFrameworkElementStatics.get_VerticalAlignmentPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.widthproperty)
    public class var widthProperty : DependencyProperty! {
        get { try! _IFrameworkElementStatics.get_WidthPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.findname)
    public fn findName(_ name: String) throws -> Any! {
        try _default.FindNameImpl(name)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.setbinding)
    public fn setBinding(_ dp: DependencyProperty!, _ binding: WinUI.BindingBase!) throws {
        try _default.SetBindingImpl(dp, binding)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.getbindingexpression)
    public fn getBindingExpression(_ dp: DependencyProperty!) throws -> WinUI.BindingExpression! {
        try _default.GetBindingExpressionImpl(dp)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.actualheight)
    public var actualHeight : Double {
        get { try! _default.get_ActualHeightImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.actualtheme)
    public var actualTheme : ElementTheme {
        get { try! _default.get_ActualThemeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.actualwidth)
    public var actualWidth : Double {
        get { try! _default.get_ActualWidthImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.allowfocusoninteraction)
    public var allowFocusOnInteraction : Boolean {
        get { try! _default.get_AllowFocusOnInteractionImpl() }
        set { try! _default.put_AllowFocusOnInteractionImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.allowfocuswhendisabled)
    public var allowFocusWhenDisabled : Boolean {
        get { try! _default.get_AllowFocusWhenDisabledImpl() }
        set { try! _default.put_AllowFocusWhenDisabledImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.baseuri)
    public var baseUri : WindowsFoundation.Uri! {
        get { try! _default.get_BaseUriImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.datacontext)
    public var dataContext : Any! {
        get { try! _default.get_DataContextImpl() }
        set { try! _default.put_DataContextImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.flowdirection)
    public var flowDirection : FlowDirection {
        get { try! _default.get_FlowDirectionImpl() }
        set { try! _default.put_FlowDirectionImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.focusvisualmargin)
    public var focusVisualMargin : Thickness {
        get { try! _default.get_FocusVisualMarginImpl() }
        set { try! _default.put_FocusVisualMarginImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.focusvisualprimarybrush)
    public var focusVisualPrimaryBrush : WinUI.Brush! {
        get { try! _default.get_FocusVisualPrimaryBrushImpl() }
        set { try! _default.put_FocusVisualPrimaryBrushImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.focusvisualprimarythickness)
    public var focusVisualPrimaryThickness : Thickness {
        get { try! _default.get_FocusVisualPrimaryThicknessImpl() }
        set { try! _default.put_FocusVisualPrimaryThicknessImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.focusvisualsecondarybrush)
    public var focusVisualSecondaryBrush : WinUI.Brush! {
        get { try! _default.get_FocusVisualSecondaryBrushImpl() }
        set { try! _default.put_FocusVisualSecondaryBrushImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.focusvisualsecondarythickness)
    public var focusVisualSecondaryThickness : Thickness {
        get { try! _default.get_FocusVisualSecondaryThicknessImpl() }
        set { try! _default.put_FocusVisualSecondaryThicknessImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.height)
    public var height : Double {
        get { try! _default.get_HeightImpl() }
        set { try! _default.put_HeightImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.horizontalalignment)
    public var horizontalAlignment : HorizontalAlignment {
        get { try! _default.get_HorizontalAlignmentImpl() }
        set { try! _default.put_HorizontalAlignmentImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.isloaded)
    public var isLoaded : Boolean {
        get { try! _default.get_IsLoadedImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.language)
    public var language : String {
        get { try! _default.get_LanguageImpl() }
        set { try! _default.put_LanguageImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.margin)
    public var margin : Thickness {
        get { try! _default.get_MarginImpl() }
        set { try! _default.put_MarginImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.maxheight)
    public var maxHeight : Double {
        get { try! _default.get_MaxHeightImpl() }
        set { try! _default.put_MaxHeightImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.maxwidth)
    public var maxWidth : Double {
        get { try! _default.get_MaxWidthImpl() }
        set { try! _default.put_MaxWidthImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.minheight)
    public var minHeight : Double {
        get { try! _default.get_MinHeightImpl() }
        set { try! _default.put_MinHeightImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.minwidth)
    public var minWidth : Double {
        get { try! _default.get_MinWidthImpl() }
        set { try! _default.put_MinWidthImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.name)
    public var name : String {
        get { try! _default.get_NameImpl() }
        set { try! _default.put_NameImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.parent)
    public var parent : DependencyObject! {
        get { try! _default.get_ParentImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.requestedtheme)
    public var requestedTheme : ElementTheme {
        get { try! _default.get_RequestedThemeImpl() }
        set { try! _default.put_RequestedThemeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.resources)
    public var resources : ResourceDictionary! {
        get { try! _default.get_ResourcesImpl() }
        set { try! _default.put_ResourcesImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.style)
    public var style : Style! {
        get { try! _default.get_StyleImpl() }
        set { try! _default.put_StyleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.tag)
    public var tag : Any! {
        get { try! _default.get_TagImpl() }
        set { try! _default.put_TagImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.triggers)
    public var triggers : TriggerCollection! {
        get { try! _default.get_TriggersImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.verticalalignment)
    public var verticalAlignment : VerticalAlignment {
        get { try! _default.get_VerticalAlignmentImpl() }
        set { try! _default.put_VerticalAlignmentImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.width)
    public var width : Double {
        get { try! _default.get_WidthImpl() }
        set { try! _default.put_WidthImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.actualthemechanged)
    public lazy var actualThemeChanged : Event<TypedEventHandler<FrameworkElement?, Any?>> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_ActualThemeChangedImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_ActualThemeChangedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.datacontextchanged)
    public lazy var dataContextChanged : Event<TypedEventHandler<FrameworkElement?, DataContextChangedEventArgs?>> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_DataContextChangedImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_DataContextChangedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.effectiveviewportchanged)
    public lazy var effectiveViewportChanged : Event<TypedEventHandler<FrameworkElement?, EffectiveViewportChangedEventArgs?>> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_EffectiveViewportChangedImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_EffectiveViewportChangedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.layoutupdated)
    public lazy var layoutUpdated : Event<EventHandler<Any?>> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_LayoutUpdatedImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_LayoutUpdatedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.loaded)
    public lazy var loaded : Event<RoutedEventHandler> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_LoadedImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_LoadedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.loading)
    public lazy var loading : Event<TypedEventHandler<FrameworkElement?, Any?>> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_LoadingImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_LoadingImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.sizechanged)
    public lazy var sizeChanged : Event<SizeChangedEventHandler> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_SizeChangedImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_SizeChangedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.unloaded)
    public lazy var unloaded : Event<RoutedEventHandler> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_UnloadedImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_UnloadedImpl($0)
       }
      )
    }()

    private lazy var _IFrameworkElementProtected: __ABI_Microsoft_UI_Xaml.IFrameworkElementProtected! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.invalidateviewport)
    public fn invalidateViewport() throws {
        try _IFrameworkElementProtected.InvalidateViewportImpl()
    }

    private lazy var _IFrameworkElementOverrides: __ABI_Microsoft_UI_Xaml.IFrameworkElementOverrides! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.measureoverride)
    open fn measureOverride(_ availableSize: WindowsFoundation.Size) throws -> WindowsFoundation.Size {
        try _IFrameworkElementOverrides.MeasureOverrideImpl(availableSize)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.arrangeoverride)
    open fn arrangeOverride(_ finalSize: WindowsFoundation.Size) throws -> WindowsFoundation.Size {
        try _IFrameworkElementOverrides.ArrangeOverrideImpl(finalSize)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.onapplytemplate)
    open fn onApplyTemplate() throws {
        try _IFrameworkElementOverrides.OnApplyTemplateImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworkelement.gotoelementstatecore)
    open fn goToElementStateCore(_ stateName: String, _ useTransitions: Boolean) throws -> Boolean {
        try _IFrameworkElementOverrides.GoToElementStateCoreImpl(stateName, useTransitions)
    }

    internal enum IFrameworkElementOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIFrameworkElementOverrides
        internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml.IFrameworkElementOverrides
        internal typealias Class = FrameworkElement
        internal typealias CodiraProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIFrameworkElement
            internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml.IFrameworkElement
        }
    }
    internal typealias Composable = IFrameworkElementOverrides
    deinit {
        _default = Nothing
        _IFrameworkElementProtected = Nothing
        _IFrameworkElementOverrides = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.frameworktemplate)
open class FrameworkTemplate : WinUI.DependencyObject {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml.IFrameworkTemplate
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIFrameworkTemplate
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CIFrameworkTemplate>?) -> FrameworkTemplate? {
        guard immutable abi = abi else { return Nothing }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.CodiraABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open fn queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IFrameworkTemplateFactory : __ABI_Microsoft_UI_Xaml.IFrameworkTemplateFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.FrameworkTemplate"))

    override public init() {
        super.init(composing: Self.Composable.this) { baseInterface, innerInterface in 
            try! Self._IFrameworkTemplateFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    internal enum IFrameworkTemplate : ComposableImpl {
        internal typealias CABI = C_IInspectable
        internal typealias CodiraABI = WindowsFoundation.IInspectable
        internal typealias Class = FrameworkTemplate
        internal typealias CodiraProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIFrameworkTemplate
            internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml.IFrameworkTemplate
        }
    }
    internal typealias Composable = IFrameworkTemplate
    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.launchactivatedeventargs)
public final class LaunchActivatedEventArgs : WinRTClass {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml.ILaunchActivatedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CILaunchActivatedEventArgs
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CILaunchActivatedEventArgs>?) -> LaunchActivatedEventArgs? {
        guard immutable abi = abi else { return Nothing }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.launchactivatedeventargs.arguments)
    public var arguments : String {
        get { try! _default.get_ArgumentsImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.launchactivatedeventargs.uwplaunchactivatedeventargs)
    public var uwpLaunchActivatedEventArgs : UWP.LaunchActivatedEventArgs! {
        get { try! _default.get_UWPLaunchActivatedEventArgsImpl() }
    }

    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.propertymetadata)
open class PropertyMetadata : WinRTClass {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml.IPropertyMetadata
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIPropertyMetadata
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CIPropertyMetadata>?) -> PropertyMetadata? {
        guard immutable abi = abi else { return Nothing }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    @_spi(WinRTInternal)
    public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.CodiraABI)
    {
        super.init()
        MakeComposed(composing: composing, (this as! Composable.Class), createCallback)
    }
    override open fn queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IPropertyMetadataFactory : __ABI_Microsoft_UI_Xaml.IPropertyMetadataFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.PropertyMetadata"))

    public init(_ defaultValue: Any!) {
        super.init()
        MakeComposed(composing: Self.Composable.this, this) { baseInterface, innerInterface in 
            try! Self._IPropertyMetadataFactory.CreateInstanceWithDefaultValueImpl(defaultValue, baseInterface, &innerInterface)
        }
    }

    public init(_ defaultValue: Any!, _ propertyChangedCallback: PropertyChangedCallback!) {
        super.init()
        MakeComposed(composing: Self.Composable.this, this) { baseInterface, innerInterface in 
            try! Self._IPropertyMetadataFactory.CreateInstanceWithDefaultValueAndCallbackImpl(defaultValue, propertyChangedCallback, baseInterface, &innerInterface)
        }
    }

    private static immutable _IPropertyMetadataStatics: __ABI_Microsoft_UI_Xaml.IPropertyMetadataStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.PropertyMetadata"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.propertymetadata.create)
    public class fn create(_ defaultValue: Any!) -> PropertyMetadata! {
        return try! _IPropertyMetadataStatics.CreateWithDefaultValueImpl(defaultValue)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.propertymetadata.create)
    public class fn create(_ defaultValue: Any!, _ propertyChangedCallback: PropertyChangedCallback!) -> PropertyMetadata! {
        return try! _IPropertyMetadataStatics.CreateWithDefaultValueAndCallbackImpl(defaultValue, propertyChangedCallback)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.propertymetadata.create)
    public class fn create(_ createDefaultValueCallback: CreateDefaultValueCallback!) -> PropertyMetadata! {
        return try! _IPropertyMetadataStatics.CreateWithFactoryImpl(createDefaultValueCallback)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.propertymetadata.create)
    public class fn create(_ createDefaultValueCallback: CreateDefaultValueCallback!, _ propertyChangedCallback: PropertyChangedCallback!) -> PropertyMetadata! {
        return try! _IPropertyMetadataStatics.CreateWithFactoryAndCallbackImpl(createDefaultValueCallback, propertyChangedCallback)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.propertymetadata.createdefaultvaluecallback)
    public var createDefaultValueCallback : CreateDefaultValueCallback! {
        get { try! _default.get_CreateDefaultValueCallbackImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.propertymetadata.defaultvalue)
    public var defaultValue : Any! {
        get { try! _default.get_DefaultValueImpl() }
    }

    internal enum IPropertyMetadata : ComposableImpl {
        internal typealias CABI = C_IInspectable
        internal typealias CodiraABI = WindowsFoundation.IInspectable
        internal typealias Class = PropertyMetadata
        internal typealias CodiraProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIPropertyMetadata
            internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml.IPropertyMetadata
        }
    }
    internal typealias Composable = IPropertyMetadata
    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.propertypath)
public final class PropertyPath : WinUI.DependencyObject {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml.IPropertyPath
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIPropertyPath
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CIPropertyPath>?) -> PropertyPath? {
        guard immutable abi = abi else { return Nothing }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    private static immutable _IPropertyPathFactory: __ABI_Microsoft_UI_Xaml.IPropertyPathFactory = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.PropertyPath"))
    public init(_ path: String) {
        super.init(fromAbi: try! Self._IPropertyPathFactory.CreateInstanceImpl(path))
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.propertypath.path)
    public var path : String {
        get { try! _default.get_PathImpl() }
    }

    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.resourcedictionary)
open class ResourceDictionary : WinUI.DependencyObject, IMap, IIterable {
    public typealias K = Any?
    public typealias V = Any?
    public typealias T = WindowsFoundation.AnyIKeyValuePair<Any?, Any?>?
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml.IResourceDictionary
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIResourceDictionary
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CIResourceDictionary>?) -> ResourceDictionary? {
        guard immutable abi = abi else { return Nothing }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.CodiraABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open fn queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IResourceDictionaryFactory : __ABI_Microsoft_UI_Xaml.IResourceDictionaryFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.ResourceDictionary"))

    override public init() {
        super.init(composing: Self.Composable.this) { baseInterface, innerInterface in 
            try! Self._IResourceDictionaryFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.resourcedictionary.mergeddictionaries)
    public var mergedDictionaries : WindowsFoundation.AnyIVector<ResourceDictionary?>! {
        get { try! _default.get_MergedDictionariesImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.resourcedictionary.source)
    public var source : WindowsFoundation.Uri! {
        get { try! _default.get_SourceImpl() }
        set { try! _default.put_SourceImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.resourcedictionary.themedictionaries)
    public var themeDictionaries : WindowsFoundation.AnyIMap<Any?, Any?>! {
        get { try! _default.get_ThemeDictionariesImpl() }
    }

    private lazy var _IMap: IMapAny_Any! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.resourcedictionary.lookup)
    public fn lookup(_ key: Any?) -> Any? {
        try! _IMap.LookupImpl(key)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.resourcedictionary.haskey)
    public fn hasKey(_ key: Any?) -> Boolean {
        try! _IMap.HasKeyImpl(key)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.resourcedictionary.getview)
    public fn getView() -> WindowsFoundation.AnyIMapView<Any?, Any?>? {
        try! _IMap.GetViewImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.resourcedictionary.insert)
    public fn insert(_ key: Any?, _ value: Any?) -> Boolean {
        try! _IMap.InsertImpl(key, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.resourcedictionary.remove)
    public fn remove(_ key: Any?) {
        try! _IMap.RemoveImpl(key)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.resourcedictionary.clear)
    public fn clear() {
        try! _IMap.ClearImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.resourcedictionary.size)
    public var size : UInt32 {
        get { try! _IMap.get_SizeImpl() }
    }

    private lazy var _IIterable: IIterableIKeyValuePairAny_Any! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.resourcedictionary.first)
    public fn first() -> WindowsFoundation.AnyIIterator<WindowsFoundation.AnyIKeyValuePair<Any?, Any?>?>? {
        try! _IIterable.FirstImpl()
    }

    internal enum IResourceDictionary : ComposableImpl {
        internal typealias CABI = C_IInspectable
        internal typealias CodiraABI = WindowsFoundation.IInspectable
        internal typealias Class = ResourceDictionary
        internal typealias CodiraProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIResourceDictionary
            internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml.IResourceDictionary
        }
    }
    internal typealias Composable = IResourceDictionary
    deinit {
        _default = Nothing
        _IMap = Nothing
        _IIterable = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.resourcemanagerrequestedeventargs)
public final class ResourceManagerRequestedEventArgs : WinRTClass {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml.IResourceManagerRequestedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIResourceManagerRequestedEventArgs
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CIResourceManagerRequestedEventArgs>?) -> ResourceManagerRequestedEventArgs? {
        guard immutable abi = abi else { return Nothing }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.resourcemanagerrequestedeventargs.customresourcemanager)
    public var customResourceManager : WinAppSDK.AnyIResourceManager! {
        get { try! _default.get_CustomResourceManagerImpl() }
        set { try! _default.put_CustomResourceManagerImpl(newValue) }
    }

    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.routedevent)
public final class RoutedEvent : WinRTClass {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml.IRoutedEvent
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIRoutedEvent
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CIRoutedEvent>?) -> RoutedEvent? {
        guard immutable abi = abi else { return Nothing }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.routedeventargs)
open class RoutedEventArgs : WinRTClass {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml.IRoutedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIRoutedEventArgs
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CIRoutedEventArgs>?) -> RoutedEventArgs? {
        guard immutable abi = abi else { return Nothing }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    @_spi(WinRTInternal)
    public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.CodiraABI)
    {
        super.init()
        MakeComposed(composing: composing, (this as! Composable.Class), createCallback)
    }
    override open fn queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IRoutedEventArgsFactory : __ABI_Microsoft_UI_Xaml.IRoutedEventArgsFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.RoutedEventArgs"))

    override public init() {
        super.init()
        MakeComposed(composing: Self.Composable.this, this) { baseInterface, innerInterface in 
            try! Self._IRoutedEventArgsFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.routedeventargs.originalsource)
    public var originalSource : Any! {
        get { try! _default.get_OriginalSourceImpl() }
    }

    internal enum IRoutedEventArgs : ComposableImpl {
        internal typealias CABI = C_IInspectable
        internal typealias CodiraABI = WindowsFoundation.IInspectable
        internal typealias Class = RoutedEventArgs
        internal typealias CodiraProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIRoutedEventArgs
            internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml.IRoutedEventArgs
        }
    }
    internal typealias Composable = IRoutedEventArgs
    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.scalartransition)
open class ScalarTransition : WinRTClass {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml.IScalarTransition
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIScalarTransition
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CIScalarTransition>?) -> ScalarTransition? {
        guard immutable abi = abi else { return Nothing }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    @_spi(WinRTInternal)
    public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.CodiraABI)
    {
        super.init()
        MakeComposed(composing: composing, (this as! Composable.Class), createCallback)
    }
    override open fn queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IScalarTransitionFactory : __ABI_Microsoft_UI_Xaml.IScalarTransitionFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.ScalarTransition"))

    override public init() {
        super.init()
        MakeComposed(composing: Self.Composable.this, this) { baseInterface, innerInterface in 
            try! Self._IScalarTransitionFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.scalartransition.duration)
    public var duration : WindowsFoundation.TimeSpan {
        get { try! _default.get_DurationImpl() }
        set { try! _default.put_DurationImpl(newValue) }
    }

    internal enum IScalarTransition : ComposableImpl {
        internal typealias CABI = C_IInspectable
        internal typealias CodiraABI = WindowsFoundation.IInspectable
        internal typealias Class = ScalarTransition
        internal typealias CodiraProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIScalarTransition
            internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml.IScalarTransition
        }
    }
    internal typealias Composable = IScalarTransition
    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.setter)
public final class Setter : WinUI.SetterBase {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml.ISetter
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CISetter
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CISetter>?) -> Setter? {
        guard immutable abi = abi else { return Nothing }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Setter")))
    }

    private static immutable _ISetterFactory: __ABI_Microsoft_UI_Xaml.ISetterFactory = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Setter"))
    public init(_ targetProperty: DependencyProperty!, _ value: Any!) {
        super.init(fromAbi: try! Self._ISetterFactory.CreateInstanceImpl(targetProperty, value))
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.setter.property)
    public var property : DependencyProperty! {
        get { try! _default.get_PropertyImpl() }
        set { try! _default.put_PropertyImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.setter.target)
    public var target : TargetPropertyPath! {
        get { try! _default.get_TargetImpl() }
        set { try! _default.put_TargetImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.setter.value)
    public var value : Any! {
        get { try! _default.get_ValueImpl() }
        set { try! _default.put_ValueImpl(newValue) }
    }

    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.setterbase)
open class SetterBase : WinUI.DependencyObject {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml.ISetterBase
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CISetterBase
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CISetterBase>?) -> SetterBase? {
        guard immutable abi = abi else { return Nothing }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.CodiraABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open fn queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _ISetterBaseFactory : __ABI_Microsoft_UI_Xaml.ISetterBaseFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.SetterBase"))

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.setterbase.issealed)
    public var isSealed : Boolean {
        get { try! _default.get_IsSealedImpl() }
    }

    internal enum ISetterBase : ComposableImpl {
        internal typealias CABI = C_IInspectable
        internal typealias CodiraABI = WindowsFoundation.IInspectable
        internal typealias Class = SetterBase
        internal typealias CodiraProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CISetterBase
            internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml.ISetterBase
        }
    }
    internal typealias Composable = ISetterBase
    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.setterbasecollection)
public final class SetterBaseCollection : WinRTClass, IVector, IIterable {
    public typealias T = SetterBase?
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml.ISetterBaseCollection
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CISetterBaseCollection
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CISetterBaseCollection>?) -> SetterBaseCollection? {
        guard immutable abi = abi else { return Nothing }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public fn queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    override public init() {
        super.init(try! RoActivateInstance(HString("Microsoft.UI.Xaml.SetterBaseCollection")))
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.setterbasecollection.issealed)
    public var isSealed : Boolean {
        get { try! _default.get_IsSealedImpl() }
    }

    // MARK: Collection
    public typealias Element = T
    public var startIndex: Integer { 0 }
    public var endIndex: Integer { Integer(size) }
    public fn index(after i: Integer) -> Integer {
        i+1
    }

    public fn index(of: Element) -> Integer? {
        var index: UInt32 = 0
        immutable result = indexOf(of, &index)
        guard result else { return Nothing }
        return Integer(index)
    }
    public var count: Integer { Integer(size) }


    public subscript(position: Integer) -> Element {
        get {
            getAt(UInt32(position))
        }
        set(newValue) {
            setAt(UInt32(position), newValue)
        }
    }

    public fn removeLast() {
        removeAtEnd()
    }

    // MARK: WinRT
    private lazy var _IVector: IVectorSetterBase! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.setterbasecollection.getat)
    public fn getAt(_ index: UInt32) -> SetterBase? {
        try! _IVector.GetAtImpl(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.setterbasecollection.getview)
    public fn getView() -> WindowsFoundation.AnyIVectorView<SetterBase?>? {
        try! _IVector.GetViewImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.setterbasecollection.indexof)
    public fn indexOf(_ value: SetterBase?, _ index: inout UInt32) -> Boolean {
        try! _IVector.IndexOfImpl(value, &index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.setterbasecollection.setat)
    public fn setAt(_ index: UInt32, _ value: SetterBase?) {
        try! _IVector.SetAtImpl(index, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.setterbasecollection.insertat)
    public fn insertAt(_ index: UInt32, _ value: SetterBase?) {
        try! _IVector.InsertAtImpl(index, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.setterbasecollection.removeat)
    public fn removeAt(_ index: UInt32) {
        try! _IVector.RemoveAtImpl(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.setterbasecollection.append)
    public fn append(_ value: SetterBase?) {
        try! _IVector.AppendImpl(value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.setterbasecollection.removeatend)
    public fn removeAtEnd() {
        try! _IVector.RemoveAtEndImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.setterbasecollection.clear)
    public fn clear() {
        try! _IVector.ClearImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.setterbasecollection.size)
    public var size : UInt32 {
        get { try! _IVector.get_SizeImpl() }
    }

    private lazy var _IIterable: IIterableSetterBase! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.setterbasecollection.first)
    public fn first() -> WindowsFoundation.AnyIIterator<SetterBase?>? {
        try! _IIterable.FirstImpl()
    }

    deinit {
        _default = Nothing
        _IVector = Nothing
        _IIterable = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.sizechangedeventargs)
public final class SizeChangedEventArgs : WinUI.RoutedEventArgs {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml.ISizeChangedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CISizeChangedEventArgs
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CISizeChangedEventArgs>?) -> SizeChangedEventArgs? {
        guard immutable abi = abi else { return Nothing }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.sizechangedeventargs.newsize)
    public var newSize : WindowsFoundation.Size {
        get { try! _default.get_NewSizeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.sizechangedeventargs.previoussize)
    public var previousSize : WindowsFoundation.Size {
        get { try! _default.get_PreviousSizeImpl() }
    }

    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.style)
public final class Style : WinUI.DependencyObject {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml.IStyle
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIStyle
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CIStyle>?) -> Style? {
        guard immutable abi = abi else { return Nothing }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.UI.Xaml.Style")))
    }

    private static immutable _IStyleFactory: __ABI_Microsoft_UI_Xaml.IStyleFactory = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Style"))
    public init(_ targetType: WinUI.TypeName) {
        super.init(fromAbi: try! Self._IStyleFactory.CreateInstanceImpl(targetType))
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.style.seal)
    public fn seal() throws {
        try _default.SealImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.style.basedon)
    public var basedOn : Style! {
        get { try! _default.get_BasedOnImpl() }
        set { try! _default.put_BasedOnImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.style.issealed)
    public var isSealed : Boolean {
        get { try! _default.get_IsSealedImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.style.setters)
    public var setters : SetterBaseCollection! {
        get { try! _default.get_SettersImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.style.targettype)
    public var targetType : WinUI.TypeName {
        get { try! _default.get_TargetTypeImpl() }
        set { try! _default.put_TargetTypeImpl(newValue) }
    }

    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.targetpropertypath)
public final class TargetPropertyPath : WinRTClass {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml.ITargetPropertyPath
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CITargetPropertyPath
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CITargetPropertyPath>?) -> TargetPropertyPath? {
        guard immutable abi = abi else { return Nothing }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public init() {
        super.init(try! RoActivateInstance(HString("Microsoft.UI.Xaml.TargetPropertyPath")))
    }

    private static immutable _ITargetPropertyPathFactory: __ABI_Microsoft_UI_Xaml.ITargetPropertyPathFactory = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.TargetPropertyPath"))
    public init(_ targetProperty: DependencyProperty!) {
        super.init(try! Self._ITargetPropertyPathFactory.CreateInstanceImpl(targetProperty))
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.targetpropertypath.path)
    public var path : PropertyPath! {
        get { try! _default.get_PathImpl() }
        set { try! _default.put_PathImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.targetpropertypath.target)
    public var target : Any! {
        get { try! _default.get_TargetImpl() }
        set { try! _default.put_TargetImpl(newValue) }
    }

    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.triggeraction)
open class TriggerAction : WinUI.DependencyObject {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml.ITriggerAction
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CITriggerAction
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CITriggerAction>?) -> TriggerAction? {
        guard immutable abi = abi else { return Nothing }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.CodiraABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open fn queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _ITriggerActionFactory : __ABI_Microsoft_UI_Xaml.ITriggerActionFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.TriggerAction"))

    internal enum ITriggerAction : ComposableImpl {
        internal typealias CABI = C_IInspectable
        internal typealias CodiraABI = WindowsFoundation.IInspectable
        internal typealias Class = TriggerAction
        internal typealias CodiraProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CITriggerAction
            internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml.ITriggerAction
        }
    }
    internal typealias Composable = ITriggerAction
    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.triggerbase)
open class TriggerBase : WinUI.DependencyObject {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml.ITriggerBase
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CITriggerBase
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CITriggerBase>?) -> TriggerBase? {
        guard immutable abi = abi else { return Nothing }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.CodiraABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open fn queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _ITriggerBaseFactory : __ABI_Microsoft_UI_Xaml.ITriggerBaseFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.TriggerBase"))

    internal enum ITriggerBase : ComposableImpl {
        internal typealias CABI = C_IInspectable
        internal typealias CodiraABI = WindowsFoundation.IInspectable
        internal typealias Class = TriggerBase
        internal typealias CodiraProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CITriggerBase
            internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml.ITriggerBase
        }
    }
    internal typealias Composable = ITriggerBase
    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.triggercollection)
public final class TriggerCollection : WinRTClass, IVector, IIterable {
    public typealias T = TriggerBase?
    private typealias CodiraABI = WinUI.IVectorTriggerBase
    private typealias CABI = __x_ABI_C__FIVector_1___x_ABI_CMicrosoft__CUI__CXaml__CTriggerBase
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_C__FIVector_1___x_ABI_CMicrosoft__CUI__CXaml__CTriggerBase>?) -> TriggerCollection? {
        guard immutable abi = abi else { return Nothing }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public fn queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    // MARK: Collection
    public typealias Element = T
    public var startIndex: Integer { 0 }
    public var endIndex: Integer { Integer(size) }
    public fn index(after i: Integer) -> Integer {
        i+1
    }

    public fn index(of: Element) -> Integer? {
        var index: UInt32 = 0
        immutable result = indexOf(of, &index)
        guard result else { return Nothing }
        return Integer(index)
    }
    public var count: Integer { Integer(size) }


    public subscript(position: Integer) -> Element {
        get {
            getAt(UInt32(position))
        }
        set(newValue) {
            setAt(UInt32(position), newValue)
        }
    }

    public fn removeLast() {
        removeAtEnd()
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.triggercollection.getat)
    public fn getAt(_ index: UInt32) -> TriggerBase? {
        try! _default.GetAtImpl(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.triggercollection.getview)
    public fn getView() -> WindowsFoundation.AnyIVectorView<TriggerBase?>? {
        try! _default.GetViewImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.triggercollection.indexof)
    public fn indexOf(_ value: TriggerBase?, _ index: inout UInt32) -> Boolean {
        try! _default.IndexOfImpl(value, &index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.triggercollection.setat)
    public fn setAt(_ index: UInt32, _ value: TriggerBase?) {
        try! _default.SetAtImpl(index, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.triggercollection.insertat)
    public fn insertAt(_ index: UInt32, _ value: TriggerBase?) {
        try! _default.InsertAtImpl(index, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.triggercollection.removeat)
    public fn removeAt(_ index: UInt32) {
        try! _default.RemoveAtImpl(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.triggercollection.append)
    public fn append(_ value: TriggerBase?) {
        try! _default.AppendImpl(value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.triggercollection.removeatend)
    public fn removeAtEnd() {
        try! _default.RemoveAtEndImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.triggercollection.clear)
    public fn clear() {
        try! _default.ClearImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.triggercollection.size)
    public var size : UInt32 {
        get { try! _default.get_SizeImpl() }
    }

    private lazy var _IIterable: IIterableTriggerBase! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.triggercollection.first)
    public fn first() -> WindowsFoundation.AnyIIterator<TriggerBase?>? {
        try! _IIterable.FirstImpl()
    }

    deinit {
        _default = Nothing
        _IIterable = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement)
open class UIElement : WinUI.DependencyObject, WinAppSDK.IAnimationObject, WinAppSDK.IVisualElement, WinAppSDK.IVisualElement2 {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml.IUIElement
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIUIElement
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CIUIElement>?) -> UIElement? {
        guard immutable abi = abi else { return Nothing }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    @_spi(WinRTInternal)
    override public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.CodiraABI)
    {
        super.init(composing: composing, createCallback)
    }
    override open fn queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_UI_Xaml.IUIElementOverridesWrapper.IID:
                immutable wrapper = __ABI_Microsoft_UI_Xaml.IUIElementOverridesWrapper(this)
                return wrapper!.queryInterface(iid)
            default: return super.queryInterface(iid)
        }
    }
    private static var _IUIElementFactory : __ABI_Microsoft_UI_Xaml.IUIElementFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.UIElement"))

    private static immutable _IUIElementStatics: __ABI_Microsoft_UI_Xaml.IUIElementStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.UIElement"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.trystartdirectmanipulation)
    public class fn tryStartDirectManipulation(_ value: WinUI.Pointer!) -> Boolean {
        return try! _IUIElementStatics.TryStartDirectManipulationImpl(value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.registerasscrollport)
    public class fn registerAsScrollPort(_ element: UIElement!) {
        try! _IUIElementStatics.RegisterAsScrollPortImpl(element)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.accesskeyproperty)
    public class var accessKeyProperty : DependencyProperty! {
        get { try! _IUIElementStatics.get_AccessKeyPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.accesskeyscopeownerproperty)
    public class var accessKeyScopeOwnerProperty : DependencyProperty! {
        get { try! _IUIElementStatics.get_AccessKeyScopeOwnerPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.allowdropproperty)
    public class var allowDropProperty : DependencyProperty! {
        get { try! _IUIElementStatics.get_AllowDropPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.bringintoviewrequestedevent)
    public class var bringIntoViewRequestedEvent : RoutedEvent! {
        get { try! _IUIElementStatics.get_BringIntoViewRequestedEventImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.cachemodeproperty)
    public class var cacheModeProperty : DependencyProperty! {
        get { try! _IUIElementStatics.get_CacheModePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.canbescrollanchorproperty)
    public class var canBeScrollAnchorProperty : DependencyProperty! {
        get { try! _IUIElementStatics.get_CanBeScrollAnchorPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.candragproperty)
    public class var canDragProperty : DependencyProperty! {
        get { try! _IUIElementStatics.get_CanDragPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.characterreceivedevent)
    public class var characterReceivedEvent : RoutedEvent! {
        get { try! _IUIElementStatics.get_CharacterReceivedEventImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.clipproperty)
    public class var clipProperty : DependencyProperty! {
        get { try! _IUIElementStatics.get_ClipPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.compositemodeproperty)
    public class var compositeModeProperty : DependencyProperty! {
        get { try! _IUIElementStatics.get_CompositeModePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.contextflyoutproperty)
    public class var contextFlyoutProperty : DependencyProperty! {
        get { try! _IUIElementStatics.get_ContextFlyoutPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.contextrequestedevent)
    public class var contextRequestedEvent : RoutedEvent! {
        get { try! _IUIElementStatics.get_ContextRequestedEventImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.doubletappedevent)
    public class var doubleTappedEvent : RoutedEvent! {
        get { try! _IUIElementStatics.get_DoubleTappedEventImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.dragenterevent)
    public class var dragEnterEvent : RoutedEvent! {
        get { try! _IUIElementStatics.get_DragEnterEventImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.dragleaveevent)
    public class var dragLeaveEvent : RoutedEvent! {
        get { try! _IUIElementStatics.get_DragLeaveEventImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.dragoverevent)
    public class var dragOverEvent : RoutedEvent! {
        get { try! _IUIElementStatics.get_DragOverEventImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.dropevent)
    public class var dropEvent : RoutedEvent! {
        get { try! _IUIElementStatics.get_DropEventImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.exitdisplaymodeonaccesskeyinvokedproperty)
    public class var exitDisplayModeOnAccessKeyInvokedProperty : DependencyProperty! {
        get { try! _IUIElementStatics.get_ExitDisplayModeOnAccessKeyInvokedPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.focusstateproperty)
    public class var focusStateProperty : DependencyProperty! {
        get { try! _IUIElementStatics.get_FocusStatePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.gettingfocusevent)
    public class var gettingFocusEvent : RoutedEvent! {
        get { try! _IUIElementStatics.get_GettingFocusEventImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.highcontrastadjustmentproperty)
    public class var highContrastAdjustmentProperty : DependencyProperty! {
        get { try! _IUIElementStatics.get_HighContrastAdjustmentPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.holdingevent)
    public class var holdingEvent : RoutedEvent! {
        get { try! _IUIElementStatics.get_HoldingEventImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.isaccesskeyscopeproperty)
    public class var isAccessKeyScopeProperty : DependencyProperty! {
        get { try! _IUIElementStatics.get_IsAccessKeyScopePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.isdoubletapenabledproperty)
    public class var isDoubleTapEnabledProperty : DependencyProperty! {
        get { try! _IUIElementStatics.get_IsDoubleTapEnabledPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.ishittestvisibleproperty)
    public class var isHitTestVisibleProperty : DependencyProperty! {
        get { try! _IUIElementStatics.get_IsHitTestVisiblePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.isholdingenabledproperty)
    public class var isHoldingEnabledProperty : DependencyProperty! {
        get { try! _IUIElementStatics.get_IsHoldingEnabledPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.isrighttapenabledproperty)
    public class var isRightTapEnabledProperty : DependencyProperty! {
        get { try! _IUIElementStatics.get_IsRightTapEnabledPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.istabstopproperty)
    public class var isTabStopProperty : DependencyProperty! {
        get { try! _IUIElementStatics.get_IsTabStopPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.istapenabledproperty)
    public class var isTapEnabledProperty : DependencyProperty! {
        get { try! _IUIElementStatics.get_IsTapEnabledPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.keydownevent)
    public class var keyDownEvent : RoutedEvent! {
        get { try! _IUIElementStatics.get_KeyDownEventImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.keytiphorizontaloffsetproperty)
    public class var keyTipHorizontalOffsetProperty : DependencyProperty! {
        get { try! _IUIElementStatics.get_KeyTipHorizontalOffsetPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.keytipplacementmodeproperty)
    public class var keyTipPlacementModeProperty : DependencyProperty! {
        get { try! _IUIElementStatics.get_KeyTipPlacementModePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.keytiptargetproperty)
    public class var keyTipTargetProperty : DependencyProperty! {
        get { try! _IUIElementStatics.get_KeyTipTargetPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.keytipverticaloffsetproperty)
    public class var keyTipVerticalOffsetProperty : DependencyProperty! {
        get { try! _IUIElementStatics.get_KeyTipVerticalOffsetPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.keyupevent)
    public class var keyUpEvent : RoutedEvent! {
        get { try! _IUIElementStatics.get_KeyUpEventImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.keyboardacceleratorplacementmodeproperty)
    public class var keyboardAcceleratorPlacementModeProperty : DependencyProperty! {
        get { try! _IUIElementStatics.get_KeyboardAcceleratorPlacementModePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.keyboardacceleratorplacementtargetproperty)
    public class var keyboardAcceleratorPlacementTargetProperty : DependencyProperty! {
        get { try! _IUIElementStatics.get_KeyboardAcceleratorPlacementTargetPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.lightsproperty)
    public class var lightsProperty : DependencyProperty! {
        get { try! _IUIElementStatics.get_LightsPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.losingfocusevent)
    public class var losingFocusEvent : RoutedEvent! {
        get { try! _IUIElementStatics.get_LosingFocusEventImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.manipulationcompletedevent)
    public class var manipulationCompletedEvent : RoutedEvent! {
        get { try! _IUIElementStatics.get_ManipulationCompletedEventImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.manipulationdeltaevent)
    public class var manipulationDeltaEvent : RoutedEvent! {
        get { try! _IUIElementStatics.get_ManipulationDeltaEventImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.manipulationinertiastartingevent)
    public class var manipulationInertiaStartingEvent : RoutedEvent! {
        get { try! _IUIElementStatics.get_ManipulationInertiaStartingEventImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.manipulationmodeproperty)
    public class var manipulationModeProperty : DependencyProperty! {
        get { try! _IUIElementStatics.get_ManipulationModePropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.manipulationstartedevent)
    public class var manipulationStartedEvent : RoutedEvent! {
        get { try! _IUIElementStatics.get_ManipulationStartedEventImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.manipulationstartingevent)
    public class var manipulationStartingEvent : RoutedEvent! {
        get { try! _IUIElementStatics.get_ManipulationStartingEventImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.nofocuscandidatefoundevent)
    public class var noFocusCandidateFoundEvent : RoutedEvent! {
        get { try! _IUIElementStatics.get_NoFocusCandidateFoundEventImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.opacityproperty)
    public class var opacityProperty : DependencyProperty! {
        get { try! _IUIElementStatics.get_OpacityPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.pointercanceledevent)
    public class var pointerCanceledEvent : RoutedEvent! {
        get { try! _IUIElementStatics.get_PointerCanceledEventImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.pointercapturelostevent)
    public class var pointerCaptureLostEvent : RoutedEvent! {
        get { try! _IUIElementStatics.get_PointerCaptureLostEventImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.pointercapturesproperty)
    public class var pointerCapturesProperty : DependencyProperty! {
        get { try! _IUIElementStatics.get_PointerCapturesPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.pointerenteredevent)
    public class var pointerEnteredEvent : RoutedEvent! {
        get { try! _IUIElementStatics.get_PointerEnteredEventImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.pointerexitedevent)
    public class var pointerExitedEvent : RoutedEvent! {
        get { try! _IUIElementStatics.get_PointerExitedEventImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.pointermovedevent)
    public class var pointerMovedEvent : RoutedEvent! {
        get { try! _IUIElementStatics.get_PointerMovedEventImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.pointerpressedevent)
    public class var pointerPressedEvent : RoutedEvent! {
        get { try! _IUIElementStatics.get_PointerPressedEventImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.pointerreleasedevent)
    public class var pointerReleasedEvent : RoutedEvent! {
        get { try! _IUIElementStatics.get_PointerReleasedEventImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.pointerwheelchangedevent)
    public class var pointerWheelChangedEvent : RoutedEvent! {
        get { try! _IUIElementStatics.get_PointerWheelChangedEventImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.previewkeydownevent)
    public class var previewKeyDownEvent : RoutedEvent! {
        get { try! _IUIElementStatics.get_PreviewKeyDownEventImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.previewkeyupevent)
    public class var previewKeyUpEvent : RoutedEvent! {
        get { try! _IUIElementStatics.get_PreviewKeyUpEventImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.projectionproperty)
    public class var projectionProperty : DependencyProperty! {
        get { try! _IUIElementStatics.get_ProjectionPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.rendertransformoriginproperty)
    public class var renderTransformOriginProperty : DependencyProperty! {
        get { try! _IUIElementStatics.get_RenderTransformOriginPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.rendertransformproperty)
    public class var renderTransformProperty : DependencyProperty! {
        get { try! _IUIElementStatics.get_RenderTransformPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.righttappedevent)
    public class var rightTappedEvent : RoutedEvent! {
        get { try! _IUIElementStatics.get_RightTappedEventImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.shadowproperty)
    public class var shadowProperty : DependencyProperty! {
        get { try! _IUIElementStatics.get_ShadowPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.tabfocusnavigationproperty)
    public class var tabFocusNavigationProperty : DependencyProperty! {
        get { try! _IUIElementStatics.get_TabFocusNavigationPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.tabindexproperty)
    public class var tabIndexProperty : DependencyProperty! {
        get { try! _IUIElementStatics.get_TabIndexPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.tappedevent)
    public class var tappedEvent : RoutedEvent! {
        get { try! _IUIElementStatics.get_TappedEventImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.transform3dproperty)
    public class var transform3DProperty : DependencyProperty! {
        get { try! _IUIElementStatics.get_Transform3DPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.transitionsproperty)
    public class var transitionsProperty : DependencyProperty! {
        get { try! _IUIElementStatics.get_TransitionsPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.uselayoutroundingproperty)
    public class var useLayoutRoundingProperty : DependencyProperty! {
        get { try! _IUIElementStatics.get_UseLayoutRoundingPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.usesystemfocusvisualsproperty)
    public class var useSystemFocusVisualsProperty : DependencyProperty! {
        get { try! _IUIElementStatics.get_UseSystemFocusVisualsPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.visibilityproperty)
    public class var visibilityProperty : DependencyProperty! {
        get { try! _IUIElementStatics.get_VisibilityPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.xyfocusdownnavigationstrategyproperty)
    public class var xyFocusDownNavigationStrategyProperty : DependencyProperty! {
        get { try! _IUIElementStatics.get_XYFocusDownNavigationStrategyPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.xyfocusdownproperty)
    public class var xyFocusDownProperty : DependencyProperty! {
        get { try! _IUIElementStatics.get_XYFocusDownPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.xyfocuskeyboardnavigationproperty)
    public class var xyFocusKeyboardNavigationProperty : DependencyProperty! {
        get { try! _IUIElementStatics.get_XYFocusKeyboardNavigationPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.xyfocusleftnavigationstrategyproperty)
    public class var xyFocusLeftNavigationStrategyProperty : DependencyProperty! {
        get { try! _IUIElementStatics.get_XYFocusLeftNavigationStrategyPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.xyfocusleftproperty)
    public class var xyFocusLeftProperty : DependencyProperty! {
        get { try! _IUIElementStatics.get_XYFocusLeftPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.xyfocusrightnavigationstrategyproperty)
    public class var xyFocusRightNavigationStrategyProperty : DependencyProperty! {
        get { try! _IUIElementStatics.get_XYFocusRightNavigationStrategyPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.xyfocusrightproperty)
    public class var xyFocusRightProperty : DependencyProperty! {
        get { try! _IUIElementStatics.get_XYFocusRightPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.xyfocusupnavigationstrategyproperty)
    public class var xyFocusUpNavigationStrategyProperty : DependencyProperty! {
        get { try! _IUIElementStatics.get_XYFocusUpNavigationStrategyPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.xyfocusupproperty)
    public class var xyFocusUpProperty : DependencyProperty! {
        get { try! _IUIElementStatics.get_XYFocusUpPropertyImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.measure)
    public fn measure(_ availableSize: WindowsFoundation.Size) throws {
        try _default.MeasureImpl(availableSize)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.arrange)
    public fn arrange(_ finalRect: WindowsFoundation.Rect) throws {
        try _default.ArrangeImpl(finalRect)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.capturepointer)
    public fn capturePointer(_ value: WinUI.Pointer!) throws -> Boolean {
        try _default.CapturePointerImpl(value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.releasepointercapture)
    public fn releasePointerCapture(_ value: WinUI.Pointer!) throws {
        try _default.ReleasePointerCaptureImpl(value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.releasepointercaptures)
    public fn releasePointerCaptures() throws {
        try _default.ReleasePointerCapturesImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.addhandler)
    public fn addHandler(_ routedEvent: RoutedEvent!, _ handler: Any!, _ handledEventsToo: Boolean) throws {
        try _default.AddHandlerImpl(routedEvent, handler, handledEventsToo)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.removehandler)
    public fn removeHandler(_ routedEvent: RoutedEvent!, _ handler: Any!) throws {
        try _default.RemoveHandlerImpl(routedEvent, handler)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.transformtovisual)
    public fn transformToVisual(_ visual: UIElement!) throws -> WinUI.GeneralTransform! {
        try _default.TransformToVisualImpl(visual)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.invalidatemeasure)
    public fn invalidateMeasure() throws {
        try _default.InvalidateMeasureImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.invalidatearrange)
    public fn invalidateArrange() throws {
        try _default.InvalidateArrangeImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.updatelayout)
    public fn updateLayout() throws {
        try _default.UpdateLayoutImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.canceldirectmanipulations)
    public fn cancelDirectManipulations() throws -> Boolean {
        try _default.CancelDirectManipulationsImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.startdragasync)
    public fn startDragAsync(_ pointerPoint: WinAppSDK.PointerPoint!) throws -> WindowsFoundation.AnyIAsyncOperation<UWP.DataPackageOperation>! {
        try _default.StartDragAsyncImpl(pointerPoint)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.startbringintoview)
    public fn startBringIntoView() throws {
        try _default.StartBringIntoViewImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.startbringintoview)
    public fn startBringIntoView(_ options: BringIntoViewOptions!) throws {
        try _default.StartBringIntoViewWithOptionsImpl(options)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.tryinvokekeyboardaccelerator)
    public fn tryInvokeKeyboardAccelerator(_ args: WinUI.ProcessKeyboardAcceleratorEventArgs!) throws {
        try _default.TryInvokeKeyboardAcceleratorImpl(args)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.focus)
    public fn focus(_ value: FocusState) throws -> Boolean {
        try _default.FocusImpl(value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.startanimation)
    public fn startAnimation(_ animation: WinAppSDK.AnyICompositionAnimationBase!) throws {
        try _default.StartAnimationImpl(animation)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.stopanimation)
    public fn stopAnimation(_ animation: WinAppSDK.AnyICompositionAnimationBase!) throws {
        try _default.StopAnimationImpl(animation)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.accesskey)
    public var accessKey : String {
        get { try! _default.get_AccessKeyImpl() }
        set { try! _default.put_AccessKeyImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.accesskeyscopeowner)
    public var accessKeyScopeOwner : DependencyObject! {
        get { try! _default.get_AccessKeyScopeOwnerImpl() }
        set { try! _default.put_AccessKeyScopeOwnerImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.actualoffset)
    public var actualOffset : WindowsFoundation.Vector3 {
        get { try! _default.get_ActualOffsetImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.actualsize)
    public var actualSize : WindowsFoundation.Vector2 {
        get { try! _default.get_ActualSizeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.allowdrop)
    public var allowDrop : Boolean {
        get { try! _default.get_AllowDropImpl() }
        set { try! _default.put_AllowDropImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.cachemode)
    public var cacheMode : WinUI.CacheMode! {
        get { try! _default.get_CacheModeImpl() }
        set { try! _default.put_CacheModeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.canbescrollanchor)
    public var canBeScrollAnchor : Boolean {
        get { try! _default.get_CanBeScrollAnchorImpl() }
        set { try! _default.put_CanBeScrollAnchorImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.candrag)
    public var canDrag : Boolean {
        get { try! _default.get_CanDragImpl() }
        set { try! _default.put_CanDragImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.centerpoint)
    public var centerPoint : WindowsFoundation.Vector3 {
        get { try! _default.get_CenterPointImpl() }
        set { try! _default.put_CenterPointImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.clip)
    public var clip : WinUI.RectangleGeometry! {
        get { try! _default.get_ClipImpl() }
        set { try! _default.put_ClipImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.compositemode)
    public var compositeMode : WinUI.ElementCompositeMode {
        get { try! _default.get_CompositeModeImpl() }
        set { try! _default.put_CompositeModeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.contextflyout)
    public var contextFlyout : WinUI.FlyoutBase! {
        get { try! _default.get_ContextFlyoutImpl() }
        set { try! _default.put_ContextFlyoutImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.desiredsize)
    public var desiredSize : WindowsFoundation.Size {
        get { try! _default.get_DesiredSizeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.exitdisplaymodeonaccesskeyinvoked)
    public var exitDisplayModeOnAccessKeyInvoked : Boolean {
        get { try! _default.get_ExitDisplayModeOnAccessKeyInvokedImpl() }
        set { try! _default.put_ExitDisplayModeOnAccessKeyInvokedImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.focusstate)
    public var focusState : FocusState {
        get { try! _default.get_FocusStateImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.highcontrastadjustment)
    public var highContrastAdjustment : ElementHighContrastAdjustment {
        get { try! _default.get_HighContrastAdjustmentImpl() }
        set { try! _default.put_HighContrastAdjustmentImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.isaccesskeyscope)
    public var isAccessKeyScope : Boolean {
        get { try! _default.get_IsAccessKeyScopeImpl() }
        set { try! _default.put_IsAccessKeyScopeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.isdoubletapenabled)
    public var isDoubleTapEnabled : Boolean {
        get { try! _default.get_IsDoubleTapEnabledImpl() }
        set { try! _default.put_IsDoubleTapEnabledImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.ishittestvisible)
    public var isHitTestVisible : Boolean {
        get { try! _default.get_IsHitTestVisibleImpl() }
        set { try! _default.put_IsHitTestVisibleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.isholdingenabled)
    public var isHoldingEnabled : Boolean {
        get { try! _default.get_IsHoldingEnabledImpl() }
        set { try! _default.put_IsHoldingEnabledImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.isrighttapenabled)
    public var isRightTapEnabled : Boolean {
        get { try! _default.get_IsRightTapEnabledImpl() }
        set { try! _default.put_IsRightTapEnabledImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.istabstop)
    public var isTabStop : Boolean {
        get { try! _default.get_IsTabStopImpl() }
        set { try! _default.put_IsTabStopImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.istapenabled)
    public var isTapEnabled : Boolean {
        get { try! _default.get_IsTapEnabledImpl() }
        set { try! _default.put_IsTapEnabledImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.keytiphorizontaloffset)
    public var keyTipHorizontalOffset : Double {
        get { try! _default.get_KeyTipHorizontalOffsetImpl() }
        set { try! _default.put_KeyTipHorizontalOffsetImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.keytipplacementmode)
    public var keyTipPlacementMode : WinUI.KeyTipPlacementMode {
        get { try! _default.get_KeyTipPlacementModeImpl() }
        set { try! _default.put_KeyTipPlacementModeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.keytiptarget)
    public var keyTipTarget : DependencyObject! {
        get { try! _default.get_KeyTipTargetImpl() }
        set { try! _default.put_KeyTipTargetImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.keytipverticaloffset)
    public var keyTipVerticalOffset : Double {
        get { try! _default.get_KeyTipVerticalOffsetImpl() }
        set { try! _default.put_KeyTipVerticalOffsetImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.keyboardacceleratorplacementmode)
    public var keyboardAcceleratorPlacementMode : WinUI.KeyboardAcceleratorPlacementMode {
        get { try! _default.get_KeyboardAcceleratorPlacementModeImpl() }
        set { try! _default.put_KeyboardAcceleratorPlacementModeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.keyboardacceleratorplacementtarget)
    public var keyboardAcceleratorPlacementTarget : DependencyObject! {
        get { try! _default.get_KeyboardAcceleratorPlacementTargetImpl() }
        set { try! _default.put_KeyboardAcceleratorPlacementTargetImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.keyboardaccelerators)
    public var keyboardAccelerators : WindowsFoundation.AnyIVector<WinUI.KeyboardAccelerator?>! {
        get { try! _default.get_KeyboardAcceleratorsImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.lights)
    public var lights : WindowsFoundation.AnyIVector<WinUI.XamlLight?>! {
        get { try! _default.get_LightsImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.manipulationmode)
    public var manipulationMode : WinUI.ManipulationModes {
        get { try! _default.get_ManipulationModeImpl() }
        set { try! _default.put_ManipulationModeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.opacity)
    public var opacity : Double {
        get { try! _default.get_OpacityImpl() }
        set { try! _default.put_OpacityImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.opacitytransition)
    public var opacityTransition : ScalarTransition! {
        get { try! _default.get_OpacityTransitionImpl() }
        set { try! _default.put_OpacityTransitionImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.pointercaptures)
    public var pointerCaptures : WindowsFoundation.AnyIVectorView<WinUI.Pointer?>! {
        get { try! _default.get_PointerCapturesImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.projection)
    public var projection : WinUI.Projection! {
        get { try! _default.get_ProjectionImpl() }
        set { try! _default.put_ProjectionImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.rasterizationscale)
    public var rasterizationScale : Double {
        get { try! _default.get_RasterizationScaleImpl() }
        set { try! _default.put_RasterizationScaleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.rendersize)
    public var renderSize : WindowsFoundation.Size {
        get { try! _default.get_RenderSizeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.rendertransform)
    public var renderTransform : WinUI.Transform! {
        get { try! _default.get_RenderTransformImpl() }
        set { try! _default.put_RenderTransformImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.rendertransformorigin)
    public var renderTransformOrigin : WindowsFoundation.Point {
        get { try! _default.get_RenderTransformOriginImpl() }
        set { try! _default.put_RenderTransformOriginImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.rotation)
    public var rotation : Float {
        get { try! _default.get_RotationImpl() }
        set { try! _default.put_RotationImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.rotationaxis)
    public var rotationAxis : WindowsFoundation.Vector3 {
        get { try! _default.get_RotationAxisImpl() }
        set { try! _default.put_RotationAxisImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.rotationtransition)
    public var rotationTransition : ScalarTransition! {
        get { try! _default.get_RotationTransitionImpl() }
        set { try! _default.put_RotationTransitionImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.scale)
    public var scale : WindowsFoundation.Vector3 {
        get { try! _default.get_ScaleImpl() }
        set { try! _default.put_ScaleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.scaletransition)
    public var scaleTransition : Vector3Transition! {
        get { try! _default.get_ScaleTransitionImpl() }
        set { try! _default.put_ScaleTransitionImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.shadow)
    public var shadow : WinUI.Shadow! {
        get { try! _default.get_ShadowImpl() }
        set { try! _default.put_ShadowImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.tabfocusnavigation)
    public var tabFocusNavigation : WinUI.KeyboardNavigationMode {
        get { try! _default.get_TabFocusNavigationImpl() }
        set { try! _default.put_TabFocusNavigationImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.tabindex)
    public var tabIndex : Int32 {
        get { try! _default.get_TabIndexImpl() }
        set { try! _default.put_TabIndexImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.transform3d)
    public var transform3D : WinUI.Transform3D! {
        get { try! _default.get_Transform3DImpl() }
        set { try! _default.put_Transform3DImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.transformmatrix)
    public var transformMatrix : WindowsFoundation.Matrix4x4 {
        get { try! _default.get_TransformMatrixImpl() }
        set { try! _default.put_TransformMatrixImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.transitions)
    public var transitions : WinUI.TransitionCollection! {
        get { try! _default.get_TransitionsImpl() }
        set { try! _default.put_TransitionsImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.translation)
    public var translation : WindowsFoundation.Vector3 {
        get { try! _default.get_TranslationImpl() }
        set { try! _default.put_TranslationImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.translationtransition)
    public var translationTransition : Vector3Transition! {
        get { try! _default.get_TranslationTransitionImpl() }
        set { try! _default.put_TranslationTransitionImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.uselayoutrounding)
    public var useLayoutRounding : Boolean {
        get { try! _default.get_UseLayoutRoundingImpl() }
        set { try! _default.put_UseLayoutRoundingImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.usesystemfocusvisuals)
    public var useSystemFocusVisuals : Boolean {
        get { try! _default.get_UseSystemFocusVisualsImpl() }
        set { try! _default.put_UseSystemFocusVisualsImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.visibility)
    public var visibility : Visibility {
        get { try! _default.get_VisibilityImpl() }
        set { try! _default.put_VisibilityImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.xyfocusdown)
    public var xyFocusDown : DependencyObject! {
        get { try! _default.get_XYFocusDownImpl() }
        set { try! _default.put_XYFocusDownImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.xyfocusdownnavigationstrategy)
    public var xyFocusDownNavigationStrategy : WinUI.XYFocusNavigationStrategy {
        get { try! _default.get_XYFocusDownNavigationStrategyImpl() }
        set { try! _default.put_XYFocusDownNavigationStrategyImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.xyfocuskeyboardnavigation)
    public var xyFocusKeyboardNavigation : WinUI.XYFocusKeyboardNavigationMode {
        get { try! _default.get_XYFocusKeyboardNavigationImpl() }
        set { try! _default.put_XYFocusKeyboardNavigationImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.xyfocusleft)
    public var xyFocusLeft : DependencyObject! {
        get { try! _default.get_XYFocusLeftImpl() }
        set { try! _default.put_XYFocusLeftImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.xyfocusleftnavigationstrategy)
    public var xyFocusLeftNavigationStrategy : WinUI.XYFocusNavigationStrategy {
        get { try! _default.get_XYFocusLeftNavigationStrategyImpl() }
        set { try! _default.put_XYFocusLeftNavigationStrategyImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.xyfocusright)
    public var xyFocusRight : DependencyObject! {
        get { try! _default.get_XYFocusRightImpl() }
        set { try! _default.put_XYFocusRightImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.xyfocusrightnavigationstrategy)
    public var xyFocusRightNavigationStrategy : WinUI.XYFocusNavigationStrategy {
        get { try! _default.get_XYFocusRightNavigationStrategyImpl() }
        set { try! _default.put_XYFocusRightNavigationStrategyImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.xyfocusup)
    public var xyFocusUp : DependencyObject! {
        get { try! _default.get_XYFocusUpImpl() }
        set { try! _default.put_XYFocusUpImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.xyfocusupnavigationstrategy)
    public var xyFocusUpNavigationStrategy : WinUI.XYFocusNavigationStrategy {
        get { try! _default.get_XYFocusUpNavigationStrategyImpl() }
        set { try! _default.put_XYFocusUpNavigationStrategyImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.xamlroot)
    public var xamlRoot : XamlRoot! {
        get { try! _default.get_XamlRootImpl() }
        set { try! _default.put_XamlRootImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.accesskeydisplaydismissed)
    public lazy var accessKeyDisplayDismissed : Event<TypedEventHandler<UIElement?, AccessKeyDisplayDismissedEventArgs?>> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_AccessKeyDisplayDismissedImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_AccessKeyDisplayDismissedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.accesskeydisplayrequested)
    public lazy var accessKeyDisplayRequested : Event<TypedEventHandler<UIElement?, AccessKeyDisplayRequestedEventArgs?>> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_AccessKeyDisplayRequestedImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_AccessKeyDisplayRequestedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.accesskeyinvoked)
    public lazy var accessKeyInvoked : Event<TypedEventHandler<UIElement?, AccessKeyInvokedEventArgs?>> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_AccessKeyInvokedImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_AccessKeyInvokedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.bringintoviewrequested)
    public lazy var bringIntoViewRequested : Event<TypedEventHandler<UIElement?, BringIntoViewRequestedEventArgs?>> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_BringIntoViewRequestedImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_BringIntoViewRequestedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.characterreceived)
    public lazy var characterReceived : Event<TypedEventHandler<UIElement?, CharacterReceivedRoutedEventArgs?>> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_CharacterReceivedImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_CharacterReceivedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.contextcanceled)
    public lazy var contextCanceled : Event<TypedEventHandler<UIElement?, RoutedEventArgs?>> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_ContextCanceledImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_ContextCanceledImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.contextrequested)
    public lazy var contextRequested : Event<TypedEventHandler<UIElement?, ContextRequestedEventArgs?>> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_ContextRequestedImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_ContextRequestedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.doubletapped)
    public lazy var doubleTapped : Event<WinUI.DoubleTappedEventHandler> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_DoubleTappedImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_DoubleTappedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.dragenter)
    public lazy var dragEnter : Event<DragEventHandler> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_DragEnterImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_DragEnterImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.dragleave)
    public lazy var dragLeave : Event<DragEventHandler> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_DragLeaveImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_DragLeaveImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.dragover)
    public lazy var dragOver : Event<DragEventHandler> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_DragOverImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_DragOverImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.dragstarting)
    public lazy var dragStarting : Event<TypedEventHandler<UIElement?, DragStartingEventArgs?>> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_DragStartingImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_DragStartingImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.drop)
    public lazy var drop : Event<DragEventHandler> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_DropImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_DropImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.dropcompleted)
    public lazy var dropCompleted : Event<TypedEventHandler<UIElement?, DropCompletedEventArgs?>> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_DropCompletedImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_DropCompletedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.gettingfocus)
    public lazy var gettingFocus : Event<TypedEventHandler<UIElement?, GettingFocusEventArgs?>> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_GettingFocusImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_GettingFocusImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.gotfocus)
    public lazy var gotFocus : Event<RoutedEventHandler> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_GotFocusImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_GotFocusImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.holding)
    public lazy var holding : Event<WinUI.HoldingEventHandler> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_HoldingImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_HoldingImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.keydown)
    public lazy var keyDown : Event<WinUI.KeyEventHandler> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_KeyDownImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_KeyDownImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.keyup)
    public lazy var keyUp : Event<WinUI.KeyEventHandler> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_KeyUpImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_KeyUpImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.losingfocus)
    public lazy var losingFocus : Event<TypedEventHandler<UIElement?, LosingFocusEventArgs?>> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_LosingFocusImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_LosingFocusImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.lostfocus)
    public lazy var lostFocus : Event<RoutedEventHandler> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_LostFocusImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_LostFocusImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.manipulationcompleted)
    public lazy var manipulationCompleted : Event<WinUI.ManipulationCompletedEventHandler> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_ManipulationCompletedImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_ManipulationCompletedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.manipulationdelta)
    public lazy var manipulationDelta : Event<WinUI.ManipulationDeltaEventHandler> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_ManipulationDeltaImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_ManipulationDeltaImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.manipulationinertiastarting)
    public lazy var manipulationInertiaStarting : Event<WinUI.ManipulationInertiaStartingEventHandler> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_ManipulationInertiaStartingImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_ManipulationInertiaStartingImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.manipulationstarted)
    public lazy var manipulationStarted : Event<WinUI.ManipulationStartedEventHandler> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_ManipulationStartedImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_ManipulationStartedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.manipulationstarting)
    public lazy var manipulationStarting : Event<WinUI.ManipulationStartingEventHandler> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_ManipulationStartingImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_ManipulationStartingImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.nofocuscandidatefound)
    public lazy var noFocusCandidateFound : Event<TypedEventHandler<UIElement?, NoFocusCandidateFoundEventArgs?>> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_NoFocusCandidateFoundImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_NoFocusCandidateFoundImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.pointercanceled)
    public lazy var pointerCanceled : Event<WinUI.PointerEventHandler> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_PointerCanceledImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_PointerCanceledImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.pointercapturelost)
    public lazy var pointerCaptureLost : Event<WinUI.PointerEventHandler> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_PointerCaptureLostImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_PointerCaptureLostImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.pointerentered)
    public lazy var pointerEntered : Event<WinUI.PointerEventHandler> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_PointerEnteredImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_PointerEnteredImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.pointerexited)
    public lazy var pointerExited : Event<WinUI.PointerEventHandler> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_PointerExitedImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_PointerExitedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.pointermoved)
    public lazy var pointerMoved : Event<WinUI.PointerEventHandler> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_PointerMovedImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_PointerMovedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.pointerpressed)
    public lazy var pointerPressed : Event<WinUI.PointerEventHandler> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_PointerPressedImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_PointerPressedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.pointerreleased)
    public lazy var pointerReleased : Event<WinUI.PointerEventHandler> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_PointerReleasedImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_PointerReleasedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.pointerwheelchanged)
    public lazy var pointerWheelChanged : Event<WinUI.PointerEventHandler> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_PointerWheelChangedImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_PointerWheelChangedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.previewkeydown)
    public lazy var previewKeyDown : Event<WinUI.KeyEventHandler> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_PreviewKeyDownImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_PreviewKeyDownImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.previewkeyup)
    public lazy var previewKeyUp : Event<WinUI.KeyEventHandler> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_PreviewKeyUpImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_PreviewKeyUpImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.processkeyboardaccelerators)
    public lazy var processKeyboardAccelerators : Event<TypedEventHandler<UIElement?, ProcessKeyboardAcceleratorEventArgs?>> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_ProcessKeyboardAcceleratorsImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_ProcessKeyboardAcceleratorsImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.righttapped)
    public lazy var rightTapped : Event<WinUI.RightTappedEventHandler> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_RightTappedImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_RightTappedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.tapped)
    public lazy var tapped : Event<WinUI.TappedEventHandler> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_TappedImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_TappedImpl($0)
       }
      )
    }()

    private lazy var _IUIElementProtected: __ABI_Microsoft_UI_Xaml.IUIElementProtected! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.protectedcursor)
    public var protectedCursor : WinAppSDK.InputCursor! {
        get { try! _IUIElementProtected.get_ProtectedCursorImpl() }
        set { try! _IUIElementProtected.put_ProtectedCursorImpl(newValue) }
    }

    private lazy var _IUIElementOverrides: __ABI_Microsoft_UI_Xaml.IUIElementOverrides! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.oncreateautomationpeer)
    open fn onCreateAutomationPeer() throws -> WinUI.AutomationPeer! {
        try _IUIElementOverrides.OnCreateAutomationPeerImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.ondisconnectvisualchildren)
    open fn onDisconnectVisualChildren() throws {
        try _IUIElementOverrides.OnDisconnectVisualChildrenImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.findsubelementsfortouchtargeting)
    open fn findSubElementsForTouchTargeting(_ point: WindowsFoundation.Point, _ boundingRect: WindowsFoundation.Rect) throws -> WindowsFoundation.AnyIIterable<WindowsFoundation.AnyIIterable<WindowsFoundation.Point>?>! {
        try _IUIElementOverrides.FindSubElementsForTouchTargetingImpl(point, boundingRect)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.getchildrenintabfocusorder)
    open fn getChildrenInTabFocusOrder() throws -> WindowsFoundation.AnyIIterable<DependencyObject?>! {
        try _IUIElementOverrides.GetChildrenInTabFocusOrderImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.onkeyboardacceleratorinvoked)
    open fn onKeyboardAcceleratorInvoked(_ args: WinUI.KeyboardAcceleratorInvokedEventArgs!) throws {
        try _IUIElementOverrides.OnKeyboardAcceleratorInvokedImpl(args)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.onprocesskeyboardaccelerators)
    open fn onProcessKeyboardAccelerators(_ args: WinUI.ProcessKeyboardAcceleratorEventArgs!) throws {
        try _IUIElementOverrides.OnProcessKeyboardAcceleratorsImpl(args)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.onbringintoviewrequested)
    open fn onBringIntoViewRequested(_ e: BringIntoViewRequestedEventArgs!) throws {
        try _IUIElementOverrides.OnBringIntoViewRequestedImpl(e)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.populatepropertyinfooverride)
    open fn populatePropertyInfoOverride(_ propertyName: String, _ animationPropertyInfo: WinAppSDK.AnimationPropertyInfo!) throws {
        try _IUIElementOverrides.PopulatePropertyInfoOverrideImpl(propertyName, animationPropertyInfo)
    }

    internal enum IUIElementOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIUIElementOverrides
        internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml.IUIElementOverrides
        internal typealias Class = UIElement
        internal typealias CodiraProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIUIElement
            internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml.IUIElement
        }
    }
    internal typealias Composable = IUIElementOverrides
    private lazy var _IAnimationObject: __ABI_Microsoft_UI_Composition.IAnimationObject! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.populatepropertyinfo)
    public fn populatePropertyInfo(_ propertyName: String, _ propertyInfo: WinAppSDK.AnimationPropertyInfo!) throws {
        try _IAnimationObject.PopulatePropertyInfoImpl(propertyName, propertyInfo)
    }

    private lazy var _IVisualElement: __ABI_Microsoft_UI_Composition.IVisualElement! = getInterfaceForCaching()
    private lazy var _IVisualElement2: __ABI_Microsoft_UI_Composition.IVisualElement2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielement.getvisualinternal)
    public fn getVisualInternal() throws -> WinAppSDK.Visual! {
        try _IVisualElement2.GetVisualInternalImpl()
    }

    deinit {
        _default = Nothing
        _IUIElementProtected = Nothing
        _IUIElementOverrides = Nothing
        _IAnimationObject = Nothing
        _IVisualElement = Nothing
        _IVisualElement2 = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielementweakcollection)
open class UIElementWeakCollection : WinRTClass, IVector, IIterable {
    public typealias T = UIElement?
    private typealias CodiraABI = WinUI.IVectorUIElement
    private typealias CABI = __x_ABI_C__FIVector_1___x_ABI_CMicrosoft__CUI__CXaml__CUIElement
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_C__FIVector_1___x_ABI_CMicrosoft__CUI__CXaml__CUIElement>?) -> UIElementWeakCollection? {
        guard immutable abi = abi else { return Nothing }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    @_spi(WinRTInternal)
    public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.CodiraABI)
    {
        super.init()
        MakeComposed(composing: composing, (this as! Composable.Class), createCallback)
    }
    override open fn queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IUIElementWeakCollectionFactory : __ABI_Microsoft_UI_Xaml.IUIElementWeakCollectionFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.UIElementWeakCollection"))

    override public init() {
        super.init()
        MakeComposed(composing: Self.Composable.this, this) { baseInterface, innerInterface in 
            try! Self._IUIElementWeakCollectionFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    // MARK: Collection
    public typealias Element = T
    public var startIndex: Integer { 0 }
    public var endIndex: Integer { Integer(size) }
    public fn index(after i: Integer) -> Integer {
        i+1
    }

    public fn index(of: Element) -> Integer? {
        var index: UInt32 = 0
        immutable result = indexOf(of, &index)
        guard result else { return Nothing }
        return Integer(index)
    }
    public var count: Integer { Integer(size) }


    public subscript(position: Integer) -> Element {
        get {
            getAt(UInt32(position))
        }
        set(newValue) {
            setAt(UInt32(position), newValue)
        }
    }

    public fn removeLast() {
        removeAtEnd()
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielementweakcollection.getat)
    public fn getAt(_ index: UInt32) -> UIElement? {
        try! _default.GetAtImpl(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielementweakcollection.getview)
    public fn getView() -> WindowsFoundation.AnyIVectorView<UIElement?>? {
        try! _default.GetViewImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielementweakcollection.indexof)
    public fn indexOf(_ value: UIElement?, _ index: inout UInt32) -> Boolean {
        try! _default.IndexOfImpl(value, &index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielementweakcollection.setat)
    public fn setAt(_ index: UInt32, _ value: UIElement?) {
        try! _default.SetAtImpl(index, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielementweakcollection.insertat)
    public fn insertAt(_ index: UInt32, _ value: UIElement?) {
        try! _default.InsertAtImpl(index, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielementweakcollection.removeat)
    public fn removeAt(_ index: UInt32) {
        try! _default.RemoveAtImpl(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielementweakcollection.append)
    public fn append(_ value: UIElement?) {
        try! _default.AppendImpl(value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielementweakcollection.removeatend)
    public fn removeAtEnd() {
        try! _default.RemoveAtEndImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielementweakcollection.clear)
    public fn clear() {
        try! _default.ClearImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielementweakcollection.size)
    public var size : UInt32 {
        get { try! _default.get_SizeImpl() }
    }

    private lazy var _IIterable: IIterableUIElement! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.uielementweakcollection.first)
    public fn first() -> WindowsFoundation.AnyIIterator<UIElement?>? {
        try! _IIterable.FirstImpl()
    }

    internal enum IVectorUIElement : ComposableImpl {
        internal typealias CABI = C_IInspectable
        internal typealias CodiraABI = WindowsFoundation.IInspectable
        internal typealias Class = UIElementWeakCollection
        internal typealias CodiraProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_C__FIVector_1___x_ABI_CMicrosoft__CUI__CXaml__CUIElement
            internal typealias CodiraABI = WinUI.IVectorUIElement
        }
    }
    internal typealias Composable = IVectorUIElement
    deinit {
        _default = Nothing
        _IIterable = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.unhandledexceptioneventargs)
public final class UnhandledExceptionEventArgs : WinRTClass {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml.IUnhandledExceptionEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIUnhandledExceptionEventArgs
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CIUnhandledExceptionEventArgs>?) -> UnhandledExceptionEventArgs? {
        guard immutable abi = abi else { return Nothing }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.unhandledexceptioneventargs.exception)
    public var exception : HRESULT {
        get { try! _default.get_ExceptionImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.unhandledexceptioneventargs.handled)
    public var handled : Boolean {
        get { try! _default.get_HandledImpl() }
        set { try! _default.put_HandledImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.unhandledexceptioneventargs.message)
    public var message : String {
        get { try! _default.get_MessageImpl() }
    }

    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.vector3transition)
open class Vector3Transition : WinRTClass {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml.IVector3Transition
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIVector3Transition
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CIVector3Transition>?) -> Vector3Transition? {
        guard immutable abi = abi else { return Nothing }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    @_spi(WinRTInternal)
    public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.CodiraABI)
    {
        super.init()
        MakeComposed(composing: composing, (this as! Composable.Class), createCallback)
    }
    override open fn queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IVector3TransitionFactory : __ABI_Microsoft_UI_Xaml.IVector3TransitionFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Vector3Transition"))

    override public init() {
        super.init()
        MakeComposed(composing: Self.Composable.this, this) { baseInterface, innerInterface in 
            try! Self._IVector3TransitionFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.vector3transition.components)
    public var components : Vector3TransitionComponents {
        get { try! _default.get_ComponentsImpl() }
        set { try! _default.put_ComponentsImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.vector3transition.duration)
    public var duration : WindowsFoundation.TimeSpan {
        get { try! _default.get_DurationImpl() }
        set { try! _default.put_DurationImpl(newValue) }
    }

    internal enum IVector3Transition : ComposableImpl {
        internal typealias CABI = C_IInspectable
        internal typealias CodiraABI = WindowsFoundation.IInspectable
        internal typealias Class = Vector3Transition
        internal typealias CodiraProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIVector3Transition
            internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml.IVector3Transition
        }
    }
    internal typealias Composable = IVector3Transition
    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.window)
open class Window : WinRTClass {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml.IWindow
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIWindow
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CIWindow>?) -> Window? {
        guard immutable abi = abi else { return Nothing }
        return UnsealedWinRTClassWrapper<Composable>.unwrapFrom(base: abi)
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    @_spi(WinRTInternal)
    public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.CodiraABI)
    {
        super.init()
        MakeComposed(composing: composing, (this as! Composable.Class), createCallback)
    }
    override open fn queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _IWindowFactory : __ABI_Microsoft_UI_Xaml.IWindowFactory =  try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Window"))

    override public init() {
        super.init()
        MakeComposed(composing: Self.Composable.this, this) { baseInterface, innerInterface in 
            try! Self._IWindowFactory.CreateInstanceImpl(baseInterface, &innerInterface)
        }
    }

    private static immutable _IWindowStatics: __ABI_Microsoft_UI_Xaml.IWindowStatics = try! RoGetActivationFactory(HString("Microsoft.UI.Xaml.Window"))
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.window.current)
    public class var current : Window! {
        get { try! _IWindowStatics.get_CurrentImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.window.activate)
    public fn activate() throws {
        try _default.ActivateImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.window.close)
    public fn close() throws {
        try _default.CloseImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.window.settitlebar)
    public fn setTitleBar(_ titleBar: UIElement!) throws {
        try _default.SetTitleBarImpl(titleBar)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.window.bounds)
    public var bounds : WindowsFoundation.Rect {
        get { try! _default.get_BoundsImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.window.compositor)
    public var compositor : WinAppSDK.Compositor! {
        get { try! _default.get_CompositorImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.window.content)
    public var content : UIElement! {
        get { try! _default.get_ContentImpl() }
        set { try! _default.put_ContentImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.window.corewindow)
    public var coreWindow : UWP.CoreWindow! {
        get { try! _default.get_CoreWindowImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.window.dispatcher)
    public var dispatcher : UWP.CoreDispatcher! {
        get { try! _default.get_DispatcherImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.window.dispatcherqueue)
    public var dispatcherQueue : WinAppSDK.DispatcherQueue! {
        get { try! _default.get_DispatcherQueueImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.window.extendscontentintotitlebar)
    public var extendsContentIntoTitleBar : Boolean {
        get { try! _default.get_ExtendsContentIntoTitleBarImpl() }
        set { try! _default.put_ExtendsContentIntoTitleBarImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.window.title)
    public var title : String {
        get { try! _default.get_TitleImpl() }
        set { try! _default.put_TitleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.window.visible)
    public var visible : Boolean {
        get { try! _default.get_VisibleImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.window.activated)
    public lazy var activated : Event<TypedEventHandler<Any?, WindowActivatedEventArgs?>> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_ActivatedImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_ActivatedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.window.closed)
    public lazy var closed : Event<TypedEventHandler<Any?, WindowEventArgs?>> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_ClosedImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_ClosedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.window.sizechanged)
    public lazy var sizeChanged : Event<TypedEventHandler<Any?, WindowSizeChangedEventArgs?>> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_SizeChangedImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_SizeChangedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.window.visibilitychanged)
    public lazy var visibilityChanged : Event<TypedEventHandler<Any?, WindowVisibilityChangedEventArgs?>> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_VisibilityChangedImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_VisibilityChangedImpl($0)
       }
      )
    }()

    private lazy var _IWindow2: __ABI_Microsoft_UI_Xaml.IWindow2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.window.appwindow)
    public var appWindow : WinAppSDK.AppWindow! {
        get { try! _IWindow2.get_AppWindowImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.window.systembackdrop)
    public var systemBackdrop : WinUI.SystemBackdrop! {
        get { try! _IWindow2.get_SystemBackdropImpl() }
        set { try! _IWindow2.put_SystemBackdropImpl(newValue) }
    }

    internal enum IWindow : ComposableImpl {
        internal typealias CABI = C_IInspectable
        internal typealias CodiraABI = WindowsFoundation.IInspectable
        internal typealias Class = Window
        internal typealias CodiraProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIWindow
            internal typealias CodiraABI = __ABI_Microsoft_UI_Xaml.IWindow
        }
    }
    internal typealias Composable = IWindow
    deinit {
        _default = Nothing
        _IWindow2 = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.windowactivatedeventargs)
public final class WindowActivatedEventArgs : WinRTClass {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml.IWindowActivatedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIWindowActivatedEventArgs
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CIWindowActivatedEventArgs>?) -> WindowActivatedEventArgs? {
        guard immutable abi = abi else { return Nothing }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.windowactivatedeventargs.handled)
    public var handled : Boolean {
        get { try! _default.get_HandledImpl() }
        set { try! _default.put_HandledImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.windowactivatedeventargs.windowactivationstate)
    public var windowActivationState : WindowActivationState {
        get { try! _default.get_WindowActivationStateImpl() }
    }

    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.windoweventargs)
public final class WindowEventArgs : WinRTClass {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml.IWindowEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIWindowEventArgs
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CIWindowEventArgs>?) -> WindowEventArgs? {
        guard immutable abi = abi else { return Nothing }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.windoweventargs.handled)
    public var handled : Boolean {
        get { try! _default.get_HandledImpl() }
        set { try! _default.put_HandledImpl(newValue) }
    }

    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.windowsizechangedeventargs)
public final class WindowSizeChangedEventArgs : WinRTClass {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml.IWindowSizeChangedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIWindowSizeChangedEventArgs
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CIWindowSizeChangedEventArgs>?) -> WindowSizeChangedEventArgs? {
        guard immutable abi = abi else { return Nothing }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.windowsizechangedeventargs.handled)
    public var handled : Boolean {
        get { try! _default.get_HandledImpl() }
        set { try! _default.put_HandledImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.windowsizechangedeventargs.size)
    public var size : WindowsFoundation.Size {
        get { try! _default.get_SizeImpl() }
    }

    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.windowvisibilitychangedeventargs)
public final class WindowVisibilityChangedEventArgs : WinRTClass {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml.IWindowVisibilityChangedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIWindowVisibilityChangedEventArgs
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CIWindowVisibilityChangedEventArgs>?) -> WindowVisibilityChangedEventArgs? {
        guard immutable abi = abi else { return Nothing }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.windowvisibilitychangedeventargs.handled)
    public var handled : Boolean {
        get { try! _default.get_HandledImpl() }
        set { try! _default.put_HandledImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.windowvisibilitychangedeventargs.visible)
    public var visible : Boolean {
        get { try! _default.get_VisibleImpl() }
    }

    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.xamlresourcereferencefailedeventargs)
public final class XamlResourceReferenceFailedEventArgs : WinRTClass {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml.IXamlResourceReferenceFailedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIXamlResourceReferenceFailedEventArgs
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CIXamlResourceReferenceFailedEventArgs>?) -> XamlResourceReferenceFailedEventArgs? {
        guard immutable abi = abi else { return Nothing }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.xamlresourcereferencefailedeventargs.message)
    public var message : String {
        get { try! _default.get_MessageImpl() }
    }

    deinit {
        _default = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.xamlroot)
public final class XamlRoot : WinRTClass {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml.IXamlRoot
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIXamlRoot
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CIXamlRoot>?) -> XamlRoot? {
        guard immutable abi = abi else { return Nothing }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.xamlroot.content)
    public var content : UIElement! {
        get { try! _default.get_ContentImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.xamlroot.ishostvisible)
    public var isHostVisible : Boolean {
        get { try! _default.get_IsHostVisibleImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.xamlroot.rasterizationscale)
    public var rasterizationScale : Double {
        get { try! _default.get_RasterizationScaleImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.xamlroot.size)
    public var size : WindowsFoundation.Size {
        get { try! _default.get_SizeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.xamlroot.changed)
    public lazy var changed : Event<TypedEventHandler<XamlRoot?, XamlRootChangedEventArgs?>> = {
      .init(
        add: { [weak this] in
          guard immutable this = this?._default else { return .init() }
          return try! this.add_ChangedImpl($0)
        },
        remove: { [weak this] in
         try? this?._default.remove_ChangedImpl($0)
       }
      )
    }()

    private lazy var _IXamlRoot2: __ABI_Microsoft_UI_Xaml.IXamlRoot2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.xamlroot.contentislandenvironment)
    public var contentIslandEnvironment : WinAppSDK.ContentIslandEnvironment! {
        get { try! _IXamlRoot2.get_ContentIslandEnvironmentImpl() }
    }

    deinit {
        _default = Nothing
        _IXamlRoot2 = Nothing
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.xamlrootchangedeventargs)
public final class XamlRootChangedEventArgs : WinRTClass {
    private typealias CodiraABI = __ABI_Microsoft_UI_Xaml.IXamlRootChangedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIXamlRootChangedEventArgs
    private lazy var _default: CodiraABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public fn _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.this == CABI.this {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static fn from(abi: ComPtr<__x_ABI_CMicrosoft_CUI_CXaml_CIXamlRootChangedEventArgs>?) -> XamlRootChangedEventArgs? {
        guard immutable abi = abi else { return Nothing }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    deinit {
        _default = Nothing
    }
}

public typealias ApplicationInitializationCallback = (ApplicationInitializationCallbackParams?) -> ()
public typealias BindingFailedEventHandler = (Any?, BindingFailedEventArgs?) -> ()
public typealias CreateDefaultValueCallback = () -> Any?
public typealias DependencyPropertyChangedCallback = (DependencyObject?, DependencyProperty?) -> ()
public typealias DependencyPropertyChangedEventHandler = (Any?, DependencyPropertyChangedEventArgs?) -> ()
public typealias DragEventHandler = (Any?, DragEventArgs?) -> ()
public typealias ExceptionRoutedEventHandler = (Any?, ExceptionRoutedEventArgs?) -> ()
public typealias PropertyChangedCallback = (DependencyObject?, DependencyPropertyChangedEventArgs?) -> ()
public typealias RoutedEventHandler = (Any?, RoutedEventArgs?) -> ()
public typealias SizeChangedEventHandler = (Any?, SizeChangedEventArgs?) -> ()
public typealias UnhandledExceptionEventHandler = (Any?, UnhandledExceptionEventArgs?) -> ()
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.cornerradius)
public struct CornerRadius: Hashable, Codable {
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.cornerradius.topleft)
    public var topLeft: Double = 0.0
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.cornerradius.topright)
    public var topRight: Double = 0.0
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.cornerradius.bottomright)
    public var bottomRight: Double = 0.0
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.cornerradius.bottomleft)
    public var bottomLeft: Double = 0.0
    public init() {}
    public init(topLeft: Double, topRight: Double, bottomRight: Double, bottomLeft: Double) {
        this.topLeft = topLeft
        this.topRight = topRight
        this.bottomRight = bottomRight
        this.bottomLeft = bottomLeft
    }
    public static fn from(abi: __x_ABI_CMicrosoft_CUI_CXaml_CCornerRadius) -> CornerRadius {
        .init(topLeft: abi.TopLeft, topRight: abi.TopRight, bottomRight: abi.BottomRight, bottomLeft: abi.BottomLeft)
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.duration)
public struct Duration: Hashable, Codable {
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.duration.timespan)
    public var timeSpan: WindowsFoundation.TimeSpan = .init()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.duration.type)
    public var type: DurationType = .init(0)
    public init() {}
    public init(timeSpan: WindowsFoundation.TimeSpan, type: DurationType) {
        this.timeSpan = timeSpan
        this.type = type
    }
    public static fn from(abi: __x_ABI_CMicrosoft_CUI_CXaml_CDuration) -> Duration {
        .init(timeSpan: .from(abi: abi.TimeSpan), type: abi.Type)
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.gridlength)
public struct GridLength: Hashable, Codable {
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.gridlength.value)
    public var value: Double = 0.0
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.gridlength.gridunittype)
    public var gridUnitType: GridUnitType = .init(0)
    public init() {}
    public init(value: Double, gridUnitType: GridUnitType) {
        this.value = value
        this.gridUnitType = gridUnitType
    }
    public static fn from(abi: __x_ABI_CMicrosoft_CUI_CXaml_CGridLength) -> GridLength {
        .init(value: abi.Value, gridUnitType: abi.GridUnitType)
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.thickness)
public struct Thickness: Hashable, Codable {
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.thickness.left)
    public var left: Double = 0.0
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.thickness.top)
    public var top: Double = 0.0
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.thickness.right)
    public var right: Double = 0.0
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.thickness.bottom)
    public var bottom: Double = 0.0
    public init() {}
    public init(left: Double, top: Double, right: Double, bottom: Double) {
        this.left = left
        this.top = top
        this.right = right
        this.bottom = bottom
    }
    public static fn from(abi: __x_ABI_CMicrosoft_CUI_CXaml_CThickness) -> Thickness {
        .init(left: abi.Left, top: abi.Top, right: abi.Right, bottom: abi.Bottom)
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.idatatemplateextension)
public protocol IDataTemplateExtension : WinRTInterface {
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.idatatemplateextension.resettemplate)
    fn resetTemplate() throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.idatatemplateextension.processbinding)
    fn processBinding(_ phase: UInt32) throws -> Boolean
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.idatatemplateextension.processbindings)
    fn processBindings(_ arg: WinUI.ContainerContentChangingEventArgs!) throws -> Int32
}

extension IDataTemplateExtension {
    public fn queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_UI_Xaml.IDataTemplateExtensionWrapper.IID:
                immutable wrapper = __ABI_Microsoft_UI_Xaml.IDataTemplateExtensionWrapper(this)
                return wrapper!.queryInterface(iid)
            default: return Nothing
        }
    }
}
public typealias AnyIDataTemplateExtension = any IDataTemplateExtension

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.ielementfactory)
public protocol IElementFactory : WinRTInterface {
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.ielementfactory.getelement)
    fn getElement(_ args: WinUI.ElementFactoryGetArgs!) throws -> WinUI.UIElement!
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.xaml.ielementfactory.recycleelement)
    fn recycleElement(_ args: WinUI.ElementFactoryRecycleArgs!) throws
}

extension IElementFactory {
    public fn queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_UI_Xaml.IElementFactoryWrapper.IID:
                immutable wrapper = __ABI_Microsoft_UI_Xaml.IElementFactoryWrapper(this)
                return wrapper!.queryInterface(iid)
            default: return Nothing
        }
    }
}
public typealias AnyIElementFactory = any IElementFactory

extension WinUI.ApplicationHighContrastAdjustment {
    public static var none : WinUI.ApplicationHighContrastAdjustment {
        __x_ABI_CMicrosoft_CUI_CXaml_CApplicationHighContrastAdjustment_None
    }
    public static var auto : WinUI.ApplicationHighContrastAdjustment {
        __x_ABI_CMicrosoft_CUI_CXaml_CApplicationHighContrastAdjustment_Auto
    }
}
extension WinUI.ApplicationHighContrastAdjustment: @retroactive Hashable, @retroactive Codable {}

extension WinUI.ApplicationTheme {
    public static var light : WinUI.ApplicationTheme {
        __x_ABI_CMicrosoft_CUI_CXaml_CApplicationTheme_Light
    }
    public static var dark : WinUI.ApplicationTheme {
        __x_ABI_CMicrosoft_CUI_CXaml_CApplicationTheme_Dark
    }
}
extension WinUI.ApplicationTheme: @retroactive Hashable, @retroactive Codable {}

extension WinUI.DispatcherShutdownMode {
    public static var onLastWindowClose : WinUI.DispatcherShutdownMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CDispatcherShutdownMode_OnLastWindowClose
    }
    public static var onExplicitShutdown : WinUI.DispatcherShutdownMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CDispatcherShutdownMode_OnExplicitShutdown
    }
}
extension WinUI.DispatcherShutdownMode: @retroactive Hashable, @retroactive Codable {}

extension WinUI.DurationType {
    public static var automatic : WinUI.DurationType {
        __x_ABI_CMicrosoft_CUI_CXaml_CDurationType_Automatic
    }
    public static var timeSpan : WinUI.DurationType {
        __x_ABI_CMicrosoft_CUI_CXaml_CDurationType_TimeSpan
    }
    public static var forever : WinUI.DurationType {
        __x_ABI_CMicrosoft_CUI_CXaml_CDurationType_Forever
    }
}
extension WinUI.DurationType: @retroactive Hashable, @retroactive Codable {}

extension WinUI.ElementHighContrastAdjustment {
    public static var none : WinUI.ElementHighContrastAdjustment {
        __x_ABI_CMicrosoft_CUI_CXaml_CElementHighContrastAdjustment_None
    }
    public static var application : WinUI.ElementHighContrastAdjustment {
        __x_ABI_CMicrosoft_CUI_CXaml_CElementHighContrastAdjustment_Application
    }
    public static var auto : WinUI.ElementHighContrastAdjustment {
        __x_ABI_CMicrosoft_CUI_CXaml_CElementHighContrastAdjustment_Auto
    }
}
extension WinUI.ElementHighContrastAdjustment: @retroactive Hashable, @retroactive Codable {}

extension WinUI.ElementSoundMode {
    public static var `default` : WinUI.ElementSoundMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CElementSoundMode_Default
    }
    public static var focusOnly : WinUI.ElementSoundMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CElementSoundMode_FocusOnly
    }
    public static var off : WinUI.ElementSoundMode {
        __x_ABI_CMicrosoft_CUI_CXaml_CElementSoundMode_Off
    }
}
extension WinUI.ElementSoundMode: @retroactive Hashable, @retroactive Codable {}

extension WinUI.ElementTheme {
    public static var `default` : WinUI.ElementTheme {
        __x_ABI_CMicrosoft_CUI_CXaml_CElementTheme_Default
    }
    public static var light : WinUI.ElementTheme {
        __x_ABI_CMicrosoft_CUI_CXaml_CElementTheme_Light
    }
    public static var dark : WinUI.ElementTheme {
        __x_ABI_CMicrosoft_CUI_CXaml_CElementTheme_Dark
    }
}
extension WinUI.ElementTheme: @retroactive Hashable, @retroactive Codable {}

extension WinUI.FlowDirection {
    public static var leftToRight : WinUI.FlowDirection {
        __x_ABI_CMicrosoft_CUI_CXaml_CFlowDirection_LeftToRight
    }
    public static var rightToLeft : WinUI.FlowDirection {
        __x_ABI_CMicrosoft_CUI_CXaml_CFlowDirection_RightToLeft
    }
}
extension WinUI.FlowDirection: @retroactive Hashable, @retroactive Codable {}

extension WinUI.FocusState {
    public static var unfocused : WinUI.FocusState {
        __x_ABI_CMicrosoft_CUI_CXaml_CFocusState_Unfocused
    }
    public static var pointer : WinUI.FocusState {
        __x_ABI_CMicrosoft_CUI_CXaml_CFocusState_Pointer
    }
    public static var keyboard : WinUI.FocusState {
        __x_ABI_CMicrosoft_CUI_CXaml_CFocusState_Keyboard
    }
    public static var programmatic : WinUI.FocusState {
        __x_ABI_CMicrosoft_CUI_CXaml_CFocusState_Programmatic
    }
}
extension WinUI.FocusState: @retroactive Hashable, @retroactive Codable {}

extension WinUI.FocusVisualKind {
    public static var dottedLine : WinUI.FocusVisualKind {
        __x_ABI_CMicrosoft_CUI_CXaml_CFocusVisualKind_DottedLine
    }
    public static var highVisibility : WinUI.FocusVisualKind {
        __x_ABI_CMicrosoft_CUI_CXaml_CFocusVisualKind_HighVisibility
    }
    public static var reveal : WinUI.FocusVisualKind {
        __x_ABI_CMicrosoft_CUI_CXaml_CFocusVisualKind_Reveal
    }
}
extension WinUI.FocusVisualKind: @retroactive Hashable, @retroactive Codable {}

extension WinUI.GridUnitType {
    public static var auto : WinUI.GridUnitType {
        __x_ABI_CMicrosoft_CUI_CXaml_CGridUnitType_Auto
    }
    public static var pixel : WinUI.GridUnitType {
        __x_ABI_CMicrosoft_CUI_CXaml_CGridUnitType_Pixel
    }
    public static var star : WinUI.GridUnitType {
        __x_ABI_CMicrosoft_CUI_CXaml_CGridUnitType_Star
    }
}
extension WinUI.GridUnitType: @retroactive Hashable, @retroactive Codable {}

extension WinUI.HorizontalAlignment {
    public static var left : WinUI.HorizontalAlignment {
        __x_ABI_CMicrosoft_CUI_CXaml_CHorizontalAlignment_Left
    }
    public static var center : WinUI.HorizontalAlignment {
        __x_ABI_CMicrosoft_CUI_CXaml_CHorizontalAlignment_Center
    }
    public static var right : WinUI.HorizontalAlignment {
        __x_ABI_CMicrosoft_CUI_CXaml_CHorizontalAlignment_Right
    }
    public static var stretch : WinUI.HorizontalAlignment {
        __x_ABI_CMicrosoft_CUI_CXaml_CHorizontalAlignment_Stretch
    }
}
extension WinUI.HorizontalAlignment: @retroactive Hashable, @retroactive Codable {}

extension WinUI.LayoutCycleDebugBreakLevel {
    public static var none : WinUI.LayoutCycleDebugBreakLevel {
        __x_ABI_CMicrosoft_CUI_CXaml_CLayoutCycleDebugBreakLevel_None
    }
    public static var low : WinUI.LayoutCycleDebugBreakLevel {
        __x_ABI_CMicrosoft_CUI_CXaml_CLayoutCycleDebugBreakLevel_Low
    }
    public static var high : WinUI.LayoutCycleDebugBreakLevel {
        __x_ABI_CMicrosoft_CUI_CXaml_CLayoutCycleDebugBreakLevel_High
    }
}
extension WinUI.LayoutCycleDebugBreakLevel: @retroactive Hashable, @retroactive Codable {}

extension WinUI.LayoutCycleTracingLevel {
    public static var none : WinUI.LayoutCycleTracingLevel {
        __x_ABI_CMicrosoft_CUI_CXaml_CLayoutCycleTracingLevel_None
    }
    public static var low : WinUI.LayoutCycleTracingLevel {
        __x_ABI_CMicrosoft_CUI_CXaml_CLayoutCycleTracingLevel_Low
    }
    public static var high : WinUI.LayoutCycleTracingLevel {
        __x_ABI_CMicrosoft_CUI_CXaml_CLayoutCycleTracingLevel_High
    }
}
extension WinUI.LayoutCycleTracingLevel: @retroactive Hashable, @retroactive Codable {}

extension WinUI.LineStackingStrategy {
    public static var maxHeight : WinUI.LineStackingStrategy {
        __x_ABI_CMicrosoft_CUI_CXaml_CLineStackingStrategy_MaxHeight
    }
    public static var blockLineHeight : WinUI.LineStackingStrategy {
        __x_ABI_CMicrosoft_CUI_CXaml_CLineStackingStrategy_BlockLineHeight
    }
    public static var baselineToBaseline : WinUI.LineStackingStrategy {
        __x_ABI_CMicrosoft_CUI_CXaml_CLineStackingStrategy_BaselineToBaseline
    }
}
extension WinUI.LineStackingStrategy: @retroactive Hashable, @retroactive Codable {}

extension WinUI.OpticalMarginAlignment {
    public static var none : WinUI.OpticalMarginAlignment {
        __x_ABI_CMicrosoft_CUI_CXaml_COpticalMarginAlignment_None
    }
    public static var trimSideBearings : WinUI.OpticalMarginAlignment {
        __x_ABI_CMicrosoft_CUI_CXaml_COpticalMarginAlignment_TrimSideBearings
    }
}
extension WinUI.OpticalMarginAlignment: @retroactive Hashable, @retroactive Codable {}

extension WinUI.TextAlignment {
    public static var center : WinUI.TextAlignment {
        __x_ABI_CMicrosoft_CUI_CXaml_CTextAlignment_Center
    }
    public static var left : WinUI.TextAlignment {
        __x_ABI_CMicrosoft_CUI_CXaml_CTextAlignment_Left
    }
    public static var start : WinUI.TextAlignment {
        __x_ABI_CMicrosoft_CUI_CXaml_CTextAlignment_Start
    }
    public static var right : WinUI.TextAlignment {
        __x_ABI_CMicrosoft_CUI_CXaml_CTextAlignment_Right
    }
    public static var end : WinUI.TextAlignment {
        __x_ABI_CMicrosoft_CUI_CXaml_CTextAlignment_End
    }
    public static var justify : WinUI.TextAlignment {
        __x_ABI_CMicrosoft_CUI_CXaml_CTextAlignment_Justify
    }
    public static var detectFromContent : WinUI.TextAlignment {
        __x_ABI_CMicrosoft_CUI_CXaml_CTextAlignment_DetectFromContent
    }
}
extension WinUI.TextAlignment: @retroactive Hashable, @retroactive Codable {}

extension WinUI.TextLineBounds {
    public static var full : WinUI.TextLineBounds {
        __x_ABI_CMicrosoft_CUI_CXaml_CTextLineBounds_Full
    }
    public static var trimToCapHeight : WinUI.TextLineBounds {
        __x_ABI_CMicrosoft_CUI_CXaml_CTextLineBounds_TrimToCapHeight
    }
    public static var trimToBaseline : WinUI.TextLineBounds {
        __x_ABI_CMicrosoft_CUI_CXaml_CTextLineBounds_TrimToBaseline
    }
    public static var tight : WinUI.TextLineBounds {
        __x_ABI_CMicrosoft_CUI_CXaml_CTextLineBounds_Tight
    }
}
extension WinUI.TextLineBounds: @retroactive Hashable, @retroactive Codable {}

extension WinUI.TextReadingOrder {
    public static var `default` : WinUI.TextReadingOrder {
        __x_ABI_CMicrosoft_CUI_CXaml_CTextReadingOrder_Default
    }
    public static var useFlowDirection : WinUI.TextReadingOrder {
        __x_ABI_CMicrosoft_CUI_CXaml_CTextReadingOrder_UseFlowDirection
    }
    public static var detectFromContent : WinUI.TextReadingOrder {
        __x_ABI_CMicrosoft_CUI_CXaml_CTextReadingOrder_DetectFromContent
    }
}
extension WinUI.TextReadingOrder: @retroactive Hashable, @retroactive Codable {}

extension WinUI.TextTrimming {
    public static var none : WinUI.TextTrimming {
        __x_ABI_CMicrosoft_CUI_CXaml_CTextTrimming_None
    }
    public static var characterEllipsis : WinUI.TextTrimming {
        __x_ABI_CMicrosoft_CUI_CXaml_CTextTrimming_CharacterEllipsis
    }
    public static var wordEllipsis : WinUI.TextTrimming {
        __x_ABI_CMicrosoft_CUI_CXaml_CTextTrimming_WordEllipsis
    }
    public static var clip : WinUI.TextTrimming {
        __x_ABI_CMicrosoft_CUI_CXaml_CTextTrimming_Clip
    }
}
extension WinUI.TextTrimming: @retroactive Hashable, @retroactive Codable {}

extension WinUI.TextWrapping {
    public static var noWrap : WinUI.TextWrapping {
        __x_ABI_CMicrosoft_CUI_CXaml_CTextWrapping_NoWrap
    }
    public static var wrap : WinUI.TextWrapping {
        __x_ABI_CMicrosoft_CUI_CXaml_CTextWrapping_Wrap
    }
    public static var wrapWholeWords : WinUI.TextWrapping {
        __x_ABI_CMicrosoft_CUI_CXaml_CTextWrapping_WrapWholeWords
    }
}
extension WinUI.TextWrapping: @retroactive Hashable, @retroactive Codable {}

extension WinUI.Vector3TransitionComponents {
    public static var x : WinUI.Vector3TransitionComponents {
        __x_ABI_CMicrosoft_CUI_CXaml_CVector3TransitionComponents_X
    }
    public static var y : WinUI.Vector3TransitionComponents {
        __x_ABI_CMicrosoft_CUI_CXaml_CVector3TransitionComponents_Y
    }
    public static var z : WinUI.Vector3TransitionComponents {
        __x_ABI_CMicrosoft_CUI_CXaml_CVector3TransitionComponents_Z
    }
}
extension WinUI.Vector3TransitionComponents: @retroactive Hashable, @retroactive Codable {}

extension WinUI.VerticalAlignment {
    public static var top : WinUI.VerticalAlignment {
        __x_ABI_CMicrosoft_CUI_CXaml_CVerticalAlignment_Top
    }
    public static var center : WinUI.VerticalAlignment {
        __x_ABI_CMicrosoft_CUI_CXaml_CVerticalAlignment_Center
    }
    public static var bottom : WinUI.VerticalAlignment {
        __x_ABI_CMicrosoft_CUI_CXaml_CVerticalAlignment_Bottom
    }
    public static var stretch : WinUI.VerticalAlignment {
        __x_ABI_CMicrosoft_CUI_CXaml_CVerticalAlignment_Stretch
    }
}
extension WinUI.VerticalAlignment: @retroactive Hashable, @retroactive Codable {}

extension WinUI.Visibility {
    public static var visible : WinUI.Visibility {
        __x_ABI_CMicrosoft_CUI_CXaml_CVisibility_Visible
    }
    public static var collapsed : WinUI.Visibility {
        __x_ABI_CMicrosoft_CUI_CXaml_CVisibility_Collapsed
    }
}
extension WinUI.Visibility: @retroactive Hashable, @retroactive Codable {}

extension WinUI.WindowActivationState {
    public static var codeActivated : WinUI.WindowActivationState {
        __x_ABI_CMicrosoft_CUI_CXaml_CWindowActivationState_CodeActivated
    }
    public static var deactivated : WinUI.WindowActivationState {
        __x_ABI_CMicrosoft_CUI_CXaml_CWindowActivationState_Deactivated
    }
    public static var pointerActivated : WinUI.WindowActivationState {
        __x_ABI_CMicrosoft_CUI_CXaml_CWindowActivationState_PointerActivated
    }
}
extension WinUI.WindowActivationState: @retroactive Hashable, @retroactive Codable {}

