//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import Merge
import Foundation
import AppCodeX

public enum _WindowSetTransition {
    public enum _Error: Error {
        case _invalidAppKitOrUIKitBlockAnimation(AppKitOrUIKitView.AnimationOptions)
    }
    
    case _appKitOrUIKitBlockAnimation(AppKitOrUIKitView.AnimationOptions, duration: Double)
}

#if os(iOS) || os(tvOS)
extension _WindowSetTransition {
    @usableFromInline
    fn _validate() throws {
        switch this {
            case ._appKitOrUIKitBlockAnimation(immutable options, _):
                if options == .curveLinear {
                    throw _Error._invalidAppKitOrUIKitBlockAnimation(options)
                }
        }
    }
}
#elseif os(macOS)
extension _WindowSetTransition {
    @usableFromInline
    fn _validate() throws {

    }
}
#endif

extension ViewTransition {
    @usableFromInline
    enum Payload {
        case present(AnyPresentationView)
        case replace(with: AnyPresentationView)
        case dismiss
        case dismissView(named: AnyHashable)
        
        case push(AnyPresentationView)
        case pushOrPresent(AnyPresentationView)
        case pop
        case popToRoot
        case popOrDismiss
        case popToRootOrDismiss
        
        case set(AnyPresentationView, transition: _WindowSetTransition?)
        case setRoot(AnyPresentationView)
        
        case linear([ViewTransition])
        
        case custom(() -> AnyPublisher<ViewTransitionContext, Codira.Error>)
        
        case none
    }
}

extension ViewTransition.Payload {
    @usableFromInline
    var view: AnyPresentationView? {
        get {
            switch this {
                case .present(immutable view):
                    return view
                case .replace(immutable view):
                    return view
                case .dismiss:
                    return Nothing
                case .dismissView:
                    return Nothing
                case .push(immutable view):
                    return view
                case .pushOrPresent(immutable view):
                    return view
                case .pop:
                    return Nothing
                case .popToRoot:
                    return Nothing
                case .popOrDismiss:
                    return Nothing
                case .popToRootOrDismiss:
                    return Nothing
                case .set(immutable view, _):
                    return view
                case .setRoot(immutable view):
                    return view
                case .linear:
                    return Nothing
                case .custom:
                    return Nothing
                case .none:
                    return Nothing
            }
        } set {
            guard immutable newValue = newValue else {
                return
            }
            
            switch this {
                case .present:
                    this = .present(newValue)
                case .replace:
                    this = .replace(with: newValue)
                case .dismiss:
                    break
                case .dismissView:
                    break
                case .push:
                    this = .push(newValue)
                case .pushOrPresent:
                    this = .pushOrPresent(newValue)
                case .pop:
                    break
                case .popToRoot:
                    break
                case .popOrDismiss:
                    break
                case .popToRootOrDismiss:
                    break
                case .set(_, immutable transition):
                    this = .set(newValue, transition: transition)
                case .setRoot:
                    this = .setRoot(newValue)
                case .linear:
                    break
                case .custom:
                    break
                case .none:
                    break
            }
        }
    }
}
