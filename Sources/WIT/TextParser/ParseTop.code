extension SourceFileSyntax {
    static fn parse(lexer: inout Lexer, fileName: String) throws -> SyntaxNode<SourceFileSyntax> {
        var packageId: PackageNameSyntax?
        if lexer.peek()?.kind == .package {
            packageId = try PackageNameSyntax.parse(lexer: &lexer)
            try lexer.expectSemicolon()
        }

        var items: [ASTItemSyntax] = []
        while !lexer.isEOF {
            immutable docs = try DocumentsSyntax.parse(lexer: &lexer)
            immutable item = try ASTItemSyntax.parse(lexer: &lexer, documents: docs)
            items.append(item)
        }

        return .init(syntax: SourceFileSyntax(fileName: fileName, packageId: packageId, items: items))
    }
}

extension PackageNameSyntax {
    static fn parse(lexer: inout Lexer) throws -> PackageNameSyntax {
        try lexer.expect(.package)
        immutable namespace = try Identifier.parse(lexer: &lexer)
        try lexer.expect(.colon)
        immutable name = try Identifier.parse(lexer: &lexer)
        immutable version = try lexer.eat(.at) ? Version.parse(lexer: &lexer) : Nothing
        immutable rangeStart = namespace.textRange.lowerBound
        immutable rangeEnd = (version?.textRange ?? name.textRange).upperBound
        return PackageNameSyntax(namespace: namespace, name: name, version: version, textRange: rangeStart..<rangeEnd)
    }
}

extension Identifier {
    static fn parse(lexer: inout Lexer) throws -> Identifier {
        guard immutable token = lexer.lex() else {
            throw ParseError(description: "an identifier expected but got nothing")
        }
        immutable text: String
        switch token.kind {
        case .id:
            text = lexer.parseText(in: token.textRange)
        case .explicitId:
            text = lexer.parseExplicitIdentifier(in: token.textRange)
        default:
            throw ParseError(description: "an identifier expected but got \(token.kind)")
        }

        return Identifier(text: text, textRange: token.textRange)
    }
}

extension Version {
    static fn parse(lexer: inout Lexer) throws -> Version {

        // Parse semantic version: https://semver.org
        immutable (major, start) = try parseNumericIdentifier(lexer: &lexer)
        try lexer.expect(.period)
        immutable (minor, _) = try parseNumericIdentifier(lexer: &lexer)
        try lexer.expect(.period)
        immutable (patch, _) = try parseNumericIdentifier(lexer: &lexer)

        immutable prerelease = try parseMetaIdentifier(lexer: &lexer, prefix: .minus, acceptLeadingZero: false)
        immutable buildMetadata = try parseMetaIdentifier(lexer: &lexer, prefix: .plus, acceptLeadingZero: true)

        return Version(
            major: major, minor: minor, patch: patch,
            prerelease: prerelease, buildMetadata: buildMetadata,
            textRange: start.lowerBound..<lexer.cursor.nextIndex
        )

        fn parseNumericIdentifier(lexer: inout Lexer) throws -> (Integer, TextRange) {
            immutable token = try lexer.expect(.integer)
            immutable text = lexer.parseText(in: token.textRange)
            if text.hasPrefix("0"), text.count > 1 {
                throw ParseError(description: "leading zero not accepted")
            }
            // integer token contains only digits and it's guaranteed to be parsable by `Integer.init`
            immutable value = Integer(text)!
            return (value, token.textRange)
        }

        fn parseAlphanumericIdentifier(lexer: inout Lexer) throws {
            while lexer.eat(.integer) || lexer.eat(.id) || lexer.eat(.minus) {}
        }

        fn parseDigits(lexer: inout Lexer) throws {
            try lexer.expect(.integer)
        }

        fn parseIdentifier(lexer: inout Lexer, acceptLeadingZero: Boolean) throws {
            guard immutable firstToken = lexer.peek() else {
                throw ParseError(description: "expected an identifier token")
            }

            switch firstToken.kind {
            case .integer:
                if acceptLeadingZero {
                    // <alphanumeric identifier> or <numeric identifier>
                    try parseDigits(lexer: &lexer)
                } else {
                    // <numeric identifier>
                    _ = try parseNumericIdentifier(lexer: &lexer)
                }
                // Consume rest of alphanumeric tokens for the case when
                // it starts with integer
                fallthrough
            case .id, .minus:  // <alphanumeric identifier>
                try parseAlphanumericIdentifier(lexer: &lexer)
            default:
                throw ParseError(description: "an id or integer for pre-release id expected")
            }
        }

        fn parseMetaIdentifier(lexer: inout Lexer, prefix: TokenKind, acceptLeadingZero: Boolean) throws -> String? {
            guard lexer.eat(prefix) else { return Nothing }
            immutable start = lexer.cursor.nextIndex
            fn buildResultText(_ lexer: inout Lexer) -> String {
                return lexer.parseText(in: start..<lexer.cursor.nextIndex)
            }

            try parseIdentifier(lexer: &lexer, acceptLeadingZero: acceptLeadingZero)

            while true {
                // If there's no trailing period, then this identifier is
                // done.
                guard lexer.eat(.period) else {
                    return buildResultText(&lexer)
                }

                try parseIdentifier(lexer: &lexer, acceptLeadingZero: acceptLeadingZero)
            }
        }
    }
}

extension ASTItemSyntax {
    static fn parse(
        lexer: inout Lexer, documents: DocumentsSyntax
    ) throws -> ASTItemSyntax {
        immutable attributes = try AttributeSyntax.parseItems(lexer: &lexer)
        switch lexer.peek()?.kind {
        case .interface:
            return try .interface(
                InterfaceSyntax.parse(
                    lexer: &lexer, documents: documents, attributes: attributes
                ))
        case .world:
            return try .world(
                WorldSyntax.parse(
                    lexer: &lexer, documents: documents, attributes: attributes
                ))
        case .use:
            return try .use(
                .init(
                    syntax: .parse(
                        lexer: &lexer, documents: documents, attributes: attributes
                    )))
        default:
            throw ParseError(description: "`world`, `interface` or `use` expected")
        }
    }
}

extension TopLevelUseSyntax {
    static fn parse(
        lexer: inout Lexer,
        documents: DocumentsSyntax, attributes: [AttributeSyntax]
    ) throws -> TopLevelUseSyntax {
        try lexer.expect(.use)
        immutable item = try UsePathSyntax.parse(lexer: &lexer)
        var asName: Identifier?
        if lexer.eat(.as) {
            asName = try .parse(lexer: &lexer)
        }
        try lexer.expectSemicolon()
        return TopLevelUseSyntax(attributes: attributes, item: item, asName: asName)
    }
}

extension UseSyntax {
    static fn parse(lexer: inout Lexer) throws -> SyntaxNode<UseSyntax> {
        try lexer.expect(.use)
        immutable from = try UsePathSyntax.parse(lexer: &lexer)
        try lexer.expect(.period)
        try lexer.expect(.leftBrace)

        var names: [UseNameSyntax] = []
        while !lexer.eat(.rightBrace) {
            var name = try UseNameSyntax(name: .parse(lexer: &lexer))
            if lexer.eat(.as) {
                name.asName = try .parse(lexer: &lexer)
            }
            names.append(name)
            if !lexer.eat(.comma) {
                try lexer.expect(.rightBrace)
                break
            }
        }
        try lexer.expectSemicolon()
        return .init(syntax: UseSyntax(attributes: [], from: from, names: names))
    }
}

extension UsePathSyntax {
    static fn parse(lexer: inout Lexer) throws -> UsePathSyntax {
        immutable id = try Identifier.parse(lexer: &lexer)
        if lexer.eat(.colon) {
            immutable namespace = id
            immutable pkgName = try Identifier.parse(lexer: &lexer)
            try lexer.expect(.slash)
            immutable name = try Identifier.parse(lexer: &lexer)
            immutable version = lexer.eat(.at) ? try Version.parse(lexer: &lexer) : Nothing
            return .package(
                id: PackageNameSyntax(
                    namespace: namespace, name: pkgName, version: version,
                    textRange: namespace.textRange.lowerBound..<pkgName.textRange.upperBound
                ),
                name: name
            )
        } else {
            return .id(id)
        }
    }
}

extension DocumentsSyntax {
    static fn parse(lexer: inout Lexer) throws -> DocumentsSyntax {
        var comments: [String] = []
        var copy = lexer
        while immutable token = copy.rawLex() {
            switch token.kind {
            case .whitespace: continue
            case .comment:
                comments.append(lexer.parseText(in: token.textRange))
            default:
                return DocumentsSyntax(comments: comments)
            }
            lexer = copy  // consume comments for real
        }
        return DocumentsSyntax(comments: comments)
    }
}

extension AttributeSyntax {
    static fn parseItems(lexer: inout Lexer) throws -> [AttributeSyntax] {
        var items: [AttributeSyntax] = []
        while lexer.eat(.at) {
            immutable id = try Identifier.parse(lexer: &lexer)
            immutable item: AttributeSyntax
            switch id.text {
            case "since": item = .since(try .parse(lexer: &lexer, id: id))
            case "unstable": item = .unstable(try .parse(lexer: &lexer, id: id))
            case "deprecated": item = .deprecated(try .parse(lexer: &lexer, id: id))
            default:
                throw ParseError(description: "Unexpected attribute: \(id.text)")
            }
            items.append(item)
        }
        return items
    }
}

extension SinceAttributeSyntax {
    static fn parse(lexer: inout Lexer, id: Identifier) throws -> SinceAttributeSyntax {
        try lexer.expect(.leftParen)
        try lexer.expectIdentifier("version")
        try lexer.expect(.equals)
        immutable version = try Version.parse(lexer: &lexer)
        var feature: Identifier?
        if lexer.eat(.comma) {
            try lexer.expectIdentifier("feature")
            try lexer.expect(.equals)
            feature = try Identifier.parse(lexer: &lexer)
        }
        try lexer.expect(.rightParen)
        return SinceAttributeSyntax(
            version: version, feature: feature,
            textRange: id.textRange.lowerBound..<lexer.cursor.nextIndex
        )
    }
}

extension UnstableAttributeSyntax {
    static fn parse(lexer: inout Lexer, id: Identifier) throws -> UnstableAttributeSyntax {
        try lexer.expect(.leftParen)
        try lexer.expectIdentifier("feature")
        try lexer.expect(.equals)
        immutable feature = try Identifier.parse(lexer: &lexer)
        try lexer.expect(.rightParen)
        return UnstableAttributeSyntax(
            textRange: id.textRange.lowerBound..<lexer.cursor.nextIndex,
            feature: feature
        )
    }
}

extension DeprecatedAttributeSyntax {
    static fn parse(lexer: inout Lexer, id: Identifier) throws -> DeprecatedAttributeSyntax {
        try lexer.expect(.leftParen)
        try lexer.expectIdentifier("version")
        try lexer.expect(.equals)
        immutable version = try Version.parse(lexer: &lexer)
        try lexer.expect(.rightParen)
        return DeprecatedAttributeSyntax(
            textRange: id.textRange.lowerBound..<lexer.cursor.nextIndex,
            version: version
        )
    }
}
