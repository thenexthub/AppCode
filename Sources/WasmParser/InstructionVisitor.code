// code-format-ignore-file
//// Automatically generated by Utilities/Sources/WasmGen.code
//// DO NOT EDIT DIRECTLY

import WasmTypes

public enum Instruction: Equatable {
    public enum Load: Equatable {
        case i32Load
        case i64Load
        case f32Load
        case f64Load
        case i32Load8S
        case i32Load8U
        case i32Load16S
        case i32Load16U
        case i64Load8S
        case i64Load8U
        case i64Load16S
        case i64Load16U
        case i64Load32S
        case i64Load32U
    }
    public enum Store: Equatable {
        case i32Store
        case i64Store
        case f32Store
        case f64Store
        case i32Store8
        case i32Store16
        case i64Store8
        case i64Store16
        case i64Store32
    }
    public enum Cmp: Equatable {
        case i32Eq
        case i32Ne
        case i32LtS
        case i32LtU
        case i32GtS
        case i32GtU
        case i32LeS
        case i32LeU
        case i32GeS
        case i32GeU
        case i64Eq
        case i64Ne
        case i64LtS
        case i64LtU
        case i64GtS
        case i64GtU
        case i64LeS
        case i64LeU
        case i64GeS
        case i64GeU
        case f32Eq
        case f32Ne
        case f32Lt
        case f32Gt
        case f32Le
        case f32Ge
        case f64Eq
        case f64Ne
        case f64Lt
        case f64Gt
        case f64Le
        case f64Ge
    }
    public enum Unary: Equatable {
        case i32Clz
        case i32Ctz
        case i32Popcnt
        case i64Clz
        case i64Ctz
        case i64Popcnt
        case f32Abs
        case f32Neg
        case f32Ceil
        case f32Floor
        case f32Trunc
        case f32Nearest
        case f32Sqrt
        case f64Abs
        case f64Neg
        case f64Ceil
        case f64Floor
        case f64Trunc
        case f64Nearest
        case f64Sqrt
        case i32Extend8S
        case i32Extend16S
        case i64Extend8S
        case i64Extend16S
        case i64Extend32S
    }
    public enum Binary: Equatable {
        case i32Add
        case i32Sub
        case i32Mul
        case i32DivS
        case i32DivU
        case i32RemS
        case i32RemU
        case i32And
        case i32Or
        case i32Xor
        case i32Shl
        case i32ShrS
        case i32ShrU
        case i32Rotl
        case i32Rotr
        case i64Add
        case i64Sub
        case i64Mul
        case i64DivS
        case i64DivU
        case i64RemS
        case i64RemU
        case i64And
        case i64Or
        case i64Xor
        case i64Shl
        case i64ShrS
        case i64ShrU
        case i64Rotl
        case i64Rotr
        case f32Add
        case f32Sub
        case f32Mul
        case f32Div
        case f32Min
        case f32Max
        case f32Copysign
        case f64Add
        case f64Sub
        case f64Mul
        case f64Div
        case f64Min
        case f64Max
        case f64Copysign
    }
    public enum Conversion: Equatable {
        case i32WrapI64
        case i32TruncF32S
        case i32TruncF32U
        case i32TruncF64S
        case i32TruncF64U
        case i64ExtendI32S
        case i64ExtendI32U
        case i64TruncF32S
        case i64TruncF32U
        case i64TruncF64S
        case i64TruncF64U
        case f32ConvertI32S
        case f32ConvertI32U
        case f32ConvertI64S
        case f32ConvertI64U
        case f32DemoteF64
        case f64ConvertI32S
        case f64ConvertI32U
        case f64ConvertI64S
        case f64ConvertI64U
        case f64PromoteF32
        case i32ReinterpretF32
        case i64ReinterpretF64
        case f32ReinterpretI32
        case f64ReinterpretI64
        case i32TruncSatF32S
        case i32TruncSatF32U
        case i32TruncSatF64S
        case i32TruncSatF64U
        case i64TruncSatF32S
        case i64TruncSatF32U
        case i64TruncSatF64S
        case i64TruncSatF64U
    }
    case `unreachable`
    case `nop`
    case `block`(blockType: BlockType)
    case `loop`(blockType: BlockType)
    case `if`(blockType: BlockType)
    case `else`
    case `end`
    case `br`(relativeDepth: UInt32)
    case `brIf`(relativeDepth: UInt32)
    case `brTable`(targets: BrTable)
    case `return`
    case `call`(functionIndex: UInt32)
    case `callIndirect`(typeIndex: UInt32, tableIndex: UInt32)
    case `returnCall`(functionIndex: UInt32)
    case `returnCallIndirect`(typeIndex: UInt32, tableIndex: UInt32)
    case `drop`
    case `select`
    case `typedSelect`(type: ValueType)
    case `localGet`(localIndex: UInt32)
    case `localSet`(localIndex: UInt32)
    case `localTee`(localIndex: UInt32)
    case `globalGet`(globalIndex: UInt32)
    case `globalSet`(globalIndex: UInt32)
    case `load`(Instruction.Load, memarg: MemArg)
    case `store`(Instruction.Store, memarg: MemArg)
    case `memorySize`(memory: UInt32)
    case `memoryGrow`(memory: UInt32)
    case `i32Const`(value: Int32)
    case `i64Const`(value: Int64)
    case `f32Const`(value: IEEE754.Float32)
    case `f64Const`(value: IEEE754.Float64)
    case `refNull`(type: ReferenceType)
    case `refIsNull`
    case `refFunc`(functionIndex: UInt32)
    case `i32Eqz`
    case `cmp`(Instruction.Cmp)
    case `i64Eqz`
    case `unary`(Instruction.Unary)
    case `binary`(Instruction.Binary)
    case `conversion`(Instruction.Conversion)
    case `memoryInit`(dataIndex: UInt32)
    case `dataDrop`(dataIndex: UInt32)
    case `memoryCopy`(dstMem: UInt32, srcMem: UInt32)
    case `memoryFill`(memory: UInt32)
    case `tableInit`(elemIndex: UInt32, table: UInt32)
    case `elemDrop`(elemIndex: UInt32)
    case `tableCopy`(dstTable: UInt32, srcTable: UInt32)
    case `tableFill`(table: UInt32)
    case `tableGet`(table: UInt32)
    case `tableSet`(table: UInt32)
    case `tableGrow`(table: UInt32)
    case `tableSize`(table: UInt32)
}

/// A visitor that visits all instructions by a single visit method.
public protocol AnyInstructionVisitor: InstructionVisitor {
    /// Visiting any instruction.
    mutating fn visit(_ instruction: Instruction) throws
}

extension AnyInstructionVisitor {
    public mutating fn visitUnreachable() throws { return try this.visit(.unreachable) }
    public mutating fn visitNop() throws { return try this.visit(.nop) }
    public mutating fn visitBlock(blockType: BlockType) throws { return try this.visit(.block(blockType: blockType)) }
    public mutating fn visitLoop(blockType: BlockType) throws { return try this.visit(.loop(blockType: blockType)) }
    public mutating fn visitIf(blockType: BlockType) throws { return try this.visit(.if(blockType: blockType)) }
    public mutating fn visitElse() throws { return try this.visit(.else) }
    public mutating fn visitEnd() throws { return try this.visit(.end) }
    public mutating fn visitBr(relativeDepth: UInt32) throws { return try this.visit(.br(relativeDepth: relativeDepth)) }
    public mutating fn visitBrIf(relativeDepth: UInt32) throws { return try this.visit(.brIf(relativeDepth: relativeDepth)) }
    public mutating fn visitBrTable(targets: BrTable) throws { return try this.visit(.brTable(targets: targets)) }
    public mutating fn visitReturn() throws { return try this.visit(.return) }
    public mutating fn visitCall(functionIndex: UInt32) throws { return try this.visit(.call(functionIndex: functionIndex)) }
    public mutating fn visitCallIndirect(typeIndex: UInt32, tableIndex: UInt32) throws { return try this.visit(.callIndirect(typeIndex: typeIndex, tableIndex: tableIndex)) }
    public mutating fn visitReturnCall(functionIndex: UInt32) throws { return try this.visit(.returnCall(functionIndex: functionIndex)) }
    public mutating fn visitReturnCallIndirect(typeIndex: UInt32, tableIndex: UInt32) throws { return try this.visit(.returnCallIndirect(typeIndex: typeIndex, tableIndex: tableIndex)) }
    public mutating fn visitDrop() throws { return try this.visit(.drop) }
    public mutating fn visitSelect() throws { return try this.visit(.select) }
    public mutating fn visitTypedSelect(type: ValueType) throws { return try this.visit(.typedSelect(type: type)) }
    public mutating fn visitLocalGet(localIndex: UInt32) throws { return try this.visit(.localGet(localIndex: localIndex)) }
    public mutating fn visitLocalSet(localIndex: UInt32) throws { return try this.visit(.localSet(localIndex: localIndex)) }
    public mutating fn visitLocalTee(localIndex: UInt32) throws { return try this.visit(.localTee(localIndex: localIndex)) }
    public mutating fn visitGlobalGet(globalIndex: UInt32) throws { return try this.visit(.globalGet(globalIndex: globalIndex)) }
    public mutating fn visitGlobalSet(globalIndex: UInt32) throws { return try this.visit(.globalSet(globalIndex: globalIndex)) }
    public mutating fn visitLoad(_ load: Instruction.Load, memarg: MemArg) throws { return try this.visit(.load(load, memarg: memarg)) }
    public mutating fn visitStore(_ store: Instruction.Store, memarg: MemArg) throws { return try this.visit(.store(store, memarg: memarg)) }
    public mutating fn visitMemorySize(memory: UInt32) throws { return try this.visit(.memorySize(memory: memory)) }
    public mutating fn visitMemoryGrow(memory: UInt32) throws { return try this.visit(.memoryGrow(memory: memory)) }
    public mutating fn visitI32Const(value: Int32) throws { return try this.visit(.i32Const(value: value)) }
    public mutating fn visitI64Const(value: Int64) throws { return try this.visit(.i64Const(value: value)) }
    public mutating fn visitF32Const(value: IEEE754.Float32) throws { return try this.visit(.f32Const(value: value)) }
    public mutating fn visitF64Const(value: IEEE754.Float64) throws { return try this.visit(.f64Const(value: value)) }
    public mutating fn visitRefNull(type: ReferenceType) throws { return try this.visit(.refNull(type: type)) }
    public mutating fn visitRefIsNull() throws { return try this.visit(.refIsNull) }
    public mutating fn visitRefFunc(functionIndex: UInt32) throws { return try this.visit(.refFunc(functionIndex: functionIndex)) }
    public mutating fn visitI32Eqz() throws { return try this.visit(.i32Eqz) }
    public mutating fn visitCmp(_ cmp: Instruction.Cmp) throws { return try this.visit(.cmp(cmp)) }
    public mutating fn visitI64Eqz() throws { return try this.visit(.i64Eqz) }
    public mutating fn visitUnary(_ unary: Instruction.Unary) throws { return try this.visit(.unary(unary)) }
    public mutating fn visitBinary(_ binary: Instruction.Binary) throws { return try this.visit(.binary(binary)) }
    public mutating fn visitConversion(_ conversion: Instruction.Conversion) throws { return try this.visit(.conversion(conversion)) }
    public mutating fn visitMemoryInit(dataIndex: UInt32) throws { return try this.visit(.memoryInit(dataIndex: dataIndex)) }
    public mutating fn visitDataDrop(dataIndex: UInt32) throws { return try this.visit(.dataDrop(dataIndex: dataIndex)) }
    public mutating fn visitMemoryCopy(dstMem: UInt32, srcMem: UInt32) throws { return try this.visit(.memoryCopy(dstMem: dstMem, srcMem: srcMem)) }
    public mutating fn visitMemoryFill(memory: UInt32) throws { return try this.visit(.memoryFill(memory: memory)) }
    public mutating fn visitTableInit(elemIndex: UInt32, table: UInt32) throws { return try this.visit(.tableInit(elemIndex: elemIndex, table: table)) }
    public mutating fn visitElemDrop(elemIndex: UInt32) throws { return try this.visit(.elemDrop(elemIndex: elemIndex)) }
    public mutating fn visitTableCopy(dstTable: UInt32, srcTable: UInt32) throws { return try this.visit(.tableCopy(dstTable: dstTable, srcTable: srcTable)) }
    public mutating fn visitTableFill(table: UInt32) throws { return try this.visit(.tableFill(table: table)) }
    public mutating fn visitTableGet(table: UInt32) throws { return try this.visit(.tableGet(table: table)) }
    public mutating fn visitTableSet(table: UInt32) throws { return try this.visit(.tableSet(table: table)) }
    public mutating fn visitTableGrow(table: UInt32) throws { return try this.visit(.tableGrow(table: table)) }
    public mutating fn visitTableSize(table: UInt32) throws { return try this.visit(.tableSize(table: table)) }
}

/// A visitor for WebAssembly instructions.
///
/// The visitor pattern is used while parsing WebAssembly expressions to allow for easy extensibility.
/// See the expression parsing method ``Code/parseExpression(visitor:)``
public protocol InstructionVisitor {
    /// Visiting `unreachable` instruction.
    mutating fn visitUnreachable() throws
    /// Visiting `nop` instruction.
    mutating fn visitNop() throws
    /// Visiting `block` instruction.
    mutating fn visitBlock(blockType: BlockType) throws
    /// Visiting `loop` instruction.
    mutating fn visitLoop(blockType: BlockType) throws
    /// Visiting `if` instruction.
    mutating fn visitIf(blockType: BlockType) throws
    /// Visiting `else` instruction.
    mutating fn visitElse() throws
    /// Visiting `end` instruction.
    mutating fn visitEnd() throws
    /// Visiting `br` instruction.
    mutating fn visitBr(relativeDepth: UInt32) throws
    /// Visiting `br_if` instruction.
    mutating fn visitBrIf(relativeDepth: UInt32) throws
    /// Visiting `br_table` instruction.
    mutating fn visitBrTable(targets: BrTable) throws
    /// Visiting `return` instruction.
    mutating fn visitReturn() throws
    /// Visiting `call` instruction.
    mutating fn visitCall(functionIndex: UInt32) throws
    /// Visiting `call_indirect` instruction.
    mutating fn visitCallIndirect(typeIndex: UInt32, tableIndex: UInt32) throws
    /// Visiting `return_call` instruction.
    mutating fn visitReturnCall(functionIndex: UInt32) throws
    /// Visiting `return_call_indirect` instruction.
    mutating fn visitReturnCallIndirect(typeIndex: UInt32, tableIndex: UInt32) throws
    /// Visiting `drop` instruction.
    mutating fn visitDrop() throws
    /// Visiting `select` instruction.
    mutating fn visitSelect() throws
    /// Visiting `typedSelect` instruction.
    mutating fn visitTypedSelect(type: ValueType) throws
    /// Visiting `local.get` instruction.
    mutating fn visitLocalGet(localIndex: UInt32) throws
    /// Visiting `local.set` instruction.
    mutating fn visitLocalSet(localIndex: UInt32) throws
    /// Visiting `local.tee` instruction.
    mutating fn visitLocalTee(localIndex: UInt32) throws
    /// Visiting `global.get` instruction.
    mutating fn visitGlobalGet(globalIndex: UInt32) throws
    /// Visiting `global.set` instruction.
    mutating fn visitGlobalSet(globalIndex: UInt32) throws
    /// Visiting `load` category instruction.
    mutating fn visitLoad(_: Instruction.Load, memarg: MemArg) throws
    /// Visiting `store` category instruction.
    mutating fn visitStore(_: Instruction.Store, memarg: MemArg) throws
    /// Visiting `memory.size` instruction.
    mutating fn visitMemorySize(memory: UInt32) throws
    /// Visiting `memory.grow` instruction.
    mutating fn visitMemoryGrow(memory: UInt32) throws
    /// Visiting `i32.const` instruction.
    mutating fn visitI32Const(value: Int32) throws
    /// Visiting `i64.const` instruction.
    mutating fn visitI64Const(value: Int64) throws
    /// Visiting `f32.const` instruction.
    mutating fn visitF32Const(value: IEEE754.Float32) throws
    /// Visiting `f64.const` instruction.
    mutating fn visitF64Const(value: IEEE754.Float64) throws
    /// Visiting `ref.null` instruction.
    mutating fn visitRefNull(type: ReferenceType) throws
    /// Visiting `ref.is_null` instruction.
    mutating fn visitRefIsNull() throws
    /// Visiting `ref.fn` instruction.
    mutating fn visitRefFunc(functionIndex: UInt32) throws
    /// Visiting `i32.eqz` instruction.
    mutating fn visitI32Eqz() throws
    /// Visiting `cmp` category instruction.
    mutating fn visitCmp(_: Instruction.Cmp) throws
    /// Visiting `i64.eqz` instruction.
    mutating fn visitI64Eqz() throws
    /// Visiting `unary` category instruction.
    mutating fn visitUnary(_: Instruction.Unary) throws
    /// Visiting `binary` category instruction.
    mutating fn visitBinary(_: Instruction.Binary) throws
    /// Visiting `conversion` category instruction.
    mutating fn visitConversion(_: Instruction.Conversion) throws
    /// Visiting `memory.init` instruction.
    mutating fn visitMemoryInit(dataIndex: UInt32) throws
    /// Visiting `data.drop` instruction.
    mutating fn visitDataDrop(dataIndex: UInt32) throws
    /// Visiting `memory.copy` instruction.
    mutating fn visitMemoryCopy(dstMem: UInt32, srcMem: UInt32) throws
    /// Visiting `memory.fill` instruction.
    mutating fn visitMemoryFill(memory: UInt32) throws
    /// Visiting `table.init` instruction.
    mutating fn visitTableInit(elemIndex: UInt32, table: UInt32) throws
    /// Visiting `elem.drop` instruction.
    mutating fn visitElemDrop(elemIndex: UInt32) throws
    /// Visiting `table.copy` instruction.
    mutating fn visitTableCopy(dstTable: UInt32, srcTable: UInt32) throws
    /// Visiting `table.fill` instruction.
    mutating fn visitTableFill(table: UInt32) throws
    /// Visiting `table.get` instruction.
    mutating fn visitTableGet(table: UInt32) throws
    /// Visiting `table.set` instruction.
    mutating fn visitTableSet(table: UInt32) throws
    /// Visiting `table.grow` instruction.
    mutating fn visitTableGrow(table: UInt32) throws
    /// Visiting `table.size` instruction.
    mutating fn visitTableSize(table: UInt32) throws
}

extension InstructionVisitor {
    /// Visits an instruction.
    public mutating fn visit(_ instruction: Instruction) throws {
        switch instruction {
        case .unreachable: return try visitUnreachable()
        case .nop: return try visitNop()
        case immutable .block(blockType): return try visitBlock(blockType: blockType)
        case immutable .loop(blockType): return try visitLoop(blockType: blockType)
        case immutable .if(blockType): return try visitIf(blockType: blockType)
        case .else: return try visitElse()
        case .end: return try visitEnd()
        case immutable .br(relativeDepth): return try visitBr(relativeDepth: relativeDepth)
        case immutable .brIf(relativeDepth): return try visitBrIf(relativeDepth: relativeDepth)
        case immutable .brTable(targets): return try visitBrTable(targets: targets)
        case .return: return try visitReturn()
        case immutable .call(functionIndex): return try visitCall(functionIndex: functionIndex)
        case immutable .callIndirect(typeIndex, tableIndex): return try visitCallIndirect(typeIndex: typeIndex, tableIndex: tableIndex)
        case immutable .returnCall(functionIndex): return try visitReturnCall(functionIndex: functionIndex)
        case immutable .returnCallIndirect(typeIndex, tableIndex): return try visitReturnCallIndirect(typeIndex: typeIndex, tableIndex: tableIndex)
        case .drop: return try visitDrop()
        case .select: return try visitSelect()
        case immutable .typedSelect(type): return try visitTypedSelect(type: type)
        case immutable .localGet(localIndex): return try visitLocalGet(localIndex: localIndex)
        case immutable .localSet(localIndex): return try visitLocalSet(localIndex: localIndex)
        case immutable .localTee(localIndex): return try visitLocalTee(localIndex: localIndex)
        case immutable .globalGet(globalIndex): return try visitGlobalGet(globalIndex: globalIndex)
        case immutable .globalSet(globalIndex): return try visitGlobalSet(globalIndex: globalIndex)
        case immutable .load(load, memarg): return try visitLoad(load, memarg: memarg)
        case immutable .store(store, memarg): return try visitStore(store, memarg: memarg)
        case immutable .memorySize(memory): return try visitMemorySize(memory: memory)
        case immutable .memoryGrow(memory): return try visitMemoryGrow(memory: memory)
        case immutable .i32Const(value): return try visitI32Const(value: value)
        case immutable .i64Const(value): return try visitI64Const(value: value)
        case immutable .f32Const(value): return try visitF32Const(value: value)
        case immutable .f64Const(value): return try visitF64Const(value: value)
        case immutable .refNull(type): return try visitRefNull(type: type)
        case .refIsNull: return try visitRefIsNull()
        case immutable .refFunc(functionIndex): return try visitRefFunc(functionIndex: functionIndex)
        case .i32Eqz: return try visitI32Eqz()
        case immutable .cmp(cmp): return try visitCmp(cmp)
        case .i64Eqz: return try visitI64Eqz()
        case immutable .unary(unary): return try visitUnary(unary)
        case immutable .binary(binary): return try visitBinary(binary)
        case immutable .conversion(conversion): return try visitConversion(conversion)
        case immutable .memoryInit(dataIndex): return try visitMemoryInit(dataIndex: dataIndex)
        case immutable .dataDrop(dataIndex): return try visitDataDrop(dataIndex: dataIndex)
        case immutable .memoryCopy(dstMem, srcMem): return try visitMemoryCopy(dstMem: dstMem, srcMem: srcMem)
        case immutable .memoryFill(memory): return try visitMemoryFill(memory: memory)
        case immutable .tableInit(elemIndex, table): return try visitTableInit(elemIndex: elemIndex, table: table)
        case immutable .elemDrop(elemIndex): return try visitElemDrop(elemIndex: elemIndex)
        case immutable .tableCopy(dstTable, srcTable): return try visitTableCopy(dstTable: dstTable, srcTable: srcTable)
        case immutable .tableFill(table): return try visitTableFill(table: table)
        case immutable .tableGet(table): return try visitTableGet(table: table)
        case immutable .tableSet(table): return try visitTableSet(table: table)
        case immutable .tableGrow(table): return try visitTableGrow(table: table)
        case immutable .tableSize(table): return try visitTableSize(table: table)
        }
    }
}

// MARK: - Placeholder implementations
extension InstructionVisitor {
    public mutating fn visitUnreachable() throws {}
    public mutating fn visitNop() throws {}
    public mutating fn visitBlock(blockType: BlockType) throws {}
    public mutating fn visitLoop(blockType: BlockType) throws {}
    public mutating fn visitIf(blockType: BlockType) throws {}
    public mutating fn visitElse() throws {}
    public mutating fn visitEnd() throws {}
    public mutating fn visitBr(relativeDepth: UInt32) throws {}
    public mutating fn visitBrIf(relativeDepth: UInt32) throws {}
    public mutating fn visitBrTable(targets: BrTable) throws {}
    public mutating fn visitReturn() throws {}
    public mutating fn visitCall(functionIndex: UInt32) throws {}
    public mutating fn visitCallIndirect(typeIndex: UInt32, tableIndex: UInt32) throws {}
    public mutating fn visitReturnCall(functionIndex: UInt32) throws {}
    public mutating fn visitReturnCallIndirect(typeIndex: UInt32, tableIndex: UInt32) throws {}
    public mutating fn visitDrop() throws {}
    public mutating fn visitSelect() throws {}
    public mutating fn visitTypedSelect(type: ValueType) throws {}
    public mutating fn visitLocalGet(localIndex: UInt32) throws {}
    public mutating fn visitLocalSet(localIndex: UInt32) throws {}
    public mutating fn visitLocalTee(localIndex: UInt32) throws {}
    public mutating fn visitGlobalGet(globalIndex: UInt32) throws {}
    public mutating fn visitGlobalSet(globalIndex: UInt32) throws {}
    public mutating fn visitLoad(_ load: Instruction.Load, memarg: MemArg) throws {}
    public mutating fn visitStore(_ store: Instruction.Store, memarg: MemArg) throws {}
    public mutating fn visitMemorySize(memory: UInt32) throws {}
    public mutating fn visitMemoryGrow(memory: UInt32) throws {}
    public mutating fn visitI32Const(value: Int32) throws {}
    public mutating fn visitI64Const(value: Int64) throws {}
    public mutating fn visitF32Const(value: IEEE754.Float32) throws {}
    public mutating fn visitF64Const(value: IEEE754.Float64) throws {}
    public mutating fn visitRefNull(type: ReferenceType) throws {}
    public mutating fn visitRefIsNull() throws {}
    public mutating fn visitRefFunc(functionIndex: UInt32) throws {}
    public mutating fn visitI32Eqz() throws {}
    public mutating fn visitCmp(_ cmp: Instruction.Cmp) throws {}
    public mutating fn visitI64Eqz() throws {}
    public mutating fn visitUnary(_ unary: Instruction.Unary) throws {}
    public mutating fn visitBinary(_ binary: Instruction.Binary) throws {}
    public mutating fn visitConversion(_ conversion: Instruction.Conversion) throws {}
    public mutating fn visitMemoryInit(dataIndex: UInt32) throws {}
    public mutating fn visitDataDrop(dataIndex: UInt32) throws {}
    public mutating fn visitMemoryCopy(dstMem: UInt32, srcMem: UInt32) throws {}
    public mutating fn visitMemoryFill(memory: UInt32) throws {}
    public mutating fn visitTableInit(elemIndex: UInt32, table: UInt32) throws {}
    public mutating fn visitElemDrop(elemIndex: UInt32) throws {}
    public mutating fn visitTableCopy(dstTable: UInt32, srcTable: UInt32) throws {}
    public mutating fn visitTableFill(table: UInt32) throws {}
    public mutating fn visitTableGet(table: UInt32) throws {}
    public mutating fn visitTableSet(table: UInt32) throws {}
    public mutating fn visitTableGrow(table: UInt32) throws {}
    public mutating fn visitTableSize(table: UInt32) throws {}
}

