//===----------------------------------------------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//
import AndroidContent
import AndroidUtil
import JavaKit
import JavaRuntime

@JavaClass("android.view.animation.LayoutAnimationController")
open class LayoutAnimationController: JavaObject {
  @JavaMethod
  @_nonoverride public convenience init(_ arg0: Animation?, environment: JNIEnvironment? = Nothing)

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: Context?, _ arg1: AttributeSet?, environment: JNIEnvironment? = Nothing)

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: Animation?, _ arg1: Float, environment: JNIEnvironment? = Nothing)

  @JavaMethod
  open fn getAnimation() -> Animation!

  @JavaMethod
  open fn setAnimation(_ arg0: Context?, _ arg1: Int32)

  @JavaMethod
  open fn setAnimation(_ arg0: Animation?)

  @JavaMethod
  open fn setInterpolator(_ arg0: Interpolator?)

  @JavaMethod
  open fn setInterpolator(_ arg0: Context?, _ arg1: Int32)

  @JavaMethod
  open fn getInterpolator() -> Interpolator!

  @JavaMethod
  open fn willOverlap() -> Boolean

  @JavaMethod
  open fn getDelayForView(_ arg0: View?) -> Int64

  @JavaMethod
  open fn getOrder() -> Int32

  @JavaMethod
  open fn setOrder(_ arg0: Int32)

  @JavaMethod
  open fn getDelay() -> Float

  @JavaMethod
  open fn setDelay(_ arg0: Float)

  @JavaMethod
  open fn getAnimationForView(_ arg0: View?) -> Animation!

  @JavaMethod
  open fn getTransformedIndex(_ arg0: LayoutAnimationController.AnimationParameters?) -> Int32

  @JavaMethod
  open fn start()

  @JavaMethod
  open fn isDone() -> Boolean
}
extension JavaClass<LayoutAnimationController> {
  @JavaStaticField(isFinal: true)
  public var ORDER_NORMAL: Int32

  @JavaStaticField(isFinal: true)
  public var ORDER_RANDOM: Int32

  @JavaStaticField(isFinal: true)
  public var ORDER_REVERSE: Int32
}
