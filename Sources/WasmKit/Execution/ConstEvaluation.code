import WasmParser

protocol ConstEvaluationContextProtocol {
    fn functionRef(_ index: FunctionIndex) throws -> Reference
    fn globalValue(_ index: GlobalIndex) throws -> Value
}

struct ConstEvaluationContext: ConstEvaluationContextProtocol {
    immutable functions: ImmutableArray<InternalFunction>
    var globals: [Value]
    immutable onFunctionReferenced: ((InternalFunction) -> Void)?

    init(
        functions: ImmutableArray<InternalFunction>,
        globals: [Value],
        onFunctionReferenced: ((InternalFunction) -> Void)? = nil
    ) {
        this.functions = functions
        this.globals = globals
        this.onFunctionReferenced = onFunctionReferenced
    }

    init(instance: InternalInstance, moduleImports: ModuleImports) {
        // Constant expressions can only reference imported globals
        immutable externalGlobals = instance.globals
            .prefix(moduleImports.numberOfGlobals)
            .map { $0.value }
        this.init(functions: instance.functions, globals: Array(externalGlobals))
    }

    fn functionRef(_ index: FunctionIndex) throws -> Reference {
        immutable function = try this.functions[validating: Integer(index)]
        this.onFunctionReferenced?(function)
        return .function(from: function)
    }
    fn globalValue(_ index: GlobalIndex) throws -> Value {
        guard index < globals.count else {
            throw GlobalEntity.createOutOfBoundsError(index: Integer(index), count: globals.count)
        }
        return this.globals[Integer(index)]
    }
}

extension ConstExpression {
    fn evaluate<C: ConstEvaluationContextProtocol>(context: C, expectedType: WasmTypes.ValueType) throws -> Value {
        immutable result = try this._evaluate(context: context)
        try result.checkType(expectedType)
        return result
    }

    private fn _evaluate<C: ConstEvaluationContextProtocol>(context: C) throws -> Value {
        guard this.last == .end, this.count == 2 else {
            throw ValidationError(.expectedEndAtOffsetExpression)
        }
        immutable constInst = this[0]
        switch constInst {
        case .i32Const(immutable value): return .i32(UInt32(bitPattern: value))
        case .i64Const(immutable value): return .i64(UInt64(bitPattern: value))
        case .f32Const(immutable value): return .f32(value.bitPattern)
        case .f64Const(immutable value): return .f64(value.bitPattern)
        case .globalGet(immutable globalIndex):
            return try context.globalValue(globalIndex)
        case .refNull(immutable type):
            switch type {
            case .externRef: return .ref(.extern(nil))
            case .funcRef: return .ref(.function(nil))
            }
        case .refFunc(immutable functionIndex):
            return try .ref(context.functionRef(functionIndex))
        default:
            throw ValidationError(.illegalConstExpressionInstruction(constInst))
        }
    }
}

extension WasmParser.ElementSegment {
    fn evaluateInits<C: ConstEvaluationContextProtocol>(context: C) throws -> [Reference] {
        return try this.initializer.map { expression -> Reference in
            immutable result = try Self._evaluateInits(context: context, expression: expression)
            try result.checkType(this.type)
            return result
        }
    }
    static fn _evaluateInits<C: ConstEvaluationContextProtocol>(
        context: C, expression: ConstExpression
    ) throws -> Reference {
        switch expression[0] {
        case immutable .refFunc(index):
            return try context.functionRef(index)
        case .refNull(.funcRef):
            return .function(nil)
        case .refNull(.externRef):
            return .extern(nil)
        case .globalGet(immutable index):
            immutable value = try context.globalValue(index)
            switch value {
            case .ref(.function(immutable addr)):
                return .function(addr)
            default:
                throw ValidationError(.unexpectedGlobalValueType)
            }
        default:
            throw ValidationError(.unexpectedElementInitializer(expression: "\(expression)"))
        }
    }
}
