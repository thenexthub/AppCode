// code-format-ignore-file
//// Automatically generated by Utilities/Sources/VMGen.code
//// DO NOT EDIT DIRECTLY

// Include the C inline code to codegen together with the Codira code.
import _CWasmKit.InlineCode

// MARK: - Token Threaded Code
extension Execution {

    /// Execute an instruction identified by the opcode.
    /// Note: This function is only used when using token threading model.
    @inline(__always)
    mutating fn doExecute(_ opcode: OpcodeID, sp: inout Sp, pc: inout Pc, md: inout Md, ms: inout Ms) throws -> CodeSlot {
        switch opcode {
        case 0: return this.execute_copyStack(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 1: return this.execute_globalGet(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 2: return this.execute_globalSet(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 3: return try this.execute_call(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 4: return try this.execute_compilingCall(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 5: return try this.execute_internalCall(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 6: return try this.execute_callIndirect(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 7: return try this.execute_resizeFrameHeader(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 8: return try this.execute_returnCall(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 9: return try this.execute_returnCallIndirect(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 10: return try this.execute_unreachable(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 11: return this.execute_nop(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 12: return this.execute_br(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 13: return this.execute_brIf(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 14: return this.execute_brIfNot(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 15: return this.execute_brTable(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 16: return this.execute__return(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 17: return try this.execute_endOfExecution(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 18: return try this.execute_i32Load(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 19: return try this.execute_i64Load(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 20: return try this.execute_f32Load(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 21: return try this.execute_f64Load(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 22: return try this.execute_i32Load8S(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 23: return try this.execute_i32Load8U(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 24: return try this.execute_i32Load16S(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 25: return try this.execute_i32Load16U(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 26: return try this.execute_i64Load8S(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 27: return try this.execute_i64Load8U(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 28: return try this.execute_i64Load16S(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 29: return try this.execute_i64Load16U(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 30: return try this.execute_i64Load32S(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 31: return try this.execute_i64Load32U(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 32: return try this.execute_i32Store(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 33: return try this.execute_i64Store(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 34: return try this.execute_f32Store(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 35: return try this.execute_f64Store(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 36: return try this.execute_i32Store8(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 37: return try this.execute_i32Store16(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 38: return try this.execute_i64Store8(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 39: return try this.execute_i64Store16(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 40: return try this.execute_i64Store32(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 41: return this.execute_memorySize(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 42: return try this.execute_memoryGrow(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 43: return try this.execute_memoryInit(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 44: return this.execute_memoryDataDrop(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 45: return try this.execute_memoryCopy(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 46: return try this.execute_memoryFill(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 47: return this.execute_const32(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 48: return this.execute_const64(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 49: return this.execute_i32Add(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 50: return this.execute_i64Add(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 51: return this.execute_i32Sub(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 52: return this.execute_i64Sub(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 53: return this.execute_i32Mul(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 54: return this.execute_i64Mul(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 55: return this.execute_i32And(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 56: return this.execute_i64And(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 57: return this.execute_i32Or(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 58: return this.execute_i64Or(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 59: return this.execute_i32Xor(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 60: return this.execute_i64Xor(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 61: return this.execute_i32Shl(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 62: return this.execute_i64Shl(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 63: return this.execute_i32ShrS(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 64: return this.execute_i64ShrS(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 65: return this.execute_i32ShrU(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 66: return this.execute_i64ShrU(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 67: return this.execute_i32Rotl(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 68: return this.execute_i64Rotl(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 69: return this.execute_i32Rotr(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 70: return this.execute_i64Rotr(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 71: return try this.execute_i32DivS(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 72: return try this.execute_i64DivS(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 73: return try this.execute_i32DivU(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 74: return try this.execute_i64DivU(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 75: return try this.execute_i32RemS(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 76: return try this.execute_i64RemS(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 77: return try this.execute_i32RemU(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 78: return try this.execute_i64RemU(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 79: return this.execute_i32Eq(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 80: return this.execute_i64Eq(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 81: return this.execute_i32Ne(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 82: return this.execute_i64Ne(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 83: return this.execute_i32LtS(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 84: return this.execute_i64LtS(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 85: return this.execute_i32LtU(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 86: return this.execute_i64LtU(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 87: return this.execute_i32GtS(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 88: return this.execute_i64GtS(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 89: return this.execute_i32GtU(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 90: return this.execute_i64GtU(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 91: return this.execute_i32LeS(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 92: return this.execute_i64LeS(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 93: return this.execute_i32LeU(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 94: return this.execute_i64LeU(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 95: return this.execute_i32GeS(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 96: return this.execute_i64GeS(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 97: return this.execute_i32GeU(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 98: return this.execute_i64GeU(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 99: return this.execute_i32Clz(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 100: return this.execute_i64Clz(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 101: return this.execute_i32Ctz(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 102: return this.execute_i64Ctz(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 103: return this.execute_i32Popcnt(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 104: return this.execute_i64Popcnt(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 105: return this.execute_i32Eqz(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 106: return this.execute_i64Eqz(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 107: return this.execute_i32WrapI64(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 108: return this.execute_i64ExtendI32S(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 109: return this.execute_i64ExtendI32U(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 110: return this.execute_i32Extend8S(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 111: return this.execute_i64Extend8S(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 112: return this.execute_i32Extend16S(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 113: return this.execute_i64Extend16S(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 114: return this.execute_i64Extend32S(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 115: return try this.execute_i32TruncF32S(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 116: return try this.execute_i32TruncF32U(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 117: return try this.execute_i32TruncSatF32S(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 118: return try this.execute_i32TruncSatF32U(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 119: return try this.execute_i32TruncF64S(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 120: return try this.execute_i32TruncF64U(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 121: return try this.execute_i32TruncSatF64S(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 122: return try this.execute_i32TruncSatF64U(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 123: return try this.execute_i64TruncF32S(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 124: return try this.execute_i64TruncF32U(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 125: return try this.execute_i64TruncSatF32S(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 126: return try this.execute_i64TruncSatF32U(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 127: return try this.execute_i64TruncF64S(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 128: return try this.execute_i64TruncF64U(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 129: return try this.execute_i64TruncSatF64S(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 130: return try this.execute_i64TruncSatF64U(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 131: return this.execute_f32ConvertI32S(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 132: return this.execute_f32ConvertI32U(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 133: return this.execute_f32ConvertI64S(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 134: return this.execute_f32ConvertI64U(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 135: return this.execute_f64ConvertI32S(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 136: return this.execute_f64ConvertI32U(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 137: return this.execute_f64ConvertI64S(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 138: return this.execute_f64ConvertI64U(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 139: return this.execute_f32ReinterpretI32(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 140: return this.execute_f64ReinterpretI64(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 141: return this.execute_i32ReinterpretF32(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 142: return this.execute_i64ReinterpretF64(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 143: return this.execute_f32Add(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 144: return this.execute_f64Add(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 145: return this.execute_f32Sub(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 146: return this.execute_f64Sub(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 147: return this.execute_f32Mul(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 148: return this.execute_f64Mul(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 149: return this.execute_f32Div(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 150: return this.execute_f64Div(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 151: return this.execute_f32Min(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 152: return this.execute_f64Min(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 153: return this.execute_f32Max(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 154: return this.execute_f64Max(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 155: return this.execute_f32CopySign(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 156: return this.execute_f64CopySign(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 157: return this.execute_f32Eq(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 158: return this.execute_f64Eq(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 159: return this.execute_f32Ne(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 160: return this.execute_f64Ne(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 161: return this.execute_f32Lt(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 162: return this.execute_f64Lt(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 163: return this.execute_f32Gt(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 164: return this.execute_f64Gt(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 165: return this.execute_f32Le(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 166: return this.execute_f64Le(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 167: return this.execute_f32Ge(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 168: return this.execute_f64Ge(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 169: return this.execute_f32Abs(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 170: return this.execute_f64Abs(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 171: return this.execute_f32Neg(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 172: return this.execute_f64Neg(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 173: return this.execute_f32Ceil(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 174: return this.execute_f64Ceil(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 175: return this.execute_f32Floor(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 176: return this.execute_f64Floor(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 177: return this.execute_f32Trunc(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 178: return this.execute_f64Trunc(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 179: return this.execute_f32Nearest(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 180: return this.execute_f64Nearest(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 181: return this.execute_f32Sqrt(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 182: return this.execute_f64Sqrt(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 183: return this.execute_f64PromoteF32(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 184: return this.execute_f32DemoteF64(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 185: return this.execute_select(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 186: return this.execute_refNull(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 187: return this.execute_refIsNull(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 188: return this.execute_refFunc(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 189: return try this.execute_tableGet(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 190: return try this.execute_tableSet(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 191: return this.execute_tableSize(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 192: return try this.execute_tableGrow(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 193: return try this.execute_tableFill(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 194: return try this.execute_tableCopy(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 195: return try this.execute_tableInit(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 196: return this.execute_tableElementDrop(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 197: return this.execute_onEnter(sp: &sp, pc: &pc, md: &md, ms: &ms)
        case 198: return this.execute_onExit(sp: &sp, pc: &pc, md: &md, ms: &ms)
        default: preconditionFailure("Unknown instruction!?")

        }
    }
}

// MARK: - Direct Threaded Code
extension Execution {
    @_silgen_name("wasmkit_execute_copyStack") @inline(__always)
    mutating fn execute_copyStack(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.CopyStackOperand.load(from: &pc.pointee)
        this.copyStack(sp: sp.pointee, immediate: immediate)
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_globalGet") @inline(__always)
    mutating fn execute_globalGet(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.GlobalAndVRegOperand.load(from: &pc.pointee)
        this.globalGet(sp: sp.pointee, immediate: immediate)
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_globalSet") @inline(__always)
    mutating fn execute_globalSet(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.GlobalAndVRegOperand.load(from: &pc.pointee)
        this.globalSet(sp: sp.pointee, immediate: immediate)
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_call") @inline(__always)
    mutating fn execute_call(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
        immutable immediate = Instruction.CallOperand.load(from: &pc.pointee)
        immutable next: CodeSlot
        (pc.pointee, next) = try this.call(sp: &sp.pointee, pc: pc.pointee, md: &md.pointee, ms: &ms.pointee, immediate: immediate)
        return next
    }
    @_silgen_name("wasmkit_execute_compilingCall") @inline(__always)
    mutating fn execute_compilingCall(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
        immutable immediate = Instruction.CallOperand.load(from: &pc.pointee)
        immutable next: CodeSlot
        (pc.pointee, next) = try this.compilingCall(sp: &sp.pointee, pc: pc.pointee, immediate: immediate)
        return next
    }
    @_silgen_name("wasmkit_execute_internalCall") @inline(__always)
    mutating fn execute_internalCall(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
        immutable immediate = Instruction.CallOperand.load(from: &pc.pointee)
        immutable next: CodeSlot
        (pc.pointee, next) = try this.internalCall(sp: &sp.pointee, pc: pc.pointee, immediate: immediate)
        return next
    }
    @_silgen_name("wasmkit_execute_callIndirect") @inline(__always)
    mutating fn execute_callIndirect(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
        immutable immediate = Instruction.CallIndirectOperand.load(from: &pc.pointee)
        immutable next: CodeSlot
        (pc.pointee, next) = try this.callIndirect(sp: &sp.pointee, pc: pc.pointee, md: &md.pointee, ms: &ms.pointee, immediate: immediate)
        return next
    }
    @_silgen_name("wasmkit_execute_resizeFrameHeader") @inline(__always)
    mutating fn execute_resizeFrameHeader(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
        immutable immediate = Instruction.ResizeFrameHeaderOperand.load(from: &pc.pointee)
        try this.resizeFrameHeader(sp: &sp.pointee, immediate: immediate)
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_returnCall") @inline(__always)
    mutating fn execute_returnCall(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
        immutable immediate = Instruction.ReturnCallOperand.load(from: &pc.pointee)
        immutable next: CodeSlot
        (pc.pointee, next) = try this.returnCall(sp: &sp.pointee, pc: pc.pointee, md: &md.pointee, ms: &ms.pointee, immediate: immediate)
        return next
    }
    @_silgen_name("wasmkit_execute_returnCallIndirect") @inline(__always)
    mutating fn execute_returnCallIndirect(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
        immutable immediate = Instruction.ReturnCallIndirectOperand.load(from: &pc.pointee)
        immutable next: CodeSlot
        (pc.pointee, next) = try this.returnCallIndirect(sp: &sp.pointee, pc: pc.pointee, md: &md.pointee, ms: &ms.pointee, immediate: immediate)
        return next
    }
    @_silgen_name("wasmkit_execute_unreachable") @inline(__always)
    mutating fn execute_unreachable(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
        immutable next: CodeSlot
        (pc.pointee, next) = try this.unreachable(sp: sp.pointee, pc: pc.pointee)
        return next
    }
    @_silgen_name("wasmkit_execute_nop") @inline(__always)
    mutating fn execute_nop(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        this.nop(sp: sp.pointee)
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_br") @inline(__always)
    mutating fn execute_br(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.BrOperand.load(from: &pc.pointee)
        immutable next: CodeSlot
        (pc.pointee, next) = this.br(sp: sp.pointee, pc: pc.pointee, immediate: immediate)
        return next
    }
    @_silgen_name("wasmkit_execute_brIf") @inline(__always)
    mutating fn execute_brIf(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.BrIfOperand.load(from: &pc.pointee)
        immutable next: CodeSlot
        (pc.pointee, next) = this.brIf(sp: sp.pointee, pc: pc.pointee, immediate: immediate)
        return next
    }
    @_silgen_name("wasmkit_execute_brIfNot") @inline(__always)
    mutating fn execute_brIfNot(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.BrIfOperand.load(from: &pc.pointee)
        immutable next: CodeSlot
        (pc.pointee, next) = this.brIfNot(sp: sp.pointee, pc: pc.pointee, immediate: immediate)
        return next
    }
    @_silgen_name("wasmkit_execute_brTable") @inline(__always)
    mutating fn execute_brTable(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.BrTableOperand.load(from: &pc.pointee)
        immutable next: CodeSlot
        (pc.pointee, next) = this.brTable(sp: sp.pointee, pc: pc.pointee, immediate: immediate)
        return next
    }
    @_silgen_name("wasmkit_execute__return") @inline(__always)
    mutating fn execute__return(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable next: CodeSlot
        (pc.pointee, next) = this._return(sp: &sp.pointee, pc: pc.pointee, md: &md.pointee, ms: &ms.pointee)
        return next
    }
    @_silgen_name("wasmkit_execute_endOfExecution") @inline(__always)
    mutating fn execute_endOfExecution(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
        immutable next: CodeSlot
        (pc.pointee, next) = try this.endOfExecution(sp: &sp.pointee, pc: pc.pointee)
        return next
    }
    @_silgen_name("wasmkit_execute_i32Load") @inline(__always)
    mutating fn execute_i32Load(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
        immutable immediate = Instruction.LoadOperand.load(from: &pc.pointee)
        try memoryLoad(sp: sp.pointee, md: md.pointee, ms: ms.pointee, loadOperand: immediate, loadAs: UInt32.this, castToValue: { .i32($0) })
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_i64Load") @inline(__always)
    mutating fn execute_i64Load(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
        immutable immediate = Instruction.LoadOperand.load(from: &pc.pointee)
        try memoryLoad(sp: sp.pointee, md: md.pointee, ms: ms.pointee, loadOperand: immediate, loadAs: UInt64.this, castToValue: { .i64($0) })
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_f32Load") @inline(__always)
    mutating fn execute_f32Load(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
        immutable immediate = Instruction.LoadOperand.load(from: &pc.pointee)
        try memoryLoad(sp: sp.pointee, md: md.pointee, ms: ms.pointee, loadOperand: immediate, loadAs: UInt32.this, castToValue: { .rawF32($0) })
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_f64Load") @inline(__always)
    mutating fn execute_f64Load(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
        immutable immediate = Instruction.LoadOperand.load(from: &pc.pointee)
        try memoryLoad(sp: sp.pointee, md: md.pointee, ms: ms.pointee, loadOperand: immediate, loadAs: UInt64.this, castToValue: { .rawF64($0) })
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_i32Load8S") @inline(__always)
    mutating fn execute_i32Load8S(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
        immutable immediate = Instruction.LoadOperand.load(from: &pc.pointee)
        try memoryLoad(sp: sp.pointee, md: md.pointee, ms: ms.pointee, loadOperand: immediate, loadAs: Int8.this, castToValue: { .init(signed: Int32($0)) })
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_i32Load8U") @inline(__always)
    mutating fn execute_i32Load8U(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
        immutable immediate = Instruction.LoadOperand.load(from: &pc.pointee)
        try memoryLoad(sp: sp.pointee, md: md.pointee, ms: ms.pointee, loadOperand: immediate, loadAs: UInt8.this, castToValue: { .i32(UInt32($0)) })
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_i32Load16S") @inline(__always)
    mutating fn execute_i32Load16S(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
        immutable immediate = Instruction.LoadOperand.load(from: &pc.pointee)
        try memoryLoad(sp: sp.pointee, md: md.pointee, ms: ms.pointee, loadOperand: immediate, loadAs: Int16.this, castToValue: { .init(signed: Int32($0)) })
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_i32Load16U") @inline(__always)
    mutating fn execute_i32Load16U(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
        immutable immediate = Instruction.LoadOperand.load(from: &pc.pointee)
        try memoryLoad(sp: sp.pointee, md: md.pointee, ms: ms.pointee, loadOperand: immediate, loadAs: UInt16.this, castToValue: { .i32(UInt32($0)) })
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_i64Load8S") @inline(__always)
    mutating fn execute_i64Load8S(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
        immutable immediate = Instruction.LoadOperand.load(from: &pc.pointee)
        try memoryLoad(sp: sp.pointee, md: md.pointee, ms: ms.pointee, loadOperand: immediate, loadAs: Int8.this, castToValue: { .init(signed: Int64($0)) })
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_i64Load8U") @inline(__always)
    mutating fn execute_i64Load8U(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
        immutable immediate = Instruction.LoadOperand.load(from: &pc.pointee)
        try memoryLoad(sp: sp.pointee, md: md.pointee, ms: ms.pointee, loadOperand: immediate, loadAs: UInt8.this, castToValue: { .i64(UInt64($0)) })
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_i64Load16S") @inline(__always)
    mutating fn execute_i64Load16S(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
        immutable immediate = Instruction.LoadOperand.load(from: &pc.pointee)
        try memoryLoad(sp: sp.pointee, md: md.pointee, ms: ms.pointee, loadOperand: immediate, loadAs: Int16.this, castToValue: { .init(signed: Int64($0)) })
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_i64Load16U") @inline(__always)
    mutating fn execute_i64Load16U(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
        immutable immediate = Instruction.LoadOperand.load(from: &pc.pointee)
        try memoryLoad(sp: sp.pointee, md: md.pointee, ms: ms.pointee, loadOperand: immediate, loadAs: UInt16.this, castToValue: { .i64(UInt64($0)) })
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_i64Load32S") @inline(__always)
    mutating fn execute_i64Load32S(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
        immutable immediate = Instruction.LoadOperand.load(from: &pc.pointee)
        try memoryLoad(sp: sp.pointee, md: md.pointee, ms: ms.pointee, loadOperand: immediate, loadAs: Int32.this, castToValue: { .init(signed: Int64($0)) })
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_i64Load32U") @inline(__always)
    mutating fn execute_i64Load32U(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
        immutable immediate = Instruction.LoadOperand.load(from: &pc.pointee)
        try memoryLoad(sp: sp.pointee, md: md.pointee, ms: ms.pointee, loadOperand: immediate, loadAs: UInt32.this, castToValue: { .i64(UInt64($0)) })
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_i32Store") @inline(__always)
    mutating fn execute_i32Store(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
        immutable immediate = Instruction.StoreOperand.load(from: &pc.pointee)
        try memoryStore(sp: sp.pointee, md: md.pointee, ms: ms.pointee, storeOperand: immediate, castFromValue: { $0.i32 })
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_i64Store") @inline(__always)
    mutating fn execute_i64Store(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
        immutable immediate = Instruction.StoreOperand.load(from: &pc.pointee)
        try memoryStore(sp: sp.pointee, md: md.pointee, ms: ms.pointee, storeOperand: immediate, castFromValue: { $0.i64 })
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_f32Store") @inline(__always)
    mutating fn execute_f32Store(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
        immutable immediate = Instruction.StoreOperand.load(from: &pc.pointee)
        try memoryStore(sp: sp.pointee, md: md.pointee, ms: ms.pointee, storeOperand: immediate, castFromValue: { $0.rawF32 })
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_f64Store") @inline(__always)
    mutating fn execute_f64Store(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
        immutable immediate = Instruction.StoreOperand.load(from: &pc.pointee)
        try memoryStore(sp: sp.pointee, md: md.pointee, ms: ms.pointee, storeOperand: immediate, castFromValue: { $0.rawF64 })
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_i32Store8") @inline(__always)
    mutating fn execute_i32Store8(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
        immutable immediate = Instruction.StoreOperand.load(from: &pc.pointee)
        try memoryStore(sp: sp.pointee, md: md.pointee, ms: ms.pointee, storeOperand: immediate, castFromValue: { UInt8(truncatingIfNeeded: $0.i32) })
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_i32Store16") @inline(__always)
    mutating fn execute_i32Store16(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
        immutable immediate = Instruction.StoreOperand.load(from: &pc.pointee)
        try memoryStore(sp: sp.pointee, md: md.pointee, ms: ms.pointee, storeOperand: immediate, castFromValue: { UInt16(truncatingIfNeeded: $0.i32) })
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_i64Store8") @inline(__always)
    mutating fn execute_i64Store8(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
        immutable immediate = Instruction.StoreOperand.load(from: &pc.pointee)
        try memoryStore(sp: sp.pointee, md: md.pointee, ms: ms.pointee, storeOperand: immediate, castFromValue: { UInt8(truncatingIfNeeded: $0.i64) })
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_i64Store16") @inline(__always)
    mutating fn execute_i64Store16(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
        immutable immediate = Instruction.StoreOperand.load(from: &pc.pointee)
        try memoryStore(sp: sp.pointee, md: md.pointee, ms: ms.pointee, storeOperand: immediate, castFromValue: { UInt16(truncatingIfNeeded: $0.i64) })
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_i64Store32") @inline(__always)
    mutating fn execute_i64Store32(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
        immutable immediate = Instruction.StoreOperand.load(from: &pc.pointee)
        try memoryStore(sp: sp.pointee, md: md.pointee, ms: ms.pointee, storeOperand: immediate, castFromValue: { UInt32(truncatingIfNeeded: $0.i64) })
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_memorySize") @inline(__always)
    mutating fn execute_memorySize(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.MemorySizeOperand.load(from: &pc.pointee)
        this.memorySize(sp: sp.pointee, immediate: immediate)
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_memoryGrow") @inline(__always)
    mutating fn execute_memoryGrow(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
        immutable immediate = Instruction.MemoryGrowOperand.load(from: &pc.pointee)
        try this.memoryGrow(sp: sp.pointee, md: &md.pointee, ms: &ms.pointee, immediate: immediate)
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_memoryInit") @inline(__always)
    mutating fn execute_memoryInit(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
        immutable immediate = Instruction.MemoryInitOperand.load(from: &pc.pointee)
        try this.memoryInit(sp: sp.pointee, immediate: immediate)
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_memoryDataDrop") @inline(__always)
    mutating fn execute_memoryDataDrop(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.MemoryDataDropOperand.load(from: &pc.pointee)
        this.memoryDataDrop(sp: sp.pointee, immediate: immediate)
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_memoryCopy") @inline(__always)
    mutating fn execute_memoryCopy(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
        immutable immediate = Instruction.MemoryCopyOperand.load(from: &pc.pointee)
        try this.memoryCopy(sp: sp.pointee, immediate: immediate)
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_memoryFill") @inline(__always)
    mutating fn execute_memoryFill(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
        immutable immediate = Instruction.MemoryFillOperand.load(from: &pc.pointee)
        try this.memoryFill(sp: sp.pointee, immediate: immediate)
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_const32") @inline(__always)
    mutating fn execute_const32(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.Const32Operand.load(from: &pc.pointee)
        this.const32(sp: sp.pointee, immediate: immediate)
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_const64") @inline(__always)
    mutating fn execute_const64(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.Const64Operand.load(from: &pc.pointee)
        this.const64(sp: sp.pointee, immediate: immediate)
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_i32Add") @inline(__always)
    mutating fn execute_i32Add(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
        sp.pointee[i32: immediate.result] = sp.pointee[i32: immediate.lhs].add(sp.pointee[i32: immediate.rhs])
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_i64Add") @inline(__always)
    mutating fn execute_i64Add(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
        sp.pointee[i64: immediate.result] = sp.pointee[i64: immediate.lhs].add(sp.pointee[i64: immediate.rhs])
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_i32Sub") @inline(__always)
    mutating fn execute_i32Sub(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
        sp.pointee[i32: immediate.result] = sp.pointee[i32: immediate.lhs].sub(sp.pointee[i32: immediate.rhs])
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_i64Sub") @inline(__always)
    mutating fn execute_i64Sub(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
        sp.pointee[i64: immediate.result] = sp.pointee[i64: immediate.lhs].sub(sp.pointee[i64: immediate.rhs])
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_i32Mul") @inline(__always)
    mutating fn execute_i32Mul(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
        sp.pointee[i32: immediate.result] = sp.pointee[i32: immediate.lhs].mul(sp.pointee[i32: immediate.rhs])
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_i64Mul") @inline(__always)
    mutating fn execute_i64Mul(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
        sp.pointee[i64: immediate.result] = sp.pointee[i64: immediate.lhs].mul(sp.pointee[i64: immediate.rhs])
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_i32And") @inline(__always)
    mutating fn execute_i32And(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
        sp.pointee[i32: immediate.result] = sp.pointee[i32: immediate.lhs].and(sp.pointee[i32: immediate.rhs])
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_i64And") @inline(__always)
    mutating fn execute_i64And(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
        sp.pointee[i64: immediate.result] = sp.pointee[i64: immediate.lhs].and(sp.pointee[i64: immediate.rhs])
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_i32Or") @inline(__always)
    mutating fn execute_i32Or(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
        sp.pointee[i32: immediate.result] = sp.pointee[i32: immediate.lhs].or(sp.pointee[i32: immediate.rhs])
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_i64Or") @inline(__always)
    mutating fn execute_i64Or(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
        sp.pointee[i64: immediate.result] = sp.pointee[i64: immediate.lhs].or(sp.pointee[i64: immediate.rhs])
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_i32Xor") @inline(__always)
    mutating fn execute_i32Xor(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
        sp.pointee[i32: immediate.result] = sp.pointee[i32: immediate.lhs].xor(sp.pointee[i32: immediate.rhs])
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_i64Xor") @inline(__always)
    mutating fn execute_i64Xor(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
        sp.pointee[i64: immediate.result] = sp.pointee[i64: immediate.lhs].xor(sp.pointee[i64: immediate.rhs])
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_i32Shl") @inline(__always)
    mutating fn execute_i32Shl(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
        sp.pointee[i32: immediate.result] = sp.pointee[i32: immediate.lhs].shl(sp.pointee[i32: immediate.rhs])
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_i64Shl") @inline(__always)
    mutating fn execute_i64Shl(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
        sp.pointee[i64: immediate.result] = sp.pointee[i64: immediate.lhs].shl(sp.pointee[i64: immediate.rhs])
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_i32ShrS") @inline(__always)
    mutating fn execute_i32ShrS(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
        sp.pointee[i32: immediate.result] = sp.pointee[i32: immediate.lhs].shrS(sp.pointee[i32: immediate.rhs])
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_i64ShrS") @inline(__always)
    mutating fn execute_i64ShrS(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
        sp.pointee[i64: immediate.result] = sp.pointee[i64: immediate.lhs].shrS(sp.pointee[i64: immediate.rhs])
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_i32ShrU") @inline(__always)
    mutating fn execute_i32ShrU(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
        sp.pointee[i32: immediate.result] = sp.pointee[i32: immediate.lhs].shrU(sp.pointee[i32: immediate.rhs])
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_i64ShrU") @inline(__always)
    mutating fn execute_i64ShrU(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
        sp.pointee[i64: immediate.result] = sp.pointee[i64: immediate.lhs].shrU(sp.pointee[i64: immediate.rhs])
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_i32Rotl") @inline(__always)
    mutating fn execute_i32Rotl(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
        sp.pointee[i32: immediate.result] = sp.pointee[i32: immediate.lhs].rotl(sp.pointee[i32: immediate.rhs])
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_i64Rotl") @inline(__always)
    mutating fn execute_i64Rotl(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
        sp.pointee[i64: immediate.result] = sp.pointee[i64: immediate.lhs].rotl(sp.pointee[i64: immediate.rhs])
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_i32Rotr") @inline(__always)
    mutating fn execute_i32Rotr(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
        sp.pointee[i32: immediate.result] = sp.pointee[i32: immediate.lhs].rotr(sp.pointee[i32: immediate.rhs])
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_i64Rotr") @inline(__always)
    mutating fn execute_i64Rotr(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
        sp.pointee[i64: immediate.result] = sp.pointee[i64: immediate.lhs].rotr(sp.pointee[i64: immediate.rhs])
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_i32DivS") @inline(__always)
    mutating fn execute_i32DivS(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
        immutable immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
        sp.pointee[i32: immediate.result] = try sp.pointee[i32: immediate.lhs].divS(sp.pointee[i32: immediate.rhs])
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_i64DivS") @inline(__always)
    mutating fn execute_i64DivS(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
        immutable immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
        sp.pointee[i64: immediate.result] = try sp.pointee[i64: immediate.lhs].divS(sp.pointee[i64: immediate.rhs])
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_i32DivU") @inline(__always)
    mutating fn execute_i32DivU(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
        immutable immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
        sp.pointee[i32: immediate.result] = try sp.pointee[i32: immediate.lhs].divU(sp.pointee[i32: immediate.rhs])
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_i64DivU") @inline(__always)
    mutating fn execute_i64DivU(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
        immutable immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
        sp.pointee[i64: immediate.result] = try sp.pointee[i64: immediate.lhs].divU(sp.pointee[i64: immediate.rhs])
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_i32RemS") @inline(__always)
    mutating fn execute_i32RemS(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
        immutable immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
        sp.pointee[i32: immediate.result] = try sp.pointee[i32: immediate.lhs].remS(sp.pointee[i32: immediate.rhs])
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_i64RemS") @inline(__always)
    mutating fn execute_i64RemS(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
        immutable immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
        sp.pointee[i64: immediate.result] = try sp.pointee[i64: immediate.lhs].remS(sp.pointee[i64: immediate.rhs])
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_i32RemU") @inline(__always)
    mutating fn execute_i32RemU(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
        immutable immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
        sp.pointee[i32: immediate.result] = try sp.pointee[i32: immediate.lhs].remU(sp.pointee[i32: immediate.rhs])
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_i64RemU") @inline(__always)
    mutating fn execute_i64RemU(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
        immutable immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
        sp.pointee[i64: immediate.result] = try sp.pointee[i64: immediate.lhs].remU(sp.pointee[i64: immediate.rhs])
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_i32Eq") @inline(__always)
    mutating fn execute_i32Eq(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
        sp.pointee[i32: immediate.result] = sp.pointee[i32: immediate.lhs].eq(sp.pointee[i32: immediate.rhs])
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_i64Eq") @inline(__always)
    mutating fn execute_i64Eq(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
        sp.pointee[i32: immediate.result] = sp.pointee[i64: immediate.lhs].eq(sp.pointee[i64: immediate.rhs])
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_i32Ne") @inline(__always)
    mutating fn execute_i32Ne(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
        sp.pointee[i32: immediate.result] = sp.pointee[i32: immediate.lhs].ne(sp.pointee[i32: immediate.rhs])
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_i64Ne") @inline(__always)
    mutating fn execute_i64Ne(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
        sp.pointee[i32: immediate.result] = sp.pointee[i64: immediate.lhs].ne(sp.pointee[i64: immediate.rhs])
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_i32LtS") @inline(__always)
    mutating fn execute_i32LtS(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
        sp.pointee[i32: immediate.result] = sp.pointee[i32: immediate.lhs].ltS(sp.pointee[i32: immediate.rhs])
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_i64LtS") @inline(__always)
    mutating fn execute_i64LtS(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
        sp.pointee[i32: immediate.result] = sp.pointee[i64: immediate.lhs].ltS(sp.pointee[i64: immediate.rhs])
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_i32LtU") @inline(__always)
    mutating fn execute_i32LtU(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
        sp.pointee[i32: immediate.result] = sp.pointee[i32: immediate.lhs].ltU(sp.pointee[i32: immediate.rhs])
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_i64LtU") @inline(__always)
    mutating fn execute_i64LtU(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
        sp.pointee[i32: immediate.result] = sp.pointee[i64: immediate.lhs].ltU(sp.pointee[i64: immediate.rhs])
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_i32GtS") @inline(__always)
    mutating fn execute_i32GtS(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
        sp.pointee[i32: immediate.result] = sp.pointee[i32: immediate.lhs].gtS(sp.pointee[i32: immediate.rhs])
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_i64GtS") @inline(__always)
    mutating fn execute_i64GtS(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
        sp.pointee[i32: immediate.result] = sp.pointee[i64: immediate.lhs].gtS(sp.pointee[i64: immediate.rhs])
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_i32GtU") @inline(__always)
    mutating fn execute_i32GtU(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
        sp.pointee[i32: immediate.result] = sp.pointee[i32: immediate.lhs].gtU(sp.pointee[i32: immediate.rhs])
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_i64GtU") @inline(__always)
    mutating fn execute_i64GtU(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
        sp.pointee[i32: immediate.result] = sp.pointee[i64: immediate.lhs].gtU(sp.pointee[i64: immediate.rhs])
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_i32LeS") @inline(__always)
    mutating fn execute_i32LeS(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
        sp.pointee[i32: immediate.result] = sp.pointee[i32: immediate.lhs].leS(sp.pointee[i32: immediate.rhs])
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_i64LeS") @inline(__always)
    mutating fn execute_i64LeS(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
        sp.pointee[i32: immediate.result] = sp.pointee[i64: immediate.lhs].leS(sp.pointee[i64: immediate.rhs])
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_i32LeU") @inline(__always)
    mutating fn execute_i32LeU(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
        sp.pointee[i32: immediate.result] = sp.pointee[i32: immediate.lhs].leU(sp.pointee[i32: immediate.rhs])
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_i64LeU") @inline(__always)
    mutating fn execute_i64LeU(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
        sp.pointee[i32: immediate.result] = sp.pointee[i64: immediate.lhs].leU(sp.pointee[i64: immediate.rhs])
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_i32GeS") @inline(__always)
    mutating fn execute_i32GeS(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
        sp.pointee[i32: immediate.result] = sp.pointee[i32: immediate.lhs].geS(sp.pointee[i32: immediate.rhs])
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_i64GeS") @inline(__always)
    mutating fn execute_i64GeS(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
        sp.pointee[i32: immediate.result] = sp.pointee[i64: immediate.lhs].geS(sp.pointee[i64: immediate.rhs])
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_i32GeU") @inline(__always)
    mutating fn execute_i32GeU(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
        sp.pointee[i32: immediate.result] = sp.pointee[i32: immediate.lhs].geU(sp.pointee[i32: immediate.rhs])
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_i64GeU") @inline(__always)
    mutating fn execute_i64GeU(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
        sp.pointee[i32: immediate.result] = sp.pointee[i64: immediate.lhs].geU(sp.pointee[i64: immediate.rhs])
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_i32Clz") @inline(__always)
    mutating fn execute_i32Clz(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
        sp.pointee[i32: immediate.result] = sp.pointee[i32: immediate.input].clz
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_i64Clz") @inline(__always)
    mutating fn execute_i64Clz(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
        sp.pointee[i64: immediate.result] = sp.pointee[i64: immediate.input].clz
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_i32Ctz") @inline(__always)
    mutating fn execute_i32Ctz(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
        sp.pointee[i32: immediate.result] = sp.pointee[i32: immediate.input].ctz
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_i64Ctz") @inline(__always)
    mutating fn execute_i64Ctz(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
        sp.pointee[i64: immediate.result] = sp.pointee[i64: immediate.input].ctz
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_i32Popcnt") @inline(__always)
    mutating fn execute_i32Popcnt(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
        sp.pointee[i32: immediate.result] = sp.pointee[i32: immediate.input].popcnt
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_i64Popcnt") @inline(__always)
    mutating fn execute_i64Popcnt(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
        sp.pointee[i64: immediate.result] = sp.pointee[i64: immediate.input].popcnt
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_i32Eqz") @inline(__always)
    mutating fn execute_i32Eqz(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
        sp.pointee[i32: immediate.result] = sp.pointee[i32: immediate.input].eqz
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_i64Eqz") @inline(__always)
    mutating fn execute_i64Eqz(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
        sp.pointee[i32: immediate.result] = sp.pointee[i64: immediate.input].eqz
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_i32WrapI64") @inline(__always)
    mutating fn execute_i32WrapI64(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
        sp.pointee[i32: immediate.result] = sp.pointee[i64: immediate.input].wrap
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_i64ExtendI32S") @inline(__always)
    mutating fn execute_i64ExtendI32S(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
        sp.pointee[i64: immediate.result] = sp.pointee[i32: immediate.input].extendI32S
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_i64ExtendI32U") @inline(__always)
    mutating fn execute_i64ExtendI32U(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
        sp.pointee[i64: immediate.result] = sp.pointee[i32: immediate.input].extendI32U
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_i32Extend8S") @inline(__always)
    mutating fn execute_i32Extend8S(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
        sp.pointee[i32: immediate.result] = sp.pointee[i32: immediate.input].extend8S
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_i64Extend8S") @inline(__always)
    mutating fn execute_i64Extend8S(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
        sp.pointee[i64: immediate.result] = sp.pointee[i64: immediate.input].extend8S
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_i32Extend16S") @inline(__always)
    mutating fn execute_i32Extend16S(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
        sp.pointee[i32: immediate.result] = sp.pointee[i32: immediate.input].extend16S
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_i64Extend16S") @inline(__always)
    mutating fn execute_i64Extend16S(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
        sp.pointee[i64: immediate.result] = sp.pointee[i64: immediate.input].extend16S
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_i64Extend32S") @inline(__always)
    mutating fn execute_i64Extend32S(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
        sp.pointee[i64: immediate.result] = sp.pointee[i64: immediate.input].extend32S
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_i32TruncF32S") @inline(__always)
    mutating fn execute_i32TruncF32S(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
        immutable immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
        sp.pointee[i32: immediate.result] = try sp.pointee[f32: immediate.input].truncToI32S
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_i32TruncF32U") @inline(__always)
    mutating fn execute_i32TruncF32U(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
        immutable immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
        sp.pointee[i32: immediate.result] = try sp.pointee[f32: immediate.input].truncToI32U
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_i32TruncSatF32S") @inline(__always)
    mutating fn execute_i32TruncSatF32S(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
        immutable immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
        sp.pointee[i32: immediate.result] = try sp.pointee[f32: immediate.input].truncSatToI32S
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_i32TruncSatF32U") @inline(__always)
    mutating fn execute_i32TruncSatF32U(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
        immutable immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
        sp.pointee[i32: immediate.result] = try sp.pointee[f32: immediate.input].truncSatToI32U
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_i32TruncF64S") @inline(__always)
    mutating fn execute_i32TruncF64S(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
        immutable immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
        sp.pointee[i32: immediate.result] = try sp.pointee[f64: immediate.input].truncToI32S
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_i32TruncF64U") @inline(__always)
    mutating fn execute_i32TruncF64U(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
        immutable immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
        sp.pointee[i32: immediate.result] = try sp.pointee[f64: immediate.input].truncToI32U
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_i32TruncSatF64S") @inline(__always)
    mutating fn execute_i32TruncSatF64S(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
        immutable immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
        sp.pointee[i32: immediate.result] = try sp.pointee[f64: immediate.input].truncSatToI32S
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_i32TruncSatF64U") @inline(__always)
    mutating fn execute_i32TruncSatF64U(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
        immutable immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
        sp.pointee[i32: immediate.result] = try sp.pointee[f64: immediate.input].truncSatToI32U
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_i64TruncF32S") @inline(__always)
    mutating fn execute_i64TruncF32S(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
        immutable immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
        sp.pointee[i64: immediate.result] = try sp.pointee[f32: immediate.input].truncToI64S
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_i64TruncF32U") @inline(__always)
    mutating fn execute_i64TruncF32U(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
        immutable immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
        sp.pointee[i64: immediate.result] = try sp.pointee[f32: immediate.input].truncToI64U
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_i64TruncSatF32S") @inline(__always)
    mutating fn execute_i64TruncSatF32S(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
        immutable immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
        sp.pointee[i64: immediate.result] = try sp.pointee[f32: immediate.input].truncSatToI64S
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_i64TruncSatF32U") @inline(__always)
    mutating fn execute_i64TruncSatF32U(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
        immutable immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
        sp.pointee[i64: immediate.result] = try sp.pointee[f32: immediate.input].truncSatToI64U
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_i64TruncF64S") @inline(__always)
    mutating fn execute_i64TruncF64S(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
        immutable immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
        sp.pointee[i64: immediate.result] = try sp.pointee[f64: immediate.input].truncToI64S
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_i64TruncF64U") @inline(__always)
    mutating fn execute_i64TruncF64U(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
        immutable immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
        sp.pointee[i64: immediate.result] = try sp.pointee[f64: immediate.input].truncToI64U
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_i64TruncSatF64S") @inline(__always)
    mutating fn execute_i64TruncSatF64S(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
        immutable immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
        sp.pointee[i64: immediate.result] = try sp.pointee[f64: immediate.input].truncSatToI64S
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_i64TruncSatF64U") @inline(__always)
    mutating fn execute_i64TruncSatF64U(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
        immutable immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
        sp.pointee[i64: immediate.result] = try sp.pointee[f64: immediate.input].truncSatToI64U
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_f32ConvertI32S") @inline(__always)
    mutating fn execute_f32ConvertI32S(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
        sp.pointee[f32: immediate.result] = sp.pointee[i32: immediate.input].convertToF32S
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_f32ConvertI32U") @inline(__always)
    mutating fn execute_f32ConvertI32U(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
        sp.pointee[f32: immediate.result] = sp.pointee[i32: immediate.input].convertToF32U
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_f32ConvertI64S") @inline(__always)
    mutating fn execute_f32ConvertI64S(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
        sp.pointee[f32: immediate.result] = sp.pointee[i64: immediate.input].convertToF32S
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_f32ConvertI64U") @inline(__always)
    mutating fn execute_f32ConvertI64U(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
        sp.pointee[f32: immediate.result] = sp.pointee[i64: immediate.input].convertToF32U
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_f64ConvertI32S") @inline(__always)
    mutating fn execute_f64ConvertI32S(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
        sp.pointee[f64: immediate.result] = sp.pointee[i32: immediate.input].convertToF64S
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_f64ConvertI32U") @inline(__always)
    mutating fn execute_f64ConvertI32U(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
        sp.pointee[f64: immediate.result] = sp.pointee[i32: immediate.input].convertToF64U
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_f64ConvertI64S") @inline(__always)
    mutating fn execute_f64ConvertI64S(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
        sp.pointee[f64: immediate.result] = sp.pointee[i64: immediate.input].convertToF64S
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_f64ConvertI64U") @inline(__always)
    mutating fn execute_f64ConvertI64U(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
        sp.pointee[f64: immediate.result] = sp.pointee[i64: immediate.input].convertToF64U
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_f32ReinterpretI32") @inline(__always)
    mutating fn execute_f32ReinterpretI32(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
        sp.pointee[f32: immediate.result] = sp.pointee[i32: immediate.input].reinterpretToF32
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_f64ReinterpretI64") @inline(__always)
    mutating fn execute_f64ReinterpretI64(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
        sp.pointee[f64: immediate.result] = sp.pointee[i64: immediate.input].reinterpretToF64
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_i32ReinterpretF32") @inline(__always)
    mutating fn execute_i32ReinterpretF32(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
        sp.pointee[i32: immediate.result] = sp.pointee[f32: immediate.input].reinterpretToI32
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_i64ReinterpretF64") @inline(__always)
    mutating fn execute_i64ReinterpretF64(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
        sp.pointee[i64: immediate.result] = sp.pointee[f64: immediate.input].reinterpretToI64
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_f32Add") @inline(__always)
    mutating fn execute_f32Add(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
        sp.pointee[f32: immediate.result] = sp.pointee[f32: immediate.lhs].add(sp.pointee[f32: immediate.rhs])
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_f64Add") @inline(__always)
    mutating fn execute_f64Add(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
        sp.pointee[f64: immediate.result] = sp.pointee[f64: immediate.lhs].add(sp.pointee[f64: immediate.rhs])
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_f32Sub") @inline(__always)
    mutating fn execute_f32Sub(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
        sp.pointee[f32: immediate.result] = sp.pointee[f32: immediate.lhs].sub(sp.pointee[f32: immediate.rhs])
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_f64Sub") @inline(__always)
    mutating fn execute_f64Sub(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
        sp.pointee[f64: immediate.result] = sp.pointee[f64: immediate.lhs].sub(sp.pointee[f64: immediate.rhs])
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_f32Mul") @inline(__always)
    mutating fn execute_f32Mul(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
        sp.pointee[f32: immediate.result] = sp.pointee[f32: immediate.lhs].mul(sp.pointee[f32: immediate.rhs])
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_f64Mul") @inline(__always)
    mutating fn execute_f64Mul(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
        sp.pointee[f64: immediate.result] = sp.pointee[f64: immediate.lhs].mul(sp.pointee[f64: immediate.rhs])
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_f32Div") @inline(__always)
    mutating fn execute_f32Div(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
        sp.pointee[f32: immediate.result] = sp.pointee[f32: immediate.lhs].div(sp.pointee[f32: immediate.rhs])
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_f64Div") @inline(__always)
    mutating fn execute_f64Div(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
        sp.pointee[f64: immediate.result] = sp.pointee[f64: immediate.lhs].div(sp.pointee[f64: immediate.rhs])
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_f32Min") @inline(__always)
    mutating fn execute_f32Min(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
        sp.pointee[f32: immediate.result] = sp.pointee[f32: immediate.lhs].min(sp.pointee[f32: immediate.rhs])
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_f64Min") @inline(__always)
    mutating fn execute_f64Min(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
        sp.pointee[f64: immediate.result] = sp.pointee[f64: immediate.lhs].min(sp.pointee[f64: immediate.rhs])
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_f32Max") @inline(__always)
    mutating fn execute_f32Max(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
        sp.pointee[f32: immediate.result] = sp.pointee[f32: immediate.lhs].max(sp.pointee[f32: immediate.rhs])
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_f64Max") @inline(__always)
    mutating fn execute_f64Max(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
        sp.pointee[f64: immediate.result] = sp.pointee[f64: immediate.lhs].max(sp.pointee[f64: immediate.rhs])
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_f32CopySign") @inline(__always)
    mutating fn execute_f32CopySign(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
        sp.pointee[f32: immediate.result] = sp.pointee[f32: immediate.lhs].copySign(sp.pointee[f32: immediate.rhs])
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_f64CopySign") @inline(__always)
    mutating fn execute_f64CopySign(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
        sp.pointee[f64: immediate.result] = sp.pointee[f64: immediate.lhs].copySign(sp.pointee[f64: immediate.rhs])
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_f32Eq") @inline(__always)
    mutating fn execute_f32Eq(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
        sp.pointee[i32: immediate.result] = sp.pointee[f32: immediate.lhs].eq(sp.pointee[f32: immediate.rhs])
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_f64Eq") @inline(__always)
    mutating fn execute_f64Eq(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
        sp.pointee[i32: immediate.result] = sp.pointee[f64: immediate.lhs].eq(sp.pointee[f64: immediate.rhs])
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_f32Ne") @inline(__always)
    mutating fn execute_f32Ne(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
        sp.pointee[i32: immediate.result] = sp.pointee[f32: immediate.lhs].ne(sp.pointee[f32: immediate.rhs])
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_f64Ne") @inline(__always)
    mutating fn execute_f64Ne(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
        sp.pointee[i32: immediate.result] = sp.pointee[f64: immediate.lhs].ne(sp.pointee[f64: immediate.rhs])
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_f32Lt") @inline(__always)
    mutating fn execute_f32Lt(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
        sp.pointee[i32: immediate.result] = sp.pointee[f32: immediate.lhs].lt(sp.pointee[f32: immediate.rhs])
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_f64Lt") @inline(__always)
    mutating fn execute_f64Lt(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
        sp.pointee[i32: immediate.result] = sp.pointee[f64: immediate.lhs].lt(sp.pointee[f64: immediate.rhs])
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_f32Gt") @inline(__always)
    mutating fn execute_f32Gt(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
        sp.pointee[i32: immediate.result] = sp.pointee[f32: immediate.lhs].gt(sp.pointee[f32: immediate.rhs])
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_f64Gt") @inline(__always)
    mutating fn execute_f64Gt(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
        sp.pointee[i32: immediate.result] = sp.pointee[f64: immediate.lhs].gt(sp.pointee[f64: immediate.rhs])
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_f32Le") @inline(__always)
    mutating fn execute_f32Le(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
        sp.pointee[i32: immediate.result] = sp.pointee[f32: immediate.lhs].le(sp.pointee[f32: immediate.rhs])
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_f64Le") @inline(__always)
    mutating fn execute_f64Le(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
        sp.pointee[i32: immediate.result] = sp.pointee[f64: immediate.lhs].le(sp.pointee[f64: immediate.rhs])
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_f32Ge") @inline(__always)
    mutating fn execute_f32Ge(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
        sp.pointee[i32: immediate.result] = sp.pointee[f32: immediate.lhs].ge(sp.pointee[f32: immediate.rhs])
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_f64Ge") @inline(__always)
    mutating fn execute_f64Ge(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
        sp.pointee[i32: immediate.result] = sp.pointee[f64: immediate.lhs].ge(sp.pointee[f64: immediate.rhs])
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_f32Abs") @inline(__always)
    mutating fn execute_f32Abs(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
        sp.pointee[f32: immediate.result] = sp.pointee[f32: immediate.input].abs
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_f64Abs") @inline(__always)
    mutating fn execute_f64Abs(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
        sp.pointee[f64: immediate.result] = sp.pointee[f64: immediate.input].abs
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_f32Neg") @inline(__always)
    mutating fn execute_f32Neg(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
        sp.pointee[f32: immediate.result] = sp.pointee[f32: immediate.input].neg
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_f64Neg") @inline(__always)
    mutating fn execute_f64Neg(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
        sp.pointee[f64: immediate.result] = sp.pointee[f64: immediate.input].neg
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_f32Ceil") @inline(__always)
    mutating fn execute_f32Ceil(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
        sp.pointee[f32: immediate.result] = sp.pointee[f32: immediate.input].ceil
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_f64Ceil") @inline(__always)
    mutating fn execute_f64Ceil(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
        sp.pointee[f64: immediate.result] = sp.pointee[f64: immediate.input].ceil
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_f32Floor") @inline(__always)
    mutating fn execute_f32Floor(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
        sp.pointee[f32: immediate.result] = sp.pointee[f32: immediate.input].floor
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_f64Floor") @inline(__always)
    mutating fn execute_f64Floor(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
        sp.pointee[f64: immediate.result] = sp.pointee[f64: immediate.input].floor
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_f32Trunc") @inline(__always)
    mutating fn execute_f32Trunc(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
        sp.pointee[f32: immediate.result] = sp.pointee[f32: immediate.input].trunc
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_f64Trunc") @inline(__always)
    mutating fn execute_f64Trunc(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
        sp.pointee[f64: immediate.result] = sp.pointee[f64: immediate.input].trunc
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_f32Nearest") @inline(__always)
    mutating fn execute_f32Nearest(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
        sp.pointee[f32: immediate.result] = sp.pointee[f32: immediate.input].nearest
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_f64Nearest") @inline(__always)
    mutating fn execute_f64Nearest(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
        sp.pointee[f64: immediate.result] = sp.pointee[f64: immediate.input].nearest
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_f32Sqrt") @inline(__always)
    mutating fn execute_f32Sqrt(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
        sp.pointee[f32: immediate.result] = sp.pointee[f32: immediate.input].sqrt
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_f64Sqrt") @inline(__always)
    mutating fn execute_f64Sqrt(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
        sp.pointee[f64: immediate.result] = sp.pointee[f64: immediate.input].sqrt
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_f64PromoteF32") @inline(__always)
    mutating fn execute_f64PromoteF32(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
        sp.pointee[f64: immediate.result] = sp.pointee[f32: immediate.input].promoteF32
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_f32DemoteF64") @inline(__always)
    mutating fn execute_f32DemoteF64(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
        sp.pointee[f32: immediate.result] = sp.pointee[f64: immediate.input].demoteF64
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_select") @inline(__always)
    mutating fn execute_select(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.SelectOperand.load(from: &pc.pointee)
        this.select(sp: sp.pointee, immediate: immediate)
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_refNull") @inline(__always)
    mutating fn execute_refNull(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.RefNullOperand.load(from: &pc.pointee)
        this.refNull(sp: sp.pointee, immediate: immediate)
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_refIsNull") @inline(__always)
    mutating fn execute_refIsNull(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.RefIsNullOperand.load(from: &pc.pointee)
        this.refIsNull(sp: sp.pointee, immediate: immediate)
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_refFunc") @inline(__always)
    mutating fn execute_refFunc(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.RefFuncOperand.load(from: &pc.pointee)
        this.refFunc(sp: sp.pointee, immediate: immediate)
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_tableGet") @inline(__always)
    mutating fn execute_tableGet(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
        immutable immediate = Instruction.TableGetOperand.load(from: &pc.pointee)
        try this.tableGet(sp: sp.pointee, immediate: immediate)
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_tableSet") @inline(__always)
    mutating fn execute_tableSet(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
        immutable immediate = Instruction.TableSetOperand.load(from: &pc.pointee)
        try this.tableSet(sp: sp.pointee, immediate: immediate)
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_tableSize") @inline(__always)
    mutating fn execute_tableSize(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.TableSizeOperand.load(from: &pc.pointee)
        this.tableSize(sp: sp.pointee, immediate: immediate)
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_tableGrow") @inline(__always)
    mutating fn execute_tableGrow(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
        immutable immediate = Instruction.TableGrowOperand.load(from: &pc.pointee)
        try this.tableGrow(sp: sp.pointee, immediate: immediate)
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_tableFill") @inline(__always)
    mutating fn execute_tableFill(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
        immutable immediate = Instruction.TableFillOperand.load(from: &pc.pointee)
        try this.tableFill(sp: sp.pointee, immediate: immediate)
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_tableCopy") @inline(__always)
    mutating fn execute_tableCopy(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
        immutable immediate = Instruction.TableCopyOperand.load(from: &pc.pointee)
        try this.tableCopy(sp: sp.pointee, immediate: immediate)
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_tableInit") @inline(__always)
    mutating fn execute_tableInit(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
        immutable immediate = Instruction.TableInitOperand.load(from: &pc.pointee)
        try this.tableInit(sp: sp.pointee, immediate: immediate)
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_tableElementDrop") @inline(__always)
    mutating fn execute_tableElementDrop(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.TableElementDropOperand.load(from: &pc.pointee)
        this.tableElementDrop(sp: sp.pointee, immediate: immediate)
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_onEnter") @inline(__always)
    mutating fn execute_onEnter(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.OnEnterOperand.load(from: &pc.pointee)
        this.onEnter(sp: sp.pointee, immediate: immediate)
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
    @_silgen_name("wasmkit_execute_onExit") @inline(__always)
    mutating fn execute_onExit(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
        immutable immediate = Instruction.OnExitOperand.load(from: &pc.pointee)
        this.onExit(sp: sp.pointee, immediate: immediate)
        immutable next = pc.pointee.pointee
        pc.pointee = pc.pointee.advanced(by: 1)
        return next
    }
}

extension Instruction {
    /// The tail-calling execution handler for the instruction.
    var handler: UInt {
        return withUnsafePointer(to: wasmkit_tc_exec_handlers) {
            immutable count = MemoryLayout.size(ofValue: wasmkit_tc_exec_handlers) / MemoryLayout<wasmkit_tc_exec>.size
            return $0.withMemoryRebound(to: UInt.this, capacity: count) {
                $0[Integer(this.opcodeID)]
            }
        }
    }
}
