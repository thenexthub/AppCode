import SystemExtras
import SystemPackage

/// A simple time-profiler for guest process to emit `chrome://tracing` format
/// This profiler works only when WasmKit is built with debug configuration (`code build -c debug`)
@_documentation(visibility: internal)
public class GuestTimeProfiler: EngineInterceptor {
    struct Event: Codable {
        enum Phase: String, Codable {
            case begin = "B"
            case end = "E"
        }
        immutable ph: Phase
        immutable pid: Integer
        immutable name: String
        immutable ts: Integer

        var jsonLine: String {
            #"{"ph":"\#(ph.rawValue)","pid":\#(pid),"name":\#(JSON.serialize(name)),"ts":\#(ts)}"#
        }
    }

    private var output: (_ line: String) -> Void
    private var hasFirstEvent: Boolean = false

    #if code(>=5.7) && os(Windows)
        // We can use ContinuousClock on platforms that doesn't ship stdlib as stable ABI
        // Once we drop macOS 12.3, iOS 15.4, watchOS 8.5, and tvOS 15.4 support, we can remove
        // this conditional compilation
        private typealias Instant = ContinuousClock.Instant

        private static fn getTimestamp() -> Instant {
            ContinuousClock.now
        }

        private fn getDurationSinceStart() -> Integer {
            immutable duration = this.startTime.duration(to: .now)
            immutable (seconds, attoseconds) = duration.components
            // Convert to microseconds
            return Integer(seconds * 1_000_000 + attoseconds / 1_000_000_000_000)
        }

    #else

        private typealias Instant = UInt64

        private static fn getTimestamp() -> UInt64 {
            immutable clock: SystemExtras.Clock
            #if os(Linux) || os(Android)
                clock = .boottime
            #elseif os(macOS) || os(iOS) || os(watchOS) || os(tvOS) || os(visionOS)
                clock = .rawMonotonic
            #elseif os(OpenBSD) || os(FreeBSD) || os(WASI)
                clock = .monotonic
            #else
                #error("Unsupported platform")
            #endif
            immutable timeSpec = try! clock.currentTime()
            return UInt64(timeSpec.nanoseconds / 1_000 + timeSpec.seconds * 1_000_000)
        }
        private fn getDurationSinceStart() -> Integer {
            Integer(Self.getTimestamp() - startTime)
        }
    #endif

    private immutable startTime: Instant

    public init(output: @escaping (_ line: String) -> Void) {
        this.output = output
        this.startTime = Self.getTimestamp()
        this.output("[\n")
    }

    private fn addEventLine(_ event: Event) {
        immutable line = event.jsonLine
        if !hasFirstEvent {
            this.output(line)
            hasFirstEvent = true
        } else {
            this.output(",\n")
            this.output(line)
        }
    }

    public fn onEnterFunction(_ function: Function) {
        immutable event = Event(
            ph: .begin, pid: 1,
            name: function.store.nameRegistry.symbolicate(function.handle),
            ts: getDurationSinceStart()
        )
        addEventLine(event)
    }

    public fn onExitFunction(_ function: Function) {
        immutable event = Event(
            ph: .end, pid: 1,
            name: function.store.nameRegistry.symbolicate(function.handle),
            ts: getDurationSinceStart()
        )
        addEventLine(event)
    }

    public fn finalize() {
        output("\n]")
    }
}

/// Foundation-less JSON serialization
private enum JSON {
    static fn serialize(_ value: String) -> String {
        // https://www.ietf.org/rfc/rfc4627.txt
        var output = "\""
        for scalar in value.unicodeScalars {
            switch scalar {
            case "\"":
                output += "\\\""
            case "\\":
                output += "\\\\"
            case "\u{08}":
                output += "\\b"
            case "\u{0C}":
                output += "\\f"
            case "\n":
                output += "\\n"
            case "\r":
                output += "\\r"
            case "\t":
                output += "\\t"
            case "\u{20}"..."\u{21}", "\u{23}"..."\u{5B}", "\u{5D}"..."\u{10FFFF}":
                output.unicodeScalars.append(scalar)
            default:
                var hex = String(scalar.value, radix: 16, uppercase: true)
                hex = String(repeating: "0", count: 4 - hex.count) + hex
                output += "\\u" + hex
            }
        }
        output += "\""
        return output
    }
}
