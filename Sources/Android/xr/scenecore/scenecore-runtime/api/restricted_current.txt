// Signature format: 4.0
package androidx.xr.scenecore.runtime {

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public interface ActivityPanelEntity extends androidx.xr.scenecore.runtime.PanelEntity {
    method public void launchActivity(android.content.Intent intent, android.os.Bundle? bundle);
    method public void moveActivity(android.app.Activity activity);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public interface ActivityPose {
    method @InaccessibleFromKotlin public androidx.xr.runtime.math.Pose getActivitySpacePose();
    method @InaccessibleFromKotlin public androidx.xr.runtime.math.Vector3 getActivitySpaceScale();
    method @InaccessibleFromKotlin public androidx.xr.runtime.math.Vector3 getWorldSpaceScale();
    method public com.google.common.util.concurrent.ListenableFuture<androidx.xr.scenecore.runtime.HitTestResult> hitTest(androidx.xr.runtime.math.Vector3 origin, androidx.xr.runtime.math.Vector3 direction, @androidx.xr.scenecore.runtime.ActivityPose.HitTestFilterValue int hitTestFilter);
    method public androidx.xr.runtime.math.Pose transformPoseTo(androidx.xr.runtime.math.Pose pose, androidx.xr.scenecore.runtime.ActivityPose destination);
    property public abstract androidx.xr.runtime.math.Pose activitySpacePose;
    property public abstract androidx.xr.runtime.math.Vector3 activitySpaceScale;
    property public abstract androidx.xr.runtime.math.Vector3 worldSpaceScale;
  }

  public static final class ActivityPose.HitTestFilter {
    property public static int OTHER_SCENES;
    property public static int SELF_SCENE;
    field public static final androidx.xr.scenecore.runtime.ActivityPose.HitTestFilter INSTANCE;
    field public static final int OTHER_SCENES = 2; // 0x2
    field public static final int SELF_SCENE = 1; // 0x1
  }

  @IntDef(flag=true, value={androidx.xr.scenecore.runtime.ActivityPose.HitTestFilter.SELF_SCENE, androidx.xr.scenecore.runtime.ActivityPose.HitTestFilter.OTHER_SCENES}) @kotlin.annotation.Retention(kotlin.annotation.AnnotationRetention.SOURCE) public static @interface ActivityPose.HitTestFilterValue {
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public interface ActivitySpace extends androidx.xr.scenecore.runtime.SystemSpaceEntity {
    method public void addOnBoundsChangedListener(androidx.xr.scenecore.runtime.ActivitySpace.OnBoundsChangedListener listener);
    method @InaccessibleFromKotlin public androidx.xr.scenecore.runtime.Dimensions getBounds();
    method @InaccessibleFromKotlin public androidx.xr.runtime.math.BoundingBox getRecommendedContentBoxInFullSpace();
    method public com.google.common.util.concurrent.ListenableFuture<androidx.xr.scenecore.runtime.HitTestResult> hitTestRelativeToActivityPose(androidx.xr.runtime.math.Vector3 origin, androidx.xr.runtime.math.Vector3 direction, @androidx.xr.scenecore.runtime.ActivityPose.HitTestFilterValue int hitTestFilter, androidx.xr.scenecore.runtime.ActivityPose activityPose);
    method public void removeOnBoundsChangedListener(androidx.xr.scenecore.runtime.ActivitySpace.OnBoundsChangedListener listener);
    property public abstract androidx.xr.scenecore.runtime.Dimensions bounds;
    property public abstract androidx.xr.runtime.math.BoundingBox recommendedContentBoxInFullSpace;
  }

  public static fun interface ActivitySpace.OnBoundsChangedListener {
    method public void onBoundsChanged(androidx.xr.scenecore.runtime.Dimensions bounds);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public interface AnchorEntity extends androidx.xr.scenecore.runtime.SystemSpaceEntity {
    method @InaccessibleFromKotlin public long getNativePointer();
    method @InaccessibleFromKotlin public int getState();
    method public void setOnStateChangedListener(androidx.xr.scenecore.runtime.AnchorEntity.OnStateChangedListener onStateChangedListener);
    property public abstract long nativePointer;
    property public abstract int state;
  }

  public static fun interface AnchorEntity.OnStateChangedListener {
    method public void onStateChanged(int newState);
  }

  @IntDef({androidx.xr.scenecore.runtime.AnchorEntity.State.Companion.UNANCHORED, androidx.xr.scenecore.runtime.AnchorEntity.State.Companion.ANCHORED, androidx.xr.scenecore.runtime.AnchorEntity.State.Companion.TIMED_OUT, androidx.xr.scenecore.runtime.AnchorEntity.State.Companion.ERROR}) @kotlin.annotation.Retention(kotlin.annotation.AnnotationRetention.SOURCE) @kotlin.annotation.Target(allowedTargets=kotlin.annotation.AnnotationTarget.TYPE) public static @interface AnchorEntity.State {
    field public static final int ANCHORED = 1; // 0x1
    field public static final androidx.xr.scenecore.runtime.AnchorEntity.State.Companion Companion;
    field public static final int ERROR = 3; // 0x3
    field public static final int TIMED_OUT = 2; // 0x2
    field public static final int UNANCHORED = 0; // 0x0
  }

  public static final class AnchorEntity.State.Companion {
    property public static int ANCHORED;
    property public static int ERROR;
    property public static int TIMED_OUT;
    property public static int UNANCHORED;
    field public static final int ANCHORED = 1; // 0x1
    field public static final int ERROR = 3; // 0x3
    field public static final int TIMED_OUT = 2; // 0x2
    field public static final int UNANCHORED = 0; // 0x0
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public interface AnchorPlacement {
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public interface AudioTrackExtensionsWrapper {
    method public androidx.xr.scenecore.runtime.PointSourceParams? getPointSourceParams(android.media.AudioTrack track);
    method public androidx.xr.scenecore.runtime.SoundFieldAttributes? getSoundFieldAttributes(android.media.AudioTrack track);
    method @androidx.xr.scenecore.runtime.SpatializerConstants.SourceType public int getSpatialSourceType(android.media.AudioTrack track);
    method public void setPointSourceParams(android.media.AudioTrack track, androidx.xr.scenecore.runtime.PointSourceParams params);
    method public android.media.AudioTrack.Builder setPointSourceParams(android.media.AudioTrack.Builder builder, androidx.xr.scenecore.runtime.PointSourceParams params);
    method public android.media.AudioTrack.Builder setSoundFieldAttributes(android.media.AudioTrack.Builder builder, androidx.xr.scenecore.runtime.SoundFieldAttributes attributes);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public interface CameraViewActivityPose extends androidx.xr.scenecore.runtime.ActivityPose {
    method @InaccessibleFromKotlin public int getCameraType();
    method @InaccessibleFromKotlin public androidx.xr.scenecore.runtime.PixelDimensions getDisplayResolutionInPixels();
    method @InaccessibleFromKotlin public androidx.xr.scenecore.runtime.CameraViewActivityPose.Fov getFov();
    property @androidx.xr.scenecore.runtime.CameraViewActivityPose.CameraType public abstract int cameraType;
    property public abstract androidx.xr.scenecore.runtime.PixelDimensions displayResolutionInPixels;
    property public abstract androidx.xr.scenecore.runtime.CameraViewActivityPose.Fov fov;
  }

  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.RUNTIME) public static @interface CameraViewActivityPose.CameraType {
    field public static final int CAMERA_TYPE_LEFT_EYE = 1; // 0x1
    field public static final int CAMERA_TYPE_RIGHT_EYE = 2; // 0x2
    field public static final int CAMERA_TYPE_UNKNOWN = 0; // 0x0
    field public static final androidx.xr.scenecore.runtime.CameraViewActivityPose.CameraType.Companion Companion;
  }

  public static final class CameraViewActivityPose.CameraType.Companion {
    property public static int CAMERA_TYPE_LEFT_EYE;
    property public static int CAMERA_TYPE_RIGHT_EYE;
    property public static int CAMERA_TYPE_UNKNOWN;
    field public static final int CAMERA_TYPE_LEFT_EYE = 1; // 0x1
    field public static final int CAMERA_TYPE_RIGHT_EYE = 2; // 0x2
    field public static final int CAMERA_TYPE_UNKNOWN = 0; // 0x0
  }

  public static final class CameraViewActivityPose.Fov {
    ctor public CameraViewActivityPose.Fov(float angleLeft, float angleRight, float angleUp, float angleDown);
    method @InaccessibleFromKotlin public float getAngleDown();
    method @InaccessibleFromKotlin public float getAngleLeft();
    method @InaccessibleFromKotlin public float getAngleRight();
    method @InaccessibleFromKotlin public float getAngleUp();
    property public float angleDown;
    property public float angleLeft;
    property public float angleRight;
    property public float angleUp;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public interface Component {
    method public boolean onAttach(androidx.xr.scenecore.runtime.Entity entity);
    method public void onDetach(androidx.xr.scenecore.runtime.Entity entity);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class Dimensions {
    ctor public Dimensions(float width, float height, float depth);
    property public float depth;
    property public float height;
    property public float width;
    field public final float depth;
    field public final float height;
    field public final float width;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public interface Entity extends androidx.xr.scenecore.runtime.ActivityPose {
    method public void addChild(androidx.xr.scenecore.runtime.Entity child);
    method public void addChildren(java.util.List<? extends androidx.xr.scenecore.runtime.Entity> children);
    method public boolean addComponent(androidx.xr.scenecore.runtime.Component component);
    method public void addInputEventListener(java.util.concurrent.Executor executor, androidx.xr.scenecore.runtime.InputEventListener listener);
    method public void dispose();
    method public default float getAlpha();
    method public float getAlpha(@androidx.xr.scenecore.runtime.SpaceValue int relativeTo);
    method @InaccessibleFromKotlin public java.util.List<androidx.xr.scenecore.runtime.Entity> getChildren();
    method public java.util.List<androidx.xr.scenecore.runtime.Component> getComponents();
    method public <T extends androidx.xr.scenecore.runtime.Component> java.util.List<T> getComponentsOfType(Class<? extends T> type);
    method @InaccessibleFromKotlin public CharSequence getContentDescription();
    method @InaccessibleFromKotlin public androidx.xr.scenecore.runtime.Entity? getParent();
    method public default androidx.xr.runtime.math.Pose getPose();
    method public androidx.xr.runtime.math.Pose getPose(@androidx.xr.scenecore.runtime.SpaceValue int relativeTo);
    method public default androidx.xr.runtime.math.Vector3 getScale();
    method public androidx.xr.runtime.math.Vector3 getScale(@androidx.xr.scenecore.runtime.SpaceValue int relativeTo);
    method public boolean isHidden(boolean includeParents);
    method public void removeAllComponents();
    method public void removeComponent(androidx.xr.scenecore.runtime.Component component);
    method public void removeInputEventListener(androidx.xr.scenecore.runtime.InputEventListener listener);
    method public default void setAlpha(float alpha);
    method public void setAlpha(float alpha, @androidx.xr.scenecore.runtime.SpaceValue int relativeTo);
    method @InaccessibleFromKotlin public void setContentDescription(CharSequence);
    method public void setHidden(boolean hidden);
    method @InaccessibleFromKotlin public void setParent(androidx.xr.scenecore.runtime.Entity?);
    method public default void setPose(androidx.xr.runtime.math.Pose pose);
    method public void setPose(androidx.xr.runtime.math.Pose pose, @androidx.xr.scenecore.runtime.SpaceValue int relativeTo);
    method public default void setScale(androidx.xr.runtime.math.Vector3 scale);
    method public void setScale(androidx.xr.runtime.math.Vector3 scale, @androidx.xr.scenecore.runtime.SpaceValue int relativeTo);
    property public abstract java.util.List<androidx.xr.scenecore.runtime.Entity> children;
    property public abstract CharSequence contentDescription;
    property public abstract androidx.xr.scenecore.runtime.Entity? parent;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public interface ExrImageResource extends androidx.xr.scenecore.runtime.Resource {
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public interface GltfEntity extends androidx.xr.scenecore.runtime.Entity {
    method public void clearMaterialOverride(String nodeName, int primitiveIndex);
    method @InaccessibleFromKotlin public int getAnimationState();
    method public void setMaterialOverride(androidx.xr.scenecore.runtime.MaterialResource material, String nodeName, int primitiveIndex);
    method public void startAnimation(boolean loop, String? animationName);
    method public void stopAnimation();
    property @androidx.xr.scenecore.runtime.GltfEntity.AnimationStateValue public abstract int animationState;
  }

  public static final class GltfEntity.AnimationState {
    property public static int PLAYING;
    property public static int STOPPED;
    field public static final androidx.xr.scenecore.runtime.GltfEntity.AnimationState INSTANCE;
    field public static final int PLAYING = 0; // 0x0
    field public static final int STOPPED = 1; // 0x1
  }

  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.RUNTIME) public static @interface GltfEntity.AnimationStateValue {
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public interface GltfFeature extends androidx.xr.scenecore.runtime.RenderingFeature {
    method public void clearMaterialOverride(String nodeName, int primitiveIndex);
    method @InaccessibleFromKotlin public int getAnimationState();
    method public void setColliderEnabled(boolean enableCollider);
    method public void setMaterialOverride(androidx.xr.scenecore.runtime.MaterialResource material, String nodeName, int primitiveIndex);
    method public void startAnimation(boolean loop, String? animationName, java.util.concurrent.Executor executor);
    method public void stopAnimation();
    property public abstract int animationState;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public interface GltfModelResource extends androidx.xr.scenecore.runtime.Resource {
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public interface HeadActivityPose extends androidx.xr.scenecore.runtime.ActivityPose {
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class HitTestResult {
    ctor public HitTestResult(androidx.xr.runtime.math.Vector3? hitPosition, androidx.xr.runtime.math.Vector3? surfaceNormal, @androidx.xr.scenecore.runtime.HitTestResult.HitTestSurfaceTypeValue int surfaceType, float distance);
    method @InaccessibleFromKotlin public float getDistance();
    method @InaccessibleFromKotlin public androidx.xr.runtime.math.Vector3? getHitPosition();
    method @InaccessibleFromKotlin public androidx.xr.runtime.math.Vector3? getSurfaceNormal();
    method @InaccessibleFromKotlin public int getSurfaceType();
    property public float distance;
    property public androidx.xr.runtime.math.Vector3? hitPosition;
    property public androidx.xr.runtime.math.Vector3? surfaceNormal;
    property public int surfaceType;
  }

  public static final class HitTestResult.HitTestSurfaceType {
    property public static int HIT_TEST_RESULT_SURFACE_TYPE_OBJECT;
    property public static int HIT_TEST_RESULT_SURFACE_TYPE_PLANE;
    property public static int HIT_TEST_RESULT_SURFACE_TYPE_UNKNOWN;
    field public static final int HIT_TEST_RESULT_SURFACE_TYPE_OBJECT = 2; // 0x2
    field public static final int HIT_TEST_RESULT_SURFACE_TYPE_PLANE = 1; // 0x1
    field public static final int HIT_TEST_RESULT_SURFACE_TYPE_UNKNOWN = 0; // 0x0
    field public static final androidx.xr.scenecore.runtime.HitTestResult.HitTestSurfaceType INSTANCE;
  }

  @IntDef({androidx.xr.scenecore.runtime.HitTestResult.HitTestSurfaceType.HIT_TEST_RESULT_SURFACE_TYPE_UNKNOWN, androidx.xr.scenecore.runtime.HitTestResult.HitTestSurfaceType.HIT_TEST_RESULT_SURFACE_TYPE_PLANE, androidx.xr.scenecore.runtime.HitTestResult.HitTestSurfaceType.HIT_TEST_RESULT_SURFACE_TYPE_OBJECT}) @kotlin.annotation.Retention(kotlin.annotation.AnnotationRetention.SOURCE) public static @interface HitTestResult.HitTestSurfaceTypeValue {
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class InputEvent {
    ctor public InputEvent(int source, int pointerType, long timestamp, androidx.xr.runtime.math.Vector3 origin, androidx.xr.runtime.math.Vector3 direction, int action, optional java.util.List<androidx.xr.scenecore.runtime.InputEvent.HitInfo> hitInfoList);
    method @InaccessibleFromKotlin public int getAction();
    method @InaccessibleFromKotlin public androidx.xr.runtime.math.Vector3 getDirection();
    method @InaccessibleFromKotlin public java.util.List<androidx.xr.scenecore.runtime.InputEvent.HitInfo> getHitInfoList();
    method @InaccessibleFromKotlin public androidx.xr.runtime.math.Vector3 getOrigin();
    method @InaccessibleFromKotlin public int getPointerType();
    method @InaccessibleFromKotlin public int getSource();
    method @InaccessibleFromKotlin public long getTimestamp();
    property public int action;
    property public androidx.xr.runtime.math.Vector3 direction;
    property public java.util.List<androidx.xr.scenecore.runtime.InputEvent.HitInfo> hitInfoList;
    property public androidx.xr.runtime.math.Vector3 origin;
    property public int pointerType;
    property public int source;
    property public long timestamp;
  }

  public static final class InputEvent.Action {
    property public static int CANCEL;
    property public static int DOWN;
    property public static int HOVER_ENTER;
    property public static int HOVER_EXIT;
    property public static int HOVER_MOVE;
    property public static int MOVE;
    property public static int UP;
    field public static final int CANCEL = 3; // 0x3
    field public static final int DOWN = 0; // 0x0
    field public static final int HOVER_ENTER = 5; // 0x5
    field public static final int HOVER_EXIT = 6; // 0x6
    field public static final int HOVER_MOVE = 4; // 0x4
    field public static final androidx.xr.scenecore.runtime.InputEvent.Action INSTANCE;
    field public static final int MOVE = 2; // 0x2
    field public static final int UP = 1; // 0x1
  }

  public static final class InputEvent.HitInfo {
    ctor public InputEvent.HitInfo(androidx.xr.scenecore.runtime.Entity inputEntity, androidx.xr.runtime.math.Vector3? hitPosition, androidx.xr.runtime.math.Matrix4 transform);
    method @InaccessibleFromKotlin public androidx.xr.runtime.math.Vector3? getHitPosition();
    method @InaccessibleFromKotlin public androidx.xr.scenecore.runtime.Entity getInputEntity();
    method @InaccessibleFromKotlin public androidx.xr.runtime.math.Matrix4 getTransform();
    property public androidx.xr.runtime.math.Vector3? hitPosition;
    property public androidx.xr.scenecore.runtime.Entity inputEntity;
    property public androidx.xr.runtime.math.Matrix4 transform;
  }

  public static final class InputEvent.Pointer {
    property public static int DEFAULT;
    property public static int LEFT;
    property public static int RIGHT;
    field public static final int DEFAULT = 0; // 0x0
    field public static final androidx.xr.scenecore.runtime.InputEvent.Pointer INSTANCE;
    field public static final int LEFT = 1; // 0x1
    field public static final int RIGHT = 2; // 0x2
  }

  public static final class InputEvent.Source {
    property public static int CONTROLLER;
    property public static int GAZE_AND_GESTURE;
    property public static int HANDS;
    property public static int HEAD;
    property public static int MOUSE;
    property public static int UNKNOWN;
    field public static final int CONTROLLER = 2; // 0x2
    field public static final int GAZE_AND_GESTURE = 5; // 0x5
    field public static final int HANDS = 3; // 0x3
    field public static final int HEAD = 1; // 0x1
    field public static final androidx.xr.scenecore.runtime.InputEvent.Source INSTANCE;
    field public static final int MOUSE = 4; // 0x4
    field public static final int UNKNOWN = 0; // 0x0
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public fun interface InputEventListener {
    method public void onInputEvent(androidx.xr.scenecore.runtime.InputEvent event);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public interface InteractableComponent extends androidx.xr.scenecore.runtime.Component {
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class KhronosPbrMaterialSpec {
    ctor public KhronosPbrMaterialSpec(@androidx.xr.scenecore.runtime.KhronosPbrMaterialSpec.LightingModel int lightingModel, @androidx.xr.scenecore.runtime.KhronosPbrMaterialSpec.BlendMode int blendMode, @androidx.xr.scenecore.runtime.KhronosPbrMaterialSpec.DoubleSidedMode int doubleSidedMode);
    method @InaccessibleFromKotlin public int getBlendMode();
    method @InaccessibleFromKotlin public int getDoubleSidedMode();
    method @InaccessibleFromKotlin public int getLightingModel();
    property public int blendMode;
    property public int doubleSidedMode;
    property public int lightingModel;
    field public static final androidx.xr.scenecore.runtime.KhronosPbrMaterialSpec.Companion Companion;
    field public static final int DOUBLE_SIDED = 1; // 0x1
    field public static final int LIT = 0; // 0x0
    field public static final int MASKED = 1; // 0x1
    field public static final int OPAQUE = 0; // 0x0
    field public static final int REFRACTIVE = 3; // 0x3
    field public static final int SINGLE_SIDED = 0; // 0x0
    field public static final int TRANSPARENT = 2; // 0x2
    field public static final int UNLIT = 1; // 0x1
  }

  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.RUNTIME) public static @interface KhronosPbrMaterialSpec.BlendMode {
    field public static final androidx.xr.scenecore.runtime.KhronosPbrMaterialSpec.BlendMode.Companion Companion;
    field public static final int MASKED = 1; // 0x1
    field public static final int OPAQUE = 0; // 0x0
    field public static final int REFRACTIVE = 3; // 0x3
    field public static final int TRANSPARENT = 2; // 0x2
  }

  public static final class KhronosPbrMaterialSpec.BlendMode.Companion {
    property public static int MASKED;
    property public static int OPAQUE;
    property public static int REFRACTIVE;
    property public static int TRANSPARENT;
    field public static final int MASKED = 1; // 0x1
    field public static final int OPAQUE = 0; // 0x0
    field public static final int REFRACTIVE = 3; // 0x3
    field public static final int TRANSPARENT = 2; // 0x2
  }

  public static final class KhronosPbrMaterialSpec.Companion {
    property public static int DOUBLE_SIDED;
    property public static int LIT;
    property public static int MASKED;
    property public static int OPAQUE;
    property public static int REFRACTIVE;
    property public static int SINGLE_SIDED;
    property public static int TRANSPARENT;
    property public static int UNLIT;
  }

  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.RUNTIME) public static @interface KhronosPbrMaterialSpec.DoubleSidedMode {
    field public static final androidx.xr.scenecore.runtime.KhronosPbrMaterialSpec.DoubleSidedMode.Companion Companion;
    field public static final int DOUBLE_SIDED = 1; // 0x1
    field public static final int SINGLE_SIDED = 0; // 0x0
  }

  public static final class KhronosPbrMaterialSpec.DoubleSidedMode.Companion {
    property public static int DOUBLE_SIDED;
    property public static int SINGLE_SIDED;
    field public static final int DOUBLE_SIDED = 1; // 0x1
    field public static final int SINGLE_SIDED = 0; // 0x0
  }

  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.RUNTIME) public static @interface KhronosPbrMaterialSpec.LightingModel {
    field public static final androidx.xr.scenecore.runtime.KhronosPbrMaterialSpec.LightingModel.Companion Companion;
    field public static final int LIT = 0; // 0x0
    field public static final int UNLIT = 1; // 0x1
  }

  public static final class KhronosPbrMaterialSpec.LightingModel.Companion {
    property public static int LIT;
    property public static int UNLIT;
    field public static final int LIT = 0; // 0x0
    field public static final int UNLIT = 1; // 0x1
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public interface LoggingEntity extends androidx.xr.scenecore.runtime.Entity {
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public interface MaterialResource extends androidx.xr.scenecore.runtime.Resource {
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public interface MediaPlayerExtensionsWrapper {
    method public void setPointSourceParams(android.media.MediaPlayer mediaPlayer, androidx.xr.scenecore.runtime.PointSourceParams params);
    method public void setSoundFieldAttributes(android.media.MediaPlayer mediaPlayer, androidx.xr.scenecore.runtime.SoundFieldAttributes attributes);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public interface MovableComponent extends androidx.xr.scenecore.runtime.Component {
    method public void addMoveEventListener(java.util.concurrent.Executor executor, androidx.xr.scenecore.runtime.MoveEventListener moveEventListener);
    method @InaccessibleFromKotlin public int getScaleWithDistanceMode();
    method @InaccessibleFromKotlin public androidx.xr.scenecore.runtime.Dimensions getSize();
    method public void removeMoveEventListener(androidx.xr.scenecore.runtime.MoveEventListener moveEventListener);
    method @InaccessibleFromKotlin public void setScaleWithDistanceMode(int);
    method @InaccessibleFromKotlin public void setSize(androidx.xr.scenecore.runtime.Dimensions);
    property @androidx.xr.scenecore.runtime.MovableComponent.ScaleWithDistanceMode public abstract int scaleWithDistanceMode;
    property public abstract androidx.xr.scenecore.runtime.Dimensions size;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public static @interface MovableComponent.ScaleWithDistanceMode {
    field public static final androidx.xr.scenecore.runtime.MovableComponent.ScaleWithDistanceMode.Companion Companion;
    field public static final int DEFAULT = 3; // 0x3
    field public static final int DMM = 2; // 0x2
  }

  public static final class MovableComponent.ScaleWithDistanceMode.Companion {
    property public static int DEFAULT;
    property public static int DMM;
    field public static final int DEFAULT = 3; // 0x3
    field public static final int DMM = 2; // 0x2
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class MoveEvent {
    ctor public MoveEvent(int moveState, androidx.xr.runtime.math.Ray initialInputRay, androidx.xr.runtime.math.Ray currentInputRay, androidx.xr.runtime.math.Pose previousPose, androidx.xr.runtime.math.Pose currentPose, androidx.xr.runtime.math.Vector3 previousScale, androidx.xr.runtime.math.Vector3 currentScale, androidx.xr.scenecore.runtime.Entity initialParent, androidx.xr.scenecore.runtime.Entity? updatedParent, androidx.xr.scenecore.runtime.Entity? disposedEntity);
    method @InaccessibleFromKotlin public androidx.xr.runtime.math.Ray getCurrentInputRay();
    method @InaccessibleFromKotlin public androidx.xr.runtime.math.Pose getCurrentPose();
    method @InaccessibleFromKotlin public androidx.xr.runtime.math.Vector3 getCurrentScale();
    method @InaccessibleFromKotlin public androidx.xr.scenecore.runtime.Entity? getDisposedEntity();
    method @InaccessibleFromKotlin public androidx.xr.runtime.math.Ray getInitialInputRay();
    method @InaccessibleFromKotlin public androidx.xr.scenecore.runtime.Entity getInitialParent();
    method @InaccessibleFromKotlin public int getMoveState();
    method @InaccessibleFromKotlin public androidx.xr.runtime.math.Pose getPreviousPose();
    method @InaccessibleFromKotlin public androidx.xr.runtime.math.Vector3 getPreviousScale();
    method @InaccessibleFromKotlin public androidx.xr.scenecore.runtime.Entity? getUpdatedParent();
    property public androidx.xr.runtime.math.Ray currentInputRay;
    property public androidx.xr.runtime.math.Pose currentPose;
    property public androidx.xr.runtime.math.Vector3 currentScale;
    property public androidx.xr.scenecore.runtime.Entity? disposedEntity;
    property public androidx.xr.runtime.math.Ray initialInputRay;
    property public androidx.xr.scenecore.runtime.Entity initialParent;
    property public int moveState;
    property public androidx.xr.runtime.math.Pose previousPose;
    property public androidx.xr.runtime.math.Vector3 previousScale;
    property public androidx.xr.scenecore.runtime.Entity? updatedParent;
    field public static final androidx.xr.scenecore.runtime.MoveEvent.Companion Companion;
    field public static final int MOVE_STATE_END = 3; // 0x3
    field public static final int MOVE_STATE_ONGOING = 2; // 0x2
    field public static final int MOVE_STATE_START = 1; // 0x1
  }

  public static final class MoveEvent.Companion {
    property public static int MOVE_STATE_END;
    property public static int MOVE_STATE_ONGOING;
    property public static int MOVE_STATE_START;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public fun interface MoveEventListener {
    method public void onMoveEvent(androidx.xr.scenecore.runtime.MoveEvent event);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public interface PanelEntity extends androidx.xr.scenecore.runtime.Entity {
    method @InaccessibleFromKotlin public float getCornerRadius();
    method public androidx.xr.scenecore.runtime.PerceivedResolutionResult getPerceivedResolution();
    method @InaccessibleFromKotlin public androidx.xr.scenecore.runtime.Dimensions getSize();
    method @InaccessibleFromKotlin public androidx.xr.scenecore.runtime.PixelDimensions getSizeInPixels();
    method @InaccessibleFromKotlin public void setCornerRadius(float);
    method @InaccessibleFromKotlin public void setSize(androidx.xr.scenecore.runtime.Dimensions);
    method @InaccessibleFromKotlin public void setSizeInPixels(androidx.xr.scenecore.runtime.PixelDimensions);
    property public abstract float cornerRadius;
    property public abstract androidx.xr.scenecore.runtime.Dimensions size;
    property public abstract androidx.xr.scenecore.runtime.PixelDimensions sizeInPixels;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public abstract sealed class PerceivedResolutionResult {
  }

  public static final class PerceivedResolutionResult.EntityTooClose extends androidx.xr.scenecore.runtime.PerceivedResolutionResult {
    ctor public PerceivedResolutionResult.EntityTooClose();
  }

  public static final class PerceivedResolutionResult.InvalidCameraView extends androidx.xr.scenecore.runtime.PerceivedResolutionResult {
    ctor public PerceivedResolutionResult.InvalidCameraView();
  }

  public static final class PerceivedResolutionResult.Success extends androidx.xr.scenecore.runtime.PerceivedResolutionResult {
    ctor public PerceivedResolutionResult.Success(androidx.xr.scenecore.runtime.PixelDimensions perceivedResolution);
    method @InaccessibleFromKotlin public androidx.xr.scenecore.runtime.PixelDimensions getPerceivedResolution();
    property public androidx.xr.scenecore.runtime.PixelDimensions perceivedResolution;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public interface PerceptionSpaceActivityPose extends androidx.xr.scenecore.runtime.ActivityPose {
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class PixelDimensions {
    ctor public PixelDimensions(int width, int height);
    property public int height;
    property public int width;
    field public final int height;
    field public final int width;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public enum PlaneSemantic {
    enum_constant public static final androidx.xr.scenecore.runtime.PlaneSemantic ANY;
    enum_constant public static final androidx.xr.scenecore.runtime.PlaneSemantic CEILING;
    enum_constant public static final androidx.xr.scenecore.runtime.PlaneSemantic FLOOR;
    enum_constant public static final androidx.xr.scenecore.runtime.PlaneSemantic TABLE;
    enum_constant public static final androidx.xr.scenecore.runtime.PlaneSemantic WALL;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public enum PlaneType {
    enum_constant public static final androidx.xr.scenecore.runtime.PlaneType ANY;
    enum_constant public static final androidx.xr.scenecore.runtime.PlaneType HORIZONTAL;
    enum_constant public static final androidx.xr.scenecore.runtime.PlaneType VERTICAL;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class PointSourceParams {
    ctor public PointSourceParams(androidx.xr.scenecore.runtime.Entity entity);
    method @InaccessibleFromKotlin public androidx.xr.scenecore.runtime.Entity getEntity();
    property public androidx.xr.scenecore.runtime.Entity entity;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public interface PointerCaptureComponent extends androidx.xr.scenecore.runtime.Component {
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public static @interface PointerCaptureComponent.PointerCaptureState {
    field public static final androidx.xr.scenecore.runtime.PointerCaptureComponent.PointerCaptureState.Companion Companion;
    field public static final int POINTER_CAPTURE_STATE_ACTIVE = 1; // 0x1
    field public static final int POINTER_CAPTURE_STATE_PAUSED = 0; // 0x0
    field public static final int POINTER_CAPTURE_STATE_STOPPED = 2; // 0x2
  }

  public static final class PointerCaptureComponent.PointerCaptureState.Companion {
    property public static int POINTER_CAPTURE_STATE_ACTIVE;
    property public static int POINTER_CAPTURE_STATE_PAUSED;
    property public static int POINTER_CAPTURE_STATE_STOPPED;
    field public static final int POINTER_CAPTURE_STATE_ACTIVE = 1; // 0x1
    field public static final int POINTER_CAPTURE_STATE_PAUSED = 0; // 0x0
    field public static final int POINTER_CAPTURE_STATE_STOPPED = 2; // 0x2
  }

  public static fun interface PointerCaptureComponent.StateListener {
    method public void onStateChanged(@androidx.xr.scenecore.runtime.PointerCaptureComponent.PointerCaptureState int newState);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public interface RenderingEntityFactory {
    method public androidx.xr.scenecore.runtime.GltfEntity createGltfEntity(androidx.xr.scenecore.runtime.GltfFeature feature, androidx.xr.runtime.math.Pose pose, androidx.xr.scenecore.runtime.Entity parentEntity);
    method public androidx.xr.scenecore.runtime.SubspaceNodeEntity createSubspaceNodeEntity(androidx.xr.scenecore.runtime.SubspaceNodeFeature feature);
    method public androidx.xr.scenecore.runtime.SurfaceEntity createSurfaceEntity(androidx.xr.scenecore.runtime.SurfaceFeature feature, androidx.xr.runtime.math.Pose pose, androidx.xr.scenecore.runtime.Entity parentEntity);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public interface RenderingFeature {
    method public void dispose();
    method public androidx.xr.runtime.NodeHolder<? extends java.lang.Object?> getNodeHolder();
    method public androidx.xr.runtime.NodeHolder<? extends java.lang.Object?>? getSubspaceNodeHolder();
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public interface RenderingRuntime extends androidx.xr.runtime.internal.JxrRuntime {
    method public androidx.xr.scenecore.runtime.TextureResource? borrowReflectionTexture();
    method public androidx.xr.scenecore.runtime.GltfEntity createGltfEntity(androidx.xr.runtime.math.Pose pose, androidx.xr.scenecore.runtime.GltfModelResource loadedGltf, androidx.xr.scenecore.runtime.Entity parentEntity);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.xr.scenecore.runtime.MaterialResource> createKhronosPbrMaterial(androidx.xr.scenecore.runtime.KhronosPbrMaterialSpec spec);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public androidx.xr.scenecore.runtime.SubspaceNodeEntity createSubspaceNodeEntity(androidx.xr.runtime.SubspaceNodeHolder<? extends java.lang.Object?> subspaceNodeHolder, androidx.xr.scenecore.runtime.Dimensions size);
    method public androidx.xr.scenecore.runtime.SurfaceEntity createSurfaceEntity(int stereoMode, androidx.xr.runtime.math.Pose pose, androidx.xr.scenecore.runtime.SurfaceEntity.Shape shape, @androidx.xr.scenecore.runtime.SurfaceEntity.SurfaceProtection int surfaceProtection, int superSampling, androidx.xr.scenecore.runtime.Entity parentEntity);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.xr.scenecore.runtime.MaterialResource> createWaterMaterial(boolean isAlphaMapVersion);
    method public void destroyKhronosPbrMaterial(androidx.xr.scenecore.runtime.MaterialResource material);
    method public void destroyTexture(androidx.xr.scenecore.runtime.TextureResource texture);
    method public void destroyWaterMaterial(androidx.xr.scenecore.runtime.MaterialResource material);
    method public androidx.xr.scenecore.runtime.TextureResource? getReflectionTextureFromIbl(androidx.xr.scenecore.runtime.ExrImageResource iblToken);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.xr.scenecore.runtime.ExrImageResource> loadExrImageByAssetName(String assetName);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.xr.scenecore.runtime.ExrImageResource> loadExrImageByByteArray(byte[] assetData, String assetKey);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.xr.scenecore.runtime.GltfModelResource> loadGltfByAssetName(String assetName);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.xr.scenecore.runtime.GltfModelResource> loadGltfByByteArray(byte[] assetData, String assetKey);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.xr.scenecore.runtime.TextureResource> loadTexture(String assetName);
    method public void setAlphaCutoffOnKhronosPbrMaterial(androidx.xr.scenecore.runtime.MaterialResource material, float alphaCutoff);
    method public void setAlphaMapOnWaterMaterial(androidx.xr.scenecore.runtime.MaterialResource material, androidx.xr.scenecore.runtime.TextureResource alphaMap, androidx.xr.scenecore.runtime.TextureSampler sampler);
    method public void setAlphaStepMultiplierOnWaterMaterial(androidx.xr.scenecore.runtime.MaterialResource material, float alphaStepMultiplier);
    method public void setAmbientOcclusionFactorOnKhronosPbrMaterial(androidx.xr.scenecore.runtime.MaterialResource material, float factor);
    method public void setAmbientOcclusionTextureOnKhronosPbrMaterial(androidx.xr.scenecore.runtime.MaterialResource material, androidx.xr.scenecore.runtime.TextureResource ambientOcclusion, androidx.xr.scenecore.runtime.TextureSampler sampler);
    method public void setAmbientOcclusionUvTransformOnKhronosPbrMaterial(androidx.xr.scenecore.runtime.MaterialResource material, androidx.xr.runtime.math.Matrix3 uvTransform);
    method public void setBaseColorFactorsOnKhronosPbrMaterial(androidx.xr.scenecore.runtime.MaterialResource material, androidx.xr.runtime.math.Vector4 factors);
    method public void setBaseColorTextureOnKhronosPbrMaterial(androidx.xr.scenecore.runtime.MaterialResource material, androidx.xr.scenecore.runtime.TextureResource baseColor, androidx.xr.scenecore.runtime.TextureSampler sampler);
    method public void setBaseColorUvTransformOnKhronosPbrMaterial(androidx.xr.scenecore.runtime.MaterialResource material, androidx.xr.runtime.math.Matrix3 uvTransform);
    method public void setClearcoatFactorsOnKhronosPbrMaterial(androidx.xr.scenecore.runtime.MaterialResource material, float intensity, float roughness, float normal);
    method public void setClearcoatNormalTextureOnKhronosPbrMaterial(androidx.xr.scenecore.runtime.MaterialResource material, androidx.xr.scenecore.runtime.TextureResource clearcoatNormal, androidx.xr.scenecore.runtime.TextureSampler sampler);
    method public void setClearcoatRoughnessTextureOnKhronosPbrMaterial(androidx.xr.scenecore.runtime.MaterialResource material, androidx.xr.scenecore.runtime.TextureResource clearcoatRoughness, androidx.xr.scenecore.runtime.TextureSampler sampler);
    method public void setClearcoatTextureOnKhronosPbrMaterial(androidx.xr.scenecore.runtime.MaterialResource material, androidx.xr.scenecore.runtime.TextureResource clearcoat, androidx.xr.scenecore.runtime.TextureSampler sampler);
    method public void setEmissiveFactorsOnKhronosPbrMaterial(androidx.xr.scenecore.runtime.MaterialResource material, androidx.xr.runtime.math.Vector3 factors);
    method public void setEmissiveTextureOnKhronosPbrMaterial(androidx.xr.scenecore.runtime.MaterialResource material, androidx.xr.scenecore.runtime.TextureResource emissive, androidx.xr.scenecore.runtime.TextureSampler sampler);
    method public void setEmissiveUvTransformOnKhronosPbrMaterial(androidx.xr.scenecore.runtime.MaterialResource material, androidx.xr.runtime.math.Matrix3 uvTransform);
    method public void setIndexOfRefractionOnKhronosPbrMaterial(androidx.xr.scenecore.runtime.MaterialResource material, float indexOfRefraction);
    method public void setMetallicFactorOnKhronosPbrMaterial(androidx.xr.scenecore.runtime.MaterialResource material, float factor);
    method public void setMetallicRoughnessTextureOnKhronosPbrMaterial(androidx.xr.scenecore.runtime.MaterialResource material, androidx.xr.scenecore.runtime.TextureResource metallicRoughness, androidx.xr.scenecore.runtime.TextureSampler sampler);
    method public void setMetallicRoughnessUvTransformOnKhronosPbrMaterial(androidx.xr.scenecore.runtime.MaterialResource material, androidx.xr.runtime.math.Matrix3 uvTransform);
    method public void setNormalBoundaryOnWaterMaterial(androidx.xr.scenecore.runtime.MaterialResource material, float normalBoundary);
    method public void setNormalFactorOnKhronosPbrMaterial(androidx.xr.scenecore.runtime.MaterialResource material, float factor);
    method public void setNormalMapOnWaterMaterial(androidx.xr.scenecore.runtime.MaterialResource material, androidx.xr.scenecore.runtime.TextureResource normalMap, androidx.xr.scenecore.runtime.TextureSampler sampler);
    method public void setNormalSpeedOnWaterMaterial(androidx.xr.scenecore.runtime.MaterialResource material, float normalSpeed);
    method public void setNormalTextureOnKhronosPbrMaterial(androidx.xr.scenecore.runtime.MaterialResource material, androidx.xr.scenecore.runtime.TextureResource normal, androidx.xr.scenecore.runtime.TextureSampler sampler);
    method public void setNormalTilingOnWaterMaterial(androidx.xr.scenecore.runtime.MaterialResource material, float normalTiling);
    method public void setNormalUvTransformOnKhronosPbrMaterial(androidx.xr.scenecore.runtime.MaterialResource material, androidx.xr.runtime.math.Matrix3 uvTransform);
    method public void setNormalZOnWaterMaterial(androidx.xr.scenecore.runtime.MaterialResource material, float normalZ);
    method public void setReflectionMapOnWaterMaterial(androidx.xr.scenecore.runtime.MaterialResource material, androidx.xr.scenecore.runtime.TextureResource reflectionMap, androidx.xr.scenecore.runtime.TextureSampler sampler);
    method public void setRoughnessFactorOnKhronosPbrMaterial(androidx.xr.scenecore.runtime.MaterialResource material, float factor);
    method public void setSheenColorFactorsOnKhronosPbrMaterial(androidx.xr.scenecore.runtime.MaterialResource material, androidx.xr.runtime.math.Vector3 factors);
    method public void setSheenColorTextureOnKhronosPbrMaterial(androidx.xr.scenecore.runtime.MaterialResource material, androidx.xr.scenecore.runtime.TextureResource sheenColor, androidx.xr.scenecore.runtime.TextureSampler sampler);
    method public void setSheenRoughnessFactorOnKhronosPbrMaterial(androidx.xr.scenecore.runtime.MaterialResource material, float factor);
    method public void setSheenRoughnessTextureOnKhronosPbrMaterial(androidx.xr.scenecore.runtime.MaterialResource material, androidx.xr.scenecore.runtime.TextureResource sheenRoughness, androidx.xr.scenecore.runtime.TextureSampler sampler);
    method public void setTransmissionFactorOnKhronosPbrMaterial(androidx.xr.scenecore.runtime.MaterialResource material, float factor);
    method public void setTransmissionTextureOnKhronosPbrMaterial(androidx.xr.scenecore.runtime.MaterialResource material, androidx.xr.scenecore.runtime.TextureResource transmission, androidx.xr.scenecore.runtime.TextureSampler sampler);
    method public void setTransmissionUvTransformOnKhronosPbrMaterial(androidx.xr.scenecore.runtime.MaterialResource material, androidx.xr.runtime.math.Matrix3 uvTransform);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public interface ResizableComponent extends androidx.xr.scenecore.runtime.Component {
    method public void addResizeEventListener(java.util.concurrent.Executor executor, androidx.xr.scenecore.runtime.ResizeEventListener resizeEventListener);
    method @InaccessibleFromKotlin public boolean getAutoHideContent();
    method @InaccessibleFromKotlin public boolean getAutoUpdateSize();
    method @InaccessibleFromKotlin public boolean getForceShowResizeOverlay();
    method @InaccessibleFromKotlin public androidx.xr.scenecore.runtime.Dimensions getMaximumSize();
    method @InaccessibleFromKotlin public androidx.xr.scenecore.runtime.Dimensions getMinimumSize();
    method @InaccessibleFromKotlin public androidx.xr.scenecore.runtime.Dimensions getSize();
    method @InaccessibleFromKotlin public boolean isFixedAspectRatioEnabled();
    method public void removeResizeEventListener(androidx.xr.scenecore.runtime.ResizeEventListener resizeEventListener);
    method @InaccessibleFromKotlin public void setAutoHideContent(boolean);
    method @InaccessibleFromKotlin public void setAutoUpdateSize(boolean);
    method @InaccessibleFromKotlin public void setFixedAspectRatioEnabled(boolean);
    method @InaccessibleFromKotlin public void setForceShowResizeOverlay(boolean);
    method @InaccessibleFromKotlin public void setMaximumSize(androidx.xr.scenecore.runtime.Dimensions);
    method @InaccessibleFromKotlin public void setMinimumSize(androidx.xr.scenecore.runtime.Dimensions);
    method @InaccessibleFromKotlin public void setSize(androidx.xr.scenecore.runtime.Dimensions);
    property public abstract boolean autoHideContent;
    property public abstract boolean autoUpdateSize;
    property public abstract boolean forceShowResizeOverlay;
    property public abstract boolean isFixedAspectRatioEnabled;
    property public abstract androidx.xr.scenecore.runtime.Dimensions maximumSize;
    property public abstract androidx.xr.scenecore.runtime.Dimensions minimumSize;
    property public abstract androidx.xr.scenecore.runtime.Dimensions size;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class ResizeEvent {
    ctor public ResizeEvent(int resizeState, androidx.xr.scenecore.runtime.Dimensions newSize);
    method @InaccessibleFromKotlin public androidx.xr.scenecore.runtime.Dimensions getNewSize();
    method @InaccessibleFromKotlin public int getResizeState();
    property public androidx.xr.scenecore.runtime.Dimensions newSize;
    property public int resizeState;
    field public static final androidx.xr.scenecore.runtime.ResizeEvent.Companion Companion;
    field public static final int RESIZE_STATE_END = 3; // 0x3
    field public static final int RESIZE_STATE_ONGOING = 2; // 0x2
    field public static final int RESIZE_STATE_START = 1; // 0x1
    field public static final int RESIZE_STATE_UNKNOWN = 0; // 0x0
  }

  public static final class ResizeEvent.Companion {
    property public static int RESIZE_STATE_END;
    property public static int RESIZE_STATE_ONGOING;
    property public static int RESIZE_STATE_START;
    property public static int RESIZE_STATE_UNKNOWN;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public fun interface ResizeEventListener {
    method public void onResizeEvent(androidx.xr.scenecore.runtime.ResizeEvent event);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public interface Resource {
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public interface SceneRuntime extends androidx.xr.runtime.internal.JxrRuntime {
    method public void addPerceivedResolutionChangedListener(java.util.concurrent.Executor callbackExecutor, java.util.function.Consumer<androidx.xr.scenecore.runtime.PixelDimensions> listener);
    method public void addSpatialCapabilitiesChangedListener(java.util.concurrent.Executor callbackExecutor, java.util.function.Consumer<androidx.xr.scenecore.runtime.SpatialCapabilities> listener);
    method public void clearSpatialVisibilityChangedListener();
    method public androidx.xr.scenecore.runtime.ActivityPanelEntity createActivityPanelEntity(androidx.xr.runtime.math.Pose pose, androidx.xr.scenecore.runtime.PixelDimensions windowBoundsPx, String name, android.app.Activity hostActivity, androidx.xr.scenecore.runtime.Entity parent);
    method public androidx.xr.scenecore.runtime.AnchorEntity createAnchorEntity(androidx.xr.arcore.runtime.Anchor anchor);
    method public androidx.xr.scenecore.runtime.AnchorEntity createAnchorEntity(androidx.xr.scenecore.runtime.Dimensions bounds, androidx.xr.scenecore.runtime.PlaneType planeType, androidx.xr.scenecore.runtime.PlaneSemantic planeSemantic, java.time.Duration searchTimeout);
    method public androidx.xr.scenecore.runtime.AnchorPlacement createAnchorPlacementForPlanes(java.util.Set<androidx.xr.scenecore.runtime.PlaneType> planeTypeFilter, java.util.Set<androidx.xr.scenecore.runtime.PlaneSemantic> planeSemanticFilter);
    method public androidx.xr.scenecore.runtime.Entity createGroupEntity(androidx.xr.runtime.math.Pose pose, String name, androidx.xr.scenecore.runtime.Entity parent);
    method public androidx.xr.scenecore.runtime.InteractableComponent createInteractableComponent(java.util.concurrent.Executor executor, androidx.xr.scenecore.runtime.InputEventListener listener);
    method public androidx.xr.scenecore.runtime.LoggingEntity createLoggingEntity(androidx.xr.runtime.math.Pose pose);
    method public androidx.xr.scenecore.runtime.MovableComponent createMovableComponent(boolean systemMovable, boolean scaleInZ, java.util.Set<androidx.xr.scenecore.runtime.AnchorPlacement> anchorPlacement, boolean shouldDisposeParentAnchor);
    method public androidx.xr.scenecore.runtime.PanelEntity createPanelEntity(android.content.Context context, androidx.xr.runtime.math.Pose pose, android.view.View view, androidx.xr.scenecore.runtime.Dimensions dimensions, String name, androidx.xr.scenecore.runtime.Entity parent);
    method public androidx.xr.scenecore.runtime.PanelEntity createPanelEntity(android.content.Context context, androidx.xr.runtime.math.Pose pose, android.view.View view, androidx.xr.scenecore.runtime.PixelDimensions pixelDimensions, String name, androidx.xr.scenecore.runtime.Entity parent);
    method public androidx.xr.scenecore.runtime.AnchorEntity createPersistedAnchorEntity(java.util.UUID uuid, java.time.Duration searchTimeout);
    method public androidx.xr.scenecore.runtime.PointerCaptureComponent createPointerCaptureComponent(java.util.concurrent.Executor executor, androidx.xr.scenecore.runtime.PointerCaptureComponent.StateListener stateListener, androidx.xr.scenecore.runtime.InputEventListener inputListener);
    method public androidx.xr.scenecore.runtime.ResizableComponent createResizableComponent(androidx.xr.scenecore.runtime.Dimensions minimumSize, androidx.xr.scenecore.runtime.Dimensions maximumSize);
    method public androidx.xr.scenecore.runtime.SpatialPointerComponent createSpatialPointerComponent();
    method public void enablePanelDepthTest(boolean enabled);
    method @InaccessibleFromKotlin public androidx.xr.scenecore.runtime.ActivitySpace getActivitySpace();
    method @InaccessibleFromKotlin public androidx.xr.scenecore.runtime.AudioTrackExtensionsWrapper getAudioTrackExtensionsWrapper();
    method public androidx.xr.scenecore.runtime.CameraViewActivityPose? getCameraViewActivityPose(@androidx.xr.scenecore.runtime.CameraViewActivityPose.CameraType int cameraType);
    method @InaccessibleFromKotlin public androidx.xr.scenecore.runtime.HeadActivityPose? getHeadActivityPose();
    method @InaccessibleFromKotlin public androidx.xr.scenecore.runtime.PanelEntity getMainPanelEntity();
    method @InaccessibleFromKotlin public androidx.xr.scenecore.runtime.MediaPlayerExtensionsWrapper getMediaPlayerExtensionsWrapper();
    method @InaccessibleFromKotlin public androidx.xr.scenecore.runtime.PerceptionSpaceActivityPose getPerceptionSpaceActivityPose();
    method @InaccessibleFromKotlin public androidx.xr.scenecore.runtime.SoundPoolExtensionsWrapper getSoundPoolExtensionsWrapper();
    method @InaccessibleFromKotlin public androidx.xr.scenecore.runtime.SpatialCapabilities getSpatialCapabilities();
    method @InaccessibleFromKotlin public androidx.xr.scenecore.runtime.SpatialEnvironment getSpatialEnvironment();
    method @InaccessibleFromKotlin public androidx.xr.scenecore.runtime.SpatialModeChangeListener? getSpatialModeChangeListener();
    method public void removePerceivedResolutionChangedListener(java.util.function.Consumer<androidx.xr.scenecore.runtime.PixelDimensions> listener);
    method public void removeSpatialCapabilitiesChangedListener(java.util.function.Consumer<androidx.xr.scenecore.runtime.SpatialCapabilities> listener);
    method public void requestFullSpaceMode();
    method public void requestHomeSpaceMode();
    method public android.os.Bundle setFullSpaceMode(android.os.Bundle bundle);
    method public android.os.Bundle setFullSpaceModeWithEnvironmentInherited(android.os.Bundle bundle);
    method public void setPreferredAspectRatio(android.app.Activity activity, float preferredRatio);
    method @InaccessibleFromKotlin public void setSpatialModeChangeListener(androidx.xr.scenecore.runtime.SpatialModeChangeListener?);
    method public void setSpatialVisibilityChangedListener(java.util.concurrent.Executor callbackExecutor, java.util.function.Consumer<androidx.xr.scenecore.runtime.SpatialVisibility> listener);
    property public abstract androidx.xr.scenecore.runtime.ActivitySpace activitySpace;
    property public abstract androidx.xr.scenecore.runtime.AudioTrackExtensionsWrapper audioTrackExtensionsWrapper;
    property public abstract androidx.xr.scenecore.runtime.HeadActivityPose? headActivityPose;
    property public abstract androidx.xr.scenecore.runtime.PanelEntity mainPanelEntity;
    property public abstract androidx.xr.scenecore.runtime.MediaPlayerExtensionsWrapper mediaPlayerExtensionsWrapper;
    property public abstract androidx.xr.scenecore.runtime.PerceptionSpaceActivityPose perceptionSpaceActivityPose;
    property public abstract androidx.xr.scenecore.runtime.SoundPoolExtensionsWrapper soundPoolExtensionsWrapper;
    property public abstract androidx.xr.scenecore.runtime.SpatialCapabilities spatialCapabilities;
    property public abstract androidx.xr.scenecore.runtime.SpatialEnvironment spatialEnvironment;
    property public abstract androidx.xr.scenecore.runtime.SpatialModeChangeListener? spatialModeChangeListener;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class SoundFieldAttributes {
    ctor public SoundFieldAttributes(@androidx.xr.scenecore.runtime.SpatializerConstants.AmbisonicsOrder int ambisonicsOrder);
    method @InaccessibleFromKotlin public int getAmbisonicsOrder();
    property public int ambisonicsOrder;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public interface SoundPoolExtensionsWrapper {
    method @androidx.xr.scenecore.runtime.SpatializerConstants.SourceType public int getSpatialSourceType(android.media.SoundPool soundPool, int streamId);
    method public int play(android.media.SoundPool soundPool, int soundId, androidx.xr.scenecore.runtime.PointSourceParams params, float volume, int priority, int loop, float rate);
    method public int play(android.media.SoundPool soundPool, int soundId, androidx.xr.scenecore.runtime.SoundFieldAttributes attributes, float volume, int priority, int loop, float rate);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class Space {
    property public static int ACTIVITY;
    property public static int PARENT;
    property public static int REAL_WORLD;
    field public static final int ACTIVITY = 1; // 0x1
    field public static final androidx.xr.scenecore.runtime.Space INSTANCE;
    field public static final int PARENT = 0; // 0x0
    field public static final int REAL_WORLD = 2; // 0x2
  }

  @IntDef({androidx.xr.scenecore.runtime.Space.PARENT, androidx.xr.scenecore.runtime.Space.ACTIVITY, androidx.xr.scenecore.runtime.Space.REAL_WORLD}) @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) @kotlin.annotation.Retention(kotlin.annotation.AnnotationRetention.SOURCE) public @interface SpaceValue {
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class SpatialCapabilities {
    ctor public SpatialCapabilities(int capabilities);
    method @InaccessibleFromKotlin public int getCapabilities();
    method public boolean hasCapability(int capability);
    property public int capabilities;
    field public static final androidx.xr.scenecore.runtime.SpatialCapabilities.Companion Companion;
    field public static final int SPATIAL_CAPABILITY_3D_CONTENT = 2; // 0x2
    field public static final int SPATIAL_CAPABILITY_APP_ENVIRONMENT = 8; // 0x8
    field public static final int SPATIAL_CAPABILITY_EMBED_ACTIVITY = 32; // 0x20
    field public static final int SPATIAL_CAPABILITY_PASSTHROUGH_CONTROL = 4; // 0x4
    field public static final int SPATIAL_CAPABILITY_SPATIAL_AUDIO = 16; // 0x10
    field public static final int SPATIAL_CAPABILITY_UI = 1; // 0x1
  }

  public static final class SpatialCapabilities.Companion {
    property public static int SPATIAL_CAPABILITY_3D_CONTENT;
    property public static int SPATIAL_CAPABILITY_APP_ENVIRONMENT;
    property public static int SPATIAL_CAPABILITY_EMBED_ACTIVITY;
    property public static int SPATIAL_CAPABILITY_PASSTHROUGH_CONTROL;
    property public static int SPATIAL_CAPABILITY_SPATIAL_AUDIO;
    property public static int SPATIAL_CAPABILITY_UI;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public interface SpatialEnvironment {
    method public void addOnPassthroughOpacityChangedListener(java.util.concurrent.Executor executor, java.util.function.Consumer<java.lang.Float> listener);
    method public void addOnSpatialEnvironmentChangedListener(java.util.concurrent.Executor executor, java.util.function.Consumer<java.lang.Boolean> listener);
    method @InaccessibleFromKotlin public float getCurrentPassthroughOpacity();
    method @InaccessibleFromKotlin public float getPreferredPassthroughOpacity();
    method @InaccessibleFromKotlin public androidx.xr.scenecore.runtime.SpatialEnvironment.SpatialEnvironmentPreference? getPreferredSpatialEnvironment();
    method @InaccessibleFromKotlin public boolean isPreferredSpatialEnvironmentActive();
    method public void removeOnPassthroughOpacityChangedListener(java.util.function.Consumer<java.lang.Float> listener);
    method public void removeOnSpatialEnvironmentChangedListener(java.util.function.Consumer<java.lang.Boolean> listener);
    method @InaccessibleFromKotlin public void setPreferredPassthroughOpacity(float);
    method @InaccessibleFromKotlin public void setPreferredSpatialEnvironment(androidx.xr.scenecore.runtime.SpatialEnvironment.SpatialEnvironmentPreference?);
    property public abstract float currentPassthroughOpacity;
    property public abstract boolean isPreferredSpatialEnvironmentActive;
    property public abstract float preferredPassthroughOpacity;
    property public abstract androidx.xr.scenecore.runtime.SpatialEnvironment.SpatialEnvironmentPreference? preferredSpatialEnvironment;
    field public static final androidx.xr.scenecore.runtime.SpatialEnvironment.Companion Companion;
    field public static final float NO_PASSTHROUGH_OPACITY_PREFERENCE = (-1.0f/0.0f);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public static final class SpatialEnvironment.Companion {
    property public static float NO_PASSTHROUGH_OPACITY_PREFERENCE;
    field public static final float NO_PASSTHROUGH_OPACITY_PREFERENCE = (-1.0f/0.0f);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public static final class SpatialEnvironment.SpatialEnvironmentPreference {
    ctor public SpatialEnvironment.SpatialEnvironmentPreference(androidx.xr.scenecore.runtime.ExrImageResource? skybox, androidx.xr.scenecore.runtime.GltfModelResource? geometry);
    ctor public SpatialEnvironment.SpatialEnvironmentPreference(androidx.xr.scenecore.runtime.ExrImageResource? skybox, androidx.xr.scenecore.runtime.GltfModelResource? geometry, optional androidx.xr.scenecore.runtime.MaterialResource? geometryMaterial);
    ctor public SpatialEnvironment.SpatialEnvironmentPreference(androidx.xr.scenecore.runtime.ExrImageResource? skybox, androidx.xr.scenecore.runtime.GltfModelResource? geometry, optional androidx.xr.scenecore.runtime.MaterialResource? geometryMaterial, optional String? geometryNodeName);
    ctor public SpatialEnvironment.SpatialEnvironmentPreference(androidx.xr.scenecore.runtime.ExrImageResource? skybox, androidx.xr.scenecore.runtime.GltfModelResource? geometry, optional androidx.xr.scenecore.runtime.MaterialResource? geometryMaterial, optional String? geometryNodeName, optional String? geometryAnimationName);
    method @InaccessibleFromKotlin public androidx.xr.scenecore.runtime.GltfModelResource? getGeometry();
    method @InaccessibleFromKotlin public String? getGeometryAnimationName();
    method @InaccessibleFromKotlin public androidx.xr.scenecore.runtime.MaterialResource? getGeometryMaterial();
    method @InaccessibleFromKotlin public String? getGeometryNodeName();
    method @InaccessibleFromKotlin public androidx.xr.scenecore.runtime.ExrImageResource? getSkybox();
    property public androidx.xr.scenecore.runtime.GltfModelResource? geometry;
    property public String? geometryAnimationName;
    property public androidx.xr.scenecore.runtime.MaterialResource? geometryMaterial;
    property public String? geometryNodeName;
    property public androidx.xr.scenecore.runtime.ExrImageResource? skybox;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public interface SpatialEnvironmentExt {
    method public void onRenderingFeatureReady(androidx.xr.scenecore.runtime.SpatialEnvironmentFeature feature);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public interface SpatialEnvironmentFeature {
    method public void dispose();
    method @InaccessibleFromKotlin public androidx.xr.scenecore.runtime.SpatialEnvironment.SpatialEnvironmentPreference? getPreferredSpatialEnvironment();
    method @InaccessibleFromKotlin public void setPreferredSpatialEnvironment(androidx.xr.scenecore.runtime.SpatialEnvironment.SpatialEnvironmentPreference?);
    property public abstract androidx.xr.scenecore.runtime.SpatialEnvironment.SpatialEnvironmentPreference? preferredSpatialEnvironment;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public fun interface SpatialModeChangeListener {
    method public void onSpatialModeChanged(androidx.xr.runtime.math.Pose recommendedPose, androidx.xr.runtime.math.Vector3 recommendedScale);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public interface SpatialPointerComponent extends androidx.xr.scenecore.runtime.Component {
    method @androidx.xr.scenecore.runtime.SpatialPointerIconType public int getSpatialPointerIcon();
    method public void setSpatialPointerIcon(@androidx.xr.scenecore.runtime.SpatialPointerIconType int iconType);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class SpatialPointerIcon {
    property public static int TYPE_CIRCLE;
    property public static int TYPE_DEFAULT;
    property public static int TYPE_NONE;
    field public static final androidx.xr.scenecore.runtime.SpatialPointerIcon INSTANCE;
    field public static final int TYPE_CIRCLE = 2; // 0x2
    field public static final int TYPE_DEFAULT = 1; // 0x1
    field public static final int TYPE_NONE = 0; // 0x0
  }

  @IntDef({androidx.xr.scenecore.runtime.SpatialPointerIcon.TYPE_NONE, androidx.xr.scenecore.runtime.SpatialPointerIcon.TYPE_DEFAULT, androidx.xr.scenecore.runtime.SpatialPointerIcon.TYPE_CIRCLE}) @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) @kotlin.annotation.Retention(kotlin.annotation.AnnotationRetention.SOURCE) public @interface SpatialPointerIconType {
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class SpatialVisibility {
    ctor public SpatialVisibility(int visibility);
    method @InaccessibleFromKotlin public int getVisibility();
    property public int visibility;
    field public static final androidx.xr.scenecore.runtime.SpatialVisibility.Companion Companion;
    field public static final int OUTSIDE_FOV = 1; // 0x1
    field public static final int PARTIALLY_WITHIN_FOV = 2; // 0x2
    field public static final int UNKNOWN = 0; // 0x0
    field public static final int WITHIN_FOV = 3; // 0x3
  }

  public static final class SpatialVisibility.Companion {
    property public static int OUTSIDE_FOV;
    property public static int PARTIALLY_WITHIN_FOV;
    property public static int UNKNOWN;
    property public static int WITHIN_FOV;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class SpatializerConstants {
    ctor public SpatializerConstants();
    field public static final int AMBISONICS_ORDER_FIRST_ORDER = 0; // 0x0
    field public static final int AMBISONICS_ORDER_SECOND_ORDER = 1; // 0x1
    field public static final int AMBISONICS_ORDER_THIRD_ORDER = 2; // 0x2
    field public static final androidx.xr.scenecore.runtime.SpatializerConstants.Companion Companion;
    field public static final int SOURCE_TYPE_BYPASS = 0; // 0x0
    field public static final int SOURCE_TYPE_POINT_SOURCE = 1; // 0x1
    field public static final int SOURCE_TYPE_SOUND_FIELD = 2; // 0x2
  }

  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.RUNTIME) public static @interface SpatializerConstants.AmbisonicsOrder {
    field public static final int AMBISONICS_ORDER_FIRST_ORDER = 0; // 0x0
    field public static final int AMBISONICS_ORDER_SECOND_ORDER = 1; // 0x1
    field public static final int AMBISONICS_ORDER_THIRD_ORDER = 2; // 0x2
    field public static final androidx.xr.scenecore.runtime.SpatializerConstants.AmbisonicsOrder.Companion Companion;
  }

  public static final class SpatializerConstants.AmbisonicsOrder.Companion {
    property public static int AMBISONICS_ORDER_FIRST_ORDER;
    property public static int AMBISONICS_ORDER_SECOND_ORDER;
    property public static int AMBISONICS_ORDER_THIRD_ORDER;
    field public static final int AMBISONICS_ORDER_FIRST_ORDER = 0; // 0x0
    field public static final int AMBISONICS_ORDER_SECOND_ORDER = 1; // 0x1
    field public static final int AMBISONICS_ORDER_THIRD_ORDER = 2; // 0x2
  }

  public static final class SpatializerConstants.Companion {
    property public static int AMBISONICS_ORDER_FIRST_ORDER;
    property public static int AMBISONICS_ORDER_SECOND_ORDER;
    property public static int AMBISONICS_ORDER_THIRD_ORDER;
    property public static int SOURCE_TYPE_BYPASS;
    property public static int SOURCE_TYPE_POINT_SOURCE;
    property public static int SOURCE_TYPE_SOUND_FIELD;
  }

  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.RUNTIME) public static @interface SpatializerConstants.SourceType {
    field public static final androidx.xr.scenecore.runtime.SpatializerConstants.SourceType.Companion Companion;
    field public static final int SOURCE_TYPE_BYPASS = 0; // 0x0
    field public static final int SOURCE_TYPE_POINT_SOURCE = 1; // 0x1
    field public static final int SOURCE_TYPE_SOUND_FIELD = 2; // 0x2
  }

  public static final class SpatializerConstants.SourceType.Companion {
    property public static int SOURCE_TYPE_BYPASS;
    property public static int SOURCE_TYPE_POINT_SOURCE;
    property public static int SOURCE_TYPE_SOUND_FIELD;
    field public static final int SOURCE_TYPE_BYPASS = 0; // 0x0
    field public static final int SOURCE_TYPE_POINT_SOURCE = 1; // 0x1
    field public static final int SOURCE_TYPE_SOUND_FIELD = 2; // 0x2
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public interface SubspaceNodeEntity extends androidx.xr.scenecore.runtime.Entity {
    method @InaccessibleFromKotlin public androidx.xr.scenecore.runtime.Dimensions getSize();
    method @InaccessibleFromKotlin public void setSize(androidx.xr.scenecore.runtime.Dimensions);
    property public abstract androidx.xr.scenecore.runtime.Dimensions size;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public interface SubspaceNodeFeature extends androidx.xr.scenecore.runtime.RenderingFeature {
    method @InaccessibleFromKotlin public androidx.xr.scenecore.runtime.Dimensions getSize();
    method public void setAlpha(float alpha);
    method public void setHidden(boolean hidden);
    method public void setPose(androidx.xr.runtime.math.Pose pose);
    method public void setScale(androidx.xr.runtime.math.Vector3 scaleActivity);
    method @InaccessibleFromKotlin public void setSize(androidx.xr.scenecore.runtime.Dimensions);
    property public abstract androidx.xr.scenecore.runtime.Dimensions size;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public interface SurfaceEntity extends androidx.xr.scenecore.runtime.Entity {
    method @InaccessibleFromKotlin public int getColorRange();
    method @InaccessibleFromKotlin public int getColorSpace();
    method @InaccessibleFromKotlin public int getColorTransfer();
    method @InaccessibleFromKotlin public boolean getContentColorMetadataSet();
    method @InaccessibleFromKotlin public androidx.xr.scenecore.runtime.Dimensions getDimensions();
    method @InaccessibleFromKotlin public androidx.xr.scenecore.runtime.SurfaceEntity.EdgeFeather getEdgeFeather();
    method @InaccessibleFromKotlin public int getMaxContentLightLevel();
    method public androidx.xr.scenecore.runtime.PerceivedResolutionResult getPerceivedResolution();
    method @InaccessibleFromKotlin public androidx.xr.scenecore.runtime.SurfaceEntity.Shape getShape();
    method @InaccessibleFromKotlin public int getStereoMode();
    method @InaccessibleFromKotlin public android.view.Surface getSurface();
    method public void resetContentColorMetadata();
    method public void setAuxiliaryAlphaMaskTexture(androidx.xr.scenecore.runtime.TextureResource? alphaMask);
    method public void setContentColorMetadata(int colorSpace, int colorTransfer, int colorRange, int maxContentLightLevel);
    method @InaccessibleFromKotlin public void setEdgeFeather(androidx.xr.scenecore.runtime.SurfaceEntity.EdgeFeather);
    method public void setPrimaryAlphaMaskTexture(androidx.xr.scenecore.runtime.TextureResource? alphaMask);
    method @InaccessibleFromKotlin public void setShape(androidx.xr.scenecore.runtime.SurfaceEntity.Shape);
    method @InaccessibleFromKotlin public void setStereoMode(int);
    property public abstract int colorRange;
    property public abstract int colorSpace;
    property public abstract int colorTransfer;
    property public abstract boolean contentColorMetadataSet;
    property public abstract androidx.xr.scenecore.runtime.Dimensions dimensions;
    property public abstract androidx.xr.scenecore.runtime.SurfaceEntity.EdgeFeather edgeFeather;
    property public abstract int maxContentLightLevel;
    property public abstract androidx.xr.scenecore.runtime.SurfaceEntity.Shape shape;
    property public abstract int stereoMode;
    property public abstract android.view.Surface surface;
  }

  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.RUNTIME) public static @interface SurfaceEntity.ColorRange {
    field public static final androidx.xr.scenecore.runtime.SurfaceEntity.ColorRange.Companion Companion;
    field public static final int FULL = 1; // 0x1
    field public static final int LIMITED = 2; // 0x2
  }

  public static final class SurfaceEntity.ColorRange.Companion {
    property public static int FULL;
    property public static int LIMITED;
    field public static final int FULL = 1; // 0x1
    field public static final int LIMITED = 2; // 0x2
  }

  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.RUNTIME) public static @interface SurfaceEntity.ColorSpace {
    field public static final int ADOBE_RGB = 243; // 0xf3
    field public static final int BT2020 = 6; // 0x6
    field public static final int BT601_525 = 240; // 0xf0
    field public static final int BT601_PAL = 2; // 0x2
    field public static final int BT709 = 1; // 0x1
    field public static final androidx.xr.scenecore.runtime.SurfaceEntity.ColorSpace.Companion Companion;
    field public static final int DCI_P3 = 242; // 0xf2
    field public static final int DISPLAY_P3 = 241; // 0xf1
  }

  public static final class SurfaceEntity.ColorSpace.Companion {
    property public static int ADOBE_RGB;
    property public static int BT2020;
    property public static int BT601_525;
    property public static int BT601_PAL;
    property public static int BT709;
    property public static int DCI_P3;
    property public static int DISPLAY_P3;
    field public static final int ADOBE_RGB = 243; // 0xf3
    field public static final int BT2020 = 6; // 0x6
    field public static final int BT601_525 = 240; // 0xf0
    field public static final int BT601_PAL = 2; // 0x2
    field public static final int BT709 = 1; // 0x1
    field public static final int DCI_P3 = 242; // 0xf2
    field public static final int DISPLAY_P3 = 241; // 0xf1
  }

  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.RUNTIME) public static @interface SurfaceEntity.ColorTransfer {
    field public static final androidx.xr.scenecore.runtime.SurfaceEntity.ColorTransfer.Companion Companion;
    field public static final int GAMMA_2_2 = 10; // 0xa
    field public static final int HLG = 7; // 0x7
    field public static final int LINEAR = 1; // 0x1
    field public static final int SDR = 3; // 0x3
    field public static final int SRGB = 2; // 0x2
    field public static final int ST2084 = 6; // 0x6
  }

  public static final class SurfaceEntity.ColorTransfer.Companion {
    property public static int GAMMA_2_2;
    property public static int HLG;
    property public static int LINEAR;
    property public static int SDR;
    property public static int SRGB;
    property public static int ST2084;
    field public static final int GAMMA_2_2 = 10; // 0xa
    field public static final int HLG = 7; // 0x7
    field public static final int LINEAR = 1; // 0x1
    field public static final int SDR = 3; // 0x3
    field public static final int SRGB = 2; // 0x2
    field public static final int ST2084 = 6; // 0x6
  }

  public static interface SurfaceEntity.EdgeFeather {
  }

  public static final class SurfaceEntity.EdgeFeather.NoFeathering implements androidx.xr.scenecore.runtime.SurfaceEntity.EdgeFeather {
    ctor public SurfaceEntity.EdgeFeather.NoFeathering();
  }

  public static final class SurfaceEntity.EdgeFeather.RectangleFeather implements androidx.xr.scenecore.runtime.SurfaceEntity.EdgeFeather {
    ctor public SurfaceEntity.EdgeFeather.RectangleFeather(float leftRight, float topBottom);
    method @InaccessibleFromKotlin public float getLeftRight();
    method @InaccessibleFromKotlin public float getTopBottom();
    property public float leftRight;
    property public float topBottom;
  }

  public static interface SurfaceEntity.Shape {
    method @InaccessibleFromKotlin public androidx.xr.scenecore.runtime.Dimensions getDimensions();
    property public abstract androidx.xr.scenecore.runtime.Dimensions dimensions;
  }

  public static final class SurfaceEntity.Shape.Hemisphere implements androidx.xr.scenecore.runtime.SurfaceEntity.Shape {
    ctor public SurfaceEntity.Shape.Hemisphere(float radius);
    method @InaccessibleFromKotlin public androidx.xr.scenecore.runtime.Dimensions getDimensions();
    method @InaccessibleFromKotlin public float getRadius();
    property public androidx.xr.scenecore.runtime.Dimensions dimensions;
    property public float radius;
  }

  public static final class SurfaceEntity.Shape.Quad implements androidx.xr.scenecore.runtime.SurfaceEntity.Shape {
    ctor public SurfaceEntity.Shape.Quad(androidx.xr.runtime.math.FloatSize2d extents);
    method @InaccessibleFromKotlin public androidx.xr.scenecore.runtime.Dimensions getDimensions();
    method @InaccessibleFromKotlin public androidx.xr.runtime.math.FloatSize2d getExtents();
    property public androidx.xr.scenecore.runtime.Dimensions dimensions;
    property public androidx.xr.runtime.math.FloatSize2d extents;
  }

  public static final class SurfaceEntity.Shape.Sphere implements androidx.xr.scenecore.runtime.SurfaceEntity.Shape {
    ctor public SurfaceEntity.Shape.Sphere(float radius);
    method @InaccessibleFromKotlin public androidx.xr.scenecore.runtime.Dimensions getDimensions();
    method @InaccessibleFromKotlin public float getRadius();
    property public androidx.xr.scenecore.runtime.Dimensions dimensions;
    property public float radius;
  }

  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.RUNTIME) public static @interface SurfaceEntity.StereoMode {
    field public static final androidx.xr.scenecore.runtime.SurfaceEntity.StereoMode.Companion Companion;
    field public static final int MONO = 0; // 0x0
    field public static final int MULTIVIEW_LEFT_PRIMARY = 4; // 0x4
    field public static final int MULTIVIEW_RIGHT_PRIMARY = 5; // 0x5
    field public static final int SIDE_BY_SIDE = 2; // 0x2
    field public static final int TOP_BOTTOM = 1; // 0x1
  }

  public static final class SurfaceEntity.StereoMode.Companion {
    property public static int MONO;
    property public static int MULTIVIEW_LEFT_PRIMARY;
    property public static int MULTIVIEW_RIGHT_PRIMARY;
    property public static int SIDE_BY_SIDE;
    property public static int TOP_BOTTOM;
    field public static final int MONO = 0; // 0x0
    field public static final int MULTIVIEW_LEFT_PRIMARY = 4; // 0x4
    field public static final int MULTIVIEW_RIGHT_PRIMARY = 5; // 0x5
    field public static final int SIDE_BY_SIDE = 2; // 0x2
    field public static final int TOP_BOTTOM = 1; // 0x1
  }

  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.RUNTIME) public static @interface SurfaceEntity.SuperSampling {
    field public static final androidx.xr.scenecore.runtime.SurfaceEntity.SuperSampling.Companion Companion;
    field public static final int DEFAULT = 1; // 0x1
    field public static final int NONE = 0; // 0x0
  }

  public static final class SurfaceEntity.SuperSampling.Companion {
    property public static int DEFAULT;
    property public static int NONE;
    field public static final int DEFAULT = 1; // 0x1
    field public static final int NONE = 0; // 0x0
  }

  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.RUNTIME) public static @interface SurfaceEntity.SurfaceProtection {
    field public static final androidx.xr.scenecore.runtime.SurfaceEntity.SurfaceProtection.Companion Companion;
    field public static final int NONE = 0; // 0x0
    field public static final int PROTECTED = 1; // 0x1
  }

  public static final class SurfaceEntity.SurfaceProtection.Companion {
    property public static int NONE;
    property public static int PROTECTED;
    field public static final int NONE = 0; // 0x0
    field public static final int PROTECTED = 1; // 0x1
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public interface SurfaceFeature extends androidx.xr.scenecore.runtime.RenderingFeature {
    method @InaccessibleFromKotlin public int getColorRange();
    method @InaccessibleFromKotlin public int getColorSpace();
    method @InaccessibleFromKotlin public int getColorTransfer();
    method @InaccessibleFromKotlin public boolean getContentColorMetadataSet();
    method @InaccessibleFromKotlin public androidx.xr.scenecore.runtime.Dimensions getDimensions();
    method @InaccessibleFromKotlin public androidx.xr.scenecore.runtime.SurfaceEntity.EdgeFeather getEdgeFeather();
    method @InaccessibleFromKotlin public int getMaxContentLightLevel();
    method @InaccessibleFromKotlin public androidx.xr.scenecore.runtime.SurfaceEntity.Shape getShape();
    method @InaccessibleFromKotlin public int getStereoMode();
    method @InaccessibleFromKotlin public android.view.Surface getSurface();
    method public void resetContentColorMetadata();
    method public void setAuxiliaryAlphaMaskTexture(androidx.xr.scenecore.runtime.TextureResource? alphaMask);
    method public void setColliderEnabled(boolean enableCollider);
    method public void setContentColorMetadata(@androidx.xr.scenecore.runtime.SurfaceEntity.ColorSpace int colorSpace, @androidx.xr.scenecore.runtime.SurfaceEntity.ColorTransfer int colorTransfer, @androidx.xr.scenecore.runtime.SurfaceEntity.ColorRange int colorRange, int maxCLL);
    method @InaccessibleFromKotlin public void setEdgeFeather(androidx.xr.scenecore.runtime.SurfaceEntity.EdgeFeather);
    method public void setPrimaryAlphaMaskTexture(androidx.xr.scenecore.runtime.TextureResource? alphaMask);
    method @InaccessibleFromKotlin public void setShape(androidx.xr.scenecore.runtime.SurfaceEntity.Shape);
    method @InaccessibleFromKotlin public void setStereoMode(int);
    property @androidx.xr.scenecore.runtime.SurfaceEntity.ColorRange public abstract int colorRange;
    property @androidx.xr.scenecore.runtime.SurfaceEntity.ColorSpace public abstract int colorSpace;
    property @androidx.xr.scenecore.runtime.SurfaceEntity.ColorTransfer public abstract int colorTransfer;
    property public abstract boolean contentColorMetadataSet;
    property public abstract androidx.xr.scenecore.runtime.Dimensions dimensions;
    property public abstract androidx.xr.scenecore.runtime.SurfaceEntity.EdgeFeather edgeFeather;
    property public abstract int maxContentLightLevel;
    property public abstract androidx.xr.scenecore.runtime.SurfaceEntity.Shape shape;
    property @androidx.xr.scenecore.runtime.SurfaceEntity.StereoMode public abstract int stereoMode;
    property public abstract android.view.Surface surface;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public interface SystemSpaceEntity extends androidx.xr.scenecore.runtime.Entity {
    method public void setOnSpaceUpdatedListener(Runnable? listener, java.util.concurrent.Executor? executor);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public interface TextureResource extends androidx.xr.scenecore.runtime.Resource {
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class TextureSampler {
    ctor public TextureSampler(@androidx.xr.scenecore.runtime.TextureSampler.WrapMode int wrapModeS, @androidx.xr.scenecore.runtime.TextureSampler.WrapMode int wrapModeT, @androidx.xr.scenecore.runtime.TextureSampler.WrapMode int wrapModeR, @androidx.xr.scenecore.runtime.TextureSampler.WrapMode int minFilter, @androidx.xr.scenecore.runtime.TextureSampler.WrapMode int magFilter, @androidx.xr.scenecore.runtime.TextureSampler.WrapMode int compareMode, @androidx.xr.scenecore.runtime.TextureSampler.WrapMode int compareFunc, @androidx.xr.scenecore.runtime.TextureSampler.WrapMode int anisotropyLog2);
    method @InaccessibleFromKotlin public int getAnisotropyLog2();
    method @InaccessibleFromKotlin public int getCompareFunc();
    method @InaccessibleFromKotlin public int getCompareMode();
    method @InaccessibleFromKotlin public int getMagFilter();
    method @InaccessibleFromKotlin public int getMinFilter();
    method @InaccessibleFromKotlin public int getWrapModeR();
    method @InaccessibleFromKotlin public int getWrapModeS();
    method @InaccessibleFromKotlin public int getWrapModeT();
    property public int anisotropyLog2;
    property public int compareFunc;
    property public int compareMode;
    property public int magFilter;
    property public int minFilter;
    property public int wrapModeR;
    property public int wrapModeS;
    property public int wrapModeT;
    field public static final int A = 6; // 0x6
    field public static final int CLAMP_TO_EDGE = 0; // 0x0
    field public static final int COMPARE_TO_TEXTURE = 1; // 0x1
    field public static final androidx.xr.scenecore.runtime.TextureSampler.Companion Companion;
    field public static final int E = 4; // 0x4
    field public static final int G = 3; // 0x3
    field public static final int GE = 1; // 0x1
    field public static final int L = 2; // 0x2
    field public static final int LE = 0; // 0x0
    field public static final int LINEAR = 1; // 0x1
    field public static final int LINEAR_MIPMAP_LINEAR = 5; // 0x5
    field public static final int LINEAR_MIPMAP_NEAREST = 3; // 0x3
    field public static final int MAG_LINEAR = 1; // 0x1
    field public static final int MAG_NEAREST = 0; // 0x0
    field public static final int MIRRORED_REPEAT = 2; // 0x2
    field public static final int N = 7; // 0x7
    field public static final int NE = 5; // 0x5
    field public static final int NEAREST = 0; // 0x0
    field public static final int NEAREST_MIPMAP_LINEAR = 4; // 0x4
    field public static final int NEAREST_MIPMAP_NEAREST = 2; // 0x2
    field public static final int NONE = 0; // 0x0
    field public static final int REPEAT = 1; // 0x1
  }

  public static final class TextureSampler.Companion {
    property public static int A;
    property public static int CLAMP_TO_EDGE;
    property public static int COMPARE_TO_TEXTURE;
    property public static int E;
    property public static int G;
    property public static int GE;
    property public static int L;
    property public static int LE;
    property public static int LINEAR;
    property public static int LINEAR_MIPMAP_LINEAR;
    property public static int LINEAR_MIPMAP_NEAREST;
    property public static int MAG_LINEAR;
    property public static int MAG_NEAREST;
    property public static int MIRRORED_REPEAT;
    property public static int N;
    property public static int NE;
    property public static int NEAREST;
    property public static int NEAREST_MIPMAP_LINEAR;
    property public static int NEAREST_MIPMAP_NEAREST;
    property public static int NONE;
    property public static int REPEAT;
  }

  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.RUNTIME) public static @interface TextureSampler.CompareFunc {
    field public static final int A = 6; // 0x6
    field public static final androidx.xr.scenecore.runtime.TextureSampler.CompareFunc.Companion Companion;
    field public static final int E = 4; // 0x4
    field public static final int G = 3; // 0x3
    field public static final int GE = 1; // 0x1
    field public static final int L = 2; // 0x2
    field public static final int LE = 0; // 0x0
    field public static final int N = 7; // 0x7
    field public static final int NE = 5; // 0x5
  }

  public static final class TextureSampler.CompareFunc.Companion {
    property public static int A;
    property public static int E;
    property public static int G;
    property public static int GE;
    property public static int L;
    property public static int LE;
    property public static int N;
    property public static int NE;
    field public static final int A = 6; // 0x6
    field public static final int E = 4; // 0x4
    field public static final int G = 3; // 0x3
    field public static final int GE = 1; // 0x1
    field public static final int L = 2; // 0x2
    field public static final int LE = 0; // 0x0
    field public static final int N = 7; // 0x7
    field public static final int NE = 5; // 0x5
  }

  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.RUNTIME) public static @interface TextureSampler.CompareMode {
    field public static final int COMPARE_TO_TEXTURE = 1; // 0x1
    field public static final androidx.xr.scenecore.runtime.TextureSampler.CompareMode.Companion Companion;
    field public static final int NONE = 0; // 0x0
  }

  public static final class TextureSampler.CompareMode.Companion {
    property public static int COMPARE_TO_TEXTURE;
    property public static int NONE;
    field public static final int COMPARE_TO_TEXTURE = 1; // 0x1
    field public static final int NONE = 0; // 0x0
  }

  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.RUNTIME) public static @interface TextureSampler.MagFilter {
    field public static final androidx.xr.scenecore.runtime.TextureSampler.MagFilter.Companion Companion;
    field public static final int LINEAR = 1; // 0x1
    field public static final int NEAREST = 0; // 0x0
  }

  public static final class TextureSampler.MagFilter.Companion {
    property public static int LINEAR;
    property public static int NEAREST;
    field public static final int LINEAR = 1; // 0x1
    field public static final int NEAREST = 0; // 0x0
  }

  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.RUNTIME) public static @interface TextureSampler.MinFilter {
    field public static final androidx.xr.scenecore.runtime.TextureSampler.MinFilter.Companion Companion;
    field public static final int LINEAR = 1; // 0x1
    field public static final int LINEAR_MIPMAP_LINEAR = 5; // 0x5
    field public static final int LINEAR_MIPMAP_NEAREST = 3; // 0x3
    field public static final int NEAREST = 0; // 0x0
    field public static final int NEAREST_MIPMAP_LINEAR = 4; // 0x4
    field public static final int NEAREST_MIPMAP_NEAREST = 2; // 0x2
  }

  public static final class TextureSampler.MinFilter.Companion {
    property public static int LINEAR;
    property public static int LINEAR_MIPMAP_LINEAR;
    property public static int LINEAR_MIPMAP_NEAREST;
    property public static int NEAREST;
    property public static int NEAREST_MIPMAP_LINEAR;
    property public static int NEAREST_MIPMAP_NEAREST;
    field public static final int LINEAR = 1; // 0x1
    field public static final int LINEAR_MIPMAP_LINEAR = 5; // 0x5
    field public static final int LINEAR_MIPMAP_NEAREST = 3; // 0x3
    field public static final int NEAREST = 0; // 0x0
    field public static final int NEAREST_MIPMAP_LINEAR = 4; // 0x4
    field public static final int NEAREST_MIPMAP_NEAREST = 2; // 0x2
  }

  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.RUNTIME) public static @interface TextureSampler.WrapMode {
    field public static final int CLAMP_TO_EDGE = 0; // 0x0
    field public static final androidx.xr.scenecore.runtime.TextureSampler.WrapMode.Companion Companion;
    field public static final int MIRRORED_REPEAT = 2; // 0x2
    field public static final int REPEAT = 1; // 0x1
  }

  public static final class TextureSampler.WrapMode.Companion {
    property public static int CLAMP_TO_EDGE;
    property public static int MIRRORED_REPEAT;
    property public static int REPEAT;
    field public static final int CLAMP_TO_EDGE = 0; // 0x0
    field public static final int MIRRORED_REPEAT = 2; // 0x2
    field public static final int REPEAT = 1; // 0x1
  }

}

package androidx.xr.scenecore.runtime.extensions {

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class XrExtensionsProvider {
    method public static com.android.extensions.xr.XrExtensions? getXrExtensions();
    field public static final androidx.xr.scenecore.runtime.extensions.XrExtensionsProvider INSTANCE;
  }

}

