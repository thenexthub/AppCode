// Signature format: 4.0
package androidx.xr.arcore.runtime {

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public interface Anchor {
    method public void detach();
    method @InaccessibleFromKotlin public androidx.xr.arcore.runtime.Anchor.PersistenceState getPersistenceState();
    method @InaccessibleFromKotlin public androidx.xr.runtime.math.Pose getPose();
    method @InaccessibleFromKotlin public androidx.xr.runtime.TrackingState getTrackingState();
    method @InaccessibleFromKotlin public java.util.UUID? getUuid();
    method public void persist();
    property public abstract androidx.xr.arcore.runtime.Anchor.PersistenceState persistenceState;
    property public abstract androidx.xr.runtime.math.Pose pose;
    property public abstract androidx.xr.runtime.TrackingState trackingState;
    property public abstract java.util.UUID? uuid;
  }

  public static final class Anchor.PersistenceState {
    field public static final androidx.xr.arcore.runtime.Anchor.PersistenceState.Companion Companion;
    field public static final androidx.xr.arcore.runtime.Anchor.PersistenceState NOT_PERSISTED;
    field public static final androidx.xr.arcore.runtime.Anchor.PersistenceState PENDING;
    field public static final androidx.xr.arcore.runtime.Anchor.PersistenceState PERSISTED;
  }

  public static final class Anchor.PersistenceState.Companion {
    property public androidx.xr.arcore.runtime.Anchor.PersistenceState NOT_PERSISTED;
    property public androidx.xr.arcore.runtime.Anchor.PersistenceState PENDING;
    property public androidx.xr.arcore.runtime.Anchor.PersistenceState PERSISTED;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public class AnchorException extends java.lang.Exception {
    ctor public AnchorException(String message, optional Throwable? cause);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class AnchorInvalidUuidException extends androidx.xr.arcore.runtime.AnchorException {
    ctor public AnchorInvalidUuidException();
    ctor public AnchorInvalidUuidException(optional Throwable? cause);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class AnchorNotAuthorizedException extends androidx.xr.arcore.runtime.AnchorException {
    ctor public AnchorNotAuthorizedException();
    ctor public AnchorNotAuthorizedException(optional Throwable? cause);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class AnchorNotTrackingException extends androidx.xr.arcore.runtime.AnchorException {
    ctor public AnchorNotTrackingException();
    ctor public AnchorNotTrackingException(optional Throwable? cause);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class AnchorResourcesExhaustedException extends androidx.xr.arcore.runtime.AnchorException {
    ctor public AnchorResourcesExhaustedException();
    ctor public AnchorResourcesExhaustedException(optional Throwable? cause);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class AnchorUnsupportedLocationException extends androidx.xr.arcore.runtime.AnchorException {
    ctor public AnchorUnsupportedLocationException();
    ctor public AnchorUnsupportedLocationException(optional Throwable? cause);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public interface ArDevice {
    method @InaccessibleFromKotlin public androidx.xr.runtime.math.Pose getDevicePose();
    property public abstract androidx.xr.runtime.math.Pose devicePose;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public interface AugmentedObject extends androidx.xr.arcore.runtime.Trackable {
    method @InaccessibleFromKotlin public androidx.xr.runtime.AugmentedObjectCategory getCategory();
    method @InaccessibleFromKotlin public androidx.xr.runtime.math.Pose getCenterPose();
    method @InaccessibleFromKotlin public androidx.xr.runtime.math.FloatSize3d getExtents();
    property public abstract androidx.xr.runtime.AugmentedObjectCategory category;
    property public abstract androidx.xr.runtime.math.Pose centerPose;
    property public abstract androidx.xr.runtime.math.FloatSize3d extents;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public interface DepthMap {
    method @InaccessibleFromKotlin public int getHeight();
    method @InaccessibleFromKotlin public java.nio.ByteBuffer? getRawConfidenceMap();
    method @InaccessibleFromKotlin public java.nio.FloatBuffer? getRawDepthMap();
    method @InaccessibleFromKotlin public java.nio.ByteBuffer? getSmoothConfidenceMap();
    method @InaccessibleFromKotlin public java.nio.FloatBuffer? getSmoothDepthMap();
    method @InaccessibleFromKotlin public int getWidth();
    property public abstract int height;
    property public abstract java.nio.ByteBuffer? rawConfidenceMap;
    property public abstract java.nio.FloatBuffer? rawDepthMap;
    property public abstract java.nio.ByteBuffer? smoothConfidenceMap;
    property public abstract java.nio.FloatBuffer? smoothDepthMap;
    property public abstract int width;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public interface Earth {
    method public androidx.xr.arcore.runtime.Anchor createAnchor(double latitude, double longitude, double altitude, androidx.xr.runtime.math.Quaternion eastUpSouthQuaternion);
    method public suspend Object? createAnchorOnSurface(double latitude, double longitude, double altitudeAboveSurface, androidx.xr.runtime.math.Quaternion eastUpSouthQuaternion, androidx.xr.arcore.runtime.Earth.Surface surface, kotlin.coroutines.Continuation<? super androidx.xr.arcore.runtime.Anchor>);
    method public androidx.xr.arcore.runtime.Earth.GeospatialPoseResult createGeospatialPoseFromDevicePose();
    method public androidx.xr.arcore.runtime.Earth.GeospatialPoseResult createGeospatialPoseFromPose(androidx.xr.runtime.math.Pose pose);
    method public androidx.xr.runtime.math.Pose createPoseFromGeospatialPose(androidx.xr.runtime.math.GeospatialPose geospatialPose);
    method @InaccessibleFromKotlin public androidx.xr.arcore.runtime.Earth.State getState();
    property public abstract androidx.xr.arcore.runtime.Earth.State state;
  }

  public static final class Earth.GeospatialPoseResult {
    ctor public Earth.GeospatialPoseResult(androidx.xr.runtime.math.GeospatialPose geospatialPose, double horizontalAccuracy, double verticalAccuracy, double orientationYawAccuracy);
    method @InaccessibleFromKotlin public androidx.xr.runtime.math.GeospatialPose getGeospatialPose();
    method @InaccessibleFromKotlin public double getHorizontalAccuracy();
    method @InaccessibleFromKotlin public double getOrientationYawAccuracy();
    method @InaccessibleFromKotlin public double getVerticalAccuracy();
    property public androidx.xr.runtime.math.GeospatialPose geospatialPose;
    property public double horizontalAccuracy;
    property public double orientationYawAccuracy;
    property public double verticalAccuracy;
  }

  public static final class Earth.State {
    field public static final androidx.xr.arcore.runtime.Earth.State.Companion Companion;
    field public static final androidx.xr.arcore.runtime.Earth.State ERROR_APK_VERSION_TOO_OLD;
    field public static final androidx.xr.arcore.runtime.Earth.State ERROR_APP_PREEMPTED;
    field public static final androidx.xr.arcore.runtime.Earth.State ERROR_INTERNAL;
    field public static final androidx.xr.arcore.runtime.Earth.State ERROR_NOT_AUTHORIZED;
    field public static final androidx.xr.arcore.runtime.Earth.State ERROR_RESOURCES_EXHAUSTED;
    field public static final androidx.xr.arcore.runtime.Earth.State RUNNING;
    field public static final androidx.xr.arcore.runtime.Earth.State STOPPED;
  }

  public static final class Earth.State.Companion {
    property public androidx.xr.arcore.runtime.Earth.State ERROR_APK_VERSION_TOO_OLD;
    property public androidx.xr.arcore.runtime.Earth.State ERROR_APP_PREEMPTED;
    property public androidx.xr.arcore.runtime.Earth.State ERROR_INTERNAL;
    property public androidx.xr.arcore.runtime.Earth.State ERROR_NOT_AUTHORIZED;
    property public androidx.xr.arcore.runtime.Earth.State ERROR_RESOURCES_EXHAUSTED;
    property public androidx.xr.arcore.runtime.Earth.State RUNNING;
    property public androidx.xr.arcore.runtime.Earth.State STOPPED;
  }

  public static final class Earth.Surface {
    field public static final androidx.xr.arcore.runtime.Earth.Surface.Companion Companion;
    field public static final androidx.xr.arcore.runtime.Earth.Surface ROOFTOP;
    field public static final androidx.xr.arcore.runtime.Earth.Surface TERRAIN;
  }

  public static final class Earth.Surface.Companion {
    property public androidx.xr.arcore.runtime.Earth.Surface ROOFTOP;
    property public androidx.xr.arcore.runtime.Earth.Surface TERRAIN;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public interface ExportableAnchor extends androidx.xr.arcore.runtime.Anchor {
    method @InaccessibleFromKotlin public android.os.IBinder getAnchorToken();
    method @InaccessibleFromKotlin public long getNativePointer();
    property public abstract android.os.IBinder anchorToken;
    property public abstract long nativePointer;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public interface Eye {
    method @InaccessibleFromKotlin public androidx.xr.runtime.math.Pose? getCoarsePose();
    method @InaccessibleFromKotlin public androidx.xr.arcore.runtime.EyeStatus? getCoarseStatus();
    method @InaccessibleFromKotlin public androidx.xr.runtime.math.Pose? getFinePose();
    method @InaccessibleFromKotlin public androidx.xr.arcore.runtime.EyeStatus? getFineStatus();
    property public abstract androidx.xr.runtime.math.Pose? coarsePose;
    property public abstract androidx.xr.arcore.runtime.EyeStatus? coarseStatus;
    property public abstract androidx.xr.runtime.math.Pose? finePose;
    property public abstract androidx.xr.arcore.runtime.EyeStatus? fineStatus;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class EyeStatus {
    ctor public EyeStatus(int value);
    field public static final androidx.xr.arcore.runtime.EyeStatus.Companion Companion;
    field public static final androidx.xr.arcore.runtime.EyeStatus GAZING;
    field public static final androidx.xr.arcore.runtime.EyeStatus INVALID;
    field public static final androidx.xr.arcore.runtime.EyeStatus SHUT;
  }

  public static final class EyeStatus.Companion {
    property public androidx.xr.arcore.runtime.EyeStatus GAZING;
    property public androidx.xr.arcore.runtime.EyeStatus INVALID;
    property public androidx.xr.arcore.runtime.EyeStatus SHUT;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public interface Face {
    method @InaccessibleFromKotlin public float[] getBlendShapeValues();
    method @InaccessibleFromKotlin public float[] getConfidenceValues();
    method @InaccessibleFromKotlin public androidx.xr.runtime.TrackingState getTrackingState();
    method @InaccessibleFromKotlin public boolean isValid();
    property public abstract float[] blendShapeValues;
    property public abstract float[] confidenceValues;
    property public abstract boolean isValid;
    property public abstract androidx.xr.runtime.TrackingState trackingState;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public class GeospatialPoseException extends java.lang.Exception {
    ctor public GeospatialPoseException(String message, optional Throwable? cause);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class GeospatialPoseNotTrackingException extends androidx.xr.arcore.runtime.GeospatialPoseException {
    ctor public GeospatialPoseNotTrackingException();
    ctor public GeospatialPoseNotTrackingException(optional Throwable? cause);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public interface Hand {
    method @InaccessibleFromKotlin public default java.util.Map<androidx.xr.arcore.runtime.HandJointType,androidx.xr.runtime.math.Pose> getHandJoints();
    method @InaccessibleFromKotlin public java.nio.FloatBuffer getHandJointsBuffer();
    method @InaccessibleFromKotlin public androidx.xr.runtime.TrackingState getTrackingState();
    method public static java.util.Map<androidx.xr.arcore.runtime.HandJointType,androidx.xr.runtime.math.Pose> parseHandJoint(androidx.xr.runtime.TrackingState trackingState, java.nio.FloatBuffer handJointsBuffer);
    property public default java.util.Map<androidx.xr.arcore.runtime.HandJointType,androidx.xr.runtime.math.Pose> handJoints;
    property public abstract java.nio.FloatBuffer handJointsBuffer;
    property public abstract androidx.xr.runtime.TrackingState trackingState;
    field public static final androidx.xr.arcore.runtime.Hand.Companion Companion;
  }

  public static final class Hand.Companion {
    method public java.util.Map<androidx.xr.arcore.runtime.HandJointType,androidx.xr.runtime.math.Pose> parseHandJoint(androidx.xr.runtime.TrackingState trackingState, java.nio.FloatBuffer handJointsBuffer);
  }

  public enum HandJointType {
    enum_constant public static final androidx.xr.arcore.runtime.HandJointType HAND_JOINT_TYPE_INDEX_DISTAL;
    enum_constant public static final androidx.xr.arcore.runtime.HandJointType HAND_JOINT_TYPE_INDEX_INTERMEDIATE;
    enum_constant public static final androidx.xr.arcore.runtime.HandJointType HAND_JOINT_TYPE_INDEX_METACARPAL;
    enum_constant public static final androidx.xr.arcore.runtime.HandJointType HAND_JOINT_TYPE_INDEX_PROXIMAL;
    enum_constant public static final androidx.xr.arcore.runtime.HandJointType HAND_JOINT_TYPE_INDEX_TIP;
    enum_constant public static final androidx.xr.arcore.runtime.HandJointType HAND_JOINT_TYPE_LITTLE_DISTAL;
    enum_constant public static final androidx.xr.arcore.runtime.HandJointType HAND_JOINT_TYPE_LITTLE_INTERMEDIATE;
    enum_constant public static final androidx.xr.arcore.runtime.HandJointType HAND_JOINT_TYPE_LITTLE_METACARPAL;
    enum_constant public static final androidx.xr.arcore.runtime.HandJointType HAND_JOINT_TYPE_LITTLE_PROXIMAL;
    enum_constant public static final androidx.xr.arcore.runtime.HandJointType HAND_JOINT_TYPE_LITTLE_TIP;
    enum_constant public static final androidx.xr.arcore.runtime.HandJointType HAND_JOINT_TYPE_MIDDLE_DISTAL;
    enum_constant public static final androidx.xr.arcore.runtime.HandJointType HAND_JOINT_TYPE_MIDDLE_INTERMEDIATE;
    enum_constant public static final androidx.xr.arcore.runtime.HandJointType HAND_JOINT_TYPE_MIDDLE_METACARPAL;
    enum_constant public static final androidx.xr.arcore.runtime.HandJointType HAND_JOINT_TYPE_MIDDLE_PROXIMAL;
    enum_constant public static final androidx.xr.arcore.runtime.HandJointType HAND_JOINT_TYPE_MIDDLE_TIP;
    enum_constant public static final androidx.xr.arcore.runtime.HandJointType HAND_JOINT_TYPE_PALM;
    enum_constant public static final androidx.xr.arcore.runtime.HandJointType HAND_JOINT_TYPE_RING_DISTAL;
    enum_constant public static final androidx.xr.arcore.runtime.HandJointType HAND_JOINT_TYPE_RING_INTERMEDIATE;
    enum_constant public static final androidx.xr.arcore.runtime.HandJointType HAND_JOINT_TYPE_RING_METACARPAL;
    enum_constant public static final androidx.xr.arcore.runtime.HandJointType HAND_JOINT_TYPE_RING_PROXIMAL;
    enum_constant public static final androidx.xr.arcore.runtime.HandJointType HAND_JOINT_TYPE_RING_TIP;
    enum_constant public static final androidx.xr.arcore.runtime.HandJointType HAND_JOINT_TYPE_THUMB_DISTAL;
    enum_constant public static final androidx.xr.arcore.runtime.HandJointType HAND_JOINT_TYPE_THUMB_METACARPAL;
    enum_constant public static final androidx.xr.arcore.runtime.HandJointType HAND_JOINT_TYPE_THUMB_PROXIMAL;
    enum_constant public static final androidx.xr.arcore.runtime.HandJointType HAND_JOINT_TYPE_THUMB_TIP;
    enum_constant public static final androidx.xr.arcore.runtime.HandJointType HAND_JOINT_TYPE_WRIST;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class HitResult {
    ctor public HitResult(float distance, androidx.xr.runtime.math.Pose hitPose, androidx.xr.arcore.runtime.Trackable trackable);
    method @InaccessibleFromKotlin public float getDistance();
    method @InaccessibleFromKotlin public androidx.xr.runtime.math.Pose getHitPose();
    method @InaccessibleFromKotlin public androidx.xr.arcore.runtime.Trackable getTrackable();
    property public float distance;
    property public androidx.xr.runtime.math.Pose hitPose;
    property public androidx.xr.arcore.runtime.Trackable trackable;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public interface PerceptionManager {
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public suspend Object? checkVpsAvailability(double latitude, double longitude, kotlin.coroutines.Continuation<? super androidx.xr.runtime.VpsAvailabilityResult>);
    method public androidx.xr.arcore.runtime.Anchor createAnchor(androidx.xr.runtime.math.Pose pose);
    method @InaccessibleFromKotlin @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public androidx.xr.arcore.runtime.ArDevice getArDevice();
    method @InaccessibleFromKotlin @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public androidx.xr.arcore.runtime.Earth getEarth();
    method @InaccessibleFromKotlin @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public androidx.xr.arcore.runtime.DepthMap? getLeftDepthMap();
    method @InaccessibleFromKotlin public androidx.xr.arcore.runtime.Eye? getLeftEye();
    method @InaccessibleFromKotlin public androidx.xr.arcore.runtime.Hand? getLeftHand();
    method @InaccessibleFromKotlin @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public androidx.xr.arcore.runtime.RenderViewpoint? getLeftRenderViewpoint();
    method @InaccessibleFromKotlin @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public androidx.xr.arcore.runtime.DepthMap? getMonoDepthMap();
    method @InaccessibleFromKotlin @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public androidx.xr.arcore.runtime.RenderViewpoint? getMonoRenderViewpoint();
    method public java.util.List<java.util.UUID> getPersistedAnchorUuids();
    method @InaccessibleFromKotlin @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public androidx.xr.arcore.runtime.DepthMap? getRightDepthMap();
    method @InaccessibleFromKotlin public androidx.xr.arcore.runtime.Eye? getRightEye();
    method @InaccessibleFromKotlin public androidx.xr.arcore.runtime.Hand? getRightHand();
    method @InaccessibleFromKotlin @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public androidx.xr.arcore.runtime.RenderViewpoint? getRightRenderViewpoint();
    method @InaccessibleFromKotlin public java.util.Collection<androidx.xr.arcore.runtime.Trackable> getTrackables();
    method @InaccessibleFromKotlin @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public androidx.xr.arcore.runtime.Face? getUserFace();
    method public java.util.List<androidx.xr.arcore.runtime.HitResult> hitTest(androidx.xr.runtime.math.Ray ray);
    method public androidx.xr.arcore.runtime.Anchor loadAnchor(java.util.UUID uuid);
    method public androidx.xr.arcore.runtime.Anchor loadAnchorFromNativePointer(long nativePointer);
    method public void unpersistAnchor(java.util.UUID uuid);
    property @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public abstract androidx.xr.arcore.runtime.ArDevice arDevice;
    property @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public abstract androidx.xr.arcore.runtime.Earth earth;
    property @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public abstract androidx.xr.arcore.runtime.DepthMap? leftDepthMap;
    property public abstract androidx.xr.arcore.runtime.Eye? leftEye;
    property public abstract androidx.xr.arcore.runtime.Hand? leftHand;
    property @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public abstract androidx.xr.arcore.runtime.RenderViewpoint? leftRenderViewpoint;
    property @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public abstract androidx.xr.arcore.runtime.DepthMap? monoDepthMap;
    property @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public abstract androidx.xr.arcore.runtime.RenderViewpoint? monoRenderViewpoint;
    property @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public abstract androidx.xr.arcore.runtime.DepthMap? rightDepthMap;
    property public abstract androidx.xr.arcore.runtime.Eye? rightEye;
    property public abstract androidx.xr.arcore.runtime.Hand? rightHand;
    property @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public abstract androidx.xr.arcore.runtime.RenderViewpoint? rightRenderViewpoint;
    property public abstract java.util.Collection<androidx.xr.arcore.runtime.Trackable> trackables;
    property @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public abstract androidx.xr.arcore.runtime.Face? userFace;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public interface PerceptionRuntime extends androidx.xr.runtime.internal.JxrRuntime {
    method @InaccessibleFromKotlin public androidx.xr.runtime.internal.LifecycleManager getLifecycleManager();
    method @InaccessibleFromKotlin public androidx.xr.arcore.runtime.PerceptionManager getPerceptionManager();
    method public default suspend Object? update(kotlin.coroutines.Continuation<? super kotlin.time.ComparableTimeMark?>);
    property public abstract androidx.xr.runtime.internal.LifecycleManager lifecycleManager;
    property public abstract androidx.xr.arcore.runtime.PerceptionManager perceptionManager;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public interface Plane extends androidx.xr.arcore.runtime.Trackable {
    method @InaccessibleFromKotlin public androidx.xr.runtime.math.Pose getCenterPose();
    method @InaccessibleFromKotlin public androidx.xr.runtime.math.FloatSize2d getExtents();
    method @InaccessibleFromKotlin public androidx.xr.arcore.runtime.Plane.Label getLabel();
    method @InaccessibleFromKotlin public androidx.xr.arcore.runtime.Plane? getSubsumedBy();
    method @InaccessibleFromKotlin public androidx.xr.arcore.runtime.Plane.Type getType();
    method @InaccessibleFromKotlin public java.util.List<androidx.xr.runtime.math.Vector2> getVertices();
    property public abstract androidx.xr.runtime.math.Pose centerPose;
    property public abstract androidx.xr.runtime.math.FloatSize2d extents;
    property public abstract androidx.xr.arcore.runtime.Plane.Label label;
    property public abstract androidx.xr.arcore.runtime.Plane? subsumedBy;
    property public abstract androidx.xr.arcore.runtime.Plane.Type type;
    property public abstract java.util.List<androidx.xr.runtime.math.Vector2> vertices;
  }

  public static final class Plane.Label {
    field public static final androidx.xr.arcore.runtime.Plane.Label CEILING;
    field public static final androidx.xr.arcore.runtime.Plane.Label.Companion Companion;
    field public static final androidx.xr.arcore.runtime.Plane.Label FLOOR;
    field public static final androidx.xr.arcore.runtime.Plane.Label TABLE;
    field public static final androidx.xr.arcore.runtime.Plane.Label UNKNOWN;
    field public static final androidx.xr.arcore.runtime.Plane.Label WALL;
  }

  public static final class Plane.Label.Companion {
    property public androidx.xr.arcore.runtime.Plane.Label CEILING;
    property public androidx.xr.arcore.runtime.Plane.Label FLOOR;
    property public androidx.xr.arcore.runtime.Plane.Label TABLE;
    property public androidx.xr.arcore.runtime.Plane.Label UNKNOWN;
    property public androidx.xr.arcore.runtime.Plane.Label WALL;
  }

  public static final class Plane.Type {
    field public static final androidx.xr.arcore.runtime.Plane.Type.Companion Companion;
    field public static final androidx.xr.arcore.runtime.Plane.Type HORIZONTAL_DOWNWARD_FACING;
    field public static final androidx.xr.arcore.runtime.Plane.Type HORIZONTAL_UPWARD_FACING;
    field public static final androidx.xr.arcore.runtime.Plane.Type VERTICAL;
  }

  public static final class Plane.Type.Companion {
    property public androidx.xr.arcore.runtime.Plane.Type HORIZONTAL_DOWNWARD_FACING;
    property public androidx.xr.arcore.runtime.Plane.Type HORIZONTAL_UPWARD_FACING;
    property public androidx.xr.arcore.runtime.Plane.Type VERTICAL;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public interface RenderViewpoint {
    method @InaccessibleFromKotlin public androidx.xr.runtime.FieldOfView getFieldOfView();
    method @InaccessibleFromKotlin public androidx.xr.runtime.math.Pose getPose();
    property public abstract androidx.xr.runtime.FieldOfView fieldOfView;
    property public abstract androidx.xr.runtime.math.Pose pose;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public interface Trackable {
    method public androidx.xr.arcore.runtime.Anchor createAnchor(androidx.xr.runtime.math.Pose pose);
    method @InaccessibleFromKotlin public androidx.xr.runtime.TrackingState getTrackingState();
    property public abstract androidx.xr.runtime.TrackingState trackingState;
  }

}

