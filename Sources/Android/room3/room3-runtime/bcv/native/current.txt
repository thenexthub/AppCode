// Klib ABI Dump
// Targets: [iosArm64, iosSimulatorArm64, iosX64, linuxArm64, linuxX64, macosArm64, macosX64, tvosArm64, tvosSimulatorArm64, tvosX64, watchosArm32, watchosArm64, watchosDeviceArm64, watchosSimulatorArm64, watchosX64]
// Rendering settings:
// - Signature version: 2
// - Show manifest properties: true
// - Show declarations: true

// Library unique name: <androidx.room3:room3-runtime>
open annotation class androidx.room3/ExperimentalRoomApi : kotlin/Annotation { // androidx.room3/ExperimentalRoomApi|null[0]
    constructor <init>() // androidx.room3/ExperimentalRoomApi.<init>|<init>(){}[0]
}

abstract interface <#A: androidx.room3/RoomDatabase> androidx.room3/RoomDatabaseConstructor { // androidx.room3/RoomDatabaseConstructor|null[0]
    abstract fun initialize(): #A // androidx.room3/RoomDatabaseConstructor.initialize|initialize(){}[0]
}

abstract interface <#A: kotlin/Any?> androidx.room3/TransactionScope : androidx.room3/PooledConnection { // androidx.room3/TransactionScope|null[0]
    abstract suspend fun <#A1: kotlin/Any?> withNestedTransaction(kotlin.coroutines/SuspendFunction1<androidx.room3/TransactionScope<#A1>, #A1>): #A1 // androidx.room3/TransactionScope.withNestedTransaction|withNestedTransaction(kotlin.coroutines.SuspendFunction1<androidx.room3.TransactionScope<0:0>,0:0>){0ยง<kotlin.Any?>}[0]
    abstract suspend fun rollback(#A): kotlin/Nothing // androidx.room3/TransactionScope.rollback|rollback(1:0){}[0]
}

abstract interface androidx.room3.migration/AutoMigrationSpec { // androidx.room3.migration/AutoMigrationSpec|null[0]
    open fun onPostMigrate(androidx.sqlite/SQLiteConnection) // androidx.room3.migration/AutoMigrationSpec.onPostMigrate|onPostMigrate(androidx.sqlite.SQLiteConnection){}[0]
}

abstract interface androidx.room3/PooledConnection { // androidx.room3/PooledConnection|null[0]
    abstract suspend fun <#A1: kotlin/Any?> usePrepared(kotlin/String, kotlin/Function1<androidx.sqlite/SQLiteStatement, #A1>): #A1 // androidx.room3/PooledConnection.usePrepared|usePrepared(kotlin.String;kotlin.Function1<androidx.sqlite.SQLiteStatement,0:0>){0ยง<kotlin.Any?>}[0]
}

abstract interface androidx.room3/RoomOpenDelegateMarker // androidx.room3/RoomOpenDelegateMarker|null[0]

abstract interface androidx.room3/Transactor : androidx.room3/PooledConnection { // androidx.room3/Transactor|null[0]
    abstract suspend fun <#A1: kotlin/Any?> withTransaction(androidx.room3/Transactor.SQLiteTransactionType, kotlin.coroutines/SuspendFunction1<androidx.room3/TransactionScope<#A1>, #A1>): #A1 // androidx.room3/Transactor.withTransaction|withTransaction(androidx.room3.Transactor.SQLiteTransactionType;kotlin.coroutines.SuspendFunction1<androidx.room3.TransactionScope<0:0>,0:0>){0ยง<kotlin.Any?>}[0]
    abstract suspend fun inTransaction(): kotlin/Boolean // androidx.room3/Transactor.inTransaction|inTransaction(){}[0]

    final enum class SQLiteTransactionType : kotlin/Enum<androidx.room3/Transactor.SQLiteTransactionType> { // androidx.room3/Transactor.SQLiteTransactionType|null[0]
        enum entry DEFERRED // androidx.room3/Transactor.SQLiteTransactionType.DEFERRED|null[0]
        enum entry EXCLUSIVE // androidx.room3/Transactor.SQLiteTransactionType.EXCLUSIVE|null[0]
        enum entry IMMEDIATE // androidx.room3/Transactor.SQLiteTransactionType.IMMEDIATE|null[0]

        final val entries // androidx.room3/Transactor.SQLiteTransactionType.entries|#static{}entries[0]
            final fun <get-entries>(): kotlin.enums/EnumEntries<androidx.room3/Transactor.SQLiteTransactionType> // androidx.room3/Transactor.SQLiteTransactionType.entries.<get-entries>|<get-entries>#static(){}[0]

        final fun valueOf(kotlin/String): androidx.room3/Transactor.SQLiteTransactionType // androidx.room3/Transactor.SQLiteTransactionType.valueOf|valueOf#static(kotlin.String){}[0]
        final fun values(): kotlin/Array<androidx.room3/Transactor.SQLiteTransactionType> // androidx.room3/Transactor.SQLiteTransactionType.values|values#static(){}[0]
    }
}

abstract class <#A: kotlin/Any?> androidx.room3/EntityDeleteOrUpdateAdapter { // androidx.room3/EntityDeleteOrUpdateAdapter|null[0]
    constructor <init>() // androidx.room3/EntityDeleteOrUpdateAdapter.<init>|<init>(){}[0]

    abstract fun bind(androidx.sqlite/SQLiteStatement, #A) // androidx.room3/EntityDeleteOrUpdateAdapter.bind|bind(androidx.sqlite.SQLiteStatement;1:0){}[0]
    abstract fun createQuery(): kotlin/String // androidx.room3/EntityDeleteOrUpdateAdapter.createQuery|createQuery(){}[0]
    final fun handle(androidx.sqlite/SQLiteConnection, #A?): kotlin/Int // androidx.room3/EntityDeleteOrUpdateAdapter.handle|handle(androidx.sqlite.SQLiteConnection;1:0?){}[0]
    final fun handleMultiple(androidx.sqlite/SQLiteConnection, kotlin.collections/Iterable<#A?>?): kotlin/Int // androidx.room3/EntityDeleteOrUpdateAdapter.handleMultiple|handleMultiple(androidx.sqlite.SQLiteConnection;kotlin.collections.Iterable<1:0?>?){}[0]
    final fun handleMultiple(androidx.sqlite/SQLiteConnection, kotlin/Array<out #A?>?): kotlin/Int // androidx.room3/EntityDeleteOrUpdateAdapter.handleMultiple|handleMultiple(androidx.sqlite.SQLiteConnection;kotlin.Array<out|1:0?>?){}[0]
}

abstract class <#A: kotlin/Any?> androidx.room3/EntityInsertAdapter { // androidx.room3/EntityInsertAdapter|null[0]
    constructor <init>() // androidx.room3/EntityInsertAdapter.<init>|<init>(){}[0]

    abstract fun bind(androidx.sqlite/SQLiteStatement, #A) // androidx.room3/EntityInsertAdapter.bind|bind(androidx.sqlite.SQLiteStatement;1:0){}[0]
    abstract fun createQuery(): kotlin/String // androidx.room3/EntityInsertAdapter.createQuery|createQuery(){}[0]
    final fun insert(androidx.sqlite/SQLiteConnection, #A?) // androidx.room3/EntityInsertAdapter.insert|insert(androidx.sqlite.SQLiteConnection;1:0?){}[0]
    final fun insert(androidx.sqlite/SQLiteConnection, kotlin.collections/Iterable<#A?>?) // androidx.room3/EntityInsertAdapter.insert|insert(androidx.sqlite.SQLiteConnection;kotlin.collections.Iterable<1:0?>?){}[0]
    final fun insert(androidx.sqlite/SQLiteConnection, kotlin/Array<out #A?>?) // androidx.room3/EntityInsertAdapter.insert|insert(androidx.sqlite.SQLiteConnection;kotlin.Array<out|1:0?>?){}[0]
    final fun insertAndReturnId(androidx.sqlite/SQLiteConnection, #A?): kotlin/Long // androidx.room3/EntityInsertAdapter.insertAndReturnId|insertAndReturnId(androidx.sqlite.SQLiteConnection;1:0?){}[0]
    final fun insertAndReturnIdsArray(androidx.sqlite/SQLiteConnection, kotlin.collections/Collection<#A?>?): kotlin/LongArray // androidx.room3/EntityInsertAdapter.insertAndReturnIdsArray|insertAndReturnIdsArray(androidx.sqlite.SQLiteConnection;kotlin.collections.Collection<1:0?>?){}[0]
    final fun insertAndReturnIdsArray(androidx.sqlite/SQLiteConnection, kotlin/Array<out #A?>?): kotlin/LongArray // androidx.room3/EntityInsertAdapter.insertAndReturnIdsArray|insertAndReturnIdsArray(androidx.sqlite.SQLiteConnection;kotlin.Array<out|1:0?>?){}[0]
    final fun insertAndReturnIdsArrayBox(androidx.sqlite/SQLiteConnection, kotlin.collections/Collection<#A?>?): kotlin/Array<out kotlin/Long> // androidx.room3/EntityInsertAdapter.insertAndReturnIdsArrayBox|insertAndReturnIdsArrayBox(androidx.sqlite.SQLiteConnection;kotlin.collections.Collection<1:0?>?){}[0]
    final fun insertAndReturnIdsArrayBox(androidx.sqlite/SQLiteConnection, kotlin/Array<out #A?>?): kotlin/Array<out kotlin/Long> // androidx.room3/EntityInsertAdapter.insertAndReturnIdsArrayBox|insertAndReturnIdsArrayBox(androidx.sqlite.SQLiteConnection;kotlin.Array<out|1:0?>?){}[0]
    final fun insertAndReturnIdsList(androidx.sqlite/SQLiteConnection, kotlin.collections/Collection<#A?>?): kotlin.collections/List<kotlin/Long> // androidx.room3/EntityInsertAdapter.insertAndReturnIdsList|insertAndReturnIdsList(androidx.sqlite.SQLiteConnection;kotlin.collections.Collection<1:0?>?){}[0]
    final fun insertAndReturnIdsList(androidx.sqlite/SQLiteConnection, kotlin/Array<out #A?>?): kotlin.collections/List<kotlin/Long> // androidx.room3/EntityInsertAdapter.insertAndReturnIdsList|insertAndReturnIdsList(androidx.sqlite.SQLiteConnection;kotlin.Array<out|1:0?>?){}[0]
}

abstract class androidx.room3.migration/Migration { // androidx.room3.migration/Migration|null[0]
    constructor <init>(kotlin/Int, kotlin/Int) // androidx.room3.migration/Migration.<init>|<init>(kotlin.Int;kotlin.Int){}[0]

    final val endVersion // androidx.room3.migration/Migration.endVersion|{}endVersion[0]
        final fun <get-endVersion>(): kotlin/Int // androidx.room3.migration/Migration.endVersion.<get-endVersion>|<get-endVersion>(){}[0]
    final val startVersion // androidx.room3.migration/Migration.startVersion|{}startVersion[0]
        final fun <get-startVersion>(): kotlin/Int // androidx.room3.migration/Migration.startVersion.<get-startVersion>|<get-startVersion>(){}[0]

    open fun migrate(androidx.sqlite/SQLiteConnection) // androidx.room3.migration/Migration.migrate|migrate(androidx.sqlite.SQLiteConnection){}[0]
}

abstract class androidx.room3/BaseRoomConnectionManager { // androidx.room3/BaseRoomConnectionManager|null[0]
    constructor <init>() // androidx.room3/BaseRoomConnectionManager.<init>|<init>(){}[0]

    abstract val callbacks // androidx.room3/BaseRoomConnectionManager.callbacks|{}callbacks[0]
        abstract fun <get-callbacks>(): kotlin.collections/List<androidx.room3/RoomDatabase.Callback> // androidx.room3/BaseRoomConnectionManager.callbacks.<get-callbacks>|<get-callbacks>(){}[0]
    abstract val configuration // androidx.room3/BaseRoomConnectionManager.configuration|{}configuration[0]
        abstract fun <get-configuration>(): androidx.room3/DatabaseConfiguration // androidx.room3/BaseRoomConnectionManager.configuration.<get-configuration>|<get-configuration>(){}[0]
    abstract val openDelegate // androidx.room3/BaseRoomConnectionManager.openDelegate|{}openDelegate[0]
        abstract fun <get-openDelegate>(): androidx.room3/RoomOpenDelegate // androidx.room3/BaseRoomConnectionManager.openDelegate.<get-openDelegate>|<get-openDelegate>(){}[0]

    abstract suspend fun <#A1: kotlin/Any?> useConnection(kotlin/Boolean, kotlin.coroutines/SuspendFunction1<androidx.room3/Transactor, #A1>): #A1 // androidx.room3/BaseRoomConnectionManager.useConnection|useConnection(kotlin.Boolean;kotlin.coroutines.SuspendFunction1<androidx.room3.Transactor,0:0>){0ยง<kotlin.Any?>}[0]
    final fun (androidx.room3/RoomDatabase.JournalMode).getMaxNumberOfReaders(): kotlin/Int // androidx.room3/BaseRoomConnectionManager.getMaxNumberOfReaders|getMaxNumberOfReaders@androidx.room3.RoomDatabase.JournalMode(){}[0]
    final fun (androidx.room3/RoomDatabase.JournalMode).getMaxNumberOfWriters(): kotlin/Int // androidx.room3/BaseRoomConnectionManager.getMaxNumberOfWriters|getMaxNumberOfWriters@androidx.room3.RoomDatabase.JournalMode(){}[0]
    final fun onCreate(androidx.sqlite/SQLiteConnection) // androidx.room3/BaseRoomConnectionManager.onCreate|onCreate(androidx.sqlite.SQLiteConnection){}[0]
    final fun onOpen(androidx.sqlite/SQLiteConnection) // androidx.room3/BaseRoomConnectionManager.onOpen|onOpen(androidx.sqlite.SQLiteConnection){}[0]
    open fun onMigrate(androidx.sqlite/SQLiteConnection, kotlin/Int, kotlin/Int) // androidx.room3/BaseRoomConnectionManager.onMigrate|onMigrate(androidx.sqlite.SQLiteConnection;kotlin.Int;kotlin.Int){}[0]

    final inner class DriverWrapper : androidx.sqlite/SQLiteDriver { // androidx.room3/BaseRoomConnectionManager.DriverWrapper|null[0]
        constructor <init>(androidx.sqlite/SQLiteDriver) // androidx.room3/BaseRoomConnectionManager.DriverWrapper.<init>|<init>(androidx.sqlite.SQLiteDriver){}[0]

        final val hasConnectionPool // androidx.room3/BaseRoomConnectionManager.DriverWrapper.hasConnectionPool|{}hasConnectionPool[0]
            final fun <get-hasConnectionPool>(): kotlin/Boolean // androidx.room3/BaseRoomConnectionManager.DriverWrapper.hasConnectionPool.<get-hasConnectionPool>|<get-hasConnectionPool>(){}[0]

        final fun open(kotlin/String): androidx.sqlite/SQLiteConnection // androidx.room3/BaseRoomConnectionManager.DriverWrapper.open|open(kotlin.String){}[0]
    }

    final object Companion { // androidx.room3/BaseRoomConnectionManager.Companion|null[0]
        final const val BUSY_TIMEOUT_MS // androidx.room3/BaseRoomConnectionManager.Companion.BUSY_TIMEOUT_MS|{}BUSY_TIMEOUT_MS[0]
            final fun <get-BUSY_TIMEOUT_MS>(): kotlin/Int // androidx.room3/BaseRoomConnectionManager.Companion.BUSY_TIMEOUT_MS.<get-BUSY_TIMEOUT_MS>|<get-BUSY_TIMEOUT_MS>(){}[0]
    }
}

abstract class androidx.room3/RoomDatabase { // androidx.room3/RoomDatabase|null[0]
    constructor <init>() // androidx.room3/RoomDatabase.<init>|<init>(){}[0]

    final val invalidationTracker // androidx.room3/RoomDatabase.invalidationTracker|{}invalidationTracker[0]
        final fun <get-invalidationTracker>(): androidx.room3/InvalidationTracker // androidx.room3/RoomDatabase.invalidationTracker.<get-invalidationTracker>|<get-invalidationTracker>(){}[0]

    abstract fun createInvalidationTracker(): androidx.room3/InvalidationTracker // androidx.room3/RoomDatabase.createInvalidationTracker|createInvalidationTracker(){}[0]
    final fun <#A1: kotlin/Any> getTypeConverter(kotlin.reflect/KClass<#A1>): #A1 // androidx.room3/RoomDatabase.getTypeConverter|getTypeConverter(kotlin.reflect.KClass<0:0>){0ยง<kotlin.Any>}[0]
    final fun close() // androidx.room3/RoomDatabase.close|close(){}[0]
    final fun getCoroutineScope(): kotlinx.coroutines/CoroutineScope // androidx.room3/RoomDatabase.getCoroutineScope|getCoroutineScope(){}[0]
    final fun internalInitInvalidationTracker(androidx.sqlite/SQLiteConnection) // androidx.room3/RoomDatabase.internalInitInvalidationTracker|internalInitInvalidationTracker(androidx.sqlite.SQLiteConnection){}[0]
    final suspend fun <#A1: kotlin/Any?> useConnection(kotlin/Boolean, kotlin.coroutines/SuspendFunction1<androidx.room3/Transactor, #A1>): #A1 // androidx.room3/RoomDatabase.useConnection|useConnection(kotlin.Boolean;kotlin.coroutines.SuspendFunction1<androidx.room3.Transactor,0:0>){0ยง<kotlin.Any?>}[0]
    open fun createAutoMigrations(kotlin.collections/Map<kotlin.reflect/KClass<out androidx.room3.migration/AutoMigrationSpec>, androidx.room3.migration/AutoMigrationSpec>): kotlin.collections/List<androidx.room3.migration/Migration> // androidx.room3/RoomDatabase.createAutoMigrations|createAutoMigrations(kotlin.collections.Map<kotlin.reflect.KClass<out|androidx.room3.migration.AutoMigrationSpec>,androidx.room3.migration.AutoMigrationSpec>){}[0]
    open fun createOpenDelegate(): androidx.room3/RoomOpenDelegateMarker // androidx.room3/RoomDatabase.createOpenDelegate|createOpenDelegate(){}[0]
    open fun getRequiredAutoMigrationSpecClasses(): kotlin.collections/Set<kotlin.reflect/KClass<out androidx.room3.migration/AutoMigrationSpec>> // androidx.room3/RoomDatabase.getRequiredAutoMigrationSpecClasses|getRequiredAutoMigrationSpecClasses(){}[0]
    open fun getRequiredTypeConverterClasses(): kotlin.collections/Map<kotlin.reflect/KClass<*>, kotlin.collections/List<kotlin.reflect/KClass<*>>> // androidx.room3/RoomDatabase.getRequiredTypeConverterClasses|getRequiredTypeConverterClasses(){}[0]

    final enum class JournalMode : kotlin/Enum<androidx.room3/RoomDatabase.JournalMode> { // androidx.room3/RoomDatabase.JournalMode|null[0]
        enum entry TRUNCATE // androidx.room3/RoomDatabase.JournalMode.TRUNCATE|null[0]
        enum entry WRITE_AHEAD_LOGGING // androidx.room3/RoomDatabase.JournalMode.WRITE_AHEAD_LOGGING|null[0]

        final val entries // androidx.room3/RoomDatabase.JournalMode.entries|#static{}entries[0]
            final fun <get-entries>(): kotlin.enums/EnumEntries<androidx.room3/RoomDatabase.JournalMode> // androidx.room3/RoomDatabase.JournalMode.entries.<get-entries>|<get-entries>#static(){}[0]

        final fun valueOf(kotlin/String): androidx.room3/RoomDatabase.JournalMode // androidx.room3/RoomDatabase.JournalMode.valueOf|valueOf#static(kotlin.String){}[0]
        final fun values(): kotlin/Array<androidx.room3/RoomDatabase.JournalMode> // androidx.room3/RoomDatabase.JournalMode.values|values#static(){}[0]
    }

    abstract class Callback { // androidx.room3/RoomDatabase.Callback|null[0]
        constructor <init>() // androidx.room3/RoomDatabase.Callback.<init>|<init>(){}[0]

        open fun onCreate(androidx.sqlite/SQLiteConnection) // androidx.room3/RoomDatabase.Callback.onCreate|onCreate(androidx.sqlite.SQLiteConnection){}[0]
        open fun onDestructiveMigration(androidx.sqlite/SQLiteConnection) // androidx.room3/RoomDatabase.Callback.onDestructiveMigration|onDestructiveMigration(androidx.sqlite.SQLiteConnection){}[0]
        open fun onOpen(androidx.sqlite/SQLiteConnection) // androidx.room3/RoomDatabase.Callback.onOpen|onOpen(androidx.sqlite.SQLiteConnection){}[0]
    }

    final class <#A1: androidx.room3/RoomDatabase> Builder { // androidx.room3/RoomDatabase.Builder|null[0]
        constructor <init>(kotlin.reflect/KClass<#A1>, kotlin/String?, kotlin/Function0<#A1>) // androidx.room3/RoomDatabase.Builder.<init>|<init>(kotlin.reflect.KClass<1:0>;kotlin.String?;kotlin.Function0<1:0>){}[0]

        final fun addAutoMigrationSpec(androidx.room3.migration/AutoMigrationSpec): androidx.room3/RoomDatabase.Builder<#A1> // androidx.room3/RoomDatabase.Builder.addAutoMigrationSpec|addAutoMigrationSpec(androidx.room3.migration.AutoMigrationSpec){}[0]
        final fun addCallback(androidx.room3/RoomDatabase.Callback): androidx.room3/RoomDatabase.Builder<#A1> // androidx.room3/RoomDatabase.Builder.addCallback|addCallback(androidx.room3.RoomDatabase.Callback){}[0]
        final fun addMigrations(kotlin/Array<out androidx.room3.migration/Migration>...): androidx.room3/RoomDatabase.Builder<#A1> // androidx.room3/RoomDatabase.Builder.addMigrations|addMigrations(kotlin.Array<out|androidx.room3.migration.Migration>...){}[0]
        final fun addTypeConverter(kotlin/Any): androidx.room3/RoomDatabase.Builder<#A1> // androidx.room3/RoomDatabase.Builder.addTypeConverter|addTypeConverter(kotlin.Any){}[0]
        final fun build(): #A1 // androidx.room3/RoomDatabase.Builder.build|build(){}[0]
        final fun fallbackToDestructiveMigration(kotlin/Boolean): androidx.room3/RoomDatabase.Builder<#A1> // androidx.room3/RoomDatabase.Builder.fallbackToDestructiveMigration|fallbackToDestructiveMigration(kotlin.Boolean){}[0]
        final fun fallbackToDestructiveMigrationFrom(kotlin/Boolean, kotlin/IntArray...): androidx.room3/RoomDatabase.Builder<#A1> // androidx.room3/RoomDatabase.Builder.fallbackToDestructiveMigrationFrom|fallbackToDestructiveMigrationFrom(kotlin.Boolean;kotlin.IntArray...){}[0]
        final fun fallbackToDestructiveMigrationOnDowngrade(kotlin/Boolean): androidx.room3/RoomDatabase.Builder<#A1> // androidx.room3/RoomDatabase.Builder.fallbackToDestructiveMigrationOnDowngrade|fallbackToDestructiveMigrationOnDowngrade(kotlin.Boolean){}[0]
        final fun setDriver(androidx.sqlite/SQLiteDriver): androidx.room3/RoomDatabase.Builder<#A1> // androidx.room3/RoomDatabase.Builder.setDriver|setDriver(androidx.sqlite.SQLiteDriver){}[0]
        final fun setJournalMode(androidx.room3/RoomDatabase.JournalMode): androidx.room3/RoomDatabase.Builder<#A1> // androidx.room3/RoomDatabase.Builder.setJournalMode|setJournalMode(androidx.room3.RoomDatabase.JournalMode){}[0]
        final fun setQueryCoroutineContext(kotlin.coroutines/CoroutineContext): androidx.room3/RoomDatabase.Builder<#A1> // androidx.room3/RoomDatabase.Builder.setQueryCoroutineContext|setQueryCoroutineContext(kotlin.coroutines.CoroutineContext){}[0]
    }

    final class MigrationContainer { // androidx.room3/RoomDatabase.MigrationContainer|null[0]
        constructor <init>() // androidx.room3/RoomDatabase.MigrationContainer.<init>|<init>(){}[0]

        final fun addMigration(androidx.room3.migration/Migration) // androidx.room3/RoomDatabase.MigrationContainer.addMigration|addMigration(androidx.room3.migration.Migration){}[0]
        final fun addMigrations(kotlin.collections/List<androidx.room3.migration/Migration>) // androidx.room3/RoomDatabase.MigrationContainer.addMigrations|addMigrations(kotlin.collections.List<androidx.room3.migration.Migration>){}[0]
        final fun contains(kotlin/Int, kotlin/Int): kotlin/Boolean // androidx.room3/RoomDatabase.MigrationContainer.contains|contains(kotlin.Int;kotlin.Int){}[0]
        final fun getMigrations(): kotlin.collections/Map<kotlin/Int, kotlin.collections/Map<kotlin/Int, androidx.room3.migration/Migration>> // androidx.room3/RoomDatabase.MigrationContainer.getMigrations|getMigrations(){}[0]
    }
}

abstract class androidx.room3/RoomOpenDelegate : androidx.room3/RoomOpenDelegateMarker { // androidx.room3/RoomOpenDelegate|null[0]
    constructor <init>(kotlin/Int, kotlin/String, kotlin/String) // androidx.room3/RoomOpenDelegate.<init>|<init>(kotlin.Int;kotlin.String;kotlin.String){}[0]

    final val identityHash // androidx.room3/RoomOpenDelegate.identityHash|{}identityHash[0]
        final fun <get-identityHash>(): kotlin/String // androidx.room3/RoomOpenDelegate.identityHash.<get-identityHash>|<get-identityHash>(){}[0]
    final val legacyIdentityHash // androidx.room3/RoomOpenDelegate.legacyIdentityHash|{}legacyIdentityHash[0]
        final fun <get-legacyIdentityHash>(): kotlin/String // androidx.room3/RoomOpenDelegate.legacyIdentityHash.<get-legacyIdentityHash>|<get-legacyIdentityHash>(){}[0]
    final val version // androidx.room3/RoomOpenDelegate.version|{}version[0]
        final fun <get-version>(): kotlin/Int // androidx.room3/RoomOpenDelegate.version.<get-version>|<get-version>(){}[0]

    abstract fun createAllTables(androidx.sqlite/SQLiteConnection) // androidx.room3/RoomOpenDelegate.createAllTables|createAllTables(androidx.sqlite.SQLiteConnection){}[0]
    abstract fun dropAllTables(androidx.sqlite/SQLiteConnection) // androidx.room3/RoomOpenDelegate.dropAllTables|dropAllTables(androidx.sqlite.SQLiteConnection){}[0]
    abstract fun onCreate(androidx.sqlite/SQLiteConnection) // androidx.room3/RoomOpenDelegate.onCreate|onCreate(androidx.sqlite.SQLiteConnection){}[0]
    abstract fun onOpen(androidx.sqlite/SQLiteConnection) // androidx.room3/RoomOpenDelegate.onOpen|onOpen(androidx.sqlite.SQLiteConnection){}[0]
    abstract fun onPostMigrate(androidx.sqlite/SQLiteConnection) // androidx.room3/RoomOpenDelegate.onPostMigrate|onPostMigrate(androidx.sqlite.SQLiteConnection){}[0]
    abstract fun onPreMigrate(androidx.sqlite/SQLiteConnection) // androidx.room3/RoomOpenDelegate.onPreMigrate|onPreMigrate(androidx.sqlite.SQLiteConnection){}[0]
    abstract fun onValidateSchema(androidx.sqlite/SQLiteConnection): androidx.room3/RoomOpenDelegate.ValidationResult // androidx.room3/RoomOpenDelegate.onValidateSchema|onValidateSchema(androidx.sqlite.SQLiteConnection){}[0]

    final class ValidationResult { // androidx.room3/RoomOpenDelegate.ValidationResult|null[0]
        constructor <init>(kotlin/Boolean, kotlin/String?) // androidx.room3/RoomOpenDelegate.ValidationResult.<init>|<init>(kotlin.Boolean;kotlin.String?){}[0]

        final val expectedFoundMsg // androidx.room3/RoomOpenDelegate.ValidationResult.expectedFoundMsg|{}expectedFoundMsg[0]
            final fun <get-expectedFoundMsg>(): kotlin/String? // androidx.room3/RoomOpenDelegate.ValidationResult.expectedFoundMsg.<get-expectedFoundMsg>|<get-expectedFoundMsg>(){}[0]
        final val isValid // androidx.room3/RoomOpenDelegate.ValidationResult.isValid|{}isValid[0]
            final fun <get-isValid>(): kotlin/Boolean // androidx.room3/RoomOpenDelegate.ValidationResult.isValid.<get-isValid>|<get-isValid>(){}[0]
    }
}

final class <#A: kotlin/Any?> androidx.room3.concurrent/ThreadLocal { // androidx.room3.concurrent/ThreadLocal|null[0]
    constructor <init>() // androidx.room3.concurrent/ThreadLocal.<init>|<init>(){}[0]

    final fun get(): #A? // androidx.room3.concurrent/ThreadLocal.get|get(){}[0]
    final fun set(#A?) // androidx.room3.concurrent/ThreadLocal.set|set(1:0?){}[0]
}

final class <#A: kotlin/Any?> androidx.room3/EntityUpsertAdapter { // androidx.room3/EntityUpsertAdapter|null[0]
    constructor <init>(androidx.room3/EntityInsertAdapter<#A>, androidx.room3/EntityDeleteOrUpdateAdapter<#A>) // androidx.room3/EntityUpsertAdapter.<init>|<init>(androidx.room3.EntityInsertAdapter<1:0>;androidx.room3.EntityDeleteOrUpdateAdapter<1:0>){}[0]

    final fun upsert(androidx.sqlite/SQLiteConnection, #A?) // androidx.room3/EntityUpsertAdapter.upsert|upsert(androidx.sqlite.SQLiteConnection;1:0?){}[0]
    final fun upsert(androidx.sqlite/SQLiteConnection, kotlin.collections/Iterable<#A?>?) // androidx.room3/EntityUpsertAdapter.upsert|upsert(androidx.sqlite.SQLiteConnection;kotlin.collections.Iterable<1:0?>?){}[0]
    final fun upsert(androidx.sqlite/SQLiteConnection, kotlin/Array<out #A?>?) // androidx.room3/EntityUpsertAdapter.upsert|upsert(androidx.sqlite.SQLiteConnection;kotlin.Array<out|1:0?>?){}[0]
    final fun upsertAndReturnId(androidx.sqlite/SQLiteConnection, #A?): kotlin/Long // androidx.room3/EntityUpsertAdapter.upsertAndReturnId|upsertAndReturnId(androidx.sqlite.SQLiteConnection;1:0?){}[0]
    final fun upsertAndReturnIdsArray(androidx.sqlite/SQLiteConnection, kotlin.collections/Collection<#A?>?): kotlin/LongArray // androidx.room3/EntityUpsertAdapter.upsertAndReturnIdsArray|upsertAndReturnIdsArray(androidx.sqlite.SQLiteConnection;kotlin.collections.Collection<1:0?>?){}[0]
    final fun upsertAndReturnIdsArray(androidx.sqlite/SQLiteConnection, kotlin/Array<out #A?>?): kotlin/LongArray // androidx.room3/EntityUpsertAdapter.upsertAndReturnIdsArray|upsertAndReturnIdsArray(androidx.sqlite.SQLiteConnection;kotlin.Array<out|1:0?>?){}[0]
    final fun upsertAndReturnIdsArrayBox(androidx.sqlite/SQLiteConnection, kotlin.collections/Collection<#A?>?): kotlin/Array<out kotlin/Long> // androidx.room3/EntityUpsertAdapter.upsertAndReturnIdsArrayBox|upsertAndReturnIdsArrayBox(androidx.sqlite.SQLiteConnection;kotlin.collections.Collection<1:0?>?){}[0]
    final fun upsertAndReturnIdsArrayBox(androidx.sqlite/SQLiteConnection, kotlin/Array<out #A?>?): kotlin/Array<out kotlin/Long> // androidx.room3/EntityUpsertAdapter.upsertAndReturnIdsArrayBox|upsertAndReturnIdsArrayBox(androidx.sqlite.SQLiteConnection;kotlin.Array<out|1:0?>?){}[0]
    final fun upsertAndReturnIdsList(androidx.sqlite/SQLiteConnection, kotlin.collections/Collection<#A?>?): kotlin.collections/List<kotlin/Long> // androidx.room3/EntityUpsertAdapter.upsertAndReturnIdsList|upsertAndReturnIdsList(androidx.sqlite.SQLiteConnection;kotlin.collections.Collection<1:0?>?){}[0]
    final fun upsertAndReturnIdsList(androidx.sqlite/SQLiteConnection, kotlin/Array<out #A?>?): kotlin.collections/List<kotlin/Long> // androidx.room3/EntityUpsertAdapter.upsertAndReturnIdsList|upsertAndReturnIdsList(androidx.sqlite.SQLiteConnection;kotlin.Array<out|1:0?>?){}[0]

    final object Companion // androidx.room3/EntityUpsertAdapter.Companion|null[0]
}

final class androidx.room3.concurrent/AtomicBoolean { // androidx.room3.concurrent/AtomicBoolean|null[0]
    constructor <init>(kotlin/Boolean) // androidx.room3.concurrent/AtomicBoolean.<init>|<init>(kotlin.Boolean){}[0]

    final fun compareAndSet(kotlin/Boolean, kotlin/Boolean): kotlin/Boolean // androidx.room3.concurrent/AtomicBoolean.compareAndSet|compareAndSet(kotlin.Boolean;kotlin.Boolean){}[0]
    final fun get(): kotlin/Boolean // androidx.room3.concurrent/AtomicBoolean.get|get(){}[0]
}

final class androidx.room3.concurrent/AtomicInt { // androidx.room3.concurrent/AtomicInt|null[0]
    constructor <init>(kotlin/Int) // androidx.room3.concurrent/AtomicInt.<init>|<init>(kotlin.Int){}[0]

    final fun compareAndSet(kotlin/Int, kotlin/Int): kotlin/Boolean // androidx.room3.concurrent/AtomicInt.compareAndSet|compareAndSet(kotlin.Int;kotlin.Int){}[0]
    final fun decrementAndGet(): kotlin/Int // androidx.room3.concurrent/AtomicInt.decrementAndGet|decrementAndGet(){}[0]
    final fun get(): kotlin/Int // androidx.room3.concurrent/AtomicInt.get|get(){}[0]
    final fun getAndIncrement(): kotlin/Int // androidx.room3.concurrent/AtomicInt.getAndIncrement|getAndIncrement(){}[0]
    final fun incrementAndGet(): kotlin/Int // androidx.room3.concurrent/AtomicInt.incrementAndGet|incrementAndGet(){}[0]
    final fun set(kotlin/Int) // androidx.room3.concurrent/AtomicInt.set|set(kotlin.Int){}[0]
}

final class androidx.room3.util/ByteArrayWrapper { // androidx.room3.util/ByteArrayWrapper|null[0]
    constructor <init>(kotlin/ByteArray) // androidx.room3.util/ByteArrayWrapper.<init>|<init>(kotlin.ByteArray){}[0]

    final val array // androidx.room3.util/ByteArrayWrapper.array|{}array[0]
        final fun <get-array>(): kotlin/ByteArray // androidx.room3.util/ByteArrayWrapper.array.<get-array>|<get-array>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // androidx.room3.util/ByteArrayWrapper.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // androidx.room3.util/ByteArrayWrapper.hashCode|hashCode(){}[0]
}

final class androidx.room3.util/FtsTableInfo { // androidx.room3.util/FtsTableInfo|null[0]
    constructor <init>(kotlin/String, kotlin.collections/Set<kotlin/String>, kotlin.collections/Set<kotlin/String>) // androidx.room3.util/FtsTableInfo.<init>|<init>(kotlin.String;kotlin.collections.Set<kotlin.String>;kotlin.collections.Set<kotlin.String>){}[0]
    constructor <init>(kotlin/String, kotlin.collections/Set<kotlin/String>, kotlin/String) // androidx.room3.util/FtsTableInfo.<init>|<init>(kotlin.String;kotlin.collections.Set<kotlin.String>;kotlin.String){}[0]

    final val columns // androidx.room3.util/FtsTableInfo.columns|{}columns[0]
        final fun <get-columns>(): kotlin.collections/Set<kotlin/String> // androidx.room3.util/FtsTableInfo.columns.<get-columns>|<get-columns>(){}[0]
    final val name // androidx.room3.util/FtsTableInfo.name|{}name[0]
        final fun <get-name>(): kotlin/String // androidx.room3.util/FtsTableInfo.name.<get-name>|<get-name>(){}[0]
    final val options // androidx.room3.util/FtsTableInfo.options|{}options[0]
        final fun <get-options>(): kotlin.collections/Set<kotlin/String> // androidx.room3.util/FtsTableInfo.options.<get-options>|<get-options>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // androidx.room3.util/FtsTableInfo.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // androidx.room3.util/FtsTableInfo.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // androidx.room3.util/FtsTableInfo.toString|toString(){}[0]

    final object Companion { // androidx.room3.util/FtsTableInfo.Companion|null[0]
        final fun read(androidx.sqlite/SQLiteConnection, kotlin/String): androidx.room3.util/FtsTableInfo // androidx.room3.util/FtsTableInfo.Companion.read|read(androidx.sqlite.SQLiteConnection;kotlin.String){}[0]
    }
}

final class androidx.room3.util/TableInfo { // androidx.room3.util/TableInfo|null[0]
    constructor <init>(kotlin/String, kotlin.collections/Map<kotlin/String, androidx.room3.util/TableInfo.Column>, kotlin.collections/Set<androidx.room3.util/TableInfo.ForeignKey>, kotlin.collections/Set<androidx.room3.util/TableInfo.Index>? = ...) // androidx.room3.util/TableInfo.<init>|<init>(kotlin.String;kotlin.collections.Map<kotlin.String,androidx.room3.util.TableInfo.Column>;kotlin.collections.Set<androidx.room3.util.TableInfo.ForeignKey>;kotlin.collections.Set<androidx.room3.util.TableInfo.Index>?){}[0]

    final val columns // androidx.room3.util/TableInfo.columns|{}columns[0]
        final fun <get-columns>(): kotlin.collections/Map<kotlin/String, androidx.room3.util/TableInfo.Column> // androidx.room3.util/TableInfo.columns.<get-columns>|<get-columns>(){}[0]
    final val foreignKeys // androidx.room3.util/TableInfo.foreignKeys|{}foreignKeys[0]
        final fun <get-foreignKeys>(): kotlin.collections/Set<androidx.room3.util/TableInfo.ForeignKey> // androidx.room3.util/TableInfo.foreignKeys.<get-foreignKeys>|<get-foreignKeys>(){}[0]
    final val indices // androidx.room3.util/TableInfo.indices|{}indices[0]
        final fun <get-indices>(): kotlin.collections/Set<androidx.room3.util/TableInfo.Index>? // androidx.room3.util/TableInfo.indices.<get-indices>|<get-indices>(){}[0]
    final val name // androidx.room3.util/TableInfo.name|{}name[0]
        final fun <get-name>(): kotlin/String // androidx.room3.util/TableInfo.name.<get-name>|<get-name>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // androidx.room3.util/TableInfo.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // androidx.room3.util/TableInfo.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // androidx.room3.util/TableInfo.toString|toString(){}[0]

    final class Column { // androidx.room3.util/TableInfo.Column|null[0]
        constructor <init>(kotlin/String, kotlin/String, kotlin/Boolean, kotlin/Int, kotlin/String?, kotlin/Int) // androidx.room3.util/TableInfo.Column.<init>|<init>(kotlin.String;kotlin.String;kotlin.Boolean;kotlin.Int;kotlin.String?;kotlin.Int){}[0]

        final val affinity // androidx.room3.util/TableInfo.Column.affinity|{}affinity[0]
            final fun <get-affinity>(): kotlin/Int // androidx.room3.util/TableInfo.Column.affinity.<get-affinity>|<get-affinity>(){}[0]
        final val createdFrom // androidx.room3.util/TableInfo.Column.createdFrom|{}createdFrom[0]
            final fun <get-createdFrom>(): kotlin/Int // androidx.room3.util/TableInfo.Column.createdFrom.<get-createdFrom>|<get-createdFrom>(){}[0]
        final val defaultValue // androidx.room3.util/TableInfo.Column.defaultValue|{}defaultValue[0]
            final fun <get-defaultValue>(): kotlin/String? // androidx.room3.util/TableInfo.Column.defaultValue.<get-defaultValue>|<get-defaultValue>(){}[0]
        final val isPrimaryKey // androidx.room3.util/TableInfo.Column.isPrimaryKey|{}isPrimaryKey[0]
            final fun <get-isPrimaryKey>(): kotlin/Boolean // androidx.room3.util/TableInfo.Column.isPrimaryKey.<get-isPrimaryKey>|<get-isPrimaryKey>(){}[0]
        final val name // androidx.room3.util/TableInfo.Column.name|{}name[0]
            final fun <get-name>(): kotlin/String // androidx.room3.util/TableInfo.Column.name.<get-name>|<get-name>(){}[0]
        final val notNull // androidx.room3.util/TableInfo.Column.notNull|{}notNull[0]
            final fun <get-notNull>(): kotlin/Boolean // androidx.room3.util/TableInfo.Column.notNull.<get-notNull>|<get-notNull>(){}[0]
        final val primaryKeyPosition // androidx.room3.util/TableInfo.Column.primaryKeyPosition|{}primaryKeyPosition[0]
            final fun <get-primaryKeyPosition>(): kotlin/Int // androidx.room3.util/TableInfo.Column.primaryKeyPosition.<get-primaryKeyPosition>|<get-primaryKeyPosition>(){}[0]
        final val type // androidx.room3.util/TableInfo.Column.type|{}type[0]
            final fun <get-type>(): kotlin/String // androidx.room3.util/TableInfo.Column.type.<get-type>|<get-type>(){}[0]

        final fun equals(kotlin/Any?): kotlin/Boolean // androidx.room3.util/TableInfo.Column.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // androidx.room3.util/TableInfo.Column.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // androidx.room3.util/TableInfo.Column.toString|toString(){}[0]
    }

    final class ForeignKey { // androidx.room3.util/TableInfo.ForeignKey|null[0]
        constructor <init>(kotlin/String, kotlin/String, kotlin/String, kotlin.collections/List<kotlin/String>, kotlin.collections/List<kotlin/String>) // androidx.room3.util/TableInfo.ForeignKey.<init>|<init>(kotlin.String;kotlin.String;kotlin.String;kotlin.collections.List<kotlin.String>;kotlin.collections.List<kotlin.String>){}[0]

        final val columnNames // androidx.room3.util/TableInfo.ForeignKey.columnNames|{}columnNames[0]
            final fun <get-columnNames>(): kotlin.collections/List<kotlin/String> // androidx.room3.util/TableInfo.ForeignKey.columnNames.<get-columnNames>|<get-columnNames>(){}[0]
        final val onDelete // androidx.room3.util/TableInfo.ForeignKey.onDelete|{}onDelete[0]
            final fun <get-onDelete>(): kotlin/String // androidx.room3.util/TableInfo.ForeignKey.onDelete.<get-onDelete>|<get-onDelete>(){}[0]
        final val onUpdate // androidx.room3.util/TableInfo.ForeignKey.onUpdate|{}onUpdate[0]
            final fun <get-onUpdate>(): kotlin/String // androidx.room3.util/TableInfo.ForeignKey.onUpdate.<get-onUpdate>|<get-onUpdate>(){}[0]
        final val referenceColumnNames // androidx.room3.util/TableInfo.ForeignKey.referenceColumnNames|{}referenceColumnNames[0]
            final fun <get-referenceColumnNames>(): kotlin.collections/List<kotlin/String> // androidx.room3.util/TableInfo.ForeignKey.referenceColumnNames.<get-referenceColumnNames>|<get-referenceColumnNames>(){}[0]
        final val referenceTable // androidx.room3.util/TableInfo.ForeignKey.referenceTable|{}referenceTable[0]
            final fun <get-referenceTable>(): kotlin/String // androidx.room3.util/TableInfo.ForeignKey.referenceTable.<get-referenceTable>|<get-referenceTable>(){}[0]

        final fun equals(kotlin/Any?): kotlin/Boolean // androidx.room3.util/TableInfo.ForeignKey.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // androidx.room3.util/TableInfo.ForeignKey.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // androidx.room3.util/TableInfo.ForeignKey.toString|toString(){}[0]
    }

    final class Index { // androidx.room3.util/TableInfo.Index|null[0]
        constructor <init>(kotlin/String, kotlin/Boolean, kotlin.collections/List<kotlin/String>, kotlin.collections/List<kotlin/String>) // androidx.room3.util/TableInfo.Index.<init>|<init>(kotlin.String;kotlin.Boolean;kotlin.collections.List<kotlin.String>;kotlin.collections.List<kotlin.String>){}[0]

        final val columns // androidx.room3.util/TableInfo.Index.columns|{}columns[0]
            final fun <get-columns>(): kotlin.collections/List<kotlin/String> // androidx.room3.util/TableInfo.Index.columns.<get-columns>|<get-columns>(){}[0]
        final val name // androidx.room3.util/TableInfo.Index.name|{}name[0]
            final fun <get-name>(): kotlin/String // androidx.room3.util/TableInfo.Index.name.<get-name>|<get-name>(){}[0]
        final val unique // androidx.room3.util/TableInfo.Index.unique|{}unique[0]
            final fun <get-unique>(): kotlin/Boolean // androidx.room3.util/TableInfo.Index.unique.<get-unique>|<get-unique>(){}[0]

        final var orders // androidx.room3.util/TableInfo.Index.orders|{}orders[0]
            final fun <get-orders>(): kotlin.collections/List<kotlin/String> // androidx.room3.util/TableInfo.Index.orders.<get-orders>|<get-orders>(){}[0]
            final fun <set-orders>(kotlin.collections/List<kotlin/String>) // androidx.room3.util/TableInfo.Index.orders.<set-orders>|<set-orders>(kotlin.collections.List<kotlin.String>){}[0]

        final fun equals(kotlin/Any?): kotlin/Boolean // androidx.room3.util/TableInfo.Index.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // androidx.room3.util/TableInfo.Index.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // androidx.room3.util/TableInfo.Index.toString|toString(){}[0]

        final object Companion { // androidx.room3.util/TableInfo.Index.Companion|null[0]
            final const val DEFAULT_PREFIX // androidx.room3.util/TableInfo.Index.Companion.DEFAULT_PREFIX|{}DEFAULT_PREFIX[0]
                final fun <get-DEFAULT_PREFIX>(): kotlin/String // androidx.room3.util/TableInfo.Index.Companion.DEFAULT_PREFIX.<get-DEFAULT_PREFIX>|<get-DEFAULT_PREFIX>(){}[0]
        }
    }

    final object Companion { // androidx.room3.util/TableInfo.Companion|null[0]
        final const val CREATED_FROM_DATABASE // androidx.room3.util/TableInfo.Companion.CREATED_FROM_DATABASE|{}CREATED_FROM_DATABASE[0]
            final fun <get-CREATED_FROM_DATABASE>(): kotlin/Int // androidx.room3.util/TableInfo.Companion.CREATED_FROM_DATABASE.<get-CREATED_FROM_DATABASE>|<get-CREATED_FROM_DATABASE>(){}[0]
        final const val CREATED_FROM_ENTITY // androidx.room3.util/TableInfo.Companion.CREATED_FROM_ENTITY|{}CREATED_FROM_ENTITY[0]
            final fun <get-CREATED_FROM_ENTITY>(): kotlin/Int // androidx.room3.util/TableInfo.Companion.CREATED_FROM_ENTITY.<get-CREATED_FROM_ENTITY>|<get-CREATED_FROM_ENTITY>(){}[0]
        final const val CREATED_FROM_UNKNOWN // androidx.room3.util/TableInfo.Companion.CREATED_FROM_UNKNOWN|{}CREATED_FROM_UNKNOWN[0]
            final fun <get-CREATED_FROM_UNKNOWN>(): kotlin/Int // androidx.room3.util/TableInfo.Companion.CREATED_FROM_UNKNOWN.<get-CREATED_FROM_UNKNOWN>|<get-CREATED_FROM_UNKNOWN>(){}[0]

        final fun read(androidx.sqlite/SQLiteConnection, kotlin/String): androidx.room3.util/TableInfo // androidx.room3.util/TableInfo.Companion.read|read(androidx.sqlite.SQLiteConnection;kotlin.String){}[0]
    }
}

final class androidx.room3.util/ViewInfo { // androidx.room3.util/ViewInfo|null[0]
    constructor <init>(kotlin/String, kotlin/String?) // androidx.room3.util/ViewInfo.<init>|<init>(kotlin.String;kotlin.String?){}[0]

    final val name // androidx.room3.util/ViewInfo.name|{}name[0]
        final fun <get-name>(): kotlin/String // androidx.room3.util/ViewInfo.name.<get-name>|<get-name>(){}[0]
    final val sql // androidx.room3.util/ViewInfo.sql|{}sql[0]
        final fun <get-sql>(): kotlin/String? // androidx.room3.util/ViewInfo.sql.<get-sql>|<get-sql>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // androidx.room3.util/ViewInfo.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // androidx.room3.util/ViewInfo.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // androidx.room3.util/ViewInfo.toString|toString(){}[0]

    final object Companion { // androidx.room3.util/ViewInfo.Companion|null[0]
        final fun read(androidx.sqlite/SQLiteConnection, kotlin/String): androidx.room3.util/ViewInfo // androidx.room3.util/ViewInfo.Companion.read|read(androidx.sqlite.SQLiteConnection;kotlin.String){}[0]
    }
}

final class androidx.room3/DatabaseConfiguration { // androidx.room3/DatabaseConfiguration|null[0]
    constructor <init>(kotlin/String?, androidx.room3/RoomDatabase.MigrationContainer, kotlin.collections/List<androidx.room3/RoomDatabase.Callback>?, androidx.room3/RoomDatabase.JournalMode, kotlin/Boolean, kotlin/Boolean, kotlin.collections/Set<kotlin/Int>?, kotlin.collections/List<kotlin/Any>, kotlin.collections/List<androidx.room3.migration/AutoMigrationSpec>, kotlin/Boolean, androidx.sqlite/SQLiteDriver?, kotlin.coroutines/CoroutineContext?) // androidx.room3/DatabaseConfiguration.<init>|<init>(kotlin.String?;androidx.room3.RoomDatabase.MigrationContainer;kotlin.collections.List<androidx.room3.RoomDatabase.Callback>?;androidx.room3.RoomDatabase.JournalMode;kotlin.Boolean;kotlin.Boolean;kotlin.collections.Set<kotlin.Int>?;kotlin.collections.List<kotlin.Any>;kotlin.collections.List<androidx.room3.migration.AutoMigrationSpec>;kotlin.Boolean;androidx.sqlite.SQLiteDriver?;kotlin.coroutines.CoroutineContext?){}[0]

    final val allowDestructiveMigrationForAllTables // androidx.room3/DatabaseConfiguration.allowDestructiveMigrationForAllTables|{}allowDestructiveMigrationForAllTables[0]
        final fun <get-allowDestructiveMigrationForAllTables>(): kotlin/Boolean // androidx.room3/DatabaseConfiguration.allowDestructiveMigrationForAllTables.<get-allowDestructiveMigrationForAllTables>|<get-allowDestructiveMigrationForAllTables>(){}[0]
    final val allowDestructiveMigrationOnDowngrade // androidx.room3/DatabaseConfiguration.allowDestructiveMigrationOnDowngrade|{}allowDestructiveMigrationOnDowngrade[0]
        final fun <get-allowDestructiveMigrationOnDowngrade>(): kotlin/Boolean // androidx.room3/DatabaseConfiguration.allowDestructiveMigrationOnDowngrade.<get-allowDestructiveMigrationOnDowngrade>|<get-allowDestructiveMigrationOnDowngrade>(){}[0]
    final val autoMigrationSpecs // androidx.room3/DatabaseConfiguration.autoMigrationSpecs|{}autoMigrationSpecs[0]
        final fun <get-autoMigrationSpecs>(): kotlin.collections/List<androidx.room3.migration/AutoMigrationSpec> // androidx.room3/DatabaseConfiguration.autoMigrationSpecs.<get-autoMigrationSpecs>|<get-autoMigrationSpecs>(){}[0]
    final val callbacks // androidx.room3/DatabaseConfiguration.callbacks|{}callbacks[0]
        final fun <get-callbacks>(): kotlin.collections/List<androidx.room3/RoomDatabase.Callback>? // androidx.room3/DatabaseConfiguration.callbacks.<get-callbacks>|<get-callbacks>(){}[0]
    final val journalMode // androidx.room3/DatabaseConfiguration.journalMode|{}journalMode[0]
        final fun <get-journalMode>(): androidx.room3/RoomDatabase.JournalMode // androidx.room3/DatabaseConfiguration.journalMode.<get-journalMode>|<get-journalMode>(){}[0]
    final val migrationContainer // androidx.room3/DatabaseConfiguration.migrationContainer|{}migrationContainer[0]
        final fun <get-migrationContainer>(): androidx.room3/RoomDatabase.MigrationContainer // androidx.room3/DatabaseConfiguration.migrationContainer.<get-migrationContainer>|<get-migrationContainer>(){}[0]
    final val name // androidx.room3/DatabaseConfiguration.name|{}name[0]
        final fun <get-name>(): kotlin/String? // androidx.room3/DatabaseConfiguration.name.<get-name>|<get-name>(){}[0]
    final val queryCoroutineContext // androidx.room3/DatabaseConfiguration.queryCoroutineContext|{}queryCoroutineContext[0]
        final fun <get-queryCoroutineContext>(): kotlin.coroutines/CoroutineContext? // androidx.room3/DatabaseConfiguration.queryCoroutineContext.<get-queryCoroutineContext>|<get-queryCoroutineContext>(){}[0]
    final val requireMigration // androidx.room3/DatabaseConfiguration.requireMigration|{}requireMigration[0]
        final fun <get-requireMigration>(): kotlin/Boolean // androidx.room3/DatabaseConfiguration.requireMigration.<get-requireMigration>|<get-requireMigration>(){}[0]
    final val sqliteDriver // androidx.room3/DatabaseConfiguration.sqliteDriver|{}sqliteDriver[0]
        final fun <get-sqliteDriver>(): androidx.sqlite/SQLiteDriver? // androidx.room3/DatabaseConfiguration.sqliteDriver.<get-sqliteDriver>|<get-sqliteDriver>(){}[0]
    final val typeConverters // androidx.room3/DatabaseConfiguration.typeConverters|{}typeConverters[0]
        final fun <get-typeConverters>(): kotlin.collections/List<kotlin/Any> // androidx.room3/DatabaseConfiguration.typeConverters.<get-typeConverters>|<get-typeConverters>(){}[0]
}

final class androidx.room3/InvalidationTracker { // androidx.room3/InvalidationTracker|null[0]
    constructor <init>(androidx.room3/RoomDatabase, kotlin.collections/Map<kotlin/String, kotlin/String>, kotlin.collections/Map<kotlin/String, kotlin.collections/Set<kotlin/String>>, kotlin/Array<out kotlin/String>...) // androidx.room3/InvalidationTracker.<init>|<init>(androidx.room3.RoomDatabase;kotlin.collections.Map<kotlin.String,kotlin.String>;kotlin.collections.Map<kotlin.String,kotlin.collections.Set<kotlin.String>>;kotlin.Array<out|kotlin.String>...){}[0]

    final fun createFlow(kotlin/Array<out kotlin/String>..., kotlin/Boolean = ...): kotlinx.coroutines.flow/Flow<kotlin.collections/Set<kotlin/String>> // androidx.room3/InvalidationTracker.createFlow|createFlow(kotlin.Array<out|kotlin.String>...;kotlin.Boolean){}[0]
    final fun refreshAsync() // androidx.room3/InvalidationTracker.refreshAsync|refreshAsync(){}[0]
    final suspend fun refresh(kotlin/Array<out kotlin/String>...): kotlin/Boolean // androidx.room3/InvalidationTracker.refresh|refresh(kotlin.Array<out|kotlin.String>...){}[0]
}

final class androidx.room3/RoomRawQuery { // androidx.room3/RoomRawQuery|null[0]
    constructor <init>(kotlin/String, kotlin/Function1<androidx.sqlite/SQLiteStatement, kotlin/Unit> = ...) // androidx.room3/RoomRawQuery.<init>|<init>(kotlin.String;kotlin.Function1<androidx.sqlite.SQLiteStatement,kotlin.Unit>){}[0]

    final val sql // androidx.room3/RoomRawQuery.sql|{}sql[0]
        final fun <get-sql>(): kotlin/String // androidx.room3/RoomRawQuery.sql.<get-sql>|<get-sql>(){}[0]

    final fun getBindingFunction(): kotlin/Function1<androidx.sqlite/SQLiteStatement, kotlin/Unit> // androidx.room3/RoomRawQuery.getBindingFunction|getBindingFunction(){}[0]
}

final object androidx.room3/Room { // androidx.room3/Room|null[0]
    final const val MASTER_TABLE_NAME // androidx.room3/Room.MASTER_TABLE_NAME|{}MASTER_TABLE_NAME[0]
        final fun <get-MASTER_TABLE_NAME>(): kotlin/String // androidx.room3/Room.MASTER_TABLE_NAME.<get-MASTER_TABLE_NAME>|<get-MASTER_TABLE_NAME>(){}[0]

    final inline fun <#A1: reified androidx.room3/RoomDatabase> databaseBuilder(kotlin/String, noinline kotlin/Function0<#A1> = ...): androidx.room3/RoomDatabase.Builder<#A1> // androidx.room3/Room.databaseBuilder|databaseBuilder(kotlin.String;kotlin.Function0<0:0>){0ยง<androidx.room3.RoomDatabase>}[0]
    final inline fun <#A1: reified androidx.room3/RoomDatabase> inMemoryDatabaseBuilder(noinline kotlin/Function0<#A1> = ...): androidx.room3/RoomDatabase.Builder<#A1> // androidx.room3/Room.inMemoryDatabaseBuilder|inMemoryDatabaseBuilder(kotlin.Function0<0:0>){0ยง<androidx.room3.RoomDatabase>}[0]
}

final val androidx.room3.util/EMPTY_STRING_ARRAY // androidx.room3.util/EMPTY_STRING_ARRAY|{}EMPTY_STRING_ARRAY[0]
    final fun <get-EMPTY_STRING_ARRAY>(): kotlin/Array<kotlin/String?> // androidx.room3.util/EMPTY_STRING_ARRAY.<get-EMPTY_STRING_ARRAY>|<get-EMPTY_STRING_ARRAY>(){}[0]

final fun <#A: androidx.room3/RoomDatabase> androidx.room3.util/findDatabaseConstructorAndInitDatabaseImpl(kotlin.reflect/KClass<*>): #A // androidx.room3.util/findDatabaseConstructorAndInitDatabaseImpl|findDatabaseConstructorAndInitDatabaseImpl(kotlin.reflect.KClass<*>){0ยง<androidx.room3.RoomDatabase>}[0]
final fun <#A: kotlin/Any, #B: kotlin/Any?> androidx.room3.util/recursiveFetchMap(kotlin.collections/MutableMap<#A, #B>, kotlin/Boolean, kotlin/Function1<kotlin.collections/MutableMap<#A, #B>, kotlin/Unit>) // androidx.room3.util/recursiveFetchMap|recursiveFetchMap(kotlin.collections.MutableMap<0:0,0:1>;kotlin.Boolean;kotlin.Function1<kotlin.collections.MutableMap<0:0,0:1>,kotlin.Unit>){0ยง<kotlin.Any>;1ยง<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> androidx.room3.coroutines/createFlow(androidx.room3/RoomDatabase, kotlin/Boolean, kotlin/Array<kotlin/String>, kotlin/Function1<androidx.sqlite/SQLiteConnection, #A>): kotlinx.coroutines.flow/Flow<#A> // androidx.room3.coroutines/createFlow|createFlow(androidx.room3.RoomDatabase;kotlin.Boolean;kotlin.Array<kotlin.String>;kotlin.Function1<androidx.sqlite.SQLiteConnection,0:0>){0ยง<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> androidx.room3.util/recursiveFetchLongSparseArray(androidx.collection/LongSparseArray<#A>, kotlin/Boolean, kotlin/Function1<androidx.collection/LongSparseArray<#A>, kotlin/Unit>) // androidx.room3.util/recursiveFetchLongSparseArray|recursiveFetchLongSparseArray(androidx.collection.LongSparseArray<0:0>;kotlin.Boolean;kotlin.Function1<androidx.collection.LongSparseArray<0:0>,kotlin.Unit>){0ยง<kotlin.Any?>}[0]
final fun androidx.room3.util/appendPlaceholders(kotlin.text/StringBuilder, kotlin/Int) // androidx.room3.util/appendPlaceholders|appendPlaceholders(kotlin.text.StringBuilder;kotlin.Int){}[0]
final fun androidx.room3.util/dropFtsSyncTriggers(androidx.sqlite/SQLiteConnection) // androidx.room3.util/dropFtsSyncTriggers|dropFtsSyncTriggers(androidx.sqlite.SQLiteConnection){}[0]
final fun androidx.room3.util/foreignKeyCheck(androidx.sqlite/SQLiteConnection, kotlin/String) // androidx.room3.util/foreignKeyCheck|foreignKeyCheck(androidx.sqlite.SQLiteConnection;kotlin.String){}[0]
final fun androidx.room3.util/getColumnIndex(androidx.sqlite/SQLiteStatement, kotlin/String): kotlin/Int // androidx.room3.util/getColumnIndex|getColumnIndex(androidx.sqlite.SQLiteStatement;kotlin.String){}[0]
final fun androidx.room3.util/getColumnIndexOrThrow(androidx.sqlite/SQLiteStatement, kotlin/String): kotlin/Int // androidx.room3.util/getColumnIndexOrThrow|getColumnIndexOrThrow(androidx.sqlite.SQLiteStatement;kotlin.String){}[0]
final fun androidx.room3.util/getLastInsertedRowId(androidx.sqlite/SQLiteConnection): kotlin/Long // androidx.room3.util/getLastInsertedRowId|getLastInsertedRowId(androidx.sqlite.SQLiteConnection){}[0]
final fun androidx.room3.util/getTotalChangedRows(androidx.sqlite/SQLiteConnection): kotlin/Int // androidx.room3.util/getTotalChangedRows|getTotalChangedRows(androidx.sqlite.SQLiteConnection){}[0]
final fun androidx.room3.util/joinIntoString(kotlin.collections/List<kotlin/Int>?): kotlin/String? // androidx.room3.util/joinIntoString|joinIntoString(kotlin.collections.List<kotlin.Int>?){}[0]
final fun androidx.room3.util/newStringBuilder(): kotlin.text/StringBuilder // androidx.room3.util/newStringBuilder|newStringBuilder(){}[0]
final fun androidx.room3.util/splitToIntList(kotlin/String?): kotlin.collections/List<kotlin/Int>? // androidx.room3.util/splitToIntList|splitToIntList(kotlin.String?){}[0]
final fun androidx.room3.util/stringError(): kotlin/String // androidx.room3.util/stringError|stringError(){}[0]
final fun androidx.room3.util/wrapMappedColumns(androidx.sqlite/SQLiteStatement, kotlin/Array<kotlin/String>, kotlin/IntArray): androidx.sqlite/SQLiteStatement // androidx.room3.util/wrapMappedColumns|wrapMappedColumns(androidx.sqlite.SQLiteStatement;kotlin.Array<kotlin.String>;kotlin.IntArray){}[0]
final suspend fun (androidx.room3/PooledConnection).androidx.room3/execSQL(kotlin/String) // androidx.room3/execSQL|execSQL@androidx.room3.PooledConnection(kotlin.String){}[0]
final suspend fun <#A: kotlin/Any?> (androidx.room3/RoomDatabase).androidx.room3/useReaderConnection(kotlin.coroutines/SuspendFunction1<androidx.room3/Transactor, #A>): #A // androidx.room3/useReaderConnection|useReaderConnection@androidx.room3.RoomDatabase(kotlin.coroutines.SuspendFunction1<androidx.room3.Transactor,0:0>){0ยง<kotlin.Any?>}[0]
final suspend fun <#A: kotlin/Any?> (androidx.room3/RoomDatabase).androidx.room3/useWriterConnection(kotlin.coroutines/SuspendFunction1<androidx.room3/Transactor, #A>): #A // androidx.room3/useWriterConnection|useWriterConnection@androidx.room3.RoomDatabase(kotlin.coroutines.SuspendFunction1<androidx.room3.Transactor,0:0>){0ยง<kotlin.Any?>}[0]
final suspend fun <#A: kotlin/Any?> (androidx.room3/Transactor).androidx.room3/deferredTransaction(kotlin.coroutines/SuspendFunction1<androidx.room3/TransactionScope<#A>, #A>): #A // androidx.room3/deferredTransaction|deferredTransaction@androidx.room3.Transactor(kotlin.coroutines.SuspendFunction1<androidx.room3.TransactionScope<0:0>,0:0>){0ยง<kotlin.Any?>}[0]
final suspend fun <#A: kotlin/Any?> (androidx.room3/Transactor).androidx.room3/exclusiveTransaction(kotlin.coroutines/SuspendFunction1<androidx.room3/TransactionScope<#A>, #A>): #A // androidx.room3/exclusiveTransaction|exclusiveTransaction@androidx.room3.Transactor(kotlin.coroutines.SuspendFunction1<androidx.room3.TransactionScope<0:0>,0:0>){0ยง<kotlin.Any?>}[0]
final suspend fun <#A: kotlin/Any?> (androidx.room3/Transactor).androidx.room3/immediateTransaction(kotlin.coroutines/SuspendFunction1<androidx.room3/TransactionScope<#A>, #A>): #A // androidx.room3/immediateTransaction|immediateTransaction@androidx.room3.Transactor(kotlin.coroutines.SuspendFunction1<androidx.room3.TransactionScope<0:0>,0:0>){0ยง<kotlin.Any?>}[0]
final suspend fun <#A: kotlin/Any?> androidx.room3.util/performInTransactionSuspending(androidx.room3/RoomDatabase, kotlin.coroutines/SuspendFunction0<#A>): #A // androidx.room3.util/performInTransactionSuspending|performInTransactionSuspending(androidx.room3.RoomDatabase;kotlin.coroutines.SuspendFunction0<0:0>){0ยง<kotlin.Any?>}[0]
final suspend fun <#A: kotlin/Any?> androidx.room3.util/performSuspending(androidx.room3/RoomDatabase, kotlin/Boolean, kotlin/Boolean, kotlin/Function1<androidx.sqlite/SQLiteConnection, #A>): #A // androidx.room3.util/performSuspending|performSuspending(androidx.room3.RoomDatabase;kotlin.Boolean;kotlin.Boolean;kotlin.Function1<androidx.sqlite.SQLiteConnection,0:0>){0ยง<kotlin.Any?>}[0]
