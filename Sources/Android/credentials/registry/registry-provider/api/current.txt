// Signature format: 4.0
package androidx.credentials.registry.provider {

  public final class ClearCredentialRegistryConfigurationException extends androidx.credentials.registry.provider.ClearCredentialRegistryException {
    ctor public ClearCredentialRegistryConfigurationException();
    ctor public ClearCredentialRegistryConfigurationException(optional CharSequence? errorMessage);
    field public static final String TYPE_CLEAR_CREDENTIAL_REGISTRY_CONFIGURATION_EXCEPTION = "androidx.credentials.provider.registry.TYPE_CLEAR_CREDENTIAL_REGISTRY_CONFIGURATION_EXCEPTION";
  }

  public abstract class ClearCredentialRegistryException extends java.lang.Exception {
    ctor public ClearCredentialRegistryException(String type, optional CharSequence? errorMessage);
    method @InaccessibleFromKotlin public final CharSequence? getErrorMessage();
    method @InaccessibleFromKotlin public final String getType();
    property public final CharSequence? errorMessage;
    property public final String type;
  }

  public final class ClearCredentialRegistryRequest {
    ctor public ClearCredentialRegistryRequest(androidx.credentials.registry.provider.ClearCredentialRegistryRequest.PerTypeConfig deletePerTypeConfig);
    ctor public ClearCredentialRegistryRequest(boolean isDeleteAll);
    method @InaccessibleFromKotlin public androidx.credentials.registry.provider.ClearCredentialRegistryRequest.PerTypeConfig? getDeletePerTypeConfig();
    method @InaccessibleFromKotlin public boolean isDeleteAll();
    property public androidx.credentials.registry.provider.ClearCredentialRegistryRequest.PerTypeConfig? deletePerTypeConfig;
    property public boolean isDeleteAll;
  }

  public static final class ClearCredentialRegistryRequest.PerTypeConfig {
    ctor public ClearCredentialRegistryRequest.PerTypeConfig(boolean isDeleteAll, String type, java.util.List<java.lang.String> registryIds);
    method @InaccessibleFromKotlin public java.util.List<java.lang.String> getRegistryIds();
    method @InaccessibleFromKotlin public String getType();
    method @InaccessibleFromKotlin public boolean isDeleteAll();
    property public boolean isDeleteAll;
    property public java.util.List<java.lang.String> registryIds;
    property public String type;
  }

  public final class ClearCredentialRegistryResponse {
    ctor public ClearCredentialRegistryResponse(boolean isDeleted);
    method @InaccessibleFromKotlin public boolean isDeleted();
    property public boolean isDeleted;
  }

  public final class ClearCredentialRegistryUnknownException extends androidx.credentials.registry.provider.ClearCredentialRegistryException {
    ctor public ClearCredentialRegistryUnknownException();
    ctor public ClearCredentialRegistryUnknownException(optional CharSequence? errorMessage);
    field public static final String TYPE_CLEAR_CREDENTIAL_REGISTRY_UNKNOWN_EXCEPTION = "androidx.credentials.registry.provider.TYPE_CLEAR_CREDENTIAL_REGISTRY_UNKNOWN_EXCEPTION";
  }

  public final class ProviderGetCredentialRequest {
    method @InaccessibleFromKotlin public static androidx.credentials.registry.provider.SelectedCredentialSet? getSelectedCredentialSet(androidx.credentials.provider.ProviderGetCredentialRequest);
    method @InaccessibleFromKotlin public static String? getSelectedEntryId(androidx.credentials.provider.ProviderGetCredentialRequest);
    property public static androidx.credentials.registry.provider.SelectedCredentialSet? androidx.credentials.provider.ProviderGetCredentialRequest.selectedCredentialSet;
    property public static String? androidx.credentials.provider.ProviderGetCredentialRequest.selectedEntryId;
  }

  public final class RegisterCredentialsConfigurationException extends androidx.credentials.registry.provider.RegisterCredentialsException {
    ctor public RegisterCredentialsConfigurationException();
    ctor public RegisterCredentialsConfigurationException(optional CharSequence? errorMessage);
    field public static final String TYPE_REGISTER_CREDENTIALS_CONFIGURATION_EXCEPTION = "androidx.credentials.provider.registry.TYPE_REGISTER_CREDENTIALS_CONFIGURATION_EXCEPTION";
  }

  public abstract class RegisterCredentialsException extends java.lang.Exception {
    ctor public RegisterCredentialsException(String type, optional CharSequence? errorMessage);
    method @InaccessibleFromKotlin public final CharSequence? getErrorMessage();
    method @InaccessibleFromKotlin public final String getType();
    property public final CharSequence? errorMessage;
    property public final String type;
  }

  public abstract class RegisterCredentialsRequest {
    ctor public RegisterCredentialsRequest(String type, String id, byte[] credentials, byte[] matcher);
    ctor public RegisterCredentialsRequest(String type, String id, byte[] credentials, byte[] matcher, optional String intentAction);
    method @InaccessibleFromKotlin public final byte[] getCredentials();
    method @InaccessibleFromKotlin public final String getId();
    method @InaccessibleFromKotlin public final String getIntentAction();
    method @InaccessibleFromKotlin public final byte[] getMatcher();
    method @InaccessibleFromKotlin public final String getType();
    property public final byte[] credentials;
    property public final String id;
    property public final String intentAction;
    property public final byte[] matcher;
    property public final String type;
  }

  public abstract class RegisterCredentialsResponse {
    ctor public RegisterCredentialsResponse(String type);
    method @InaccessibleFromKotlin public final String getType();
    property public final String type;
  }

  public final class RegisterCredentialsUnknownException extends androidx.credentials.registry.provider.RegisterCredentialsException {
    ctor public RegisterCredentialsUnknownException();
    ctor public RegisterCredentialsUnknownException(optional CharSequence? errorMessage);
    field public static final String TYPE_REGISTER_CREDENTIALS_UNKNOWN_EXCEPTION = "androidx.credentials.registry.provider.TYPE_REGISTER_CREDENTIALS_UNKNOWN_EXCEPTION";
  }

  public abstract class RegistryManager {
    method public final suspend Object? clearCredentialRegistry(androidx.credentials.registry.provider.ClearCredentialRegistryRequest request, kotlin.coroutines.Continuation<? super androidx.credentials.registry.provider.ClearCredentialRegistryResponse>);
    method public abstract void clearCredentialRegistryAsync(androidx.credentials.registry.provider.ClearCredentialRegistryRequest request, java.util.concurrent.Executor executor, androidx.credentials.CredentialManagerCallback<androidx.credentials.registry.provider.ClearCredentialRegistryResponse,androidx.credentials.registry.provider.ClearCredentialRegistryException> callback);
    method public static final androidx.credentials.registry.provider.RegistryManager create(android.content.Context context);
    method public final suspend Object? registerCredentials(androidx.credentials.registry.provider.RegisterCredentialsRequest request, kotlin.coroutines.Continuation<? super androidx.credentials.registry.provider.RegisterCredentialsResponse>);
    method public abstract void registerCredentialsAsync(androidx.credentials.registry.provider.RegisterCredentialsRequest request, android.os.CancellationSignal? cancellationSignal, java.util.concurrent.Executor executor, androidx.credentials.CredentialManagerCallback<androidx.credentials.registry.provider.RegisterCredentialsResponse,androidx.credentials.registry.provider.RegisterCredentialsException> callback);
    field public static final String ACTION_GET_CREDENTIAL = "androidx.credentials.registry.provider.action.GET_CREDENTIAL";
    field public static final androidx.credentials.registry.provider.RegistryManager.Companion Companion;
  }

  public static final class RegistryManager.Companion {
    method public androidx.credentials.registry.provider.RegistryManager create(android.content.Context context);
    property public static String ACTION_GET_CREDENTIAL;
  }

  public interface RegistryManagerProvider {
    method public boolean isAvailable();
    method public void onRegisterCredentials(androidx.credentials.registry.provider.RegisterCredentialsRequest request, android.os.CancellationSignal? cancellationSignal, java.util.concurrent.Executor executor, androidx.credentials.CredentialManagerCallback<androidx.credentials.registry.provider.RegisterCredentialsResponse,androidx.credentials.registry.provider.RegisterCredentialsException> callback);
  }

  public final class SelectedCredential {
    ctor public SelectedCredential(String credentialId, String? metadata);
    method @InaccessibleFromKotlin public String getCredentialId();
    method @InaccessibleFromKotlin public String? getMetadata();
    property public String credentialId;
    property public String? metadata;
  }

  public final class SelectedCredentialSet {
    ctor public SelectedCredentialSet(String credentialSetId, java.util.List<androidx.credentials.registry.provider.SelectedCredential> credentials);
    method @InaccessibleFromKotlin public String getCredentialSetId();
    method @InaccessibleFromKotlin public java.util.List<androidx.credentials.registry.provider.SelectedCredential> getCredentials();
    property public String credentialSetId;
    property public java.util.List<androidx.credentials.registry.provider.SelectedCredential> credentials;
  }

}

package androidx.credentials.registry.provider.digitalcredentials {

  public abstract class DigitalCredentialEntry {
    ctor public DigitalCredentialEntry(String id, java.util.Set<? extends androidx.credentials.registry.provider.digitalcredentials.EntryDisplayProperties> entryDisplayPropertySet);
    method @InaccessibleFromKotlin public final java.util.Set<androidx.credentials.registry.provider.digitalcredentials.EntryDisplayProperties> getEntryDisplayPropertySet();
    method @InaccessibleFromKotlin public final String getId();
    property public final java.util.Set<androidx.credentials.registry.provider.digitalcredentials.EntryDisplayProperties> entryDisplayPropertySet;
    property public final String id;
  }

  public abstract class DigitalCredentialField {
    ctor public DigitalCredentialField(java.util.Set<? extends androidx.credentials.registry.provider.digitalcredentials.FieldDisplayProperties> fieldDisplayPropertySet);
    method @InaccessibleFromKotlin public final java.util.Set<androidx.credentials.registry.provider.digitalcredentials.FieldDisplayProperties> getFieldDisplayPropertySet();
    property public final java.util.Set<androidx.credentials.registry.provider.digitalcredentials.FieldDisplayProperties> fieldDisplayPropertySet;
  }

  public abstract class DigitalCredentialRegistry extends androidx.credentials.registry.provider.RegisterCredentialsRequest {
    ctor public DigitalCredentialRegistry(String id, byte[] credentials, byte[] matcher);
    ctor public DigitalCredentialRegistry(String id, byte[] credentials, byte[] matcher, optional String intentAction);
    field public static final androidx.credentials.registry.provider.digitalcredentials.DigitalCredentialRegistry.Companion Companion;
    field public static final int DISPLAY_TYPE_VERIFICATION = 0; // 0x0
  }

  public static final class DigitalCredentialRegistry.Companion {
    property public static int DISPLAY_TYPE_VERIFICATION;
  }

  public final class DigitalCredentialRegistryResponse extends androidx.credentials.registry.provider.RegisterCredentialsResponse {
    ctor public DigitalCredentialRegistryResponse();
  }

  public abstract class EntryDisplayProperties {
    ctor public EntryDisplayProperties(int displayType);
    method @InaccessibleFromKotlin public final int getDisplayType();
    property public final int displayType;
  }

  public abstract class FieldDisplayProperties {
    ctor public FieldDisplayProperties(int displayType);
    method @InaccessibleFromKotlin public final int getDisplayType();
    property public final int displayType;
  }

  public abstract class InlineIssuanceEntry {
    ctor public InlineIssuanceEntry(String id, androidx.credentials.registry.provider.digitalcredentials.InlineIssuanceEntry.InlineIssuanceDisplayProperties display);
    method @InaccessibleFromKotlin public final androidx.credentials.registry.provider.digitalcredentials.InlineIssuanceEntry.InlineIssuanceDisplayProperties getDisplay();
    method @InaccessibleFromKotlin public final String getId();
    property public final androidx.credentials.registry.provider.digitalcredentials.InlineIssuanceEntry.InlineIssuanceDisplayProperties display;
    property public final String id;
  }

  public static final class InlineIssuanceEntry.InlineIssuanceDisplayProperties {
    ctor public InlineIssuanceEntry.InlineIssuanceDisplayProperties(CharSequence? subtitle, optional CharSequence? titleHint, optional android.graphics.Bitmap? iconHint);
    method @InaccessibleFromKotlin public android.graphics.Bitmap? getIconHint();
    method @InaccessibleFromKotlin public CharSequence? getSubtitle();
    method @InaccessibleFromKotlin public CharSequence? getTitleHint();
    property public android.graphics.Bitmap? iconHint;
    property public CharSequence? subtitle;
    property public CharSequence? titleHint;
  }

  public final class VerificationEntryDisplayProperties extends androidx.credentials.registry.provider.digitalcredentials.EntryDisplayProperties {
    ctor public VerificationEntryDisplayProperties(CharSequence title, CharSequence? subtitle, android.graphics.Bitmap icon, optional CharSequence? explainer, optional CharSequence? warning);
    method @InaccessibleFromKotlin public CharSequence? getExplainer();
    method @InaccessibleFromKotlin public android.graphics.Bitmap getIcon();
    method @InaccessibleFromKotlin public CharSequence? getSubtitle();
    method @InaccessibleFromKotlin public CharSequence getTitle();
    method @InaccessibleFromKotlin public CharSequence? getWarning();
    property public CharSequence? explainer;
    property public android.graphics.Bitmap icon;
    property public CharSequence? subtitle;
    property public CharSequence title;
    property public CharSequence? warning;
  }

  public final class VerificationFieldDisplayProperties extends androidx.credentials.registry.provider.digitalcredentials.FieldDisplayProperties {
    ctor public VerificationFieldDisplayProperties(CharSequence displayName, optional CharSequence? displayValue);
    method @InaccessibleFromKotlin public CharSequence getDisplayName();
    method @InaccessibleFromKotlin public CharSequence? getDisplayValue();
    property public CharSequence displayName;
    property public CharSequence? displayValue;
  }

}

