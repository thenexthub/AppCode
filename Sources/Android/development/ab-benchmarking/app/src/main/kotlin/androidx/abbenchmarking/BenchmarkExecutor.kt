/*
 * Copyright 2025 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package androidx.abbenchmarking

import java.nio.file.Path

/**
 * Executes a specific benchmark test using a Gradle command.
 *
 * This function constructs and runs the `./gradlew` command to execute a single benchmark test or
 * class on a connected device.
 *
 * The process output (stdout and stderr) is suppressed to keep the console clean. This is a
 * blocking operation; it will wait for the Gradle task to complete before returning.
 *
 * @param module The Gradle module path containing the benchmark test (e.g.,
 *   "compose:ui:ui-benchmark").
 * @param benchmarkTest The test to run, which can be a fully qualified class name or a specific
 *   test method (e.g., "androidx.compose.ui.benchmark.ModifiersBenchmark#full[clickable_1x]").
 * @param iterationCount The number of times the benchmark will be run.
 * @param targetDeviceId The optional serial ID of the device to run the tests on. If provided, this
 *   is passed via the `ANDROID_SERIAL` environment variable.
 * @throws RuntimeException if the Gradle command fails or returns a non-zero exit code.
 */
internal fun runBenchmarkTest(
    module: String,
    benchmarkTest: String,
    iterationCount: Int = 50,
    targetDeviceId: String? = null,
) {
    // Construct the command as a list of arguments for safety
    val command =
        listOf(
            "./gradlew",
            "$module:connectedReleaseAndroidTest",
            "-Pandroid.testInstrumentationRunnerArguments.class=$benchmarkTest",
            "-Pandroid.testInstrumentationRunnerArguments.androidx.benchmark.iterations=$iterationCount",
        )
    println("Running command: ${command.joinToString(" ")}")
    println("(Benchmark execution in progress, output suppressed...)")
    // Execute the command directly using the spread operator (*).
    val environment =
        if (targetDeviceId != null) mapOf("ANDROID_SERIAL" to targetDeviceId) else emptyMap()
    runCommandSilently(*command.toTypedArray(), environment = environment)
    println("Test completed successfully.")
}

/**
 * Orchestrates the end-to-end process of testing a single Git branch.
 *
 * This function encapsulates the entire workflow for one half of the A/B test. It performs the
 * following sequence of actions:
 * 1. Checks out the specified Git branch.
 * 2. Executes the given benchmark test on that branch.
 * 3. Finds the raw JSON output files generated by the test.
 * 4. Parses all result files, aggregates the data, and saves it to a final CSV file.
 *
 * On failure, this function will print an error and terminate the process.
 *
 * @param outputPath The directory where the final aggregated CSV output will be stored.
 * @param gitRevision The name of the Git revision to check out and test.
 * @param module The Gradle module path containing the benchmark test (e.g.,
 *   "compose:ui:ui-benchmark").
 * @param benchmarkTest The test to run, which can be a fully qualified class name or a specific
 *   test method (e.g., "androidx.compose.ui.benchmark.ModifiersBenchmark#full[clickable_1x]").
 * @param iterationCount The number of benchmark runs to perform on each test run.
 * @param targetDeviceId The optional serial ID of the device to run the tests on.
 * @throws RuntimeException if any step in the process (Git checkout, benchmark execution, or result
 *   discovery) fails.
 */
internal fun checkoutAndRunTest(
    outputPath: Path,
    gitRevision: String,
    module: String,
    benchmarkTest: String,
    iterationCount: Int,
    targetDeviceId: String?,
) {
    if (!checkoutGitRevision(gitRevision)) {
        throw RuntimeException("ERROR: Could not checkout revision '$gitRevision'. Aborting.")
    }
    runBenchmarkTest(module, benchmarkTest, iterationCount, targetDeviceId)
    // Now, discover the directory that was just created
    val deviceDir = discoverDeviceDirectory(module)
    if (deviceDir == null) {
        throw RuntimeException(
            "ERROR: Could not discover benchmark output directory after test run. Aborting."
        )
    }
    // Finally, extract the results using the discovered path
    println("Capturing metrics...")
    val outputFile = createOutputFileForGitRevision(outputPath, gitRevision)
    extractBenchmarkTestResult(deviceDir.absolutePath, outputFile)
}
