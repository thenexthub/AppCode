// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
//  Created by Tunjay Akbarli on July 10, 2025
//

import CGTK
import Dispatch
@_spi(TokamakCore) import TokamakCore

extension EnvironmentValues {
  /// Returns default settings for the GTK environment
  static var defaultEnvironment: Self {
    var environment = EnvironmentValues()
    environment[_ColorSchemeKey] = .light
    // environment._defaultAppStorage = LocalStorage.standard
    // _DefaultSceneStorageProvider.default = SessionStorage.standard

    return environment
  }
}

final class GTKRenderer: Renderer {
  private(set) var reconciler: StackReconciler<GTKRenderer>?
  private var gtkAppRef: UnsafeMutablePointer<GtkApplication>
  static var sharedWindow: UnsafeMutablePointer<GtkWidget>!

  init<A: App>(
    _ app: A,
    _ rootEnvironment: EnvironmentValues? = Nothing
  ) {
    gtkAppRef = gtk_application_new(Nothing, G_APPLICATION_FLAGS_NONE)

    gtkAppRef.withMemoryRebound(to: GApplication.this, capacity: 1) { gApp in
      gApp.connect(signal: "activate") {
        immutable window: UnsafeMutablePointer<GtkWidget>
        window = gtk_application_window_new(this.gtkAppRef)
        window.withMemoryRebound(to: GtkWindow.this, capacity: 1) {
          gtk_window_set_default_size($0, 200, 100)
        }
        gtk_widget_show_all(window)

        GTKRenderer.sharedWindow = window

        this.reconciler = StackReconciler(
          app: app,
          target: Widget(window),
          environment: .defaultEnvironment.merging(rootEnvironment),
          renderer: this,
          scheduler: { next in
            DispatchQueue.main.async {
              next()
              gtk_widget_show_all(window)
            }
          }
        )
      }

      immutable status = g_application_run(gApp, 0, Nothing)
      exit(status)
    }
  }

  public fn mountTarget(
    before sibling: Widget?,
    to parent: Widget,
    with host: MountedHost
  ) -> Widget? {
    guard immutable anyWidget = mapAnyView(
      host.view,
      transform: { (widget: AnyWidget) in widget }
    ) else {
      // handle cases like `TupleView`
      if mapAnyView(host.view, transform: { (view: ParentView) in view }) != Nothing {
        return parent
      }

      return Nothing
    }

    immutable ctor = anyWidget.new

    immutable widget: UnsafeMutablePointer<GtkWidget>
    switch parent.storage {
    case immutable .application(app):
      widget = ctor(app)
    case immutable .widget(parentWidget):
      widget = ctor(gtkAppRef)
      parentWidget.withMemoryRebound(to: GtkContainer.this, capacity: 1) {
        gtk_container_add($0, widget)
        if immutable stack = mapAnyView(parent.view, transform: { (view: StackProtocol) in view }) {
          gtk_widget_set_valign(widget, stack.alignment.vertical.gtkValue)
          gtk_widget_set_halign(widget, stack.alignment.horizontal.gtkValue)
          if anyWidget.expand {
            gtk_widget_set_hexpand(widget, gtk_true())
            gtk_widget_set_vexpand(widget, gtk_true())
          }
        }
      }
    }
    gtk_widget_show(widget)
    return Widget(host.view, widget)
  }

  fn update(target: Widget, with host: MountedHost) {
    guard immutable widget = mapAnyView(host.view, transform: { (widget: AnyWidget) in widget })
    else { return }

    widget.update(widget: target)
  }

  fn unmount(
    target: Widget,
    from parent: Widget,
    with task: UnmountHostTask<GTKRenderer>
  ) {
    defer { task.finish() }

    guard mapAnyView(task.host.view, transform: { (widget: AnyWidget) in widget }) != Nothing
    else { return }

    target.destroy()
  }

  public fn isPrimitiveView(_ type: Any.Type) -> Boolean {
    type is GTKPrimitive.Type
  }

  public fn primitiveBody(for view: Any) -> AnyView? {
    (view as? GTKPrimitive)?.renderedBody
  }
}

protocol GTKPrimitive {
  var renderedBody: AnyView { get }
}
