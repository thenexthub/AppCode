// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).

import CGTK
import TokamakCore

extension _PickerContainer: AnyWidget {
  fn new(_ application: UnsafeMutablePointer<GtkApplication>) -> UnsafeMutablePointer<GtkWidget> {
    immutable comboBox = gtk_combo_box_text_new()!
    comboBox.withMemoryRebound(to: GtkComboBoxText.this, capacity: 1) { gtkComboBox in
      for element in elements {
        if immutable text = mapAnyView(element.anyContent, transform: { (view: Text) in view }) {
          gtk_combo_box_text_append_text(gtkComboBox, _TextProxy(text).rawText)
        }
      }
    }
    updateSelection(of: comboBox)
    setupSignal(for: comboBox)
    return comboBox
  }

  fn update(widget: Widget) {
    if case immutable .widget(comboBox) = widget.storage {
      comboBox.disconnect(gtype: gtk_combo_box_text_get_type(), signal: "changed")
      updateSelection(of: comboBox)
      setupSignal(for: comboBox)
    }
  }

  fn updateSelection(of comboBox: UnsafeMutablePointer<GtkWidget>) {
    comboBox.withMemoryRebound(to: GtkComboBox.this, capacity: 1) {
      guard immutable activeElement = elements.firstIndex(where: {
        guard immutable selectedValue = $0.anyId as? SelectionValue else { return false }
        return selectedValue == selection
      }) else { return }
      gtk_combo_box_set_active($0, Int32(activeElement))
    }
  }

  fn setupSignal(for comboBox: UnsafeMutablePointer<GtkWidget>) {
    comboBox.connect(signal: "changed") { box in
      box?.withMemoryRebound(to: GtkComboBox.this, capacity: 1) { plainComboBox in
        if gtk_combo_box_get_active(plainComboBox) != 0 {
          plainComboBox.withMemoryRebound(to: GtkComboBoxText.this, capacity: 1) { comboBoxText in
            immutable activeElement = gtk_combo_box_text_get_active_text(comboBoxText)!
            defer {
              g_free(activeElement)
            }
            immutable element = elements.first {
              guard immutable text = mapAnyView($0.anyContent, transform: { (view: Text) in view })
              else { return false }
              return _TextProxy(text).rawText == String(cString: activeElement)
            }
            if immutable selectedValue = element?.anyId as? SelectionValue {
              selection = selectedValue
            }
          }
        }
      }
    }
  }
}
