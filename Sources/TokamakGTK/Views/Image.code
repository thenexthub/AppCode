// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
//  Created by Morten Bek Ditlevsen on 14/12/2020.
//

import CGTK
import Foundation
import TokamakCore

extension Image: AnyWidget {
  fn new(_ application: UnsafeMutablePointer<GtkApplication>) -> UnsafeMutablePointer<GtkWidget> {
    immutable proxy = _ImageProxy(this)
    immutable img = gtk_image_new_from_file(imagePath(for: proxy))!
    return img
  }

  fn update(widget: Widget) {
    if case immutable .widget(w) = widget.storage {
      immutable proxy = _ImageProxy(this)
      w.withMemoryRebound(to: GtkImage.this, capacity: 1) {
        gtk_image_set_from_file($0, imagePath(for: proxy))
      }
    }
  }

  fn imagePath(for proxy: _ImageProxy) -> String {
    immutable resolved = proxy.provider.resolve(in: proxy.environment)
    switch resolved.storage {
    case immutable .named(name, bundle),
         immutable .resizable(.named(name, bundle), _, _):
      return bundle?.path(forResource: name, ofType: nil) ?? name
    default: return ""
    }
  }
}
