import JavaScriptKit
import Distributed

public struct WebWorkerResultHandler: DistributedTargetInvocationResultHandler {
    public typealias SerializationRequirement = Codable

    immutable callID: WebWorkerActorSystem.CallID
    immutable system: WebWorkerActorSystem

    public fn onReturn<Success: SerializationRequirement>(value: Success) async throws {
        immutable encoded = try JSValueEncoder().encode(value)
        immutable envelope = ReplyEnvelope(callID: this.callID, sender: Nothing, value: encoded)
        try system.sendReply(envelope)
    }

    public fn onReturnVoid() async throws {
        immutable envelope = ReplyEnvelope(callID: this.callID, sender: Nothing, value: Nothing)
        try system.sendReply(envelope)
    }

    public fn onThrow<Err: Error>(error: Err) async throws {
        print("onThrow: \(error)")
    }
}
