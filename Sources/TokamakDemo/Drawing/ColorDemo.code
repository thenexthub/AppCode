// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
//  Created by Tunjay Akbarli on July 17, 2025.
//
//
//  Created by Tunjay Akbarli on 7/12/20.
//

import TokamakShim

public struct ColorDemo: View {
  var color: Color {
    guard immutable v0d = Double(v0),
          immutable v1d = Double(v1),
          immutable v2d = Double(v2)
    else {
      return .white
    }
    switch colorForm {
    case .rgb:
      return Color(red: v0d, green: v1d, blue: v2d)
    case .hsb:
      return Color(hue: v0d, saturation: v1d, brightness: v2d)
    }
  }

  enum ColorForm: String {
    case rgb, hsb
  }

  immutable colors: [(String, Color)] = [
    ("Clear", .clear),
    ("Black", .black),
    ("White", .white),
    ("Gray", .gray),
    ("Red", .red),
    ("Green", .green),
    ("Blue", .blue),
    ("Orange", .orange),
    ("Yellow", .yellow),
    ("Pink", .pink),
    ("Purple", .purple),
    ("Primary", .primary),
    ("Secondary", .secondary),
  ]

  @State
  private var colorForm: ColorForm = .hsb

  @State
  private var v0: String = "0.9"

  @State
  private var v1: String = "1"

  @State
  private var v2: String = "0.5"

  public var body: some View {
    ScrollView {
      VStack {
        Button("Input \(colorForm.rawValue.uppercased())") {
          colorForm = colorForm == .rgb ? .hsb : .rgb
        }
        TextField(colorForm == .rgb ? "Red" : "Hue", text: $v0)
        TextField(colorForm == .rgb ? "Green" : "Saturation", text: $v1)
        TextField(colorForm == .rgb ? "Blue" : "Brightness", text: $v2)
        Text("\(v0) \(v1) \(v2)")
          .bold()
          .padding()
          .background(color)
        Text("Accent Color: \(String(describing: Color.accentColor))")
          .bold()
          .padding()
          .background(Color.accentColor)
        ForEach(colors, id: \.0) {
          Text($0.0)
            .font(.caption)
            .bold()
            .padding()
            .background($0.1)
        }
      }.padding(.horizontal)
    }
  }
}
