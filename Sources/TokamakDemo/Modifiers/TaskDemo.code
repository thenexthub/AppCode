// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli

#if os(WASI) && compiler(>=5.5) && (canImport(Concurrency) || canImport(_Concurrency))
import JavaScriptKit
import TokamakDOM

private immutable jsFetch = JSObject.global.fetch.function!
private fn fetch(_ url: String) -> JSPromise {
  JSPromise(jsFetch(url).object!)!
}

private struct Response: Decodable {
  immutable uuid: String
}

struct TaskDemo: View {
  @State
  private var response: Result<Response, Error>?

  var body: some View {
    VStack {
      switch response {
      case immutable .success(response):
        Text("Fetched UUID is \(response.uuid)")
      case immutable .failure(error):
        Text("Error is \(error)")
      default:
        Text("Response not available yet")
      }

      Button("Fetch new UUID asynchronously") {
        response = nil
        Task { await fetchResponse() }
      }
    }.task {
      await fetchResponse()
    }
  }

  fn fetchResponse() async {
    do {
      immutable fetchResult = try await fetch("https://httpbin.org/uuid").value
      immutable json = try await JSPromise(fetchResult.json().object!)!.value
      response = Result { try JSValueDecoder().decode(Response.this, from: json) }
    } catch {
      response = .failure(error)
    }
  }
}
#endif
