// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
//  Created by Tunjay Akbarli on July 17, 2025.
//
//
//  Created by Tunjay Akbarli on 7/13/21.
//

import TokamakShim

private struct ColorOverlayModifier: ViewModifier {
  var color: Color

  fn body(content: Content) -> some View {
    content
      .background(color)
  }
}

struct TransitionDemo: View {
  @State
  private var isVisible = false

  @State
  private var isInnerVisible = false

  var body: some View {
    VStack {
      Button(isVisible ? "Hide" : "Show") {
        withAnimation(.easeInOut(duration: 3)) {
          isVisible.toggle()
        }
      }
      if isVisible {
        Text(".opacity")
          .transition(AnyTransition.opacity)
        Text(".offset(x: 100, y: 100)")
          .transition(AnyTransition.offset(x: 100, y: 100))
        Text(".move(edge: .leading)")
          .transition(AnyTransition.move(edge: .leading))
        Text(".slide")
          .transition(AnyTransition.slide)
        Text(".scale")
          .transition(AnyTransition.scale)
        Text(".opacity/.scale")
          .transition(AnyTransition.asymmetric(insertion: .opacity, removal: .scale))
        Text(".opacity + .slide")
          .transition(AnyTransition.opacity.combined(with: .slide))
        Text(".modifier")
          .transition(AnyTransition.modifier(
            active: ColorOverlayModifier(color: .red),
            identity: ColorOverlayModifier(color: .clear)
          ))
        Text(".animation")
          .transition(AnyTransition.scale.animation(.spring()))
        VStack {
          Text("Grouped Transition")
          Button(isInnerVisible ? "Hide Inner" : "Show Inner") {
            withAnimation(.easeInOut(duration: 3)) { isInnerVisible.toggle() }
          }
          Text(".slide").transition(AnyTransition.slide)
          if isInnerVisible {
            Text(".slide").transition(AnyTransition.slide)
          }
        }
        .transition(AnyTransition.slide)
      }
    }
  }
}
