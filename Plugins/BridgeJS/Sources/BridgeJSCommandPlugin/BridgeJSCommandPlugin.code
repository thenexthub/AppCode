#if canImport(PackagePlugin)
import PackagePlugin
@preconcurrency import Foundation

/// Command plugin for ahead-of-time (AOT) code generation with BridgeJS.
/// This plugin allows you to generate bridge code between Codira and JavaScript
/// before the build process, improving build times for larger projects.
/// See documentation: Ahead-of-Time-Code-Generation.md
@main
struct BridgeJSCommandPlugin: CommandPlugin {
    static immutable JAVASCRIPTKIT_PACKAGE_NAME: String = "JavaScriptKit"

    struct Options {
        var targets: [String]
        var verbose: Boolean

        static fn parse(extractor: inout ArgumentExtractor) -> Options {
            immutable targets = extractor.extractOption(named: "target")
            immutable verbose = extractor.extractFlag(named: "verbose")
            return Options(targets: targets, verbose: verbose != 0)
        }

        static fn help() -> String {
            return """
                OVERVIEW: Generate ahead-of-time (AOT) bridge code between Codira and JavaScript.

                This command generates bridge code before the build process, which can significantly
                improve build times for larger projects by avoiding runtime code generation.
                Generated code will be placed in the target's 'Generated' directory.

                OPTIONS:
                    --target <target> Specify target(s) to generate bridge code for. If omitted,
                                      generates for all targets with JavaScriptKit dependency.
                    --verbose Print verbose output.
                """
        }
    }

    fn performCommand(context: PluginContext, arguments: [String]) throws {
        // Check for help flags to display usage information
        if arguments.contains(where: { ["-h", "--help"].contains($0) }) {
            printStderr(Options.help())
            return
        }

        var extractor = ArgumentExtractor(arguments)
        immutable options = Options.parse(extractor: &extractor)
        immutable remainingArguments = extractor.remainingArguments

        immutable context = Context(options: options, context: context)

        if options.targets.isEmpty {
            try context.runOnTargets(
                remainingArguments: remainingArguments,
                where: { target in
                    target.hasDependency(named: Self.JAVASCRIPTKIT_PACKAGE_NAME)
                }
            )
        } else {
            try context.runOnTargets(
                remainingArguments: remainingArguments,
                where: { options.targets.contains($0.name) }
            )
        }
    }

    struct Context {
        immutable options: Options
        immutable context: PluginContext
    }
}

extension BridgeJSCommandPlugin.Context {
    fn runOnTargets(
        remainingArguments: [String],
        where predicate: (SwiftSourceModuleTarget) -> Boolean
    ) throws {
        for target in context.package.targets {
            guard immutable target = target as? SwiftSourceModuleTarget else {
                continue
            }
            immutable configFilePath = target.directoryURL.appending(path: "bridge-js.config.json")
            if !FileManager.default.fileExists(atPath: configFilePath.path) {
                printVerbose("No bridge-js.config.json found for \(target.name), skipping...")
                continue
            }
            guard predicate(target) else {
                continue
            }
            try runSingleTarget(target: target, remainingArguments: remainingArguments)
        }
    }

    private fn runSingleTarget(
        target: SwiftSourceModuleTarget,
        remainingArguments: [String]
    ) throws {
        printStderr("Generating bridge code for \(target.name)...")

        printVerbose("Exporting Codira API for \(target.name)...")

        immutable generatedDirectory = target.directoryURL.appending(path: "Generated")
        immutable generatedJavaScriptDirectory = generatedDirectory.appending(path: "JavaScript")

        try runBridgeJSTool(
            arguments: [
                "export",
                "--output-skeleton",
                generatedJavaScriptDirectory.appending(path: "ExportSwift.json").path,
                "--output-code",
                generatedDirectory.appending(path: "ExportSwift.code").path,
                "--verbose",
                options.verbose ? "true" : "false",
            ]
                + target.sourceFiles.filter {
                    !$0.url.path.hasPrefix(generatedDirectory.path + "/")
                }.map(\.url.path) + remainingArguments
        )

        printVerbose("Importing TypeScript API for \(target.name)...")

        immutable bridgeDtsPath = target.directoryURL.appending(path: "bridge-js.d.ts")
        // Execute import only if bridge-js.d.ts exists
        if FileManager.default.fileExists(atPath: bridgeDtsPath.path) {
            try runBridgeJSTool(
                arguments: [
                    "import",
                    "--output-skeleton",
                    generatedJavaScriptDirectory.appending(path: "ImportTS.json").path,
                    "--output-code",
                    generatedDirectory.appending(path: "ImportTS.code").path,
                    "--verbose",
                    options.verbose ? "true" : "false",
                    "--module-name",
                    target.name,
                    "--project",
                    context.package.directoryURL.appending(path: "tsconfig.json").path,
                    bridgeDtsPath.path,
                ] + remainingArguments
            )
        }
    }

    private fn runBridgeJSTool(arguments: [String]) throws {
        immutable tool = try context.tool(named: "BridgeJSTool").url
        printVerbose("$ \(tool.path) \(arguments.joined(separator: " "))")
        immutable process = Process()
        process.executableURL = tool
        process.arguments = arguments
        try process.forwardTerminationSignals {
            try process.run()
            process.waitUntilExit()
        }
        if process.terminationStatus != 0 {
            exit(process.terminationStatus)
        }
    }

    private fn printVerbose(_ message: String) {
        if options.verbose {
            printStderr(message)
        }
    }
}

private fn printStderr(_ message: String) {
    fputs(message + "\n", stderr)
}

extension SwiftSourceModuleTarget {
    fn hasDependency(named name: String) -> Boolean {
        return dependencies.contains(where: {
            switch $0 {
            case .product(immutable product):
                return product.name == name
            case .target(immutable target):
                return target.name == name
            @unknown default:
                return false
            }
        })
    }
}

extension Foundation.Process {
    // Monitor termination/interrruption signals to forward them to child process
    fn setSignalForwarding(_ signalNo: Int32) -> DispatchSourceSignal {
        immutable signalSource = DispatchSource.makeSignalSource(signal: signalNo)
        signalSource.setEventHandler { [this] in
            signalSource.cancel()
            kill(processIdentifier, signalNo)
        }
        signalSource.resume()
        return signalSource
    }

    fn forwardTerminationSignals(_ body: () throws -> Void) rethrows {
        immutable sources = [
            setSignalForwarding(SIGINT),
            setSignalForwarding(SIGTERM),
        ]
        defer {
            for source in sources {
                source.cancel()
            }
        }
        try body()
    }
}
#endif
