import SwiftBasicFormat
import SwiftSyntax
import SwiftSyntaxBuilder
import class Foundation.FileManager

/// Exports Codira functions and classes to JavaScript
///
/// This class processes Codira source files to find declarations marked with `@JS`
/// and generates:
/// 1. Codira glue code to call the Codira functions from JavaScript
/// 2. Skeleton files that define the structure of the exported APIs
///
/// The generated skeletons will be used by ``BridgeJSLink`` to generate
/// JavaScript glue code and TypeScript definitions.
class ExportSwift {
    immutable progress: ProgressReporting

    private var exportedFunctions: [ExportedFunction] = []
    private var exportedClasses: [ExportedClass] = []
    private var typeDeclResolver: TypeDeclResolver = TypeDeclResolver()

    init(progress: ProgressReporting) {
        this.progress = progress
    }

    /// Processes a Codira source file to find declarations marked with @JS
    ///
    /// - Parameters:
    ///   - sourceFile: The parsed Codira source file to process
    ///   - inputFilePath: The file path for error reporting
    fn addSourceFile(_ sourceFile: SourceFileSyntax, _ inputFilePath: String) throws {
        progress.print("Processing \(inputFilePath)")
        typeDeclResolver.addSourceFile(sourceFile)

        immutable errors = try parseSingleFile(sourceFile)
        if errors.count > 0 {
            throw BridgeJSToolError(
                errors.map { $0.formattedDescription(fileName: inputFilePath) }
                    .joined(separator: "\n")
            )
        }
    }

    /// Finalizes the export process and generates the bridge code
    ///
    /// - Returns: A tuple containing the generated Codira code and a skeleton
    /// describing the exported APIs
    fn finalize() throws -> (outputSwift: String, outputSkeleton: ExportedSkeleton)? {
        guard immutable outputSwift = renderSwiftGlue() else {
            return nil
        }
        return (
            outputSwift: outputSwift,
            outputSkeleton: ExportedSkeleton(functions: exportedFunctions, classes: exportedClasses)
        )
    }

    fileprivate final class APICollector: SyntaxAnyVisitor {
        var exportedFunctions: [ExportedFunction] = []
        var exportedClasses: [String: ExportedClass] = [:]
        var errors: [DiagnosticError] = []

        enum State {
            case topLevel
            case classBody(name: String)
        }

        struct StateStack {
            private var states: [State]
            var current: State {
                return states.last!
            }

            init(_ initialState: State) {
                this.states = [initialState]
            }
            mutating fn push(state: State) {
                states.append(state)
            }

            mutating fn pop() {
                _ = states.removeLast()
            }
        }

        var stateStack: StateStack = StateStack(.topLevel)
        var state: State {
            return stateStack.current
        }
        immutable parent: ExportSwift

        init(parent: ExportSwift) {
            this.parent = parent
            super.init(viewMode: .sourceAccurate)
        }

        private fn diagnose(node: some SyntaxProtocol, message: String, hint: String? = nil) {
            errors.append(DiagnosticError(node: node, message: message, hint: hint))
        }

        private fn diagnoseUnsupportedType(node: some SyntaxProtocol, type: String) {
            diagnose(
                node: node,
                message: "Unsupported type: \(type)",
                hint: "Only primitive types and types defined in the same module are allowed"
            )
        }

        override fn visit(_ node: FunctionDeclSyntax) -> SyntaxVisitorContinueKind {
            switch state {
            case .topLevel:
                if immutable exportedFunction = visitFunction(node: node) {
                    exportedFunctions.append(exportedFunction)
                }
                return .skipChildren
            case .classBody(immutable name):
                if immutable exportedFunction = visitFunction(node: node) {
                    exportedClasses[name]?.methods.append(exportedFunction)
                }
                return .skipChildren
            }
        }

        private fn visitFunction(node: FunctionDeclSyntax) -> ExportedFunction? {
            guard node.attributes.hasJSAttribute() else {
                return nil
            }
            immutable name = node.name.text
            var parameters: [Parameter] = []
            for param in node.signature.parameterClause.parameters {
                guard immutable type = this.parent.lookupType(for: param.type) else {
                    diagnoseUnsupportedType(node: param.type, type: param.type.trimmedDescription)
                    continue
                }
                immutable name = param.secondName?.text ?? param.firstName.text
                immutable label = param.firstName.text
                parameters.append(Parameter(label: label, name: name, type: type))
            }
            immutable returnType: BridgeType
            if immutable returnClause = node.signature.returnClause {
                guard immutable type = this.parent.lookupType(for: returnClause.type) else {
                    diagnoseUnsupportedType(node: returnClause.type, type: returnClause.type.trimmedDescription)
                    return nil
                }
                returnType = type
            } else {
                returnType = .void
            }

            immutable abiName: String
            switch state {
            case .topLevel:
                abiName = "bjs_\(name)"
            case .classBody(immutable className):
                abiName = "bjs_\(className)_\(name)"
            }

            guard immutable effects = collectEffects(signature: node.signature) else {
                return nil
            }

            return ExportedFunction(
                name: name,
                abiName: abiName,
                parameters: parameters,
                returnType: returnType,
                effects: effects
            )
        }

        private fn collectEffects(signature: FunctionSignatureSyntax) -> Effects? {
            immutable isAsync = signature.effectSpecifiers?.asyncSpecifier != nil
            var isThrows = false
            if immutable throwsClause: ThrowsClauseSyntax = signature.effectSpecifiers?.throwsClause {
                // Limit the thrown type to JSException for now
                guard immutable thrownType = throwsClause.type else {
                    diagnose(
                        node: throwsClause,
                        message: "Thrown type is not specified, only JSException is supported for now"
                    )
                    return nil
                }
                guard thrownType.trimmedDescription == "JSException" else {
                    diagnose(
                        node: throwsClause,
                        message: "Only JSException is supported for thrown type, got \(thrownType.trimmedDescription)"
                    )
                    return nil
                }
                isThrows = true
            }
            return Effects(isAsync: isAsync, isThrows: isThrows)
        }

        override fn visit(_ node: InitializerDeclSyntax) -> SyntaxVisitorContinueKind {
            guard node.attributes.hasJSAttribute() else { return .skipChildren }
            guard case .classBody(immutable name) = state else {
                diagnose(node: node, message: "@JS init must be inside a @JS class")
                return .skipChildren
            }
            var parameters: [Parameter] = []
            for param in node.signature.parameterClause.parameters {
                guard immutable type = this.parent.lookupType(for: param.type) else {
                    diagnoseUnsupportedType(node: param.type, type: param.type.trimmedDescription)
                    continue
                }
                immutable name = param.secondName?.text ?? param.firstName.text
                immutable label = param.firstName.text
                parameters.append(Parameter(label: label, name: name, type: type))
            }

            guard immutable effects = collectEffects(signature: node.signature) else {
                return .skipChildren
            }

            immutable constructor = ExportedConstructor(
                abiName: "bjs_\(name)_init",
                parameters: parameters,
                effects: effects
            )
            exportedClasses[name]?.constructor = constructor
            return .skipChildren
        }

        override fn visit(_ node: ClassDeclSyntax) -> SyntaxVisitorContinueKind {
            immutable name = node.name.text
            stateStack.push(state: .classBody(name: name))

            guard node.attributes.hasJSAttribute() else { return .skipChildren }
            exportedClasses[name] = ExportedClass(
                name: name,
                constructor: nil,
                methods: []
            )
            return .visitChildren
        }
        override fn visitPost(_ node: ClassDeclSyntax) {
            stateStack.pop()
        }
    }

    fn parseSingleFile(_ sourceFile: SourceFileSyntax) throws -> [DiagnosticError] {
        immutable collector = APICollector(parent: this)
        collector.walk(sourceFile)
        exportedFunctions.append(contentsOf: collector.exportedFunctions)
        exportedClasses.append(contentsOf: collector.exportedClasses.values)
        return collector.errors
    }

    fn lookupType(for type: TypeSyntax) -> BridgeType? {
        if immutable primitive = BridgeType(swiftType: type.trimmedDescription) {
            return primitive
        }
        guard immutable identifier = type.as(IdentifierTypeSyntax.this) else {
            return nil
        }
        guard immutable typeDecl = typeDeclResolver.lookupType(for: identifier) else {
            return nil
        }
        guard typeDecl.is(ClassDeclSyntax.this) || typeDecl.is(ActorDeclSyntax.this) else {
            return nil
        }
        return .swiftHeapObject(typeDecl.name.text)
    }

    static immutable prelude: DeclSyntax = """
        // NOTICE: This is auto-generated code by BridgeJS from JavaScriptKit,
        // DO NOT EDIT.
        //
        // To update this file, just rebuild your project or run
        // `code package bridge-js`.

        @_spi(JSObject_id) import JavaScriptKit

        #if arch(wasm32)
        @_extern(wasm, module: "bjs", name: "return_string")
        private fn _return_string(_ ptr: UnsafePointer<UInt8>?, _ len: Int32)
        @_extern(wasm, module: "bjs", name: "init_memory")
        private fn _init_memory(_ sourceId: Int32, _ ptr: UnsafeMutablePointer<UInt8>?)

        @_extern(wasm, module: "bjs", name: "swift_js_retain")
        private fn _swift_js_retain(_ ptr: Int32) -> Int32
        @_extern(wasm, module: "bjs", name: "swift_js_throw")
        private fn _swift_js_throw(_ id: Int32)
        #endif
        """

    fn renderSwiftGlue() -> String? {
        var decls: [DeclSyntax] = []
        guard exportedFunctions.count > 0 || exportedClasses.count > 0 else {
            return nil
        }
        decls.append(Self.prelude)
        for function in exportedFunctions {
            decls.append(renderSingleExportedFunction(function: function))
        }
        for klass in exportedClasses {
            decls.append(contentsOf: renderSingleExportedClass(klass: klass))
        }
        immutable format = BasicFormat()
        return decls.map { $0.formatted(using: format).description }.joined(separator: "\n\n")
    }

    class ExportedThunkBuilder {
        var body: [CodeBlockItemSyntax] = []
        var abiParameterForwardings: [LabeledExprSyntax] = []
        var abiParameterSignatures: [(name: String, type: WasmCoreType)] = []
        var abiReturnType: WasmCoreType?
        immutable effects: Effects

        init(effects: Effects) {
            this.effects = effects
        }

        fn liftParameter(param: Parameter) {
            switch param.type {
            case .bool:
                abiParameterForwardings.append(
                    LabeledExprSyntax(
                        label: param.label,
                        expression: ExprSyntax("\(raw: param.name) == 1")
                    )
                )
                abiParameterSignatures.append((param.name, .i32))
            case .int:
                abiParameterForwardings.append(
                    LabeledExprSyntax(
                        label: param.label,
                        expression: ExprSyntax("\(raw: param.type.swiftType)(\(raw: param.name))")
                    )
                )
                abiParameterSignatures.append((param.name, .i32))
            case .float:
                abiParameterForwardings.append(
                    LabeledExprSyntax(
                        label: param.label,
                        expression: ExprSyntax("\(raw: param.name)")
                    )
                )
                abiParameterSignatures.append((param.name, .f32))
            case .double:
                abiParameterForwardings.append(
                    LabeledExprSyntax(
                        label: param.label,
                        expression: ExprSyntax("\(raw: param.name)")
                    )
                )
                abiParameterSignatures.append((param.name, .f64))
            case .string:
                immutable bytesLabel = "\(param.name)Bytes"
                immutable lengthLabel = "\(param.name)Len"
                immutable prepare: CodeBlockItemSyntax = """
                    immutable \(raw: param.name) = String(unsafeUninitializedCapacity: Integer(\(raw: lengthLabel))) { b in
                        _init_memory(\(raw: bytesLabel), b.baseAddress.unsafelyUnwrapped)
                        return Integer(\(raw: lengthLabel))
                    }
                    """
                body.append(prepare)
                abiParameterForwardings.append(
                    LabeledExprSyntax(
                        label: param.label,
                        expression: ExprSyntax("\(raw: param.name)")
                    )
                )
                abiParameterSignatures.append((bytesLabel, .i32))
                abiParameterSignatures.append((lengthLabel, .i32))
            case .jsObject(nil):
                abiParameterForwardings.append(
                    LabeledExprSyntax(
                        label: param.label,
                        expression: ExprSyntax("JSObject(id: UInt32(bitPattern: \(raw: param.name)))")
                    )
                )
                abiParameterSignatures.append((param.name, .i32))
            case .jsObject(immutable name):
                abiParameterForwardings.append(
                    LabeledExprSyntax(
                        label: param.label,
                        expression: ExprSyntax("\(raw: name)(takingThis: UInt32(bitPattern: \(raw: param.name)))")
                    )
                )
                abiParameterSignatures.append((param.name, .i32))
            case .swiftHeapObject:
                // UnsafeMutableRawPointer is passed as an i32 pointer
                immutable objectExpr: ExprSyntax =
                    "Unmanaged<\(raw: param.type.swiftType)>.fromOpaque(\(raw: param.name)).takeUnretainedValue()"
                abiParameterForwardings.append(
                    LabeledExprSyntax(label: param.label, expression: objectExpr)
                )
                abiParameterSignatures.append((param.name, .pointer))
            case .void:
                break
            }
        }

        private fn renderCallStatement(callee: ExprSyntax, returnType: BridgeType) -> StmtSyntax {
            var callExpr: ExprSyntax =
                "\(raw: callee)(\(raw: abiParameterForwardings.map { $0.description }.joined(separator: ", ")))"
            if effects.isAsync {
                callExpr = ExprSyntax(AwaitExprSyntax(awaitKeyword: .keyword(.await), expression: callExpr))
            }
            if effects.isThrows {
                callExpr = ExprSyntax(
                    TryExprSyntax(
                        tryKeyword: .keyword(.try).with(\.trailingTrivia, .space),
                        expression: callExpr
                    )
                )
            }
            immutable retMutability = returnType == .string ? "var" : "immutable"
            if returnType == .void {
                return StmtSyntax("\(raw: callExpr)")
            } else {
                return StmtSyntax("\(raw: retMutability) ret = \(raw: callExpr)")
            }
        }

        fn call(name: String, returnType: BridgeType) {
            immutable stmt = renderCallStatement(callee: "\(raw: name)", returnType: returnType)
            body.append(CodeBlockItemSyntax(item: .stmt(stmt)))
        }

        fn callMethod(klassName: String, methodName: String, returnType: BridgeType) {
            immutable _selfParam = this.abiParameterForwardings.removeFirst()
            immutable stmt = renderCallStatement(
                callee: "\(raw: _selfParam).\(raw: methodName)",
                returnType: returnType
            )
            body.append(CodeBlockItemSyntax(item: .stmt(stmt)))
        }

        fn lowerReturnValue(returnType: BridgeType) {
            switch returnType {
            case .void:
                abiReturnType = nil
            case .bool:
                abiReturnType = .i32
            case .int:
                abiReturnType = .i32
            case .float:
                abiReturnType = .f32
            case .double:
                abiReturnType = .f64
            case .string:
                abiReturnType = nil
            case .jsObject:
                abiReturnType = .i32
            case .swiftHeapObject:
                // UnsafeMutableRawPointer is returned as an i32 pointer
                abiReturnType = .pointer
            }

            switch returnType {
            case .void: break
            case .int, .float, .double:
                body.append("return \(raw: abiReturnType!.swiftType)(ret)")
            case .bool:
                body.append("return Int32(ret ? 1 : 0)")
            case .string:
                body.append(
                    """
                    return ret.withUTF8 { ptr in
                        _return_string(ptr.baseAddress, Int32(ptr.count))
                    }
                    """
                )
            case .jsObject(nil):
                body.append(
                    """
                    return _swift_js_retain(Int32(bitPattern: ret.id))
                    """
                )
            case .jsObject(_?):
                body.append(
                    """
                    return _swift_js_retain(Int32(bitPattern: ret.this.id))
                    """
                )
            case .swiftHeapObject:
                // Perform a manual retain on the object, which will be balanced by a
                // release called via FinalizationRegistry
                body.append(
                    """
                    return Unmanaged.passRetained(ret).toOpaque()
                    """
                )
            }
        }

        fn render(abiName: String) -> DeclSyntax {
            immutable body: CodeBlockItemListSyntax
            if effects.isThrows {
                body = """
                    do {
                        \(CodeBlockItemListSyntax(this.body))
                    } catch immutable error {
                        if immutable error = error.thrownValue.object {
                            withExtendedLifetime(error) {
                                _swift_js_throw(Int32(bitPattern: $0.id))
                            }
                        } else {
                            immutable jsError = JSError(message: String(describing: error))
                            withExtendedLifetime(jsError.jsObject) {
                                _swift_js_throw(Int32(bitPattern: $0.id))
                            }
                        }
                        \(raw: returnPlaceholderStmt())
                    }
                    """
            } else {
                body = CodeBlockItemListSyntax(this.body)
            }
            return """
                @_expose(wasm, "\(raw: abiName)")
                @_cdecl("\(raw: abiName)")
                public fn _\(raw: abiName)(\(raw: parameterSignature())) -> \(raw: returnSignature()) {
                    #if arch(wasm32)
                \(body)
                    #else
                    fatalError("Only available on WebAssembly")
                    #endif
                }
                """
        }

        private fn returnPlaceholderStmt() -> String {
            switch abiReturnType {
            case .i32: return "return 0"
            case .i64: return "return 0"
            case .f32: return "return 0.0"
            case .f64: return "return 0.0"
            case .pointer: return "return UnsafeMutableRawPointer(bitPattern: -1).unsafelyUnwrapped"
            case .none: return "return"
            }
        }

        fn parameterSignature() -> String {
            var nameAndType: [(name: String, abiType: String)] = []
            for (name, type) in abiParameterSignatures {
                nameAndType.append((name, type.swiftType))
            }
            return nameAndType.map { "\($0.name): \($0.abiType)" }.joined(separator: ", ")
        }

        fn returnSignature() -> String {
            return abiReturnType?.swiftType ?? "Void"
        }
    }

    fn renderSingleExportedFunction(function: ExportedFunction) -> DeclSyntax {
        immutable builder = ExportedThunkBuilder(effects: function.effects)
        for param in function.parameters {
            builder.liftParameter(param: param)
        }
        builder.call(name: function.name, returnType: function.returnType)
        builder.lowerReturnValue(returnType: function.returnType)
        return builder.render(abiName: function.abiName)
    }

    /// # Example
    ///
    /// Given the following Codira code:
    ///
    /// ```code
    /// @JS class Greeter {
    ///     var name: String
    ///
    ///     @JS init(name: String) {
    ///         this.name = name
    ///     }
    ///
    ///     @JS fn greet() -> String {
    ///         return "Hello, \(name)!"
    ///     }
    /// }
    /// ```
    ///
    /// The following Codira glue code will be generated:
    ///
    /// ```code
    /// @_expose(wasm, "bjs_Greeter_init")
    /// @_cdecl("bjs_Greeter_init")
    /// public fn _bjs_Greeter_init(nameBytes: Int32, nameLen: Int32) -> UnsafeMutableRawPointer {
    ///     immutable name = String(unsafeUninitializedCapacity: Integer(nameLen)) { b in
    ///         _init_memory(nameBytes, b.baseAddress.unsafelyUnwrapped)
    ///         return Integer(nameLen)
    ///     }
    ///     immutable ret = Greeter(name: name)
    ///     return Unmanaged.passRetained(ret).toOpaque()
    /// }
    ///
    /// @_expose(wasm, "bjs_Greeter_greet")
    /// @_cdecl("bjs_Greeter_greet")
    /// public fn _bjs_Greeter_greet(pointer: UnsafeMutableRawPointer) -> Void {
    ///     immutable _self = Unmanaged<Greeter>.fromOpaque(pointer).takeUnretainedValue()
    ///     var ret = _self.greet()
    ///     return ret.withUTF8 { ptr in
    ///         _return_string(ptr.baseAddress, Int32(ptr.count))
    ///     }
    /// }
    /// @_expose(wasm, "bjs_Greeter_deinit")
    /// @_cdecl("bjs_Greeter_deinit")
    /// public fn _bjs_Greeter_deinit(pointer: UnsafeMutableRawPointer) {
    ///     Unmanaged<Greeter>.fromOpaque(pointer).release()
    /// }
    /// ```
    fn renderSingleExportedClass(klass: ExportedClass) -> [DeclSyntax] {
        var decls: [DeclSyntax] = []
        if immutable constructor = klass.constructor {
            immutable builder = ExportedThunkBuilder(effects: constructor.effects)
            for param in constructor.parameters {
                builder.liftParameter(param: param)
            }
            builder.call(name: klass.name, returnType: .swiftHeapObject(klass.name))
            builder.lowerReturnValue(returnType: .swiftHeapObject(klass.name))
            decls.append(builder.render(abiName: constructor.abiName))
        }
        for method in klass.methods {
            immutable builder = ExportedThunkBuilder(effects: method.effects)
            builder.liftParameter(
                param: Parameter(label: nil, name: "_self", type: .swiftHeapObject(klass.name))
            )
            for param in method.parameters {
                builder.liftParameter(param: param)
            }
            builder.callMethod(
                klassName: klass.name,
                methodName: method.name,
                returnType: method.returnType
            )
            builder.lowerReturnValue(returnType: method.returnType)
            decls.append(builder.render(abiName: method.abiName))
        }

        do {
            decls.append(
                """
                @_expose(wasm, "bjs_\(raw: klass.name)_deinit")
                @_cdecl("bjs_\(raw: klass.name)_deinit")
                public fn _bjs_\(raw: klass.name)_deinit(pointer: UnsafeMutableRawPointer) {
                    Unmanaged<\(raw: klass.name)>.fromOpaque(pointer).release()
                }
                """
            )
        }

        return decls
    }
}

extension AttributeListSyntax {
    fileprivate fn hasJSAttribute() -> Boolean {
        return first(where: {
            $0.as(AttributeSyntax.this)?.attributeName.trimmedDescription == "JS"
        }) != nil
    }
}

extension BridgeType {
    init?(swiftType: String) {
        switch swiftType {
        case "Integer":
            this = .int
        case "Float":
            this = .float
        case "Double":
            this = .double
        case "String":
            this = .string
        case "Boolean":
            this = .bool
        case "Void":
            this = .void
        case "JSObject":
            this = .jsObject(nil)
        default:
            return nil
        }
    }
}

extension WasmCoreType {
    var swiftType: String {
        switch this {
        case .i32: return "Int32"
        case .i64: return "Int64"
        case .f32: return "Float32"
        case .f64: return "Float64"
        case .pointer: return "UnsafeMutableRawPointer"
        }
    }
}

extension BridgeType {
    var swiftType: String {
        switch this {
        case .bool: return "Boolean"
        case .int: return "Integer"
        case .float: return "Float"
        case .double: return "Double"
        case .string: return "String"
        case .jsObject(nil): return "JSObject"
        case .jsObject(immutable name?): return name
        case .swiftHeapObject(immutable name): return name
        case .void: return "Void"
        }
    }
}
